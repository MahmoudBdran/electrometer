define(['dart_sdk', 'packages/pdf/src/pdf/color.dart', 'packages/pdf/src/pdf/xref.dart', 'packages/pdf/src/pdf/rect.dart', 'packages/pdf/src/pdf/point.dart', 'packages/vector_math/vector_math_64.dart', 'packages/pdf/src/pdf/colors.dart', 'packages/xml/src/xml/utils/node_list.dart', 'packages/pdf/src/pdf/font_metrics.dart', 'packages/image/src/transform/copy_crop.dart', 'packages/pdf/src/svg/colors.dart', 'packages/barcode/src/barcode_operations.dart', 'packages/barcode/src/upce.dart', 'packages/pdf/src/pdf/ttf_parser.dart', 'packages/image/src/formats/jpeg_decoder.dart', 'packages/image/src/transform/copy_resize.dart', 'packages/image/src/image.dart', 'packages/image/src/draw/fill_rect.dart', 'packages/image/src/filter/gaussian_blur.dart', 'packages/image/src/draw/draw_line.dart', 'packages/pdf/src/pdf/page_format.dart', 'packages/pdf/src/pdf/arabic.dart'], (function load__packages__pdf__src__widgets__table_dart(dart_sdk, packages__pdf__src__pdf__color$46dart, packages__pdf__src__pdf__xref$46dart, packages__pdf__src__pdf__rect$46dart, packages__pdf__src__pdf__point$46dart, packages__vector_math__vector_math_64$46dart, packages__pdf__src__pdf__colors$46dart, packages__xml__src__xml__utils__node_list$46dart, packages__pdf__src__pdf__font_metrics$46dart, packages__image__src__transform__copy_crop$46dart, packages__pdf__src__svg__colors$46dart, packages__barcode__src__barcode_operations$46dart, packages__barcode__src__upce$46dart, packages__pdf__src__pdf__ttf_parser$46dart, packages__image__src__formats__jpeg_decoder$46dart, packages__image__src__transform__copy_resize$46dart, packages__image__src__image$46dart, packages__image__src__draw__fill_rect$46dart, packages__image__src__filter__gaussian_blur$46dart, packages__image__src__draw__draw_line$46dart, packages__pdf__src__pdf__page_format$46dart, packages__pdf__src__pdf__arabic$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const typed_data = dart_sdk.typed_data;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const color$ = packages__pdf__src__pdf__color$46dart.src__pdf__color;
  const graphics = packages__pdf__src__pdf__xref$46dart.src__pdf__graphics;
  const graphic_state = packages__pdf__src__pdf__xref$46dart.src__pdf__graphic_state;
  const font = packages__pdf__src__pdf__xref$46dart.src__pdf__font;
  const image$ = packages__pdf__src__pdf__xref$46dart.src__pdf__image;
  const smask = packages__pdf__src__pdf__xref$46dart.src__pdf__smask;
  const pattern = packages__pdf__src__pdf__xref$46dart.src__pdf__pattern;
  const shading = packages__pdf__src__pdf__xref$46dart.src__pdf__shading;
  const $function = packages__pdf__src__pdf__xref$46dart.src__pdf__function;
  const document = packages__pdf__src__pdf__xref$46dart.src__pdf__document;
  const annotation = packages__pdf__src__pdf__xref$46dart.src__pdf__annotation;
  const data_types = packages__pdf__src__pdf__xref$46dart.src__pdf__data_types;
  const border = packages__pdf__src__pdf__xref$46dart.src__pdf__border;
  const signature = packages__pdf__src__pdf__xref$46dart.src__pdf__signature;
  const outline = packages__pdf__src__pdf__xref$46dart.src__pdf__outline;
  const ttffont = packages__pdf__src__pdf__xref$46dart.src__pdf__ttffont;
  const exif = packages__pdf__src__pdf__xref$46dart.src__pdf__exif;
  const page = packages__pdf__src__pdf__xref$46dart.src__pdf__page;
  const info = packages__pdf__src__pdf__xref$46dart.src__pdf__info;
  const metadata$ = packages__pdf__src__pdf__xref$46dart.src__pdf__metadata;
  const rect$ = packages__pdf__src__pdf__rect$46dart.src__pdf__rect;
  const point$ = packages__pdf__src__pdf__point$46dart.src__pdf__point;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const colors = packages__pdf__src__pdf__colors$46dart.src__pdf__colors;
  const text$ = packages__xml__src__xml__utils__node_list$46dart.src__xml__nodes__text;
  const cdata = packages__xml__src__xml__utils__node_list$46dart.src__xml__nodes__cdata;
  const node = packages__xml__src__xml__utils__node_list$46dart.src__xml__nodes__node;
  const element$ = packages__xml__src__xml__utils__node_list$46dart.src__xml__nodes__element;
  const descendants = packages__xml__src__xml__utils__node_list$46dart.src__xml__navigation__descendants;
  const document$ = packages__xml__src__xml__utils__node_list$46dart.src__xml__nodes__document;
  const font_metrics = packages__pdf__src__pdf__font_metrics$46dart.src__pdf__font_metrics;
  const formats = packages__image__src__transform__copy_crop$46dart.src__formats__formats;
  const colors$ = packages__pdf__src__svg__colors$46dart.src__svg__colors;
  const barcode_operations = packages__barcode__src__barcode_operations$46dart.src__barcode_operations;
  const barcode = packages__barcode__src__upce$46dart.src__barcode;
  const ttf_parser = packages__pdf__src__pdf__ttf_parser$46dart.src__pdf__ttf_parser;
  const jpeg_decoder = packages__image__src__formats__jpeg_decoder$46dart.src__formats__jpeg_decoder;
  const copy_resize = packages__image__src__transform__copy_resize$46dart.src__transform__copy_resize;
  const image = packages__image__src__image$46dart.src__image;
  const fill_rect = packages__image__src__draw__fill_rect$46dart.src__draw__fill_rect;
  const gaussian_blur = packages__image__src__filter__gaussian_blur$46dart.src__filter__gaussian_blur;
  const draw_circle = packages__image__src__draw__draw_line$46dart.src__draw__draw_circle;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  const arabic = packages__pdf__src__pdf__arabic$46dart.src__pdf__arabic;
  var table = Object.create(dart.library);
  var progress = Object.create(dart.library);
  var use = Object.create(dart.library);
  var text$0 = Object.create(dart.library);
  var symbol = Object.create(dart.library);
  var path = Object.create(dart.library);
  var image$0 = Object.create(dart.library);
  var transform$ = Object.create(dart.library);
  var group = Object.create(dart.library);
  var clip_path = Object.create(dart.library);
  var parser$ = Object.create(dart.library);
  var mask_path = Object.create(dart.library);
  var brush$ = Object.create(dart.library);
  var operation = Object.create(dart.library);
  var gradient$ = Object.create(dart.library);
  var color$0 = Object.create(dart.library);
  var painter$ = Object.create(dart.library);
  var svg$ = Object.create(dart.library);
  var placeholders = Object.create(dart.library);
  var partitions = Object.create(dart.library);
  var image$1 = Object.create(dart.library);
  var grid_view = Object.create(dart.library);
  var grid_paper = Object.create(dart.library);
  var forms = Object.create(dart.library);
  var content = Object.create(dart.library);
  var clip = Object.create(dart.library);
  var pie_chart = Object.create(dart.library);
  var wrap$ = Object.create(dart.library);
  var legend = Object.create(dart.library);
  var grid_radial = Object.create(dart.library);
  var line_chart = Object.create(dart.library);
  var grid_axis = Object.create(dart.library);
  var grid_cartesian = Object.create(dart.library);
  var stack = Object.create(dart.library);
  var chart = Object.create(dart.library);
  var bar_chart = Object.create(dart.library);
  var barcode$ = Object.create(dart.library);
  var shape = Object.create(dart.library);
  var container$ = Object.create(dart.library);
  var icon$ = Object.create(dart.library);
  var theme$ = Object.create(dart.library);
  var font$ = Object.create(dart.library);
  var image_provider = Object.create(dart.library);
  var decoration$ = Object.create(dart.library);
  var text_style = Object.create(dart.library);
  var flex$ = Object.create(dart.library);
  var multi_page = Object.create(dart.library);
  var text$1 = Object.create(dart.library);
  var page_theme = Object.create(dart.library);
  var page$ = Object.create(dart.library);
  var document$0 = Object.create(dart.library);
  var widget$ = Object.create(dart.library);
  var border_radius = Object.create(dart.library);
  var box_border = Object.create(dart.library);
  var basic = Object.create(dart.library);
  var geometry = Object.create(dart.library);
  var annotations = Object.create(dart.library);
  var widgets = Object.create(dart.library);
  var $length = dartx.length;
  var $sublist = dartx.sublist;
  var $runtimeType = dartx.runtimeType;
  var $toDouble = dartx.toDouble;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $modulo = dartx['%'];
  var $clear = dartx.clear;
  var $_set = dartx._set;
  var $isEmpty = dartx.isEmpty;
  var $reduce = dartx.reduce;
  var $clamp = dartx.clamp;
  var $substring = dartx.substring;
  var $map = dartx.map;
  var $join = dartx.join;
  var $trim = dartx.trim;
  var $whereType = dartx.whereType;
  var $where = dartx.where;
  var $toInt = dartx.toInt;
  var $startsWith = dartx.startsWith;
  var $indexOf = dartx.indexOf;
  var $replaceAll = dartx.replaceAll;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $toList = dartx.toList;
  var $addAll = dartx.addAll;
  var $lastIndexOf = dartx.lastIndexOf;
  var $firstWhere = dartx.firstWhere;
  var $isNotEmpty = dartx.isNotEmpty;
  var $split = dartx.split;
  var $first = dartx.first;
  var $any = dartx.any;
  var $containsKey = dartx.containsKey;
  var $toLowerCase = dartx.toLowerCase;
  var $toUpperCase = dartx.toUpperCase;
  var $isInfinite = dartx.isInfinite;
  var $ceil = dartx.ceil;
  var $floor = dartx.floor;
  var $hashCode = dartx.hashCode;
  var $abs = dartx.abs;
  var $last = dartx.last;
  var $isFinite = dartx.isFinite;
  var $round = dartx.round;
  var $_equals = dartx._equals;
  var $insert = dartx.insert;
  var $removeAt = dartx.removeAt;
  var $truncate = dartx.truncate;
  var $expand = dartx.expand;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    TableCellVerticalAlignmentL: () => (T$.TableCellVerticalAlignmentL = dart.constFn(dart.legacy(table.TableCellVerticalAlignment)))(),
    TableWidthL: () => (T$.TableWidthL = dart.constFn(dart.legacy(table.TableWidth)))(),
    TableRowL: () => (T$.TableRowL = dart.constFn(dart.legacy(table.TableRow)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    JSArrayOfdoubleN: () => (T$.JSArrayOfdoubleN = dart.constFn(_interceptors.JSArray$(T$.doubleN())))(),
    JSArrayOfdouble: () => (T$.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    AlignmentL: () => (T$.AlignmentL = dart.constFn(dart.legacy(geometry.Alignment)))(),
    JSArrayOfTableRow: () => (T$.JSArrayOfTableRow = dart.constFn(_interceptors.JSArray$(table.TableRow)))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(widget$.Widget)))(),
    doubleNAnddoubleNTodouble: () => (T$.doubleNAnddoubleNTodouble = dart.constFn(dart.fnType(core.double, [T$.doubleN(), T$.doubleN()])))(),
    JSArrayOfInherited: () => (T$.JSArrayOfInherited = dart.constFn(_interceptors.JSArray$(widget$.Inherited)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    XmlNodeTobool: () => (T$.XmlNodeTobool = dart.constFn(dart.fnType(core.bool, [node.XmlNode])))(),
    XmlNodeToString: () => (T$.XmlNodeToString = dart.constFn(dart.fnType(core.String, [node.XmlNode])))(),
    XmlElementToSvgText: () => (T$.XmlElementToSvgText = dart.constFn(dart.fnType(text$0.SvgText, [element$.XmlElement])))(),
    SvgOperationN: () => (T$.SvgOperationN = dart.constFn(dart.nullable(operation.SvgOperation)))(),
    XmlElementToSvgOperationN: () => (T$.XmlElementToSvgOperationN = dart.constFn(dart.fnType(T$.SvgOperationN(), [element$.XmlElement])))(),
    XmlElementTobool: () => (T$.XmlElementTobool = dart.constFn(dart.fnType(core.bool, [element$.XmlElement])))(),
    ListOfdouble: () => (T$.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    RegExpMatchToSvgNumeric: () => (T$.RegExpMatchToSvgNumeric = dart.constFn(dart.fnType(parser$.SvgNumeric, [core.RegExpMatch])))(),
    RegExpMatchTodouble: () => (T$.RegExpMatchTodouble = dart.constFn(dart.fnType(core.double, [core.RegExpMatch])))(),
    RegExpMatchToint: () => (T$.RegExpMatchToint = dart.constFn(dart.fnType(core.int, [core.RegExpMatch])))(),
    SvgUnitL: () => (T$.SvgUnitL = dart.constFn(dart.legacy(parser$.SvgUnit)))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    SvgTextAnchorL: () => (T$.SvgTextAnchorL = dart.constFn(dart.legacy(brush$.SvgTextAnchor)))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    PdfBlendModeL: () => (T$.PdfBlendModeL = dart.constFn(dart.legacy(graphic_state.PdfBlendMode)))(),
    PdfLineCapL: () => (T$.PdfLineCapL = dart.constFn(dart.legacy(graphics.PdfLineCap)))(),
    PdfLineJoinL: () => (T$.PdfLineJoinL = dart.constFn(dart.legacy(graphics.PdfLineJoin)))(),
    GradientUnitsL: () => (T$.GradientUnitsL = dart.constFn(dart.legacy(gradient$.GradientUnits)))(),
    doubleTobool: () => (T$.doubleTobool = dart.constFn(dart.fnType(core.bool, [core.double])))(),
    doubleToPdfColor: () => (T$.doubleToPdfColor = dart.constFn(dart.fnType(color$.PdfColor, [core.double])))(),
    PdfColorN: () => (T$.PdfColorN = dart.constFn(dart.nullable(color$.PdfColor)))(),
    JSArrayOfPdfColorN: () => (T$.JSArrayOfPdfColorN = dart.constFn(_interceptors.JSArray$(T$.PdfColorN())))(),
    IdentityMapOfString$Font: () => (T$.IdentityMapOfString$Font = dart.constFn(_js_helper.IdentityMap$(core.String, font$.Font)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    WidgetContextN: () => (T$.WidgetContextN = dart.constFn(dart.nullable(multi_page.WidgetContext)))(),
    ListOfWidgetContextN: () => (T$.ListOfWidgetContextN = dart.constFn(core.List$(T$.WidgetContextN())))(),
    PartitionTobool: () => (T$.PartitionTobool = dart.constFn(dart.fnType(core.bool, [partitions.Partition])))(),
    ListOfdoubleN: () => (T$.ListOfdoubleN = dart.constFn(core.List$(T$.doubleN())))(),
    WidgetL: () => (T$.WidgetL = dart.constFn(dart.legacy(widget$.Widget)))(),
    VoidTodouble: () => (T$.VoidTodouble = dart.constFn(dart.fnType(core.double, [])))(),
    doubleTodynamic: () => (T$.doubleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.double])))(),
    LinkedHashSetOfPdfAnnotFlags: () => (T$.LinkedHashSetOfPdfAnnotFlags = dart.constFn(collection.LinkedHashSet$(annotation.PdfAnnotFlags)))(),
    LinkedHashSetOfPdfFieldFlags: () => (T$.LinkedHashSetOfPdfFieldFlags = dart.constFn(collection.LinkedHashSet$(annotation.PdfFieldFlags)))(),
    PdfAnnotFlagsL: () => (T$.PdfAnnotFlagsL = dart.constFn(dart.legacy(annotation.PdfAnnotFlags)))(),
    LinkedHashSetOfPdfSigFlags: () => (T$.LinkedHashSetOfPdfSigFlags = dart.constFn(collection.LinkedHashSet$(signature.PdfSigFlags)))(),
    SyncIterableOfWidget: () => (T$.SyncIterableOfWidget = dart.constFn(_js_helper.SyncIterable$(widget$.Widget)))(),
    ListOfWidget: () => (T$.ListOfWidget = dart.constFn(core.List$(widget$.Widget)))(),
    PieLegendPositionL: () => (T$.PieLegendPositionL = dart.constFn(dart.legacy(pie_chart.PieLegendPosition)))(),
    JSArrayOfInlineSpan: () => (T$.JSArrayOfInlineSpan = dart.constFn(_interceptors.JSArray$(text$1.InlineSpan)))(),
    JSArrayOfnum: () => (T$.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    WrapAlignmentL: () => (T$.WrapAlignmentL = dart.constFn(dart.legacy(wrap$.WrapAlignment)))(),
    WrapCrossAlignmentL: () => (T$.WrapCrossAlignmentL = dart.constFn(dart.legacy(wrap$.WrapCrossAlignment)))(),
    JSArrayOf_RunMetrics: () => (T$.JSArrayOf_RunMetrics = dart.constFn(_interceptors.JSArray$(wrap$._RunMetrics)))(),
    LinkedMapOfWidget$int: () => (T$.LinkedMapOfWidget$int = dart.constFn(_js_helper.LinkedMap$(widget$.Widget, core.int)))(),
    numToString: () => (T$.numToString = dart.constFn(dart.fnType(core.String, [core.num])))(),
    FixedAxisOfint: () => (T$.FixedAxisOfint = dart.constFn(grid_axis.FixedAxis$(core.int)))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    StackFitL: () => (T$.StackFitL = dart.constFn(dart.legacy(stack.StackFit)))(),
    OverflowL: () => (T$.OverflowL = dart.constFn(dart.legacy(stack.Overflow)))(),
    JSArrayOfBarcodeText: () => (T$.JSArrayOfBarcodeText = dart.constFn(_interceptors.JSArray$(barcode_operations.BarcodeText)))(),
    PdfPointToPdfPoint: () => (T$.PdfPointToPdfPoint = dart.constFn(dart.fnType(point$.PdfPoint, [point$.PdfPoint])))(),
    ContextToWidget: () => (T$.ContextToWidget = dart.constFn(dart.fnType(widget$.Widget, [widget$.Context])))(),
    ContextToDefaultTextStyle: () => (T$.ContextToDefaultTextStyle = dart.constFn(dart.fnType(theme$.DefaultTextStyle, [widget$.Context])))(),
    Type1FontsL: () => (T$.Type1FontsL = dart.constFn(dart.legacy(font$.Type1Fonts)))(),
    PdfFontTobool: () => (T$.PdfFontTobool = dart.constFn(dart.fnType(core.bool, [font.PdfFont])))(),
    VoidToPdfFont: () => (T$.VoidToPdfFont = dart.constFn(dart.fnType(font.PdfFont, [])))(),
    IdentityMapOfint$PdfImage: () => (T$.IdentityMapOfint$PdfImage = dart.constFn(_js_helper.IdentityMap$(core.int, image$.PdfImage)))(),
    DecorationPositionL: () => (T$.DecorationPositionL = dart.constFn(dart.legacy(decoration$.DecorationPosition)))(),
    TileModeL: () => (T$.TileModeL = dart.constFn(dart.legacy(decoration$.TileMode)))(),
    BoxShapeL: () => (T$.BoxShapeL = dart.constFn(dart.legacy(decoration$.BoxShape)))(),
    PaintPhaseL: () => (T$.PaintPhaseL = dart.constFn(dart.legacy(decoration$.PaintPhase)))(),
    FontWeightL: () => (T$.FontWeightL = dart.constFn(dart.legacy(text_style.FontWeight)))(),
    FontStyleL: () => (T$.FontStyleL = dart.constFn(dart.legacy(text_style.FontStyle)))(),
    TextDecorationStyleL: () => (T$.TextDecorationStyleL = dart.constFn(dart.legacy(text_style.TextDecorationStyle)))(),
    FlexFitL: () => (T$.FlexFitL = dart.constFn(dart.legacy(flex$.FlexFit)))(),
    AxisL: () => (T$.AxisL = dart.constFn(dart.legacy(flex$.Axis)))(),
    MainAxisSizeL: () => (T$.MainAxisSizeL = dart.constFn(dart.legacy(flex$.MainAxisSize)))(),
    MainAxisAlignmentL: () => (T$.MainAxisAlignmentL = dart.constFn(dart.legacy(flex$.MainAxisAlignment)))(),
    CrossAxisAlignmentL: () => (T$.CrossAxisAlignmentL = dart.constFn(dart.legacy(flex$.CrossAxisAlignment)))(),
    VerticalDirectionL: () => (T$.VerticalDirectionL = dart.constFn(dart.legacy(flex$.VerticalDirection)))(),
    WidgetAnddoubleNTodouble: () => (T$.WidgetAnddoubleNTodouble = dart.constFn(dart.fnType(core.double, [widget$.Widget, T$.doubleN()])))(),
    VoidToPdfPoint: () => (T$.VoidToPdfPoint = dart.constFn(dart.fnType(point$.PdfPoint, [])))(),
    PdfPointTodynamic: () => (T$.PdfPointTodynamic = dart.constFn(dart.fnType(dart.dynamic, [point$.PdfPoint])))(),
    JSArrayOf_MultiPageWidget: () => (T$.JSArrayOf_MultiPageWidget = dart.constFn(_interceptors.JSArray$(multi_page._MultiPageWidget)))(),
    JSArrayOf_MultiPageInstance: () => (T$.JSArrayOf_MultiPageInstance = dart.constFn(_interceptors.JSArray$(multi_page._MultiPageInstance)))(),
    ContextToSizedBox: () => (T$.ContextToSizedBox = dart.constFn(dart.fnType(basic.SizedBox, [widget$.Context])))(),
    TextAlignL: () => (T$.TextAlignL = dart.constFn(dart.legacy(text$1.TextAlign)))(),
    TextDirectionL: () => (T$.TextDirectionL = dart.constFn(dart.legacy(text$1.TextDirection)))(),
    TextOverflowL: () => (T$.TextOverflowL = dart.constFn(dart.legacy(text$1.TextOverflow)))(),
    TextStyleN: () => (T$.TextStyleN = dart.constFn(dart.nullable(text_style.TextStyle)))(),
    AnnotationBuilderN: () => (T$.AnnotationBuilderN = dart.constFn(dart.nullable(annotations.AnnotationBuilder)))(),
    InlineSpanAndTextStyleNAndAnnotationBuilderNTobool: () => (T$.InlineSpanAndTextStyleNAndAnnotationBuilderNTobool = dart.constFn(dart.fnType(core.bool, [text$1.InlineSpan, T$.TextStyleN(), T$.AnnotationBuilderN()])))(),
    _SpanAnd_SpanTo_Span: () => (T$._SpanAnd_SpanTo_Span = dart.constFn(dart.fnType(text$1._Span, [text$1._Span, text$1._Span])))(),
    JSArrayOf_Span: () => (T$.JSArrayOf_Span = dart.constFn(_interceptors.JSArray$(text$1._Span)))(),
    JSArrayOf_TextDecoration: () => (T$.JSArrayOf_TextDecoration = dart.constFn(_interceptors.JSArray$(text$1._TextDecoration)))(),
    JSArrayOf_Line: () => (T$.JSArrayOf_Line = dart.constFn(_interceptors.JSArray$(text$1._Line)))(),
    PageOrientationL: () => (T$.PageOrientationL = dart.constFn(dart.legacy(page$.PageOrientation)))(),
    JSArrayOfPage: () => (T$.JSArrayOfPage = dart.constFn(_interceptors.JSArray$(page$.Page)))(),
    LinkedMapOfType$Inherited: () => (T$.LinkedMapOfType$Inherited = dart.constFn(_js_helper.LinkedMap$(core.Type, widget$.Inherited)))(),
    HashMapOfType$Inherited: () => (T$.HashMapOfType$Inherited = dart.constFn(collection.HashMap$(core.Type, widget$.Inherited)))(),
    TAndTToT: () => (T$.TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    TAndTToT$1: () => (T$.TAndTToT$1 = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    BoxFitL: () => (T$.BoxFitL = dart.constFn(dart.legacy(basic.BoxFit)))(),
    PdfPointTodouble: () => (T$.PdfPointTodouble = dart.constFn(dart.fnType(core.double, [point$.PdfPoint])))(),
    ListOfPdfPoint: () => (T$.ListOfPdfPoint = dart.constFn(core.List$(point$.PdfPoint)))(),
    ListOfPdfPointToListOfPdfPoint: () => (T$.ListOfPdfPointToListOfPdfPoint = dart.constFn(dart.fnType(T$.ListOfPdfPoint(), [T$.ListOfPdfPoint()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [_name$]: "TableCellVerticalAlignment.bottom",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [_name$]: "TableCellVerticalAlignment.middle",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [_name$]: "TableCellVerticalAlignment.top",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [_name$]: "TableCellVerticalAlignment.full",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], T$.TableCellVerticalAlignmentL());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: table.TableWidth.prototype,
        [_name$]: "TableWidth.min",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: table.TableWidth.prototype,
        [_name$]: "TableWidth.max",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.constList([C[5] || CT.C5, C[6] || CT.C6], T$.TableWidthL());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [BorderStyle_phase]: 0,
        [BorderStyle_pattern]: null,
        [BorderStyle_paint]: false
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0,
        [PdfColor_green]: 0,
        [PdfColor_red]: 0,
        [PdfColor_alpha]: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[9] || CT.C9,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[10] || CT.C10
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [BorderStyle_phase]: 0,
        [BorderStyle_pattern]: null,
        [BorderStyle_paint]: true
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: decoration$.BoxShape.prototype,
        [_name$0]: "BoxShape.rectangle",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: decoration$.BoxShape.prototype,
        [_name$0]: "BoxShape.circle",
        index: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: geometry.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 0
      });
    },
    get C15() {
      return C[15] = dart.constList([], T$.TableRowL());
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: table.IntrinsicColumnWidth.prototype,
        [flex$0]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5,
        [EdgeInsets_right]: 5,
        [EdgeInsets_top]: 5,
        [EdgeInsets_left]: 5
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: -1
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[10] || CT.C10
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: table.TableBorder.prototype,
        [right$]: C[21] || CT.C21,
        [left$]: C[21] || CT.C21,
        [bottom$]: C[21] || CT.C21,
        [top$]: C[21] || CT.C21,
        [verticalInside$]: C[21] || CT.C21,
        [horizontalInside$]: C[21] || CT.C21
      });
    },
    get C22() {
      return C[22] = dart.constMap(T$.intL(), T$.AlignmentL(), []);
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: brush$.SvgTextAnchor.prototype,
        [_name$1]: "SvgTextAnchor.start",
        index: 0
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: brush$.SvgTextAnchor.prototype,
        [_name$1]: "SvgTextAnchor.middle",
        index: 1
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: brush$.SvgTextAnchor.prototype,
        [_name$1]: "SvgTextAnchor.end",
        index: 2
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: point$.PdfPoint.prototype,
        [PdfPoint_y]: 0,
        [PdfPoint_x]: 0
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: transform$.SvgTransform.prototype,
        [matrix$]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: clip_path.SvgClipPath.prototype,
        [painter$1]: null,
        [isEmpty$]: true,
        [children$2]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_name$2]: "SvgUnit.pixels",
        index: 0
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_name$2]: "SvgUnit.milimeters",
        index: 1
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_name$2]: "SvgUnit.centimeters",
        index: 2
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_name$2]: "SvgUnit.inch",
        index: 3
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_name$2]: "SvgUnit.em",
        index: 4
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_name$2]: "SvgUnit.percent",
        index: 5
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_name$2]: "SvgUnit.points",
        index: 6
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_name$2]: "SvgUnit.direct",
        index: 7
      });
    },
    get C37() {
      return C[37] = dart.constList([C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36], T$.SvgUnitL());
    },
    get C38() {
      return C[38] = dart.constMap(T$.StringL(), T$.SvgUnitL(), ["px", C[29] || CT.C29, "mm", C[30] || CT.C30, "cm", C[31] || CT.C31, "in", C[32] || CT.C32, "em", C[33] || CT.C33, "%", C[34] || CT.C34, "pt", C[35] || CT.C35, "", C[36] || CT.C36]);
    },
    get C39() {
      return C[39] = dart.constList([C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25], T$.SvgTextAnchorL());
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: parser$.SvgNumeric.prototype,
        [brush$1]: null,
        [unit$]: C[36] || CT.C36,
        [value$2]: 16
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name]: "PdfLineJoin.miter",
        index: 0
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name]: "PdfLineCap.butt",
        index: 0
      });
    },
    get C44() {
      return C[44] = dart.constList([], T$.doubleL());
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: parser$.SvgNumeric.prototype,
        [brush$1]: null,
        [unit$]: C[29] || CT.C29,
        [value$2]: 1
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: color$0.SvgColor.prototype,
        [SvgColor_inherit]: false,
        [SvgColor_opacity]: null,
        [SvgColor_color]: null
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: color$0.SvgColor.prototype,
        [SvgColor_inherit]: false,
        [SvgColor_opacity]: null,
        [SvgColor_color]: C[10] || CT.C10
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: brush$.SvgBrush.prototype,
        [mask$]: null,
        [blendMode$]: null,
        [textAnchor$]: C[23] || CT.C23,
        [fontWeight$]: "normal",
        [fontStyle$]: "normal",
        [fontFamily$]: "sans-serif",
        [fontSize$]: C[41] || CT.C41,
        [strokeMiterLimit$]: 4,
        [strokeLineJoin$]: C[42] || CT.C42,
        [strokeLineCap$]: C[43] || CT.C43,
        [strokeDashOffset$]: 0,
        [strokeDashArray$]: C[44] || CT.C44,
        [strokeWidth$0]: C[45] || CT.C45,
        [strokeOpacity$]: 1,
        [stroke$]: C[46] || CT.C46,
        [fillOpacity$]: 1,
        [fillEvenOdd$]: false,
        [fill$]: C[47] || CT.C47,
        [opacity$]: 1
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.normal",
        index: 0
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.multiply",
        index: 1
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.screen",
        index: 2
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.overlay",
        index: 3
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.darken",
        index: 4
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.lighten",
        index: 5
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.color",
        index: 14
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.hardLight",
        index: 8
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.softLight",
        index: 9
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.difference",
        index: 10
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.exclusion",
        index: 11
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.hue",
        index: 12
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.saturation",
        index: 13
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$3]: "PdfBlendMode.luminosity",
        index: 15
      });
    },
    get C48() {
      return C[48] = dart.constMap(T$.StringL(), T$.PdfBlendModeL(), ["normal", C[49] || CT.C49, "multiply", C[50] || CT.C50, "screen", C[51] || CT.C51, "overlay", C[52] || CT.C52, "darken", C[53] || CT.C53, "lighten", C[54] || CT.C54, "color-dodge", C[55] || CT.C55, "color-burn", C[55] || CT.C55, "hard-light", C[56] || CT.C56, "soft-light", C[57] || CT.C57, "difference", C[58] || CT.C58, "exclusion", C[59] || CT.C59, "hue", C[60] || CT.C60, "saturation", C[61] || CT.C61, "color", C[55] || CT.C55, "luminosity", C[62] || CT.C62]);
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name]: "PdfLineCap.round",
        index: 1
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name]: "PdfLineCap.square",
        index: 2
      });
    },
    get C63() {
      return C[63] = dart.constMap(T$.StringL(), T$.PdfLineCapL(), ["butt", C[43] || CT.C43, "round", C[64] || CT.C64, "square", C[65] || CT.C65]);
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name]: "PdfLineJoin.bevel",
        index: 2
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name]: "PdfLineJoin.round",
        index: 1
      });
    },
    get C66() {
      return C[66] = dart.constMap(T$.StringL(), T$.PdfLineJoinL(), ["miter ", C[42] || CT.C42, "bevel", C[67] || CT.C67, "round", C[68] || CT.C68]);
    },
    get C69() {
      return C[69] = dart.constMap(T$.StringL(), T$.SvgTextAnchorL(), ["start", C[23] || CT.C23, "middle", C[24] || CT.C24, "end", C[25] || CT.C25]);
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: gradient$.GradientUnits.prototype,
        [_name$4]: "GradientUnits.objectBoundingBox",
        index: 0
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: gradient$.GradientUnits.prototype,
        [_name$4]: "GradientUnits.userSpaceOnUse",
        index: 1
      });
    },
    get C72() {
      return C[72] = dart.constList([C[70] || CT.C70, C[71] || CT.C71], T$.GradientUnitsL());
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: color$0.SvgColor.prototype,
        [SvgColor_inherit]: true,
        [SvgColor_opacity]: null,
        [SvgColor_color]: null
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$5]: "BoxFit.contain",
        index: 1
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$5]: "BoxFit.cover",
        index: 2
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.39215686274509803,
        [PdfColor_green]: 0.35294117647058826,
        [PdfColor_red]: 0.27058823529411763,
        [PdfColor_alpha]: 1
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.21176470588235294,
        [PdfColor_green]: 0.2627450980392157,
        [PdfColor_red]: 0.9568627450980393,
        [PdfColor_alpha]: 1
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: text$1.TextAlign.prototype,
        [_name$6]: "TextAlign.left",
        index: 0
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: flex$.MainAxisSize.prototype,
        [_name$7]: "MainAxisSize.max",
        index: 1
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: flex$.Axis.prototype,
        [_name$7]: "Axis.vertical",
        index: 1
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C82() {
      return C[82] = dart.constList([], T$.WidgetL());
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: flex$.Axis.prototype,
        [_name$7]: "Axis.horizontal",
        index: 0
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.9529411764705882,
        [PdfColor_green]: 0.9098039215686274,
        [PdfColor_red]: 0.7647058823529411,
        [PdfColor_alpha]: 1
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[8] || CT.C8,
        [bottom$]: C[8] || CT.C8,
        [top$]: C[8] || CT.C8
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 28.34645669291339,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 56.69291338582678,
        [EdgeInsets_left]: 102.0472440944882
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.8705882352941177,
        [PdfColor_green]: 0.7843137254901961,
        [PdfColor_red]: 0.7843137254901961,
        [PdfColor_alpha]: 1
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.8117647058823529,
        [PdfColor_green]: 0.7333333333333333,
        [PdfColor_red]: 0.9647058823529412,
        [PdfColor_alpha]: 1
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[90] || CT.C90
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[89] || CT.C89,
        [bottom$]: C[8] || CT.C8,
        [top$]: C[8] || CT.C8
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 43.199999999999996,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 72,
        [EdgeInsets_left]: 90
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[77] || CT.C77
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[93] || CT.C93,
        [bottom$]: C[8] || CT.C8,
        [top$]: C[8] || CT.C8
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.9529411764705882,
        [PdfColor_green]: 0.5882352941176471,
        [PdfColor_red]: 0.12941176470588237,
        [PdfColor_alpha]: 1
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 1,
        [PdfColor_green]: 1,
        [PdfColor_red]: 1,
        [PdfColor_alpha]: 1
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 1,
        [EdgeInsets_right]: 1,
        [EdgeInsets_top]: 1,
        [EdgeInsets_left]: 1
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 1,
        [PdfColor_green]: 0.5411764705882353,
        [PdfColor_red]: 0.26666666666666666,
        [PdfColor_alpha]: 1
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: border_radius.Radius.prototype,
        [Radius_y]: 2,
        [Radius_x]: 2
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[99] || CT.C99,
        [BorderRadius_bottomLeft]: C[99] || CT.C99,
        [BorderRadius_topRight]: C[99] || CT.C99,
        [BorderRadius_topLeft]: C[99] || CT.C99
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 5,
        [EdgeInsets_left]: 20
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$8]: "PdfAnnotFlags.print",
        index: 2
      });
    },
    get C101() {
      return C[101] = dart.constSet(T$.PdfAnnotFlagsL(), [C[102] || CT.C102]);
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Tx"
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$9]: "PdfOutlineStyle.normal",
        index: 0
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 14.173228346456694,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 2.834645669291339,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[8] || CT.C8,
        [bottom$]: C[21] || CT.C21,
        [top$]: C[8] || CT.C8
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: decoration$.BoxDecoration.prototype,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_shape]: C[12] || CT.C12,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: C[108] || CT.C108,
        [BoxDecoration_color]: null
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 14.173228346456694,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 8.503937007874017,
        [EdgeInsets_left]: 0
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 0.2,
        [BorderSide_color]: C[10] || CT.C10
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[8] || CT.C8,
        [bottom$]: C[112] || CT.C112,
        [top$]: C[8] || CT.C8
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: decoration$.BoxDecoration.prototype,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_shape]: C[12] || CT.C12,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: C[111] || CT.C111,
        [BoxDecoration_color]: null
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 11.338582677165356,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 5.669291338582678,
        [EdgeInsets_left]: 0
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 2,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: text$1.TextAlign.prototype,
        [_name$6]: "TextAlign.justify",
        index: 3
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5.669291338582678,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 5.669291338582678,
        [EdgeInsets_top]: 4.251968503937008,
        [EdgeInsets_left]: 14.173228346456694
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: pie_chart.PieLegendPosition.prototype,
        [_name$10]: "PieLegendPosition.none",
        index: 0
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: pie_chart.PieLegendPosition.prototype,
        [_name$10]: "PieLegendPosition.auto",
        index: 1
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: pie_chart.PieLegendPosition.prototype,
        [_name$10]: "PieLegendPosition.inside",
        index: 2
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: pie_chart.PieLegendPosition.prototype,
        [_name$10]: "PieLegendPosition.outside",
        index: 3
      });
    },
    get C122() {
      return C[122] = dart.constList([C[118] || CT.C118, C[119] || CT.C119, C[120] || CT.C120, C[121] || CT.C121], T$.PieLegendPositionL());
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_name$11]: "WrapAlignment.start",
        index: 0
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_name$11]: "WrapAlignment.end",
        index: 1
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_name$11]: "WrapAlignment.center",
        index: 2
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_name$11]: "WrapAlignment.spaceBetween",
        index: 3
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_name$11]: "WrapAlignment.spaceAround",
        index: 4
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_name$11]: "WrapAlignment.spaceEvenly",
        index: 5
      });
    },
    get C129() {
      return C[129] = dart.constList([C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125, C[126] || CT.C126, C[127] || CT.C127, C[128] || CT.C128], T$.WrapAlignmentL());
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: wrap$.WrapCrossAlignment.prototype,
        [_name$11]: "WrapCrossAlignment.start",
        index: 0
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: wrap$.WrapCrossAlignment.prototype,
        [_name$11]: "WrapCrossAlignment.end",
        index: 1
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: wrap$.WrapCrossAlignment.prototype,
        [_name$11]: "WrapCrossAlignment.center",
        index: 2
      });
    },
    get C133() {
      return C[133] = dart.constList([C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132], T$.WrapCrossAlignmentL());
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: flex$.VerticalDirection.prototype,
        [_name$7]: "VerticalDirection.down",
        index: 1
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: 1
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 5,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: decoration$.BoxDecoration.prototype,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_shape]: C[12] || CT.C12,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: null,
        [BoxDecoration_color]: C[95] || CT.C95
      });
    },
    get C138() {
      return C[138] = dart.fn(grid_axis.GridAxis._defaultFormat, T$.numToString());
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: stack.StackFit.prototype,
        [_name$12]: "StackFit.loose",
        index: 0
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: stack.StackFit.prototype,
        [_name$12]: "StackFit.expand",
        index: 1
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: stack.StackFit.prototype,
        [_name$12]: "StackFit.passthrough",
        index: 2
      });
    },
    get C142() {
      return C[142] = dart.constList([C[139] || CT.C139, C[140] || CT.C140, C[141] || CT.C141], T$.StackFitL());
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: stack.Overflow.prototype,
        [_name$12]: "Overflow.visible",
        index: 0
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: stack.Overflow.prototype,
        [_name$12]: "Overflow.clip",
        index: 1
      });
    },
    get C145() {
      return C[145] = dart.constList([C[143] || CT.C143, C[144] || CT.C144], T$.OverflowL());
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: text$1.TextDirection.prototype,
        [_name$6]: "TextDirection.rtl",
        index: 1
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: text$1.TextDirection.prototype,
        [_name$6]: "TextDirection.ltr",
        index: 0
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_name$13]: "BarcodeTextAlign.left",
        index: 0
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_name$13]: "BarcodeTextAlign.center",
        index: 1
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_name$13]: "BarcodeTextAlign.right",
        index: 2
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: decoration$.DecorationPosition.prototype,
        [_name$0]: "DecorationPosition.background",
        index: 0
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: geometry.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 1 / 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 1 / 0
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.courier",
        index: 0
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.courierBold",
        index: 1
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.courierBoldOblique",
        index: 2
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.courierOblique",
        index: 3
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.helvetica",
        index: 4
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.helveticaBold",
        index: 5
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.helveticaBoldOblique",
        index: 6
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.helveticaOblique",
        index: 7
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.times",
        index: 8
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.timesBold",
        index: 9
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.timesBoldItalic",
        index: 10
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.timesItalic",
        index: 11
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.symbol",
        index: 12
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$14]: "Type1Fonts.zapfDingbats",
        index: 13
      });
    },
    get C167() {
      return C[167] = dart.constList([C[153] || CT.C153, C[154] || CT.C154, C[155] || CT.C155, C[156] || CT.C156, C[157] || CT.C157, C[158] || CT.C158, C[159] || CT.C159, C[160] || CT.C160, C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163, C[164] || CT.C164, C[165] || CT.C165, C[166] || CT.C166], T$.Type1FontsL());
    },
    get C168() {
      return C[168] = dart.constMap(T$.Type1FontsL(), T$.StringL(), [C[153] || CT.C153, "Courier", C[154] || CT.C154, "Courier-Bold", C[155] || CT.C155, "Courier-BoldOblique", C[156] || CT.C156, "Courier-Oblique", C[157] || CT.C157, "Helvetica", C[158] || CT.C158, "Helvetica-Bold", C[159] || CT.C159, "Helvetica-BoldOblique", C[160] || CT.C160, "Helvetica-Oblique", C[161] || CT.C161, "Times-Roman", C[162] || CT.C162, "Times-Bold", C[163] || CT.C163, "Times-BoldItalic", C[164] || CT.C164, "Times-Italic", C[165] || CT.C165, "Symbol", C[166] || CT.C166, "ZapfDingbats"]);
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: decoration$.DecorationPosition.prototype,
        [_name$0]: "DecorationPosition.foreground",
        index: 1
      });
    },
    get C170() {
      return C[170] = dart.constList([C[151] || CT.C151, C[169] || CT.C169], T$.DecorationPositionL());
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: decoration$.TileMode.prototype,
        [_name$0]: "TileMode.clamp",
        index: 0
      });
    },
    get C172() {
      return C[172] = dart.constList([C[171] || CT.C171], T$.TileModeL());
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: -1
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 1
      });
    },
    get C175() {
      return C[175] = dart.constList([C[13] || CT.C13, C[12] || CT.C12], T$.BoxShapeL());
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_name$0]: "PaintPhase.all",
        index: 0
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_name$0]: "PaintPhase.background",
        index: 1
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_name$0]: "PaintPhase.foreground",
        index: 2
      });
    },
    get C179() {
      return C[179] = dart.constList([C[176] || CT.C176, C[177] || CT.C177, C[178] || CT.C178], T$.PaintPhaseL());
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: text_style.FontWeight.prototype,
        [_name$15]: "FontWeight.normal",
        index: 0
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: text_style.FontWeight.prototype,
        [_name$15]: "FontWeight.bold",
        index: 1
      });
    },
    get C182() {
      return C[182] = dart.constList([C[180] || CT.C180, C[181] || CT.C181], T$.FontWeightL());
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: text_style.FontStyle.prototype,
        [_name$15]: "FontStyle.normal",
        index: 0
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: text_style.FontStyle.prototype,
        [_name$15]: "FontStyle.italic",
        index: 1
      });
    },
    get C185() {
      return C[185] = dart.constList([C[183] || CT.C183, C[184] || CT.C184], T$.FontStyleL());
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: text_style.TextDecorationStyle.prototype,
        [_name$15]: "TextDecorationStyle.solid",
        index: 0
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: text_style.TextDecorationStyle.prototype,
        [_name$15]: "TextDecorationStyle.double",
        index: 1
      });
    },
    get C188() {
      return C[188] = dart.constList([C[186] || CT.C186, C[187] || CT.C187], T$.TextDecorationStyleL());
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 0
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 1
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 2
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 4
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: flex$.FlexFit.prototype,
        [_name$7]: "FlexFit.tight",
        index: 0
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: flex$.FlexFit.prototype,
        [_name$7]: "FlexFit.loose",
        index: 1
      });
    },
    get C195() {
      return C[195] = dart.constList([C[193] || CT.C193, C[194] || CT.C194], T$.FlexFitL());
    },
    get C196() {
      return C[196] = dart.constList([C[83] || CT.C83, C[80] || CT.C80], T$.AxisL());
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: flex$.MainAxisSize.prototype,
        [_name$7]: "MainAxisSize.min",
        index: 0
      });
    },
    get C198() {
      return C[198] = dart.constList([C[197] || CT.C197, C[79] || CT.C79], T$.MainAxisSizeL());
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$7]: "MainAxisAlignment.start",
        index: 0
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$7]: "MainAxisAlignment.end",
        index: 1
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$7]: "MainAxisAlignment.center",
        index: 2
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$7]: "MainAxisAlignment.spaceBetween",
        index: 3
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$7]: "MainAxisAlignment.spaceAround",
        index: 4
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$7]: "MainAxisAlignment.spaceEvenly",
        index: 5
      });
    },
    get C205() {
      return C[205] = dart.constList([C[199] || CT.C199, C[200] || CT.C200, C[201] || CT.C201, C[202] || CT.C202, C[203] || CT.C203, C[204] || CT.C204], T$.MainAxisAlignmentL());
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_name$7]: "CrossAxisAlignment.start",
        index: 0
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_name$7]: "CrossAxisAlignment.end",
        index: 1
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_name$7]: "CrossAxisAlignment.center",
        index: 2
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_name$7]: "CrossAxisAlignment.stretch",
        index: 3
      });
    },
    get C210() {
      return C[210] = dart.constList([C[206] || CT.C206, C[207] || CT.C207, C[208] || CT.C208, C[209] || CT.C209], T$.CrossAxisAlignmentL());
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: flex$.VerticalDirection.prototype,
        [_name$7]: "VerticalDirection.up",
        index: 0
      });
    },
    get C212() {
      return C[212] = dart.constList([C[211] || CT.C211, C[134] || CT.C134], T$.VerticalDirectionL());
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: text$1.TextAlign.prototype,
        [_name$6]: "TextAlign.right",
        index: 1
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: text$1.TextAlign.prototype,
        [_name$6]: "TextAlign.center",
        index: 2
      });
    },
    get C215() {
      return C[215] = dart.constList([C[78] || CT.C78, C[213] || CT.C213, C[214] || CT.C214, C[115] || CT.C115], T$.TextAlignL());
    },
    get C216() {
      return C[216] = dart.constList([C[147] || CT.C147, C[146] || CT.C146], T$.TextDirectionL());
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: text$1.TextOverflow.prototype,
        [_name$6]: "TextOverflow.clip",
        index: 0
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: text$1.TextOverflow.prototype,
        [_name$6]: "TextOverflow.visible",
        index: 1
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: text$1.TextOverflow.prototype,
        [_name$6]: "TextOverflow.span",
        index: 2
      });
    },
    get C220() {
      return C[220] = dart.constList([C[217] || CT.C217, C[218] || CT.C218, C[219] || CT.C219], T$.TextOverflowL());
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_name$16]: "PageOrientation.natural",
        index: 0
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_name$16]: "PageOrientation.landscape",
        index: 1
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_name$16]: "PageOrientation.portrait",
        index: 2
      });
    },
    get C224() {
      return C[224] = dart.constList([C[221] || CT.C221, C[222] || CT.C222, C[223] || CT.C223], T$.PageOrientationL());
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: document.PdfPageMode.prototype,
        [_name$17]: "PdfPageMode.none",
        index: 0
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: document.PdfVersion.prototype,
        [_name$17]: "PdfVersion.pdf_1_4",
        index: 0
      });
    },
    get C227() {
      return C[227] = dart.fn(math.min, T$.TAndTToT());
    },
    get C228() {
      return C[228] = dart.fn(math.max, T$.TAndTToT$1());
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: border_radius.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[229] || CT.C229,
        [BorderRadius_bottomLeft]: C[229] || CT.C229,
        [BorderRadius_topRight]: C[229] || CT.C229,
        [BorderRadius_topLeft]: C[229] || CT.C229
      });
    },
    get C232() {
      return C[232] = dart.constList([3, 3], T$.intL());
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [BorderStyle_phase]: 0,
        [BorderStyle_pattern]: C[232] || CT.C232,
        [BorderStyle_paint]: true
      });
    },
    get C234() {
      return C[234] = dart.constList([1, 1], T$.intL());
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [BorderStyle_phase]: 0,
        [BorderStyle_pattern]: C[234] || CT.C234,
        [BorderStyle_paint]: true
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$5]: "BoxFit.fill",
        index: 0
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$5]: "BoxFit.fitWidth",
        index: 3
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$5]: "BoxFit.fitHeight",
        index: 4
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$5]: "BoxFit.none",
        index: 5
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$5]: "BoxFit.scaleDown",
        index: 6
      });
    },
    get C240() {
      return C[240] = dart.constList([C[235] || CT.C235, C[74] || CT.C74, C[75] || CT.C75, C[236] || CT.C236, C[237] || CT.C237, C[238] || CT.C238, C[239] || CT.C239], T$.BoxFitL());
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: 0
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: -1
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: 0
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: 1
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: geometry.FittedSizes.prototype,
        [destination$]: C[26] || CT.C26,
        [source$]: C[26] || CT.C26
      });
    }
  }, false);
  var C = Array(246).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/table.dart",
    "package:pdf/src/widgets/table.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/box_border.dart",
    "package:pdf/src/widgets/box_border.dart",
    "package:pdf/src/widgets/multi_page.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/widget.dart",
    "package:pdf/src/widgets/widget.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/progress.dart",
    "package:pdf/src/widgets/progress.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/use.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/operation.dart",
    "package:pdf/src/svg/operation.dart",
    "package:pdf/src/svg/use.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/text.dart",
    "package:pdf/src/svg/text.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/symbol.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/group.dart",
    "package:pdf/src/svg/group.dart",
    "package:pdf/src/svg/symbol.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/path.dart",
    "package:pdf/src/svg/path.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/image.dart",
    "package:pdf/src/svg/image.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/transform.dart",
    "package:pdf/src/svg/transform.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/clip_path.dart",
    "package:pdf/src/svg/clip_path.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/parser.dart",
    "package:pdf/src/svg/parser.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/mask_path.dart",
    "package:pdf/src/svg/mask_path.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/brush.dart",
    "package:pdf/src/svg/brush.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/gradient.dart",
    "package:pdf/src/svg/gradient.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/color.dart",
    "package:pdf/src/svg/color.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/svg/painter.dart",
    "package:pdf/src/svg/painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/svg.dart",
    "package:pdf/src/widgets/svg.dart",
    "package:pdf/src/widgets/decoration.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/placeholders.dart",
    "package:pdf/src/widgets/placeholders.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/partitions.dart",
    "package:pdf/src/widgets/partitions.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/image.dart",
    "package:pdf/src/widgets/image.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/grid_view.dart",
    "package:pdf/src/widgets/grid_view.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/grid_paper.dart",
    "package:pdf/src/widgets/grid_paper.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/forms.dart",
    "package:pdf/src/widgets/forms.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/content.dart",
    "package:pdf/src/widgets/content.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/clip.dart",
    "package:pdf/src/widgets/clip.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/chart/pie_chart.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/chart/chart.dart",
    "package:pdf/src/widgets/chart/chart.dart",
    "package:pdf/src/widgets/chart/pie_chart.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/wrap.dart",
    "package:pdf/src/widgets/wrap.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/chart/legend.dart",
    "package:pdf/src/widgets/chart/legend.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/chart/grid_radial.dart",
    "package:pdf/src/widgets/chart/grid_radial.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/chart/line_chart.dart",
    "package:pdf/src/widgets/chart/line_chart.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/chart/grid_axis.dart",
    "package:pdf/src/widgets/chart/grid_axis.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/chart/grid_cartesian.dart",
    "package:pdf/src/widgets/chart/grid_cartesian.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/stack.dart",
    "package:pdf/src/widgets/stack.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/chart/bar_chart.dart",
    "package:pdf/src/widgets/chart/bar_chart.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/barcode.dart",
    "package:pdf/src/widgets/barcode.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/shape.dart",
    "package:pdf/src/widgets/shape.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/container.dart",
    "package:pdf/src/widgets/container.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/icon.dart",
    "package:pdf/src/widgets/icon.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/theme.dart",
    "package:pdf/src/widgets/theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/font.dart",
    "package:pdf/src/widgets/font.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/image_provider.dart",
    "package:pdf/src/widgets/image_provider.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/decoration.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/text_style.dart",
    "package:pdf/src/widgets/text_style.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/flex.dart",
    "package:pdf/src/widgets/flex.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/multi_page.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/page.dart",
    "package:pdf/src/widgets/page.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/text.dart",
    "package:pdf/src/widgets/text.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/page_theme.dart",
    "package:pdf/src/widgets/page_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/document.dart",
    "package:pdf/src/widgets/document.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/border_radius.dart",
    "package:pdf/src/widgets/border_radius.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/basic.dart",
    "package:pdf/src/widgets/basic.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/geometry.dart",
    "package:pdf/src/widgets/geometry.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/widgets/annotations.dart",
    "package:pdf/src/widgets/annotations.dart"
  ];
  var children$ = dart.privateName(table, "TableRow.children");
  var repeat$ = dart.privateName(table, "TableRow.repeat");
  var decoration$0 = dart.privateName(table, "TableRow.decoration");
  var verticalAlignment$ = dart.privateName(table, "TableRow.verticalAlignment");
  table.TableRow = class TableRow extends core.Object {
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get repeat() {
      return this[repeat$];
    }
    set repeat(value) {
      super.repeat = value;
    }
    get decoration() {
      return this[decoration$0];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get verticalAlignment() {
      return this[verticalAlignment$];
    }
    set verticalAlignment(value) {
      super.verticalAlignment = value;
    }
  };
  (table.TableRow.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    if (children == null) dart.nullFailed(I[0], 38, 19, "children");
    let repeat = opts && 'repeat' in opts ? opts.repeat : false;
    if (repeat == null) dart.nullFailed(I[0], 39, 10, "repeat");
    let verticalAlignment = opts && 'verticalAlignment' in opts ? opts.verticalAlignment : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    this[children$] = children;
    this[repeat$] = repeat;
    this[verticalAlignment$] = verticalAlignment;
    this[decoration$0] = decoration;
    ;
  }).prototype = table.TableRow.prototype;
  dart.addTypeTests(table.TableRow);
  dart.addTypeCaches(table.TableRow);
  dart.setLibraryUri(table.TableRow, I[1]);
  dart.setFieldSignature(table.TableRow, () => ({
    __proto__: dart.getFields(table.TableRow.__proto__),
    children: dart.finalFieldType(core.List$(widget$.Widget)),
    repeat: dart.finalFieldType(core.bool),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    verticalAlignment: dart.finalFieldType(dart.nullable(table.TableCellVerticalAlignment))
  }));
  var _name$ = dart.privateName(table, "_name");
  table.TableCellVerticalAlignment = class TableCellVerticalAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (table.TableCellVerticalAlignment.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 55, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 55, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = table.TableCellVerticalAlignment.prototype;
  dart.addTypeTests(table.TableCellVerticalAlignment);
  dart.addTypeCaches(table.TableCellVerticalAlignment);
  dart.setLibraryUri(table.TableCellVerticalAlignment, I[1]);
  dart.setFieldSignature(table.TableCellVerticalAlignment, () => ({
    __proto__: dart.getFields(table.TableCellVerticalAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(table.TableCellVerticalAlignment, ['toString']);
  table.TableCellVerticalAlignment.bottom = C[0] || CT.C0;
  table.TableCellVerticalAlignment.middle = C[1] || CT.C1;
  table.TableCellVerticalAlignment.top = C[2] || CT.C2;
  table.TableCellVerticalAlignment.full = C[3] || CT.C3;
  table.TableCellVerticalAlignment.values = C[4] || CT.C4;
  table.TableWidth = class TableWidth extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (table.TableWidth.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 57, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 57, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = table.TableWidth.prototype;
  dart.addTypeTests(table.TableWidth);
  dart.addTypeCaches(table.TableWidth);
  dart.setLibraryUri(table.TableWidth, I[1]);
  dart.setFieldSignature(table.TableWidth, () => ({
    __proto__: dart.getFields(table.TableWidth.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(table.TableWidth, ['toString']);
  table.TableWidth.min = C[5] || CT.C5;
  table.TableWidth.max = C[6] || CT.C6;
  table.TableWidth.values = C[7] || CT.C7;
  var horizontalInside$ = dart.privateName(table, "TableBorder.horizontalInside");
  var verticalInside$ = dart.privateName(table, "TableBorder.verticalInside");
  var BorderStyle_phase = dart.privateName(box_border, "BorderStyle.phase");
  var BorderStyle_pattern = dart.privateName(box_border, "BorderStyle.pattern");
  var BorderStyle_paint = dart.privateName(box_border, "BorderStyle.paint");
  var BorderSide_style = dart.privateName(box_border, "BorderSide.style");
  var BorderSide_width = dart.privateName(box_border, "BorderSide.width");
  var PdfColor_blue = dart.privateName(color$, "PdfColor.blue");
  var PdfColor_green = dart.privateName(color$, "PdfColor.green");
  var PdfColor_red = dart.privateName(color$, "PdfColor.red");
  var PdfColor_alpha = dart.privateName(color$, "PdfColor.alpha");
  var BorderSide_color = dart.privateName(box_border, "BorderSide.color");
  var top$ = dart.privateName(box_border, "Border.top");
  var bottom$ = dart.privateName(box_border, "Border.bottom");
  var left$ = dart.privateName(box_border, "Border.left");
  var right$ = dart.privateName(box_border, "Border.right");
  var _name$0 = dart.privateName(decoration$, "_name");
  box_border.BoxBorder = class BoxBorder extends core.Object {
    static _paintUniformBorderWithCircle(context, box, side) {
      let t0;
      if (context == null) dart.nullFailed(I[2], 81, 15, "context");
      if (box == null) dart.nullFailed(I[2], 81, 32, "box");
      if (side == null) dart.nullFailed(I[2], 81, 48, "side");
      side.style.setStyle(context);
      t0 = context.canvas;
      (() => {
        t0.setStrokeColor(side.color);
        t0.setLineWidth(side.width);
        t0.drawEllipse(dart.notNull(box.x) + dart.notNull(box.width) / 2.0, dart.notNull(box.y) + dart.notNull(box.height) / 2.0, dart.notNull(box.width) / 2.0, dart.notNull(box.height) / 2.0);
        t0.strokePath();
        return t0;
      })();
      side.style.unsetStyle(context);
    }
    static _paintUniformBorderWithRadius(context, box, side, borderRadius) {
      let t0;
      if (context == null) dart.nullFailed(I[2], 92, 53, "context");
      if (box == null) dart.nullFailed(I[2], 92, 70, "box");
      if (side == null) dart.nullFailed(I[2], 93, 18, "side");
      if (borderRadius == null) dart.nullFailed(I[2], 93, 37, "borderRadius");
      side.style.setStyle(context);
      t0 = context.canvas;
      (() => {
        t0.setLineJoin(graphics.PdfLineJoin.miter);
        t0.setMiterLimit(4.0);
        t0.setStrokeColor(side.color);
        t0.setLineWidth(side.width);
        return t0;
      })();
      borderRadius.paint(context, box);
      context.canvas.strokePath();
      side.style.unsetStyle(context);
    }
    static _paintUniformBorderWithRectangle(context, box, side) {
      let t0;
      if (context == null) dart.nullFailed(I[2], 106, 15, "context");
      if (box == null) dart.nullFailed(I[2], 106, 32, "box");
      if (side == null) dart.nullFailed(I[2], 106, 48, "side");
      side.style.setStyle(context);
      t0 = context.canvas;
      (() => {
        t0.setLineJoin(graphics.PdfLineJoin.miter);
        t0.setMiterLimit(4.0);
        t0.setStrokeColor(side.color);
        t0.setLineWidth(side.width);
        t0.drawBox(box);
        t0.strokePath();
        return t0;
      })();
      side.style.unsetStyle(context);
    }
  };
  (box_border.BoxBorder.new = function() {
    ;
  }).prototype = box_border.BoxBorder.prototype;
  dart.addTypeTests(box_border.BoxBorder);
  dart.addTypeCaches(box_border.BoxBorder);
  dart.setLibraryUri(box_border.BoxBorder, I[3]);
  box_border.Border = class Border extends box_border.BoxBorder {
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    static all(opts) {
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      if (color == null) dart.nullFailed(I[2], 181, 14, "color");
      let width = opts && 'width' in opts ? opts.width : 1;
      if (width == null) dart.nullFailed(I[2], 182, 12, "width");
      let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
      if (style == null) dart.nullFailed(I[2], 183, 17, "style");
      return new box_border.Border.fromBorderSide(new box_border.BorderSide.new({color: color, width: width, style: style}));
    }
    get isUniform() {
      return dart.equals(this.top, this.bottom) && dart.equals(this.bottom, this.left) && dart.equals(this.left, this.right);
    }
    paint(context, box, opts) {
      let t0, t0$, t0$0, t0$1, t0$2;
      if (context == null) dart.nullFailed(I[2], 224, 13, "context");
      if (box == null) dart.nullFailed(I[2], 225, 13, "box");
      let shape = opts && 'shape' in opts ? opts.shape : C[12] || CT.C12;
      if (shape == null) dart.nullFailed(I[2], 226, 14, "shape");
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      if (dart.test(this.isUniform)) {
        if (dart.equals(this.top.style, box_border.BorderStyle.none)) {
          return;
        }
        switch (shape) {
          case C[13] || CT.C13:
          {
            if (!(borderRadius == null)) dart.assertFailed("A borderRadius can only be given for rectangular boxes.", I[2], 236, 18, "borderRadius == null");
            box_border.BoxBorder._paintUniformBorderWithCircle(context, box, this.top);
            break;
          }
          case C[12] || CT.C12:
          {
            if (borderRadius != null) {
              box_border.BoxBorder._paintUniformBorderWithRadius(context, box, this.top, borderRadius);
              return;
            }
            box_border.BoxBorder._paintUniformBorderWithRectangle(context, box, this.top);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        return;
      }
      if (!(borderRadius == null)) dart.assertFailed("A borderRadius can only be given for a uniform Border.", I[2], 252, 12, "borderRadius == null");
      t0 = context.canvas;
      (() => {
        t0.setLineCap(graphics.PdfLineCap.square);
        t0.setMiterLimit(4.0);
        t0.setLineJoin(graphics.PdfLineJoin.miter);
        return t0;
      })();
      if (dart.test(this.top.style.paint)) {
        this.top.style.setStyle(context);
        t0$ = context.canvas;
        (() => {
          t0$.setStrokeColor(this.top.color);
          t0$.setLineWidth(this.top.width);
          t0$.drawLine(box.left, box.top, box.right, box.top);
          t0$.strokePath();
          return t0$;
        })();
        this.top.style.unsetStyle(context);
      }
      if (dart.test(this.right.style.paint)) {
        this.right.style.setStyle(context);
        t0$0 = context.canvas;
        (() => {
          t0$0.setStrokeColor(this.right.color);
          t0$0.setLineWidth(this.right.width);
          t0$0.drawLine(box.right, box.top, box.right, box.bottom);
          t0$0.strokePath();
          return t0$0;
        })();
        this.right.style.unsetStyle(context);
      }
      if (dart.test(this.bottom.style.paint)) {
        this.bottom.style.setStyle(context);
        t0$1 = context.canvas;
        (() => {
          t0$1.setStrokeColor(this.bottom.color);
          t0$1.setLineWidth(this.bottom.width);
          t0$1.drawLine(box.right, box.bottom, box.left, box.bottom);
          t0$1.strokePath();
          return t0$1;
        })();
        this.bottom.style.unsetStyle(context);
      }
      if (dart.test(this.left.style.paint)) {
        this.left.style.setStyle(context);
        t0$2 = context.canvas;
        (() => {
          t0$2.setStrokeColor(this.left.color);
          t0$2.setLineWidth(this.left.width);
          t0$2.drawLine(box.left, box.top, box.left, box.bottom);
          t0$2.strokePath();
          return t0$2;
        })();
        this.left.style.unsetStyle(context);
      }
    }
  };
  (box_border.Border.new = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C[8] || CT.C8;
    if (top == null) dart.nullFailed(I[2], 173, 10, "top");
    let right = opts && 'right' in opts ? opts.right : C[8] || CT.C8;
    if (right == null) dart.nullFailed(I[2], 174, 10, "right");
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[8] || CT.C8;
    if (bottom == null) dart.nullFailed(I[2], 175, 10, "bottom");
    let left = opts && 'left' in opts ? opts.left : C[8] || CT.C8;
    if (left == null) dart.nullFailed(I[2], 176, 10, "left");
    this[top$] = top;
    this[right$] = right;
    this[bottom$] = bottom;
    this[left$] = left;
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  (box_border.Border.fromBorderSide = function(side) {
    if (side == null) dart.nullFailed(I[2], 190, 42, "side");
    this[top$] = side;
    this[right$] = side;
    this[bottom$] = side;
    this[left$] = side;
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  (box_border.Border.symmetric = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : C[8] || CT.C8;
    if (vertical == null) dart.nullFailed(I[2], 199, 16, "vertical");
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : C[8] || CT.C8;
    if (horizontal == null) dart.nullFailed(I[2], 200, 16, "horizontal");
    this[left$] = vertical;
    this[top$] = horizontal;
    this[right$] = vertical;
    this[bottom$] = horizontal;
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  dart.addTypeTests(box_border.Border);
  dart.addTypeCaches(box_border.Border);
  dart.setMethodSignature(box_border.Border, () => ({
    __proto__: dart.getMethods(box_border.Border.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect], {borderRadius: dart.nullable(border_radius.BorderRadius), shape: decoration$.BoxShape}, {})
  }));
  dart.setGetterSignature(box_border.Border, () => ({
    __proto__: dart.getGetters(box_border.Border.__proto__),
    isUniform: core.bool
  }));
  dart.setLibraryUri(box_border.Border, I[3]);
  dart.setFieldSignature(box_border.Border, () => ({
    __proto__: dart.getFields(box_border.Border.__proto__),
    top: dart.finalFieldType(box_border.BorderSide),
    bottom: dart.finalFieldType(box_border.BorderSide),
    left: dart.finalFieldType(box_border.BorderSide),
    right: dart.finalFieldType(box_border.BorderSide)
  }));
  table.TableBorder = class TableBorder extends box_border.Border {
    get horizontalInside() {
      return this[horizontalInside$];
    }
    set horizontalInside(value) {
      super.horizontalInside = value;
    }
    get verticalInside() {
      return this[verticalInside$];
    }
    set verticalInside(value) {
      super.verticalInside = value;
    }
    static all(opts) {
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      if (color == null) dart.nullFailed(I[0], 72, 14, "color");
      let width = opts && 'width' in opts ? opts.width : 1;
      if (width == null) dart.nullFailed(I[0], 73, 12, "width");
      let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
      if (style == null) dart.nullFailed(I[0], 74, 17, "style");
      let side = new box_border.BorderSide.new({color: color, width: width, style: style});
      return new table.TableBorder.new({top: side, right: side, bottom: side, left: side, horizontalInside: side, verticalInside: side});
    }
    static symmetric(opts) {
      let inside = opts && 'inside' in opts ? opts.inside : C[8] || CT.C8;
      if (inside == null) dart.nullFailed(I[0], 88, 16, "inside");
      let outside = opts && 'outside' in opts ? opts.outside : C[8] || CT.C8;
      if (outside == null) dart.nullFailed(I[0], 89, 16, "outside");
      return new table.TableBorder.new({top: outside, right: outside, bottom: outside, left: outside, horizontalInside: inside, verticalInside: inside});
    }
    paintTable(context, box, widths = null, heights = null) {
      if (context == null) dart.nullFailed(I[0], 104, 27, "context");
      if (box == null) dart.nullFailed(I[0], 104, 44, "box");
      super.paint(context, box);
      if (dart.test(this.verticalInside.style.paint)) {
        this.verticalInside.style.setStyle(context);
        let offset = box.x;
        for (let width of dart.nullCheck(widths)[$sublist](0, dart.notNull(widths[$length]) - 1)) {
          offset = dart.notNull(offset) + dart.nullCheck(width);
          context.canvas.moveTo(offset, box.y);
          context.canvas.lineTo(offset, box.top);
        }
        context.canvas.setStrokeColor(this.verticalInside.color);
        context.canvas.setLineWidth(this.verticalInside.width);
        context.canvas.strokePath();
        this.verticalInside.style.unsetStyle(context);
      }
      if (dart.test(this.horizontalInside.style.paint)) {
        this.horizontalInside.style.setStyle(context);
        let offset = box.top;
        for (let height of dart.nullCheck(heights)[$sublist](0, dart.notNull(heights[$length]) - 1)) {
          offset = dart.notNull(offset) - dart.notNull(height);
          context.canvas.moveTo(box.x, offset);
          context.canvas.lineTo(box.right, offset);
        }
        context.canvas.setStrokeColor(this.horizontalInside.color);
        context.canvas.setLineWidth(this.horizontalInside.width);
        context.canvas.strokePath();
        this.horizontalInside.style.unsetStyle(context);
      }
    }
  };
  (table.TableBorder.new = function(opts) {
    let left = opts && 'left' in opts ? opts.left : C[8] || CT.C8;
    if (left == null) dart.nullFailed(I[0], 62, 16, "left");
    let top = opts && 'top' in opts ? opts.top : C[8] || CT.C8;
    if (top == null) dart.nullFailed(I[0], 63, 16, "top");
    let right = opts && 'right' in opts ? opts.right : C[8] || CT.C8;
    if (right == null) dart.nullFailed(I[0], 64, 16, "right");
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[8] || CT.C8;
    if (bottom == null) dart.nullFailed(I[0], 65, 16, "bottom");
    let horizontalInside = opts && 'horizontalInside' in opts ? opts.horizontalInside : C[8] || CT.C8;
    if (horizontalInside == null) dart.nullFailed(I[0], 66, 10, "horizontalInside");
    let verticalInside = opts && 'verticalInside' in opts ? opts.verticalInside : C[8] || CT.C8;
    if (verticalInside == null) dart.nullFailed(I[0], 67, 10, "verticalInside");
    this[horizontalInside$] = horizontalInside;
    this[verticalInside$] = verticalInside;
    table.TableBorder.__proto__.new.call(this, {top: top, bottom: bottom, left: left, right: right});
    ;
  }).prototype = table.TableBorder.prototype;
  dart.addTypeTests(table.TableBorder);
  dart.addTypeCaches(table.TableBorder);
  dart.setMethodSignature(table.TableBorder, () => ({
    __proto__: dart.getMethods(table.TableBorder.__proto__),
    paintTable: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect], [dart.nullable(core.List$(dart.nullable(core.double))), dart.nullable(core.List$(core.double))])
  }));
  dart.setLibraryUri(table.TableBorder, I[1]);
  dart.setFieldSignature(table.TableBorder, () => ({
    __proto__: dart.getFields(table.TableBorder.__proto__),
    horizontalInside: dart.finalFieldType(box_border.BorderSide),
    verticalInside: dart.finalFieldType(box_border.BorderSide)
  }));
  multi_page.WidgetContext = class WidgetContext extends core.Object {};
  (multi_page.WidgetContext.new = function() {
    ;
  }).prototype = multi_page.WidgetContext.prototype;
  dart.addTypeTests(multi_page.WidgetContext);
  dart.addTypeCaches(multi_page.WidgetContext);
  dart.setLibraryUri(multi_page.WidgetContext, I[4]);
  table._TableContext = class _TableContext extends multi_page.WidgetContext {
    apply(other) {
      table._TableContext.as(other);
      if (other == null) dart.nullFailed(I[0], 144, 28, "other");
      this.firstLine = other.firstLine;
      this.lastLine = other.lastLine;
    }
    clone() {
      let t0;
      t0 = new table._TableContext.new();
      return (() => {
        t0.firstLine = this.firstLine;
        t0.lastLine = this.lastLine;
        return t0;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " firstLine: " + dart.str(this.firstLine) + " lastLine: " + dart.str(this.lastLine);
    }
  };
  (table._TableContext.new = function() {
    this.firstLine = 0;
    this.lastLine = 0;
    ;
  }).prototype = table._TableContext.prototype;
  dart.addTypeTests(table._TableContext);
  dart.addTypeCaches(table._TableContext);
  dart.setMethodSignature(table._TableContext, () => ({
    __proto__: dart.getMethods(table._TableContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(table._TableContext, I[1]);
  dart.setFieldSignature(table._TableContext, () => ({
    __proto__: dart.getFields(table._TableContext.__proto__),
    firstLine: dart.fieldType(core.int),
    lastLine: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(table._TableContext, ['toString']);
  table._ColumnLayout = class _ColumnLayout extends core.Object {};
  (table._ColumnLayout.new = function(width, flex) {
    this.width = width;
    this.flex = flex;
    ;
  }).prototype = table._ColumnLayout.prototype;
  dart.addTypeTests(table._ColumnLayout);
  dart.addTypeCaches(table._ColumnLayout);
  dart.setLibraryUri(table._ColumnLayout, I[1]);
  dart.setFieldSignature(table._ColumnLayout, () => ({
    __proto__: dart.getFields(table._ColumnLayout.__proto__),
    width: dart.finalFieldType(dart.nullable(core.double)),
    flex: dart.finalFieldType(dart.nullable(core.double))
  }));
  table.TableColumnWidth = class TableColumnWidth extends core.Object {};
  (table.TableColumnWidth.new = function() {
    ;
  }).prototype = table.TableColumnWidth.prototype;
  dart.addTypeTests(table.TableColumnWidth);
  dart.addTypeCaches(table.TableColumnWidth);
  dart.setLibraryUri(table.TableColumnWidth, I[1]);
  var flex$0 = dart.privateName(table, "IntrinsicColumnWidth.flex");
  var BoxConstraints_maxHeight = dart.privateName(geometry, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(geometry, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(geometry, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(geometry, "BoxConstraints.minWidth");
  table.IntrinsicColumnWidth = class IntrinsicColumnWidth extends table.TableColumnWidth {
    get flex() {
      return this[flex$0];
    }
    set flex(value) {
      super.flex = value;
    }
    layout(child, context, constraints) {
      let t0;
      if (child == null) dart.nullFailed(I[0], 181, 14, "child");
      if (context == null) dart.nullFailed(I[0], 181, 29, "context");
      if (constraints == null) dart.nullFailed(I[0], 181, 53, "constraints");
      if (this.flex != null) {
        return new table._ColumnLayout.new(0.0, this.flex);
      }
      child.layout(context, C[14] || CT.C14);
      if (!(child.box != null)) dart.assertFailed(null, I[0], 187, 12, "child.box != null");
      let calculatedWidth = dart.nullCheck(child.box).width === 1 / 0 ? 0.0 : dart.nullCheck(child.box).width;
      let childFlex = (t0 = this.flex, t0 == null ? flex$.Expanded.is(child) ? child.flex[$toDouble]() : dart.nullCheck(child.box).width === 1 / 0 ? 1.0 : 0.0 : t0);
      return new table._ColumnLayout.new(calculatedWidth, childFlex);
    }
  };
  (table.IntrinsicColumnWidth.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : null;
    this[flex$0] = flex;
    table.IntrinsicColumnWidth.__proto__.new.call(this);
    ;
  }).prototype = table.IntrinsicColumnWidth.prototype;
  dart.addTypeTests(table.IntrinsicColumnWidth);
  dart.addTypeCaches(table.IntrinsicColumnWidth);
  dart.setMethodSignature(table.IntrinsicColumnWidth, () => ({
    __proto__: dart.getMethods(table.IntrinsicColumnWidth.__proto__),
    layout: dart.fnType(table._ColumnLayout, [widget$.Widget, widget$.Context, geometry.BoxConstraints])
  }));
  dart.setLibraryUri(table.IntrinsicColumnWidth, I[1]);
  dart.setFieldSignature(table.IntrinsicColumnWidth, () => ({
    __proto__: dart.getFields(table.IntrinsicColumnWidth.__proto__),
    flex: dart.finalFieldType(dart.nullable(core.double))
  }));
  var width$ = dart.privateName(table, "FixedColumnWidth.width");
  table.FixedColumnWidth = class FixedColumnWidth extends table.TableColumnWidth {
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    layout(child, context, constraints) {
      if (child == null) dart.nullFailed(I[0], 205, 14, "child");
      if (context == null) dart.nullFailed(I[0], 205, 29, "context");
      return new table._ColumnLayout.new(this.width, 0.0);
    }
  };
  (table.FixedColumnWidth.new = function(width) {
    if (width == null) dart.nullFailed(I[0], 199, 31, "width");
    this[width$] = width;
    table.FixedColumnWidth.__proto__.new.call(this);
    ;
  }).prototype = table.FixedColumnWidth.prototype;
  dart.addTypeTests(table.FixedColumnWidth);
  dart.addTypeCaches(table.FixedColumnWidth);
  dart.setMethodSignature(table.FixedColumnWidth, () => ({
    __proto__: dart.getMethods(table.FixedColumnWidth.__proto__),
    layout: dart.fnType(table._ColumnLayout, [widget$.Widget, widget$.Context, dart.nullable(geometry.BoxConstraints)])
  }));
  dart.setLibraryUri(table.FixedColumnWidth, I[1]);
  dart.setFieldSignature(table.FixedColumnWidth, () => ({
    __proto__: dart.getFields(table.FixedColumnWidth.__proto__),
    width: dart.finalFieldType(core.double)
  }));
  var flex$1 = dart.privateName(table, "FlexColumnWidth.flex");
  table.FlexColumnWidth = class FlexColumnWidth extends table.TableColumnWidth {
    get flex() {
      return this[flex$1];
    }
    set flex(value) {
      super.flex = value;
    }
    layout(child, context, constraints) {
      if (child == null) dart.nullFailed(I[0], 217, 14, "child");
      if (context == null) dart.nullFailed(I[0], 217, 29, "context");
      return new table._ColumnLayout.new(0.0, this.flex);
    }
  };
  (table.FlexColumnWidth.new = function(flex = 1) {
    if (flex == null) dart.nullFailed(I[0], 211, 31, "flex");
    this[flex$1] = flex;
    table.FlexColumnWidth.__proto__.new.call(this);
    ;
  }).prototype = table.FlexColumnWidth.prototype;
  dart.addTypeTests(table.FlexColumnWidth);
  dart.addTypeCaches(table.FlexColumnWidth);
  dart.setMethodSignature(table.FlexColumnWidth, () => ({
    __proto__: dart.getMethods(table.FlexColumnWidth.__proto__),
    layout: dart.fnType(table._ColumnLayout, [widget$.Widget, widget$.Context, dart.nullable(geometry.BoxConstraints)])
  }));
  dart.setLibraryUri(table.FlexColumnWidth, I[1]);
  dart.setFieldSignature(table.FlexColumnWidth, () => ({
    __proto__: dart.getFields(table.FlexColumnWidth.__proto__),
    flex: dart.finalFieldType(core.double)
  }));
  var value$ = dart.privateName(table, "FractionColumnWidth.value");
  table.FractionColumnWidth = class FractionColumnWidth extends table.TableColumnWidth {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    layout(child, context, constraints) {
      if (child == null) dart.nullFailed(I[0], 229, 14, "child");
      if (context == null) dart.nullFailed(I[0], 229, 29, "context");
      return new table._ColumnLayout.new(dart.notNull(dart.nullCheck(constraints).maxWidth) * dart.notNull(this.value), 0.0);
    }
  };
  (table.FractionColumnWidth.new = function(value) {
    if (value == null) dart.nullFailed(I[0], 223, 34, "value");
    this[value$] = value;
    table.FractionColumnWidth.__proto__.new.call(this);
    ;
  }).prototype = table.FractionColumnWidth.prototype;
  dart.addTypeTests(table.FractionColumnWidth);
  dart.addTypeCaches(table.FractionColumnWidth);
  dart.setMethodSignature(table.FractionColumnWidth, () => ({
    __proto__: dart.getMethods(table.FractionColumnWidth.__proto__),
    layout: dart.fnType(table._ColumnLayout, [widget$.Widget, widget$.Context, dart.nullable(geometry.BoxConstraints)])
  }));
  dart.setLibraryUri(table.FractionColumnWidth, I[1]);
  dart.setFieldSignature(table.FractionColumnWidth, () => ({
    __proto__: dart.getFields(table.FractionColumnWidth.__proto__),
    value: dart.finalFieldType(core.double)
  }));
  var children$0 = dart.privateName(table, "Table.children");
  var border$ = dart.privateName(table, "Table.border");
  var defaultVerticalAlignment$ = dart.privateName(table, "Table.defaultVerticalAlignment");
  var tableWidth$ = dart.privateName(table, "Table.tableWidth");
  var defaultColumnWidth$ = dart.privateName(table, "Table.defaultColumnWidth");
  var columnWidths$ = dart.privateName(table, "Table.columnWidths");
  var _widths = dart.privateName(table, "_widths");
  var _heights = dart.privateName(table, "_heights");
  var _context = dart.privateName(table, "_context");
  var EdgeInsets_bottom = dart.privateName(geometry, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(geometry, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(geometry, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(geometry, "EdgeInsets.left");
  var Alignment_y = dart.privateName(geometry, "Alignment.y");
  var Alignment_x = dart.privateName(geometry, "Alignment.x");
  var box = dart.privateName(widget$, "Widget.box");
  widget$.Widget = class Widget extends core.Object {
    get box() {
      return this[box];
    }
    set box(value) {
      this[box] = value;
    }
    static draw(widget, opts) {
      let t0;
      if (widget == null) dart.nullFailed(I[5], 135, 12, "widget");
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      if (offset == null) dart.nullFailed(I[5], 139, 23, "offset");
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let context = opts && 'context' in opts ? opts.context : null;
      context == null ? context = widget$.Context.new({document: dart.nullCheck(page).pdfDocument, page: page, canvas: dart.nullCheck(canvas)}).inheritFromAll(T$.JSArrayOfInherited().of([theme$.ThemeData.base()])) : null;
      widget.layout(context, (t0 = constraints, t0 == null ? C[14] || CT.C14 : t0));
      if (!(widget.box != null)) dart.assertFailed(null, I[5], 156, 12, "widget.box != null");
      if (alignment != null) {
        let d = alignment.withinRect(dart.nullCheck(widget.box));
        offset = new point$.PdfPoint.new(dart.notNull(offset.x) - dart.notNull(d.x), dart.notNull(offset.y) - dart.notNull(d.y));
      }
      widget.box = rect$.PdfRect.fromPoints(offset, dart.nullCheck(widget.box).size);
      widget.paint(context);
    }
    static measure(widget, opts) {
      let t0;
      if (widget == null) dart.nullFailed(I[5], 170, 12, "widget");
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let context = opts && 'context' in opts ? opts.context : null;
      context == null ? context = widget$.Context.new({document: dart.nullCheck(page).pdfDocument, page: page, canvas: dart.nullCheck(canvas)}).inheritFromAll(T$.JSArrayOfInherited().of([theme$.ThemeData.base()])) : null;
      widget.layout(context, (t0 = constraints, t0 == null ? C[14] || CT.C14 : t0));
      if (!(widget.box != null)) dart.assertFailed(null, I[5], 189, 12, "widget.box != null");
      return dart.nullCheck(widget.box).size;
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[5], 201, 22, "context");
      if (!dart.test(dart.fn(() => {
        if (dart.test(document$0.Document.debug)) {
          this.debugPaint(context);
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[5], 202, 12, "() {\n      if (Document.debug) {\n        debugPaint(context);\n      }\n      return true;\n    }()");
    }
    debugPaint(context) {
      let t0;
      if (context == null) dart.nullFailed(I[5], 211, 27, "context");
      t0 = context.canvas;
      (() => {
        t0.setStrokeColor(colors.PdfColors.purple);
        t0.setLineWidth(1.0);
        t0.drawBox(dart.nullCheck(this.box));
        t0.strokePath();
        return t0;
      })();
    }
  };
  (widget$.Widget.new = function() {
    this[box] = null;
    ;
  }).prototype = widget$.Widget.prototype;
  dart.addTypeTests(widget$.Widget);
  dart.addTypeCaches(widget$.Widget);
  dart.setMethodSignature(widget$.Widget, () => ({
    __proto__: dart.getMethods(widget$.Widget.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context]),
    debugPaint: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setLibraryUri(widget$.Widget, I[6]);
  dart.setFieldSignature(widget$.Widget, () => ({
    __proto__: dart.getFields(widget$.Widget.__proto__),
    box: dart.fieldType(dart.nullable(rect$.PdfRect))
  }));
  multi_page.SpanningWidget = class SpanningWidget extends widget$.Widget {};
  multi_page.SpanningWidget[dart.mixinOn] = Widget => class SpanningWidget extends Widget {};
  dart.addTypeTests(multi_page.SpanningWidget);
  dart.addTypeCaches(multi_page.SpanningWidget);
  multi_page.SpanningWidget[dart.implements] = () => [widget$.Widget];
  dart.setLibraryUri(multi_page.SpanningWidget, I[4]);
  const Widget_SpanningWidget$36 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36.new = function() {
    Widget_SpanningWidget$36.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36.prototype;
  dart.applyMixin(Widget_SpanningWidget$36, multi_page.SpanningWidget);
  table.Table = class Table extends Widget_SpanningWidget$36 {
    get children() {
      return this[children$0];
    }
    set children(value) {
      super.children = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    get defaultVerticalAlignment() {
      return this[defaultVerticalAlignment$];
    }
    set defaultVerticalAlignment(value) {
      super.defaultVerticalAlignment = value;
    }
    get tableWidth() {
      return this[tableWidth$];
    }
    set tableWidth(value) {
      super.tableWidth = value;
    }
    get defaultColumnWidth() {
      return this[defaultColumnWidth$];
    }
    set defaultColumnWidth(value) {
      super.defaultColumnWidth = value;
    }
    get columnWidths() {
      return this[columnWidths$];
    }
    set columnWidths(value) {
      super.columnWidths = value;
    }
    static fromTextArray(opts) {
      let t0, t0$, t0$0;
      let context = opts && 'context' in opts ? opts.context : null;
      let data = opts && 'data' in opts ? opts.data : null;
      if (data == null) dart.nullFailed(I[0], 251, 34, "data");
      let cellPadding = opts && 'cellPadding' in opts ? opts.cellPadding : C[17] || CT.C17;
      if (cellPadding == null) dart.nullFailed(I[0], 252, 16, "cellPadding");
      let cellHeight = opts && 'cellHeight' in opts ? opts.cellHeight : 0;
      if (cellHeight == null) dart.nullFailed(I[0], 253, 12, "cellHeight");
      let cellAlignment = opts && 'cellAlignment' in opts ? opts.cellAlignment : C[18] || CT.C18;
      if (cellAlignment == null) dart.nullFailed(I[0], 254, 15, "cellAlignment");
      let cellAlignments = opts && 'cellAlignments' in opts ? opts.cellAlignments : null;
      let cellStyle = opts && 'cellStyle' in opts ? opts.cellStyle : null;
      let oddCellStyle = opts && 'oddCellStyle' in opts ? opts.oddCellStyle : null;
      let cellFormat = opts && 'cellFormat' in opts ? opts.cellFormat : null;
      let cellDecoration = opts && 'cellDecoration' in opts ? opts.cellDecoration : null;
      let headerCount = opts && 'headerCount' in opts ? opts.headerCount : 1;
      if (headerCount == null) dart.nullFailed(I[0], 260, 9, "headerCount");
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let headerPadding = opts && 'headerPadding' in opts ? opts.headerPadding : null;
      let headerHeight = opts && 'headerHeight' in opts ? opts.headerHeight : null;
      let headerAlignment = opts && 'headerAlignment' in opts ? opts.headerAlignment : C[19] || CT.C19;
      if (headerAlignment == null) dart.nullFailed(I[0], 264, 15, "headerAlignment");
      let headerAlignments = opts && 'headerAlignments' in opts ? opts.headerAlignments : null;
      let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
      let headerFormat = opts && 'headerFormat' in opts ? opts.headerFormat : null;
      let border = opts && 'border' in opts ? opts.border : C[20] || CT.C20;
      let columnWidths = opts && 'columnWidths' in opts ? opts.columnWidths : null;
      let defaultColumnWidth = opts && 'defaultColumnWidth' in opts ? opts.defaultColumnWidth : C[16] || CT.C16;
      if (defaultColumnWidth == null) dart.nullFailed(I[0], 277, 22, "defaultColumnWidth");
      let tableWidth = opts && 'tableWidth' in opts ? opts.tableWidth : C[6] || CT.C6;
      if (tableWidth == null) dart.nullFailed(I[0], 278, 16, "tableWidth");
      let headerDecoration = opts && 'headerDecoration' in opts ? opts.headerDecoration : null;
      let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
      let oddRowDecoration = opts && 'oddRowDecoration' in opts ? opts.oddRowDecoration : null;
      if (!(dart.notNull(headerCount) >= 0)) dart.assertFailed(null, I[0], 283, 12, "headerCount >= 0");
      if (context != null) {
        let theme = theme$.Theme.of(context);
        headerStyle == null ? headerStyle = theme.tableHeader : null;
        cellStyle == null ? cellStyle = theme.tableCell : null;
      }
      headerPadding == null ? headerPadding = cellPadding : null;
      headerHeight == null ? headerHeight = cellHeight : null;
      oddRowDecoration == null ? oddRowDecoration = rowDecoration : null;
      oddCellStyle == null ? oddCellStyle = cellStyle : null;
      cellAlignments == null ? cellAlignments = C[22] || CT.C22 : null;
      headerAlignments == null ? headerAlignments = cellAlignments : null;
      let rows = T$.JSArrayOfTableRow().of([]);
      let rowNum = 0;
      if (headers != null) {
        let tableRow = T$.JSArrayOfWidget().of([]);
        for (let cell of headers) {
          tableRow[$add](new container$.Container.new({alignment: (t0 = headerAlignments[$_get](tableRow[$length]), t0 == null ? headerAlignment : t0), padding: headerPadding, constraints: new geometry.BoxConstraints.new({minHeight: headerHeight}), child: new text$1.Text.new(headerFormat == null ? dart.toString(cell) : headerFormat(tableRow[$length], cell), {style: headerStyle})}));
        }
        rows[$add](new table.TableRow.new({children: tableRow, repeat: true, decoration: headerDecoration}));
        rowNum = rowNum + 1;
      }
      for (let row of data) {
        let tableRow = T$.JSArrayOfWidget().of([]);
        let isOdd = (rowNum - dart.notNull(headerCount))[$modulo](2) !== 0;
        if (rowNum < dart.notNull(headerCount)) {
          for (let cell of row) {
            let align = (t0$ = headerAlignments[$_get](tableRow[$length]), t0$ == null ? headerAlignment : t0$);
            let textAlign = table.Table._textAlign(align);
            tableRow[$add](new container$.Container.new({alignment: align, padding: headerPadding, constraints: new geometry.BoxConstraints.new({minHeight: headerHeight}), child: new text$1.Text.new(headerFormat == null ? dart.toString(cell) : headerFormat(tableRow[$length], cell), {style: headerStyle, textAlign: textAlign})}));
          }
        } else {
          for (let cell of row) {
            let align = (t0$0 = cellAlignments[$_get](tableRow[$length]), t0$0 == null ? cellAlignment : t0$0);
            let textAlign = table.Table._textAlign(align);
            tableRow[$add](new container$.Container.new({alignment: align, padding: cellPadding, constraints: new geometry.BoxConstraints.new({minHeight: cellHeight}), decoration: cellDecoration == null ? null : cellDecoration(tableRow[$length], cell, rowNum), child: new text$1.Text.new(cellFormat == null ? dart.toString(cell) : cellFormat(tableRow[$length], cell), {style: isOdd ? oddCellStyle : cellStyle, textAlign: textAlign})}));
          }
        }
        let decoration = isOdd ? oddRowDecoration : rowDecoration;
        if (rowNum < dart.notNull(headerCount)) {
          decoration = headerDecoration;
        }
        rows[$add](new table.TableRow.new({children: tableRow, repeat: rowNum < dart.notNull(headerCount), decoration: decoration}));
        rowNum = rowNum + 1;
      }
      return new table.Table.new({border: border, tableWidth: tableWidth, children: rows, columnWidths: columnWidths, defaultColumnWidth: defaultColumnWidth, defaultVerticalAlignment: table.TableCellVerticalAlignment.full});
    }
    get canSpan() {
      return true;
    }
    get hasMoreWidgets() {
      return true;
    }
    saveContext() {
      return this[_context];
    }
    restoreContext(context) {
      table._TableContext.as(context);
      if (context == null) dart.nullFailed(I[0], 426, 37, "context");
      this[_context].apply(context);
      this[_context].firstLine = this[_context].lastLine;
    }
    layout(context, constraints, opts) {
      let t0, t0$, t0$0, t0$1;
      if (context == null) dart.nullFailed(I[0], 432, 23, "context");
      if (constraints == null) dart.nullFailed(I[0], 432, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[0], 433, 13, "parentUsesSize");
      let flex = T$.JSArrayOfdoubleN().of([]);
      this[_widths][$clear]();
      this[_heights][$clear]();
      let index = 0;
      for (let row of this.children) {
        let n = 0;
        for (let child of row.children) {
          let columnWidth = this.columnWidths != null && dart.nullCheck(this.columnWidths)[$_get](n) != null ? dart.nullCheck(dart.nullCheck(this.columnWidths)[$_get](n)) : this.defaultColumnWidth;
          let columnLayout = columnWidth.layout(child, context, constraints);
          if (dart.notNull(flex[$length]) < n + 1) {
            flex[$add](columnLayout.flex);
            this[_widths][$add](columnLayout.width);
          } else {
            if (dart.nullCheck(columnLayout.flex) > 0) {
              flex[$_set](n, math.max(core.double, dart.nullCheck(flex[$_get](n)), dart.nullCheck(columnLayout.flex)));
            }
            this[_widths][$_set](n, math.max(core.double, dart.nullCheck(this[_widths][$_get](n)), dart.nullCheck(columnLayout.width)));
          }
          n = n + 1;
        }
      }
      if (dart.test(this[_widths][$isEmpty])) {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
        return;
      }
      let maxWidth = this[_widths][$reduce](dart.fn((a, b) => dart.nullCheck(a) + dart.nullCheck(b), T$.doubleNAnddoubleNTodouble()));
      if (dart.test(constraints.hasBoundedWidth)) {
        let totalFlex = dart.nullCheck(flex[$reduce](dart.fn((a, b) => dart.nullCheck(a) + dart.nullCheck(b), T$.doubleNAnddoubleNTodouble())));
        let flexSpace = 0.0;
        for (let n = 0; n < dart.notNull(this[_widths][$length]); n = n + 1) {
          if (flex[$_get](n) === 0.0) {
            let newWidth = dart.nullCheck(this[_widths][$_get](n)) / dart.nullCheck(maxWidth) * dart.notNull(constraints.maxWidth);
            if (this.tableWidth == table.TableWidth.max && totalFlex === 0.0 || newWidth < dart.nullCheck(this[_widths][$_get](n))) {
              this[_widths][$_set](n, newWidth);
            }
            flexSpace = flexSpace + dart.nullCheck(this[_widths][$_get](n));
          }
        }
        let spacePerFlex = totalFlex > 0.0 ? (dart.notNull(constraints.maxWidth) - flexSpace) / totalFlex : 0 / 0;
        for (let n = 0; n < dart.notNull(this[_widths][$length]); n = n + 1) {
          if (dart.nullCheck(flex[$_get](n)) > 0.0) {
            let newWidth = spacePerFlex * dart.nullCheck(flex[$_get](n));
            this[_widths][$_set](n, newWidth);
          }
        }
      }
      let totalWidth = dart.nullCheck(this[_widths][$reduce](dart.fn((a, b) => dart.nullCheck(a) + dart.nullCheck(b), T$.doubleNAnddoubleNTodouble())));
      let totalHeight = 0.0;
      index = 0;
      for (let row of this.children) {
        if ((t0 = index, index = t0 + 1, t0) < dart.notNull(this[_context].firstLine) && !dart.test(row.repeat)) {
          continue;
        }
        let n = 0;
        let x = 0.0;
        let lineHeight = 0.0;
        for (let child of row.children) {
          let childConstraints = new geometry.BoxConstraints.tightFor({width: this[_widths][$_get](n)});
          child.layout(context, childConstraints);
          if (!(child.box != null)) dart.assertFailed(null, I[0], 510, 16, "child.box != null");
          child.box = new rect$.PdfRect.new(x, totalHeight, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
          x = x + dart.nullCheck(this[_widths][$_get](n));
          lineHeight = math.max(core.double, lineHeight, dart.nullCheck(child.box).height);
          n = n + 1;
        }
        let align = (t0$ = row.verticalAlignment, t0$ == null ? this.defaultVerticalAlignment : t0$);
        if (align == table.TableCellVerticalAlignment.full) {
          n = 0;
          x = 0.0;
          for (let child of row.children) {
            let childConstraints = new geometry.BoxConstraints.tightFor({width: this[_widths][$_get](n), height: lineHeight});
            child.layout(context, childConstraints);
            if (!(child.box != null)) dart.assertFailed(null, I[0], 528, 18, "child.box != null");
            child.box = new rect$.PdfRect.new(x, totalHeight, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
            x = x + dart.nullCheck(this[_widths][$_get](n));
            n = n + 1;
          }
        }
        if (totalHeight + lineHeight > dart.notNull(constraints.maxHeight)) {
          index = index - 1;
          break;
        }
        totalHeight = totalHeight + lineHeight;
        this[_heights][$add](lineHeight);
      }
      this[_context].lastLine = index;
      index = 0;
      let heightIndex = 0;
      for (let row of this.children) {
        if ((t0$0 = index, index = t0$0 + 1, t0$0) < dart.notNull(this[_context].firstLine) && !dart.test(row.repeat)) {
          continue;
        }
        let align = (t0$1 = row.verticalAlignment, t0$1 == null ? this.defaultVerticalAlignment : t0$1);
        for (let child of row.children) {
          let childY = null;
          switch (align) {
            case C[0] || CT.C0:
            {
              childY = totalHeight - dart.notNull(dart.nullCheck(child.box).y) - dart.notNull(this[_heights][$_get](heightIndex));
              break;
            }
            case C[1] || CT.C1:
            {
              childY = totalHeight - dart.notNull(dart.nullCheck(child.box).y) - (dart.notNull(this[_heights][$_get](heightIndex)) + dart.notNull(dart.nullCheck(child.box).height)) / 2;
              break;
            }
            case C[2] || CT.C2:
            case C[3] || CT.C3:
            {
              childY = totalHeight - dart.notNull(dart.nullCheck(child.box).y) - dart.notNull(dart.nullCheck(child.box).height);
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
          child.box = new rect$.PdfRect.new(dart.nullCheck(child.box).x, childY, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
        }
        if (index >= dart.notNull(this[_context].lastLine)) {
          break;
        }
        heightIndex = heightIndex + 1;
      }
      this.box = new rect$.PdfRect.new(0.0, 0.0, totalWidth, totalHeight);
    }
    paint(context) {
      let t0, t0$, t0$0, t0$1;
      if (context == null) dart.nullFailed(I[0], 591, 22, "context");
      super.paint(context);
      if (this[_context].lastLine === 0) {
        return;
      }
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t0 = context.canvas;
      (() => {
        t0.saveContext();
        t0.setTransform(mat);
        return t0;
      })();
      let index = 0;
      for (let row of this.children) {
        if ((t0$ = index, index = t0$ + 1, t0$) < dart.notNull(this[_context].firstLine) && !dart.test(row.repeat)) {
          continue;
        }
        if (row.decoration != null) {
          let y = 1 / 0;
          let h = 0.0;
          for (let child of row.children) {
            y = math.min(core.double, y, dart.nullCheck(child.box).y);
            h = math.max(core.double, h, dart.nullCheck(child.box).height);
          }
          dart.nullCheck(row.decoration).paint(context, new rect$.PdfRect.new(0.0, y, dart.nullCheck(this.box).width, h), decoration$.PaintPhase.background);
        }
        for (let child of row.children) {
          t0$0 = context.canvas;
          (() => {
            t0$0.saveContext();
            t0$0.drawRect(dart.nullCheck(child.box).x, dart.nullCheck(child.box).y, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
            t0$0.clipPath();
            return t0$0;
          })();
          child.paint(context);
          context.canvas.restoreContext();
        }
        if (index >= dart.notNull(this[_context].lastLine)) {
          break;
        }
      }
      index = 0;
      for (let row of this.children) {
        if ((t0$1 = index, index = t0$1 + 1, t0$1) < dart.notNull(this[_context].firstLine) && !dart.test(row.repeat)) {
          continue;
        }
        if (row.decoration != null) {
          let y = 1 / 0;
          let h = 0.0;
          for (let child of row.children) {
            y = math.min(core.double, y, dart.nullCheck(child.box).y);
            h = math.max(core.double, h, dart.nullCheck(child.box).height);
          }
          dart.nullCheck(row.decoration).paint(context, new rect$.PdfRect.new(0.0, y, dart.nullCheck(this.box).width, h), decoration$.PaintPhase.foreground);
        }
        if (index >= dart.notNull(this[_context].lastLine)) {
          break;
        }
      }
      context.canvas.restoreContext();
      if (this.border != null) {
        dart.nullCheck(this.border).paintTable(context, dart.nullCheck(this.box), this[_widths], this[_heights]);
      }
    }
    static _textAlign(align) {
      if (align == null) dart.nullFailed(I[0], 670, 41, "align");
      if (align.x === 0) {
        return text$1.TextAlign.center;
      } else if (dart.notNull(align.x) < 0) {
        return text$1.TextAlign.left;
      } else {
        return text$1.TextAlign.right;
      }
    }
  };
  (table.Table.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : C[15] || CT.C15;
    if (children == null) dart.nullFailed(I[0], 241, 10, "children");
    let border = opts && 'border' in opts ? opts.border : null;
    let defaultVerticalAlignment = opts && 'defaultVerticalAlignment' in opts ? opts.defaultVerticalAlignment : C[2] || CT.C2;
    if (defaultVerticalAlignment == null) dart.nullFailed(I[0], 243, 10, "defaultVerticalAlignment");
    let columnWidths = opts && 'columnWidths' in opts ? opts.columnWidths : null;
    let defaultColumnWidth = opts && 'defaultColumnWidth' in opts ? opts.defaultColumnWidth : C[16] || CT.C16;
    if (defaultColumnWidth == null) dart.nullFailed(I[0], 245, 10, "defaultColumnWidth");
    let tableWidth = opts && 'tableWidth' in opts ? opts.tableWidth : C[6] || CT.C6;
    if (tableWidth == null) dart.nullFailed(I[0], 246, 10, "tableWidth");
    this[_widths] = T$.JSArrayOfdoubleN().of([]);
    this[_heights] = T$.JSArrayOfdouble().of([]);
    this[_context] = new table._TableContext.new();
    this[children$0] = children;
    this[border$] = border;
    this[defaultVerticalAlignment$] = defaultVerticalAlignment;
    this[columnWidths$] = columnWidths;
    this[defaultColumnWidth$] = defaultColumnWidth;
    this[tableWidth$] = tableWidth;
    table.Table.__proto__.new.call(this);
    ;
  }).prototype = table.Table.prototype;
  dart.addTypeTests(table.Table);
  dart.addTypeCaches(table.Table);
  dart.setMethodSignature(table.Table, () => ({
    __proto__: dart.getMethods(table.Table.__proto__),
    saveContext: dart.fnType(multi_page.WidgetContext, []),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setGetterSignature(table.Table, () => ({
    __proto__: dart.getGetters(table.Table.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(table.Table, I[1]);
  dart.setFieldSignature(table.Table, () => ({
    __proto__: dart.getFields(table.Table.__proto__),
    children: dart.finalFieldType(core.List$(table.TableRow)),
    border: dart.finalFieldType(dart.nullable(table.TableBorder)),
    defaultVerticalAlignment: dart.finalFieldType(table.TableCellVerticalAlignment),
    tableWidth: dart.finalFieldType(table.TableWidth),
    [_widths]: dart.finalFieldType(core.List$(dart.nullable(core.double))),
    [_heights]: dart.finalFieldType(core.List$(core.double)),
    [_context]: dart.finalFieldType(table._TableContext),
    defaultColumnWidth: dart.finalFieldType(table.TableColumnWidth),
    columnWidths: dart.finalFieldType(dart.nullable(core.Map$(core.int, table.TableColumnWidth)))
  }));
  var value$0 = dart.privateName(progress, "CircularProgressIndicator.value");
  var color$1 = dart.privateName(progress, "CircularProgressIndicator.color");
  var backgroundColor$ = dart.privateName(progress, "CircularProgressIndicator.backgroundColor");
  var strokeWidth$ = dart.privateName(progress, "CircularProgressIndicator.strokeWidth");
  progress.CircularProgressIndicator = class CircularProgressIndicator extends widget$.Widget {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[7], 44, 23, "context");
      if (constraints == null) dart.nullFailed(I[7], 44, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[7], 45, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      let t0, t1, t0$;
      if (context == null) dart.nullFailed(I[7], 50, 22, "context");
      super.paint(context);
      let adjustedValue = this.value[$clamp](0.00001, 0.99999);
      let rx = dart.notNull(dart.nullCheck(this.box).width) / 2;
      let ry = dart.notNull(dart.nullCheck(this.box).height) / 2;
      let angleEnd = 1.5707963267948966 - 3.141592653589793 * 2 * adjustedValue;
      let startTop = new point$.PdfPoint.new(dart.notNull(dart.nullCheck(this.box).x) + rx + math.cos(1.5707963267948966) * rx, dart.notNull(dart.nullCheck(this.box).y) + ry + math.sin(1.5707963267948966) * ry);
      let endTop = new point$.PdfPoint.new(dart.notNull(dart.nullCheck(this.box).x) + rx + math.cos(angleEnd) * rx, dart.notNull(dart.nullCheck(this.box).y) + ry + math.sin(angleEnd) * ry);
      let startBottom = new point$.PdfPoint.new(dart.notNull(dart.nullCheck(this.box).x) + rx + math.cos(1.5707963267948966) * (rx - dart.notNull(this.strokeWidth)), dart.notNull(dart.nullCheck(this.box).y) + ry + math.sin(1.5707963267948966) * (ry - dart.notNull(this.strokeWidth)));
      let endBottom = new point$.PdfPoint.new(dart.notNull(dart.nullCheck(this.box).x) + rx + math.cos(angleEnd) * (rx - dart.notNull(this.strokeWidth)), dart.notNull(dart.nullCheck(this.box).y) + ry + math.sin(angleEnd) * (ry - dart.notNull(this.strokeWidth)));
      if (this.backgroundColor != null && dart.notNull(this.value) < 1) {
        t0 = context.canvas;
        (() => {
          t0.moveTo(startTop.x, startTop.y);
          t0.bezierArc(startTop.x, startTop.y, rx, ry, endTop.x, endTop.y, {large: adjustedValue < 0.5, sweep: true});
          t0.lineTo(endBottom.x, endBottom.y);
          t0.bezierArc(endBottom.x, endBottom.y, rx - dart.notNull(this.strokeWidth), ry - dart.notNull(this.strokeWidth), startBottom.x, startBottom.y, {large: adjustedValue < 0.5});
          t0.lineTo(startTop.x, startTop.y);
          t0.setFillColor(this.backgroundColor);
          t0.fillPath();
          return t0;
        })();
      }
      if (dart.notNull(this.value) > 0) {
        t0$ = context.canvas;
        (() => {
          t0$.moveTo(startTop.x, startTop.y);
          t0$.bezierArc(startTop.x, startTop.y, rx, ry, endTop.x, endTop.y, {large: adjustedValue > 0.5});
          t0$.lineTo(endBottom.x, endBottom.y);
          t0$.bezierArc(endBottom.x, endBottom.y, rx - dart.notNull(this.strokeWidth), ry - dart.notNull(this.strokeWidth), startBottom.x, startBottom.y, {large: adjustedValue > 0.5, sweep: true});
          t0$.lineTo(startTop.x, startTop.y);
          t0$.setFillColor((t1 = this.color, t1 == null ? colors.PdfColors.indigo : t1));
          t0$.fillPath();
          return t0$;
        })();
      }
    }
  };
  (progress.CircularProgressIndicator.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[7], 26, 22, "value");
    let color = opts && 'color' in opts ? opts.color : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 4;
    if (strokeWidth == null) dart.nullFailed(I[7], 28, 12, "strokeWidth");
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[value$0] = value;
    this[color$1] = color;
    this[strokeWidth$] = strokeWidth;
    this[backgroundColor$] = backgroundColor;
    progress.CircularProgressIndicator.__proto__.new.call(this);
    ;
  }).prototype = progress.CircularProgressIndicator.prototype;
  dart.addTypeTests(progress.CircularProgressIndicator);
  dart.addTypeCaches(progress.CircularProgressIndicator);
  dart.setMethodSignature(progress.CircularProgressIndicator, () => ({
    __proto__: dart.getMethods(progress.CircularProgressIndicator.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(progress.CircularProgressIndicator, I[8]);
  dart.setFieldSignature(progress.CircularProgressIndicator, () => ({
    __proto__: dart.getFields(progress.CircularProgressIndicator.__proto__),
    value: dart.finalFieldType(core.double),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var backgroundColor$0 = dart.privateName(progress, "LinearProgressIndicator.backgroundColor");
  var minHeight$ = dart.privateName(progress, "LinearProgressIndicator.minHeight");
  var value$1 = dart.privateName(progress, "LinearProgressIndicator.value");
  var valueColor$ = dart.privateName(progress, "LinearProgressIndicator.valueColor");
  progress.LinearProgressIndicator = class LinearProgressIndicator extends widget$.Widget {
    get backgroundColor() {
      return this[backgroundColor$0];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get minHeight() {
      return this[minHeight$];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    get valueColor() {
      return this[valueColor$];
    }
    set valueColor(value) {
      super.valueColor = value;
    }
    layout(context, constraints, opts) {
      let t0;
      if (context == null) dart.nullFailed(I[7], 129, 23, "context");
      if (constraints == null) dart.nullFailed(I[7], 129, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[7], 130, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, new geometry.BoxConstraints.new({minWidth: 1 / 0, minHeight: (t0 = this.minHeight, t0 == null ? 4.0 : t0)}).enforce(constraints).smallest);
    }
    paint(context) {
      let t0, t0$, t0$0, t0$1;
      if (context == null) dart.nullFailed(I[7], 141, 22, "context");
      super.paint(context);
      let vc = this.value[$clamp](0.0, 1.0);
      let _valueColor = (t0 = this.valueColor, t0 == null ? colors.PdfColors.blue : t0);
      let _backgroundColor = (t0$ = this.backgroundColor, t0$ == null ? _valueColor.shade(0.1) : t0$);
      if (vc < 1.0) {
        let epsilon = vc === 0 ? 0 : 0.01;
        t0$0 = context.canvas;
        (() => {
          t0$0.drawRect(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(this.box).width) * vc - epsilon, dart.nullCheck(this.box).bottom, dart.notNull(dart.nullCheck(this.box).width) * (1 - vc) + epsilon, dart.nullCheck(this.box).height);
          t0$0.setFillColor(_backgroundColor);
          t0$0.fillPath();
          return t0$0;
        })();
      }
      if (vc > 0.0) {
        t0$1 = context.canvas;
        (() => {
          t0$1.drawRect(dart.nullCheck(this.box).left, dart.nullCheck(this.box).bottom, dart.notNull(dart.nullCheck(this.box).width) * vc, dart.nullCheck(this.box).height);
          t0$1.setFillColor(_valueColor);
          t0$1.fillPath();
          return t0$1;
        })();
      }
    }
  };
  (progress.LinearProgressIndicator.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[7], 109, 19, "value");
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
    this[value$1] = value;
    this[backgroundColor$0] = backgroundColor;
    this[valueColor$] = valueColor;
    this[minHeight$] = minHeight;
    progress.LinearProgressIndicator.__proto__.new.call(this);
    ;
  }).prototype = progress.LinearProgressIndicator.prototype;
  dart.addTypeTests(progress.LinearProgressIndicator);
  dart.addTypeCaches(progress.LinearProgressIndicator);
  dart.setMethodSignature(progress.LinearProgressIndicator, () => ({
    __proto__: dart.getMethods(progress.LinearProgressIndicator.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(progress.LinearProgressIndicator, I[8]);
  dart.setFieldSignature(progress.LinearProgressIndicator, () => ({
    __proto__: dart.getFields(progress.LinearProgressIndicator.__proto__),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    minHeight: dart.finalFieldType(dart.nullable(core.double)),
    value: dart.finalFieldType(core.double),
    valueColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  var x$ = dart.privateName(use, "SvgUse.x");
  var y$ = dart.privateName(use, "SvgUse.y");
  var width$0 = dart.privateName(use, "SvgUse.width");
  var height$ = dart.privateName(use, "SvgUse.height");
  var href$ = dart.privateName(use, "SvgUse.href");
  var brush$0 = dart.privateName(operation, "SvgOperation.brush");
  var clip$ = dart.privateName(operation, "SvgOperation.clip");
  var transform$0 = dart.privateName(operation, "SvgOperation.transform");
  var painter$0 = dart.privateName(operation, "SvgOperation.painter");
  operation.SvgOperation = class SvgOperation extends core.Object {
    get brush() {
      return this[brush$0];
    }
    set brush(value) {
      super.brush = value;
    }
    get clip() {
      return this[clip$];
    }
    set clip(value) {
      super.clip = value;
    }
    get transform() {
      return this[transform$0];
    }
    set transform(value) {
      super.transform = value;
    }
    get painter() {
      return this[painter$0];
    }
    set painter(value) {
      super.painter = value;
    }
    static fromXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[10], 36, 18, "element");
      if (painter == null) dart.nullFailed(I[10], 36, 38, "painter");
      if (brush == null) dart.nullFailed(I[10], 36, 56, "brush");
      if (element.getAttribute("visibility") === "hidden") {
        return null;
      }
      if (element.getAttribute("display") === "none") {
        return null;
      }
      switch (element.name.local) {
        case "circle":
        {
          return path.SvgPath.fromCircleXml(element, painter, brush);
        }
        case "ellipse":
        {
          return path.SvgPath.fromEllipseXml(element, painter, brush);
        }
        case "g":
        {
          return group.SvgGroup.fromXml(element, painter, brush);
        }
        case "image":
        {
          return image$0.SvgImg.fromXml(element, painter, brush);
        }
        case "line":
        {
          return path.SvgPath.fromLineXml(element, painter, brush);
        }
        case "path":
        {
          return path.SvgPath.fromXml(element, painter, brush);
        }
        case "polygon":
        {
          return path.SvgPath.fromPolygonXml(element, painter, brush);
        }
        case "polyline":
        {
          return path.SvgPath.fromPolylineXml(element, painter, brush);
        }
        case "rect":
        {
          return path.SvgPath.fromRectXml(element, painter, brush);
        }
        case "symbol":
        {
          return symbol.SvgSymbol.fromXml(element, painter, brush);
        }
        case "text":
        {
          return text$0.SvgText.fromXml(element, painter, brush);
        }
        case "use":
        {
          return use.SvgUse.fromXml(element, painter, brush);
        }
      }
      return null;
    }
    paint(canvas) {
      if (canvas == null) dart.nullFailed(I[10], 83, 26, "canvas");
      canvas.saveContext();
      this.clip.apply(canvas);
      if (dart.test(this.transform.isNotEmpty)) {
        canvas.setTransform(dart.nullCheck(this.transform.matrix));
      }
      if (dart.nullCheck(this.brush.opacity) < 1.0 || this.brush.blendMode != null) {
        canvas.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.opacity === 1 ? null : this.brush.opacity, blendMode: this.brush.blendMode}));
      }
      if (this.brush.mask != null) {
        dart.nullCheck(this.brush.mask).apply(canvas);
      }
      this.paintShape(canvas);
      canvas.restoreContext();
    }
    draw(canvas) {
      if (canvas == null) dart.nullFailed(I[10], 105, 25, "canvas");
      canvas.saveContext();
      if (dart.test(this.transform.isNotEmpty)) {
        canvas.setTransform(dart.nullCheck(this.transform.matrix));
      }
      this.drawShape(canvas);
      canvas.restoreContext();
    }
  };
  (operation.SvgOperation.new = function(brush, clip, transform, painter) {
    if (brush == null) dart.nullFailed(I[10], 33, 21, "brush");
    if (clip == null) dart.nullFailed(I[10], 33, 33, "clip");
    if (transform == null) dart.nullFailed(I[10], 33, 44, "transform");
    if (painter == null) dart.nullFailed(I[10], 33, 60, "painter");
    this[brush$0] = brush;
    this[clip$] = clip;
    this[transform$0] = transform;
    this[painter$0] = painter;
    ;
  }).prototype = operation.SvgOperation.prototype;
  dart.addTypeTests(operation.SvgOperation);
  dart.addTypeCaches(operation.SvgOperation);
  dart.setMethodSignature(operation.SvgOperation, () => ({
    __proto__: dart.getMethods(operation.SvgOperation.__proto__),
    paint: dart.fnType(dart.void, [graphics.PdfGraphics]),
    draw: dart.fnType(dart.void, [graphics.PdfGraphics])
  }));
  dart.setLibraryUri(operation.SvgOperation, I[11]);
  dart.setFieldSignature(operation.SvgOperation, () => ({
    __proto__: dart.getFields(operation.SvgOperation.__proto__),
    brush: dart.finalFieldType(brush$.SvgBrush),
    clip: dart.finalFieldType(clip_path.SvgClipPath),
    transform: dart.finalFieldType(transform$.SvgTransform),
    painter: dart.finalFieldType(painter$.SvgPainter)
  }));
  use.SvgUse = class SvgUse extends operation.SvgOperation {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get href() {
      return this[href$];
    }
    set href(value) {
      super.href = value;
    }
    static fromXml(element, painter, brush) {
      let t0;
      if (element == null) dart.nullFailed(I[9], 42, 16, "element");
      if (painter == null) dart.nullFailed(I[9], 43, 16, "painter");
      if (brush == null) dart.nullFailed(I[9], 44, 14, "brush");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let width = dart.nullCheck(parser$.SvgParser.getNumeric(element, "width", _brush, {defaultValue: 0.0})).sizeValue;
      let height = dart.nullCheck(parser$.SvgParser.getNumeric(element, "height", _brush, {defaultValue: 0.0})).sizeValue;
      let x = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x", _brush, {defaultValue: 0.0})).sizeValue;
      let y = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y", _brush, {defaultValue: 0.0})).sizeValue;
      let href = null;
      let hrefAttr = (t0 = element.getAttribute("href"), t0 == null ? element.getAttribute("href", {namespace: "http://www.w3.org/1999/xlink"}) : t0);
      if (hrefAttr != null) {
        let hrefElement = painter.parser.findById(hrefAttr[$substring](1));
        if (hrefElement != null) {
          href = operation.SvgOperation.fromXml(hrefElement, painter, _brush);
        }
      }
      return new use.SvgUse.new(x, y, width, height, href, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    paintShape(canvas) {
      let t0;
      if (canvas == null) dart.nullFailed(I[9], 94, 31, "canvas");
      if (this.x !== 0 || this.y !== 0) {
        canvas.setTransform(vector_math_64.Matrix4.translationValues(this.x, this.y, 0.0));
      }
      t0 = this.href;
      t0 == null ? null : t0.paint(canvas);
    }
    drawShape(canvas) {
      let t0;
      if (canvas == null) dart.nullFailed(I[9], 102, 30, "canvas");
      if (this.x !== 0 || this.y !== 0) {
        canvas.setTransform(vector_math_64.Matrix4.translationValues(this.x, this.y, 0.0));
      }
      t0 = this.href;
      t0 == null ? null : t0.draw(canvas);
    }
    boundingBox() {
      return dart.nullCheck(this.href).boundingBox();
    }
  };
  (use.SvgUse.new = function(x, y, width, height, href, brush, clip, transform, painter) {
    if (x == null) dart.nullFailed(I[9], 30, 10, "x");
    if (y == null) dart.nullFailed(I[9], 31, 10, "y");
    if (width == null) dart.nullFailed(I[9], 32, 10, "width");
    if (height == null) dart.nullFailed(I[9], 33, 10, "height");
    if (brush == null) dart.nullFailed(I[9], 35, 14, "brush");
    if (clip == null) dart.nullFailed(I[9], 36, 17, "clip");
    if (transform == null) dart.nullFailed(I[9], 37, 18, "transform");
    if (painter == null) dart.nullFailed(I[9], 38, 16, "painter");
    this[x$] = x;
    this[y$] = y;
    this[width$0] = width;
    this[height$] = height;
    this[href$] = href;
    use.SvgUse.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = use.SvgUse.prototype;
  dart.addTypeTests(use.SvgUse);
  dart.addTypeCaches(use.SvgUse);
  dart.setMethodSignature(use.SvgUse, () => ({
    __proto__: dart.getMethods(use.SvgUse.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setLibraryUri(use.SvgUse, I[12]);
  dart.setFieldSignature(use.SvgUse, () => ({
    __proto__: dart.getFields(use.SvgUse.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    href: dart.finalFieldType(dart.nullable(operation.SvgOperation))
  }));
  var x$0 = dart.privateName(text$0, "SvgText.x");
  var y$0 = dart.privateName(text$0, "SvgText.y");
  var dx$ = dart.privateName(text$0, "SvgText.dx");
  var text$2 = dart.privateName(text$0, "SvgText.text");
  var font$0 = dart.privateName(text$0, "SvgText.font");
  var metrics$ = dart.privateName(text$0, "SvgText.metrics");
  var tspan$ = dart.privateName(text$0, "SvgText.tspan");
  var _name$1 = dart.privateName(brush$, "_name");
  var PdfPoint_y = dart.privateName(point$, "PdfPoint.y");
  var PdfPoint_x = dart.privateName(point$, "PdfPoint.x");
  text$0.SvgText = class SvgText extends operation.SvgOperation {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    get dx() {
      return this[dx$];
    }
    set dx(value) {
      super.dx = value;
    }
    get text() {
      return this[text$2];
    }
    set text(value) {
      super.text = value;
    }
    get font() {
      return this[font$0];
    }
    set font(value) {
      super.font = value;
    }
    get metrics() {
      return this[metrics$];
    }
    set metrics(value) {
      super.metrics = value;
    }
    get tspan() {
      return this[tspan$];
    }
    set tspan(value) {
      super.tspan = value;
    }
    static fromXml(element, painter, brush, offset = C[26] || CT.C26) {
      let t0, t0$, t0$0, t0$1;
      if (element == null) dart.nullFailed(I[13], 47, 16, "element");
      if (painter == null) dart.nullFailed(I[13], 48, 16, "painter");
      if (brush == null) dart.nullFailed(I[13], 49, 14, "brush");
      if (offset == null) dart.nullFailed(I[13], 50, 14, "offset");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let dx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "dx", _brush, {defaultValue: 0.0})).sizeValue;
      let dy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "dy", _brush, {defaultValue: 0.0})).sizeValue;
      let x = (t0 = parser$.SvgParser.getNumeric(element, "x", _brush), t0 == null ? null : t0.sizeValue);
      let y = (t0$ = parser$.SvgParser.getNumeric(element, "y", _brush), t0$ == null ? null : t0$.sizeValue);
      let text = element.children.where(dart.fn(node => {
        if (node == null) dart.nullFailed(I[13], 62, 17, "node");
        return text$.XmlText.is(node) || cdata.XmlCDATA.is(node);
      }, T$.XmlNodeTobool()))[$map](core.String, dart.fn(node => {
        if (node == null) dart.nullFailed(I[13], 63, 15, "node");
        return node.text;
      }, T$.XmlNodeToString()))[$join]()[$trim]();
      let font = dart.nullCheck(painter.getFontCache(dart.nullCheck(_brush.fontFamily), dart.nullCheck(_brush.fontStyle), dart.nullCheck(_brush.fontWeight)));
      let pdfFont = dart.nullCheck(font.getFont(widget$.Context.new({document: painter.document})));
      let metrics = pdfFont.stringMetrics(text)['*'](dart.nullCheck(_brush.fontSize).sizeValue);
      offset = new point$.PdfPoint.new(dart.notNull((t0$0 = x, t0$0 == null ? offset.x : t0$0)) + dart.notNull(dx), dart.notNull((t0$1 = y, t0$1 == null ? offset.y : t0$1)) + dart.notNull(dy));
      switch (dart.nullCheck(_brush.textAnchor)) {
        case C[23] || CT.C23:
        {
          break;
        }
        case C[24] || CT.C24:
        {
          offset = new point$.PdfPoint.new(dart.notNull(offset.x) - dart.notNull(metrics.width) / 2, offset.y);
          break;
        }
        case C[25] || CT.C25:
        {
          offset = new point$.PdfPoint.new(dart.notNull(offset.x) - dart.notNull(metrics.width), offset.y);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let childOffset = new point$.PdfPoint.new(dart.notNull(offset.x) + dart.notNull(metrics.advanceWidth), offset.y);
      let tspan = element.children.whereType(element$.XmlElement)[$map](text$0.SvgText, dart.fn(e => {
        if (e == null) dart.nullFailed(I[13], 86, 74, "e");
        let child = text$0.SvgText.fromXml(e, painter, _brush, childOffset);
        childOffset = new point$.PdfPoint.new(dart.nullCheck(child.x) + dart.notNull(child.dx), dart.nullCheck(child.y));
        return child;
      }, T$.XmlElementToSvgText()));
      return new text$0.SvgText.new(offset.x, offset.y, metrics.advanceWidth, text, pdfFont, tspan, metrics, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    paintShape(canvas) {
      let t1, t0, t0$;
      if (canvas == null) dart.nullFailed(I[13], 122, 31, "canvas");
      t0 = canvas;
      (() => {
        t0.saveContext();
        t0.setTransform((t1 = vector_math_64.Matrix4.identity(), (() => {
          t1.scale(1.0, -1.0);
          t1.translate(this.x, -dart.nullCheck(this.y));
          return t1;
        })()));
        return t0;
      })();
      if (dart.test(dart.nullCheck(this.brush.fill).isNotEmpty)) {
        dart.nullCheck(this.brush.fill).setFillColor(this, canvas);
        if (dart.nullCheck(this.brush.fillOpacity) < 1) {
          t0$ = canvas;
          (() => {
            t0$.saveContext();
            t0$.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.fillOpacity}));
            return t0$;
          })();
        }
        canvas.drawString(this.font, dart.nullCheck(this.brush.fontSize).sizeValue, this.text, 0.0, 0.0);
        if (dart.nullCheck(this.brush.fillOpacity) < 1) {
          canvas.restoreContext();
        }
      }
      if (dart.test(dart.nullCheck(this.brush.stroke).isNotEmpty)) {
        if (this.brush.strokeWidth != null) {
          canvas.setLineWidth(dart.nullCheck(this.brush.strokeWidth).sizeValue);
        }
        if (this.brush.strokeDashArray != null) {
          canvas.setLineDashPattern(dart.nullCheck(this.brush.strokeDashArray));
        }
        if (dart.nullCheck(this.brush.strokeOpacity) < 1) {
          canvas.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.strokeOpacity}));
        }
        dart.nullCheck(this.brush.stroke).setStrokeColor(this, canvas);
        canvas.drawString(this.font, dart.nullCheck(this.brush.fontSize).sizeValue, this.text, 0.0, 0.0, {mode: graphics.PdfTextRenderingMode.stroke});
      }
      canvas.restoreContext();
      for (let span of this.tspan) {
        span.paint(canvas);
      }
    }
    drawShape(canvas) {
      let t1, t0;
      if (canvas == null) dart.nullFailed(I[13], 165, 30, "canvas");
      t0 = canvas;
      (() => {
        t0.saveContext();
        t0.setTransform((t1 = vector_math_64.Matrix4.identity(), (() => {
          t1.scale(1.0, -1.0);
          t1.translate(this.x, -dart.nullCheck(this.y));
          return t1;
        })()));
        t0.drawString(this.font, dart.nullCheck(this.brush.fontSize).sizeValue, this.text, 0.0, 0.0, {mode: graphics.PdfTextRenderingMode.clip});
        t0.restoreContext();
        return t0;
      })();
      for (let span of this.tspan) {
        span.draw(canvas);
      }
    }
    boundingBox() {
      let b = this.metrics.toPdfRect();
      let x = b.x;
      let y = b.y;
      let w = b.width;
      let h = b.height;
      for (let child of this.tspan) {
        let b = child.boundingBox();
        x = math.min(core.double, b.x, x);
        y = math.min(core.double, b.y, y);
        w = math.max(core.double, b.width, w);
        h = math.max(core.double, b.height, w);
      }
      return new rect$.PdfRect.new(x, y, w, h);
    }
  };
  (text$0.SvgText.new = function(x, y, dx, text, font, tspan, metrics, brush, clip, transform, painter) {
    if (dx == null) dart.nullFailed(I[13], 35, 10, "dx");
    if (text == null) dart.nullFailed(I[13], 36, 10, "text");
    if (font == null) dart.nullFailed(I[13], 37, 10, "font");
    if (tspan == null) dart.nullFailed(I[13], 38, 10, "tspan");
    if (metrics == null) dart.nullFailed(I[13], 39, 10, "metrics");
    if (brush == null) dart.nullFailed(I[13], 40, 14, "brush");
    if (clip == null) dart.nullFailed(I[13], 41, 17, "clip");
    if (transform == null) dart.nullFailed(I[13], 42, 18, "transform");
    if (painter == null) dart.nullFailed(I[13], 43, 16, "painter");
    this[x$0] = x;
    this[y$0] = y;
    this[dx$] = dx;
    this[text$2] = text;
    this[font$0] = font;
    this[tspan$] = tspan;
    this[metrics$] = metrics;
    text$0.SvgText.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = text$0.SvgText.prototype;
  dart.addTypeTests(text$0.SvgText);
  dart.addTypeCaches(text$0.SvgText);
  dart.setMethodSignature(text$0.SvgText, () => ({
    __proto__: dart.getMethods(text$0.SvgText.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setLibraryUri(text$0.SvgText, I[14]);
  dart.setFieldSignature(text$0.SvgText, () => ({
    __proto__: dart.getFields(text$0.SvgText.__proto__),
    x: dart.finalFieldType(dart.nullable(core.double)),
    y: dart.finalFieldType(dart.nullable(core.double)),
    dx: dart.finalFieldType(core.double),
    text: dart.finalFieldType(core.String),
    font: dart.finalFieldType(font.PdfFont),
    metrics: dart.finalFieldType(font_metrics.PdfFontMetrics),
    tspan: dart.finalFieldType(core.Iterable$(text$0.SvgText))
  }));
  var children$1 = dart.privateName(group, "SvgGroup.children");
  group.SvgGroup = class SvgGroup extends operation.SvgOperation {
    get children() {
      return this[children$1];
    }
    set children(value) {
      super.children = value;
    }
    static fromXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[16], 38, 18, "element");
      if (painter == null) dart.nullFailed(I[16], 38, 38, "painter");
      if (brush == null) dart.nullFailed(I[16], 38, 56, "brush");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let children = element.children.whereType(element$.XmlElement)[$where](dart.fn(element => {
        if (element == null) dart.nullFailed(I[16], 43, 17, "element");
        return element.name.local !== "symbol";
      }, T$.XmlElementTobool()))[$map](T$.SvgOperationN(), dart.fn(child => {
        if (child == null) dart.nullFailed(I[16], 45, 14, "child");
        return operation.SvgOperation.fromXml(child, painter, _brush);
      }, T$.XmlElementToSvgOperationN()))[$whereType](operation.SvgOperation);
      return new group.SvgGroup.new(children, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    paintShape(canvas) {
      if (canvas == null) dart.nullFailed(I[16], 60, 31, "canvas");
      for (let child of this.children) {
        child.paint(canvas);
      }
    }
    drawShape(canvas) {
      if (canvas == null) dart.nullFailed(I[16], 67, 30, "canvas");
      for (let child of this.children) {
        child.draw(canvas);
      }
    }
    boundingBox() {
      let x = 1 / 0;
      let y = 1 / 0;
      let w = 0.0;
      let h = 0.0;
      for (let child of this.children) {
        let b = child.boundingBox();
        x = math.min(core.double, b.x, x);
        y = math.min(core.double, b.y, y);
        w = math.max(core.double, b.width, w);
        h = math.max(core.double, b.height, w);
      }
      return new rect$.PdfRect.new(x, y, w, h);
    }
  };
  (group.SvgGroup.new = function(children, brush, clip, transform, painter) {
    if (children == null) dart.nullFailed(I[16], 30, 10, "children");
    if (brush == null) dart.nullFailed(I[16], 31, 14, "brush");
    if (clip == null) dart.nullFailed(I[16], 32, 17, "clip");
    if (transform == null) dart.nullFailed(I[16], 33, 18, "transform");
    if (painter == null) dart.nullFailed(I[16], 34, 16, "painter");
    this[children$1] = children;
    group.SvgGroup.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = group.SvgGroup.prototype;
  dart.addTypeTests(group.SvgGroup);
  dart.addTypeCaches(group.SvgGroup);
  dart.setMethodSignature(group.SvgGroup, () => ({
    __proto__: dart.getMethods(group.SvgGroup.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setLibraryUri(group.SvgGroup, I[17]);
  dart.setFieldSignature(group.SvgGroup, () => ({
    __proto__: dart.getFields(group.SvgGroup.__proto__),
    children: dart.finalFieldType(core.Iterable$(operation.SvgOperation))
  }));
  symbol.SvgSymbol = class SvgSymbol extends group.SvgGroup {
    static fromXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[15], 37, 18, "element");
      if (painter == null) dart.nullFailed(I[15], 37, 38, "painter");
      if (brush == null) dart.nullFailed(I[15], 37, 56, "brush");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let children = element.children.whereType(element$.XmlElement)[$map](T$.SvgOperationN(), dart.fn(child => {
        if (child == null) dart.nullFailed(I[15], 43, 14, "child");
        return operation.SvgOperation.fromXml(child, painter, _brush);
      }, T$.XmlElementToSvgOperationN()))[$whereType](operation.SvgOperation);
      return new symbol.SvgSymbol.new(children, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    paintShape(canvas) {
      if (canvas == null) dart.nullFailed(I[15], 56, 31, "canvas");
      for (let child of this.children) {
        child.paint(canvas);
      }
    }
  };
  (symbol.SvgSymbol.new = function(children, brush, clip, transform, painter) {
    if (children == null) dart.nullFailed(I[15], 29, 28, "children");
    if (brush == null) dart.nullFailed(I[15], 30, 14, "brush");
    if (clip == null) dart.nullFailed(I[15], 31, 17, "clip");
    if (transform == null) dart.nullFailed(I[15], 32, 18, "transform");
    if (painter == null) dart.nullFailed(I[15], 33, 16, "painter");
    symbol.SvgSymbol.__proto__.new.call(this, children, brush, clip, transform, painter);
    ;
  }).prototype = symbol.SvgSymbol.prototype;
  dart.addTypeTests(symbol.SvgSymbol);
  dart.addTypeCaches(symbol.SvgSymbol);
  dart.setLibraryUri(symbol.SvgSymbol, I[18]);
  var d$ = dart.privateName(path, "SvgPath.d");
  path.SvgPath = class SvgPath extends operation.SvgOperation {
    get d() {
      return this[d$];
    }
    set d(value) {
      super.d = value;
    }
    static fromXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[19], 39, 16, "element");
      if (painter == null) dart.nullFailed(I[19], 40, 16, "painter");
      if (brush == null) dart.nullFailed(I[19], 41, 14, "brush");
      let d = element.getAttribute("d");
      if (d == null) {
        dart.throw(core.Exception.new("Path element must contain \"d\" attribute"));
      }
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static fromRectXml(element, painter, brush) {
      let t0, t0$, t0$0;
      if (element == null) dart.nullFailed(I[19], 60, 16, "element");
      if (painter == null) dart.nullFailed(I[19], 61, 16, "painter");
      if (brush == null) dart.nullFailed(I[19], 62, 14, "brush");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let x = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x", _brush, {defaultValue: 0.0})).sizeValue;
      let y = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y", _brush, {defaultValue: 0.0})).sizeValue;
      let width = dart.nullCheck(parser$.SvgParser.getNumeric(element, "width", _brush, {defaultValue: 0.0})).sizeValue;
      let height = dart.nullCheck(parser$.SvgParser.getNumeric(element, "height", _brush, {defaultValue: 0.0})).sizeValue;
      let rx = (t0 = parser$.SvgParser.getNumeric(element, "rx", _brush), t0 == null ? null : t0.sizeValue);
      let ry = (t0$ = parser$.SvgParser.getNumeric(element, "ry", _brush), t0$ == null ? null : t0$.sizeValue);
      ry == null ? ry = (t0$0 = rx, t0$0 == null ? 0.0 : t0$0) : null;
      rx == null ? rx = ry : null;
      let topRight = rx !== 0 || ry !== 0 ? "a " + dart.str(rx) + " " + dart.str(ry) + " 0 0 1 " + dart.str(rx) + " " + dart.str(ry) : "";
      let bottomRight = rx !== 0 || ry !== 0 ? "a " + dart.str(rx) + " " + dart.str(ry) + " 0 0 1 " + dart.str(-dart.notNull(rx)) + " " + dart.str(ry) : "";
      let bottomLeft = rx !== 0 || ry !== 0 ? "a " + dart.str(rx) + " " + dart.str(ry) + " 0 0 1 " + dart.str(-dart.notNull(rx)) + " " + dart.str(-dart.notNull(ry)) : "";
      let topLeft = rx !== 0 || ry !== 0 ? "a " + dart.str(rx) + " " + dart.str(ry) + " 0 0 1 " + dart.str(rx) + " " + dart.str(-dart.notNull(ry)) : "";
      let d = "M" + dart.str(dart.notNull(x) + dart.notNull(rx)) + " " + dart.str(y) + "h" + dart.str(dart.notNull(width) - dart.notNull(rx) * 2) + topRight + "v" + dart.str(dart.notNull(height) - dart.notNull(ry) * 2) + bottomRight + "h" + dart.str(-(dart.notNull(width) - dart.notNull(rx) * 2)) + bottomLeft + "v" + dart.str(-(dart.notNull(height) - dart.notNull(ry) * 2)) + topLeft + "z";
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static fromCircleXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[19], 99, 16, "element");
      if (painter == null) dart.nullFailed(I[19], 100, 16, "painter");
      if (brush == null) dart.nullFailed(I[19], 101, 14, "brush");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let cx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cx", _brush)).sizeValue;
      let cy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cy", _brush)).sizeValue;
      let r = dart.nullCheck(parser$.SvgParser.getNumeric(element, "r", _brush)).sizeValue;
      let d = "M" + dart.str(dart.notNull(cx) - dart.notNull(r)) + "," + dart.str(cy) + "A" + dart.str(r) + "," + dart.str(r) + " 0,0,0 " + dart.str(dart.notNull(cx) + dart.notNull(r)) + "," + dart.str(cy) + "A" + dart.str(r) + "," + dart.str(r) + " 0,0,0 " + dart.str(dart.notNull(cx) - dart.notNull(r)) + "," + dart.str(cy) + "z";
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static fromEllipseXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[19], 121, 16, "element");
      if (painter == null) dart.nullFailed(I[19], 122, 16, "painter");
      if (brush == null) dart.nullFailed(I[19], 123, 14, "brush");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let cx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cx", _brush)).sizeValue;
      let cy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cy", _brush)).sizeValue;
      let rx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "rx", _brush)).sizeValue;
      let ry = dart.nullCheck(parser$.SvgParser.getNumeric(element, "ry", _brush)).sizeValue;
      let d = "M" + dart.str(dart.notNull(cx) - dart.notNull(rx)) + "," + dart.str(cy) + "A" + dart.str(rx) + "," + dart.str(ry) + " 0,0,0 " + dart.str(dart.notNull(cx) + dart.notNull(rx)) + "," + dart.str(cy) + "A" + dart.str(rx) + "," + dart.str(ry) + " 0,0,0 " + dart.str(dart.notNull(cx) - dart.notNull(rx)) + "," + dart.str(cy) + "z";
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static fromPolylineXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[19], 144, 16, "element");
      if (painter == null) dart.nullFailed(I[19], 145, 16, "painter");
      if (brush == null) dart.nullFailed(I[19], 146, 14, "brush");
      let points = element.getAttribute("points");
      let d = "M" + dart.str(points);
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static fromPolygonXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[19], 163, 16, "element");
      if (painter == null) dart.nullFailed(I[19], 164, 16, "painter");
      if (brush == null) dart.nullFailed(I[19], 165, 14, "brush");
      let points = element.getAttribute("points");
      let d = "M" + dart.str(points) + "z";
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static fromLineXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[19], 181, 16, "element");
      if (painter == null) dart.nullFailed(I[19], 182, 16, "painter");
      if (brush == null) dart.nullFailed(I[19], 183, 14, "brush");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let x1 = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x1", _brush)).sizeValue;
      let y1 = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y1", _brush)).sizeValue;
      let x2 = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x2", _brush)).sizeValue;
      let y2 = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y2", _brush)).sizeValue;
      let d = "M" + dart.str(x1) + " " + dart.str(y1) + " " + dart.str(x2) + " " + dart.str(y2);
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    paintShape(canvas) {
      let t0, t0$, t0$0;
      if (canvas == null) dart.nullFailed(I[19], 205, 31, "canvas");
      if (dart.test(dart.nullCheck(this.brush.fill).isNotEmpty)) {
        dart.nullCheck(this.brush.fill).setFillColor(this, canvas);
        if (dart.nullCheck(this.brush.fillOpacity) < 1) {
          t0 = canvas;
          (() => {
            t0.saveContext();
            t0.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.fillOpacity}));
            return t0;
          })();
        }
        t0$ = canvas;
        (() => {
          t0$.drawShape(this.d);
          t0$.fillPath({evenOdd: dart.nullCheck(this.brush.fillEvenOdd)});
          return t0$;
        })();
        if (dart.nullCheck(this.brush.fillOpacity) < 1) {
          canvas.restoreContext();
        }
      }
      if (dart.test(dart.nullCheck(this.brush.stroke).isNotEmpty)) {
        dart.nullCheck(this.brush.stroke).setStrokeColor(this, canvas);
        if (dart.nullCheck(this.brush.strokeOpacity) < 1) {
          canvas.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.strokeOpacity}));
        }
        t0$0 = canvas;
        (() => {
          t0$0.drawShape(this.d);
          t0$0.setLineCap(dart.nullCheck(this.brush.strokeLineCap));
          t0$0.setLineJoin(dart.nullCheck(this.brush.strokeLineJoin));
          t0$0.setMiterLimit(math.max(core.double, 1.0, dart.nullCheck(this.brush.strokeMiterLimit)));
          t0$0.setLineDashPattern(dart.nullCheck(this.brush.strokeDashArray), dart.nullCheck(this.brush.strokeDashOffset)[$toInt]());
          t0$0.setLineWidth(dart.nullCheck(this.brush.strokeWidth).sizeValue);
          t0$0.strokePath();
          return t0$0;
        })();
      }
    }
    drawShape(canvas) {
      if (canvas == null) dart.nullFailed(I[19], 239, 30, "canvas");
      canvas.drawShape(this.d);
    }
    boundingBox() {
      return graphics.PdfGraphics.shapeBoundingBox(this.d);
    }
  };
  (path.SvgPath.new = function(d, brush, clip, transform, painter) {
    if (d == null) dart.nullFailed(I[19], 31, 10, "d");
    if (brush == null) dart.nullFailed(I[19], 32, 14, "brush");
    if (clip == null) dart.nullFailed(I[19], 33, 17, "clip");
    if (transform == null) dart.nullFailed(I[19], 34, 18, "transform");
    if (painter == null) dart.nullFailed(I[19], 35, 16, "painter");
    this[d$] = d;
    path.SvgPath.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = path.SvgPath.prototype;
  dart.addTypeTests(path.SvgPath);
  dart.addTypeCaches(path.SvgPath);
  dart.setMethodSignature(path.SvgPath, () => ({
    __proto__: dart.getMethods(path.SvgPath.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setLibraryUri(path.SvgPath, I[20]);
  dart.setFieldSignature(path.SvgPath, () => ({
    __proto__: dart.getFields(path.SvgPath.__proto__),
    d: dart.finalFieldType(core.String)
  }));
  var x$1 = dart.privateName(image$0, "SvgImg.x");
  var y$1 = dart.privateName(image$0, "SvgImg.y");
  var width$1 = dart.privateName(image$0, "SvgImg.width");
  var height$0 = dart.privateName(image$0, "SvgImg.height");
  var image$2 = dart.privateName(image$0, "SvgImg.image");
  image$0.SvgImg = class SvgImg extends operation.SvgOperation {
    get x() {
      return this[x$1];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    get width() {
      return this[width$1];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get image() {
      return this[image$2];
    }
    set image(value) {
      super.image = value;
    }
    static fromXml(element, painter, brush) {
      let t0;
      if (element == null) dart.nullFailed(I[21], 45, 16, "element");
      if (painter == null) dart.nullFailed(I[21], 46, 16, "painter");
      if (brush == null) dart.nullFailed(I[21], 47, 14, "brush");
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let width = dart.nullCheck(parser$.SvgParser.getNumeric(element, "width", _brush, {defaultValue: 0.0})).sizeValue;
      let height = dart.nullCheck(parser$.SvgParser.getNumeric(element, "height", _brush, {defaultValue: 0.0})).sizeValue;
      let x = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x", _brush, {defaultValue: 0.0})).sizeValue;
      let y = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y", _brush, {defaultValue: 0.0})).sizeValue;
      let image = null;
      let hrefAttr = (t0 = element.getAttribute("href"), t0 == null ? element.getAttribute("href", {namespace: "http://www.w3.org/1999/xlink"}) : t0);
      if (hrefAttr != null) {
        if (hrefAttr[$startsWith]("data:")) {
          let px = hrefAttr[$substring](hrefAttr[$indexOf](";") + 1);
          if (px[$startsWith]("base64,")) {
            let b = px[$substring](7)[$replaceAll](core.RegExp.new("\\s"), "");
            let bytes = convert.base64.decode(b);
            let img = dart.nullCheck(formats.decodeImage(bytes));
            image = image$.PdfImage.new(painter.document, {image: img.data[$buffer][$asUint8List](), width: img.width, height: img.height});
          }
        }
      }
      return new image$0.SvgImg.new(x, y, width, height, image, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    paintShape(canvas) {
      let t1, t0;
      if (canvas == null) dart.nullFailed(I[21], 109, 31, "canvas");
      if (this.image == null) {
        return;
      }
      let sx = dart.notNull(this.width) / dart.notNull(dart.nullCheck(this.image).width);
      let sy = dart.notNull(this.height) / dart.notNull(dart.nullCheck(this.image).height);
      t0 = canvas;
      (() => {
        t0.setTransform((t1 = vector_math_64.Matrix4.identity(), (() => {
          t1.translate(this.x, dart.notNull(this.y) + dart.notNull(this.height), 0.0);
          t1.scale(sx, -sy);
          return t1;
        })()));
        t0.drawImage(dart.nullCheck(this.image), 0.0, 0.0);
        return t0;
      })();
    }
    drawShape(canvas) {
      if (canvas == null) dart.nullFailed(I[21], 127, 30, "canvas");
    }
    boundingBox() {
      return new rect$.PdfRect.new(this.x, this.y, this.width, this.height);
    }
  };
  (image$0.SvgImg.new = function(x, y, width, height, image, brush, clip, transform, painter) {
    if (x == null) dart.nullFailed(I[21], 33, 10, "x");
    if (y == null) dart.nullFailed(I[21], 34, 10, "y");
    if (width == null) dart.nullFailed(I[21], 35, 10, "width");
    if (height == null) dart.nullFailed(I[21], 36, 10, "height");
    if (brush == null) dart.nullFailed(I[21], 38, 14, "brush");
    if (clip == null) dart.nullFailed(I[21], 39, 17, "clip");
    if (transform == null) dart.nullFailed(I[21], 40, 18, "transform");
    if (painter == null) dart.nullFailed(I[21], 41, 16, "painter");
    this[x$1] = x;
    this[y$1] = y;
    this[width$1] = width;
    this[height$0] = height;
    this[image$2] = image;
    image$0.SvgImg.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = image$0.SvgImg.prototype;
  dart.addTypeTests(image$0.SvgImg);
  dart.addTypeCaches(image$0.SvgImg);
  dart.setMethodSignature(image$0.SvgImg, () => ({
    __proto__: dart.getMethods(image$0.SvgImg.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setLibraryUri(image$0.SvgImg, I[22]);
  dart.setFieldSignature(image$0.SvgImg, () => ({
    __proto__: dart.getFields(image$0.SvgImg.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    image: dart.finalFieldType(dart.nullable(image$.PdfImage))
  }));
  var matrix$ = dart.privateName(transform$, "SvgTransform.matrix");
  transform$.SvgTransform = class SvgTransform extends core.Object {
    get matrix() {
      return this[matrix$];
    }
    set matrix(value) {
      super.matrix = value;
    }
    static fromXml(element) {
      if (element == null) dart.nullFailed(I[23], 25, 43, "element");
      return transform$.SvgTransform.fromString(element.getAttribute("transform"));
    }
    static fromString(transform) {
      let t2, t3;
      if (transform == null) {
        return transform$.SvgTransform.none;
      }
      let mat = vector_math_64.Matrix4.identity();
      for (let m of transform$.SvgTransform._transformRegExp.allMatches(transform)) {
        let name = m.group(1);
        let parameterList = parser$.SvgParser.splitDoubles(dart.nullCheck(m.group(2)))[$toList]();
        switch (name) {
          case "matrix":
          {
            let mm = (() => {
              let t0 = T$.ListOfdouble().of(parameterList);
              t0[$addAll](T$.ListOfdouble().filled(6 - dart.notNull(parameterList[$length]), 0.0));
              return t0;
            })();
            mat.multiply(vector_math_64.Matrix4.new(mm[$_get](0), mm[$_get](1), 0.0, 0.0, mm[$_get](2), mm[$_get](3), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, mm[$_get](4), mm[$_get](5), 0.0, 1.0));
            break;
          }
          case "translate":
          {
            let dx = parameterList[$_get](0);
            let dy = (() => {
              let t1 = T$.ListOfdouble().of(parameterList);
              t1[$add](0.0);
              return t1;
            })()[$_get](1);
            mat.multiply((t2 = vector_math_64.Matrix4.identity(), (() => {
              t2.translate(dx, dy);
              return t2;
            })()));
            break;
          }
          case "scale":
          {
            let sw = parameterList[$_get](0);
            let sh = (() => {
              let t2 = T$.ListOfdouble().of(parameterList);
              t2[$add](sw);
              return t2;
            })()[$_get](1);
            mat.multiply((t3 = vector_math_64.Matrix4.identity(), (() => {
              t3.scale(sw, sh);
              return t3;
            })()));
            break;
          }
          case "rotate":
          {
            let degrees = parameterList[$_get](0);
            let ox = 0.0;
            let oy = 0.0;
            if (dart.notNull(parameterList[$length]) > 1) {
              ox = parameterList[$_get](1);
              oy = (() => {
                let t3 = T$.ListOfdouble().of(parameterList);
                t3[$add](0.0);
                return t3;
              })()[$_get](2);
              mat.translate(ox, oy);
            }
            mat.multiply(vector_math_64.Matrix4.rotationZ(vector_math_64.radians(degrees)));
            if (ox !== 0 || oy !== 0) {
              mat.translate(-dart.notNull(ox), -dart.notNull(oy));
            }
            break;
          }
          case "skewX":
          {
            mat.multiply(vector_math_64.Matrix4.skewX(vector_math_64.radians(parameterList[$_get](0))));
            break;
          }
          case "skewY":
          {
            mat.multiply(vector_math_64.Matrix4.skewY(vector_math_64.radians(parameterList[$_get](0))));
            break;
          }
        }
      }
      return new transform$.SvgTransform.new(mat);
    }
    get isEmpty() {
      return this.matrix == null;
    }
    get isNotEmpty() {
      return this.matrix != null;
    }
  };
  (transform$.SvgTransform.new = function(matrix) {
    this[matrix$] = matrix;
    ;
  }).prototype = transform$.SvgTransform.prototype;
  dart.addTypeTests(transform$.SvgTransform);
  dart.addTypeCaches(transform$.SvgTransform);
  dart.setGetterSignature(transform$.SvgTransform, () => ({
    __proto__: dart.getGetters(transform$.SvgTransform.__proto__),
    isEmpty: core.bool,
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(transform$.SvgTransform, I[24]);
  dart.setFieldSignature(transform$.SvgTransform, () => ({
    __proto__: dart.getFields(transform$.SvgTransform.__proto__),
    matrix: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  dart.defineLazy(transform$.SvgTransform, {
    /*transform$.SvgTransform.none*/get none() {
      return C[27] || CT.C27;
    },
    /*transform$.SvgTransform._transformRegExp*/get _transformRegExp() {
      return core.RegExp.new("(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(([^)]*)\\)\\s*");
    }
  }, false);
  var children$2 = dart.privateName(clip_path, "SvgClipPath.children");
  var isEmpty$ = dart.privateName(clip_path, "SvgClipPath.isEmpty");
  var painter$1 = dart.privateName(clip_path, "SvgClipPath.painter");
  clip_path.SvgClipPath = class SvgClipPath extends core.Object {
    get children() {
      return this[children$2];
    }
    set children(value) {
      super.children = value;
    }
    get isEmpty() {
      return this[isEmpty$];
    }
    set isEmpty(value) {
      super.isEmpty = value;
    }
    get painter() {
      return this[painter$1];
    }
    set painter(value) {
      super.painter = value;
    }
    static fromXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[25], 30, 18, "element");
      if (painter == null) dart.nullFailed(I[25], 30, 38, "painter");
      if (brush == null) dart.nullFailed(I[25], 30, 56, "brush");
      let clipPathAttr = element.getAttribute("clip-path");
      if (clipPathAttr == null) {
        return C[28] || CT.C28;
      }
      let children = null;
      if (clipPathAttr[$startsWith]("url(#")) {
        let id = clipPathAttr[$substring](5, clipPathAttr[$lastIndexOf](")"));
        let clipPath = painter.parser.findById(id);
        if (clipPath != null) {
          children = clipPath.children.whereType(element$.XmlElement)[$map](T$.SvgOperationN(), dart.fn(c => {
            if (c == null) dart.nullFailed(I[25], 44, 34, "c");
            return operation.SvgOperation.fromXml(c, painter, brush);
          }, T$.XmlElementToSvgOperationN()));
          return new clip_path.SvgClipPath.new(children, false, painter);
        }
      }
      return C[28] || CT.C28;
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    apply(canvas) {
      if (canvas == null) dart.nullFailed(I[25], 60, 26, "canvas");
      if (dart.test(this.isEmpty)) {
        return;
      }
      for (let child of dart.nullCheck(this.children)) {
        dart.nullCheck(child).draw(canvas);
      }
      canvas.clipPath();
    }
  };
  (clip_path.SvgClipPath.new = function(children, isEmpty, painter) {
    if (isEmpty == null) dart.nullFailed(I[25], 27, 41, "isEmpty");
    this[children$2] = children;
    this[isEmpty$] = isEmpty;
    this[painter$1] = painter;
    ;
  }).prototype = clip_path.SvgClipPath.prototype;
  dart.addTypeTests(clip_path.SvgClipPath);
  dart.addTypeCaches(clip_path.SvgClipPath);
  dart.setMethodSignature(clip_path.SvgClipPath, () => ({
    __proto__: dart.getMethods(clip_path.SvgClipPath.__proto__),
    apply: dart.fnType(dart.void, [graphics.PdfGraphics])
  }));
  dart.setGetterSignature(clip_path.SvgClipPath, () => ({
    __proto__: dart.getGetters(clip_path.SvgClipPath.__proto__),
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(clip_path.SvgClipPath, I[26]);
  dart.setFieldSignature(clip_path.SvgClipPath, () => ({
    __proto__: dart.getFields(clip_path.SvgClipPath.__proto__),
    children: dart.finalFieldType(dart.nullable(core.Iterable$(dart.nullable(operation.SvgOperation)))),
    isEmpty: dart.finalFieldType(core.bool),
    painter: dart.finalFieldType(dart.nullable(painter$.SvgPainter))
  }));
  var viewBox$ = dart.privateName(parser$, "SvgParser.viewBox");
  var width$2 = dart.privateName(parser$, "SvgParser.width");
  var height$1 = dart.privateName(parser$, "SvgParser.height");
  var root$ = dart.privateName(parser$, "SvgParser.root");
  var colorFilter$ = dart.privateName(parser$, "SvgParser.colorFilter");
  parser$.SvgParser = class SvgParser extends core.Object {
    get viewBox() {
      return this[viewBox$];
    }
    set viewBox(value) {
      super.viewBox = value;
    }
    get width() {
      return this[width$2];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$1];
    }
    set height(value) {
      super.height = value;
    }
    get root() {
      return this[root$];
    }
    set root(value) {
      super.root = value;
    }
    get colorFilter() {
      return this[colorFilter$];
    }
    set colorFilter(value) {
      super.colorFilter = value;
    }
    static new(opts) {
      let t4, t4$, t4$0, t4$1;
      let xml = opts && 'xml' in opts ? opts.xml : null;
      if (xml == null) dart.nullFailed(I[27], 26, 26, "xml");
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      let root = xml.rootElement;
      let vbattr = root.getAttribute("viewBox");
      let width = (t4 = parser$.SvgParser.getNumeric(root, "width", null), t4 == null ? null : t4.sizeValue);
      let height = (t4$ = parser$.SvgParser.getNumeric(root, "height", null), t4$ == null ? null : t4$.sizeValue);
      let vb = vbattr == null ? T$.JSArrayOfdouble().of([0.0, 0.0, (t4$0 = width, t4$0 == null ? 1000.0 : t4$0), (t4$1 = height, t4$1 == null ? 1000.0 : t4$1)]) : parser$.SvgParser.splitDoubles(vbattr);
      if (dart.test(vb[$isEmpty]) || dart.notNull(vb[$length]) > 4) {
        dart.throw(core.Exception.new("viewBox must contain 1..4 parameters"));
      }
      let fvb = (() => {
        let t4 = T$.ListOfdouble().of(T$.ListOfdouble().filled(4 - dart.notNull(vb[$length]), 0.0));
        t4[$addAll](vb);
        return t4;
      })();
      let viewBox = new rect$.PdfRect.new(fvb[$_get](0), fvb[$_get](1), fvb[$_get](2), fvb[$_get](3));
      return new parser$.SvgParser.__(width, height, viewBox, root, colorFilter);
    }
    findById(id) {
      if (id == null) dart.nullFailed(I[27], 81, 31, "id");
      try {
        return descendants['XmlDescendantsExtension|get#descendants'](this.root)[$whereType](element$.XmlElement)[$firstWhere](dart.fn(e => {
          if (e == null) dart.nullFailed(I[27], 84, 14, "e");
          return e.getAttribute("id") == id;
        }, T$.XmlElementTobool()));
      } catch (e) {
        let ex = dart.getThrown(e);
        if (core.StateError.is(ex)) {
          return null;
        } else
          throw e;
      }
    }
    static getDouble(xml, name, opts) {
      if (xml == null) dart.nullFailed(I[27], 91, 39, "xml");
      if (name == null) dart.nullFailed(I[27], 91, 51, "name");
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : 0;
      let attr = xml.getAttribute(name, {namespace: namespace});
      if (attr == null) {
        return defaultValue;
      }
      return core.double.parse(attr);
    }
    static getNumeric(xml, name, brush, opts) {
      if (xml == null) dart.nullFailed(I[27], 102, 44, "xml");
      if (name == null) dart.nullFailed(I[27], 102, 56, "name");
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      let attr = xml.getAttribute(name, {namespace: namespace});
      if (attr == null) {
        return defaultValue == null ? null : new parser$.SvgNumeric.value(defaultValue, null);
      }
      return parser$.SvgNumeric.new(attr, brush);
    }
    static splitNumeric(parameters, brush) {
      if (parameters == null) dart.nullFailed(I[27], 113, 51, "parameters");
      let parameterMatches = parser$.SvgParser._transformParameterRegExp.allMatches(parameters);
      return parameterMatches[$map](parser$.SvgNumeric, dart.fn(m => {
        if (m == null) dart.nullFailed(I[27], 115, 34, "m");
        return parser$.SvgNumeric.new(dart.nullCheck(m.group(0)), brush);
      }, T$.RegExpMatchToSvgNumeric()));
    }
    static splitDoubles(parameters) {
      if (parameters == null) dart.nullFailed(I[27], 118, 47, "parameters");
      let parameterMatches = parser$.SvgParser._transformParameterRegExp.allMatches(parameters);
      return parameterMatches[$map](core.double, dart.fn(m => {
        if (m == null) dart.nullFailed(I[27], 120, 34, "m");
        return core.double.parse(dart.nullCheck(m.group(0)));
      }, T$.RegExpMatchTodouble()));
    }
    static splitIntegers(parameters) {
      if (parameters == null) dart.nullFailed(I[27], 123, 45, "parameters");
      let parameterMatches = parser$.SvgParser._transformParameterRegExp.allMatches(parameters);
      return parameterMatches[$map](core.int, dart.fn(m => {
        if (m == null) dart.nullFailed(I[27], 126, 34, "m");
        return core.int.parse(dart.nullCheck(m.group(0)));
      }, T$.RegExpMatchToint()));
    }
    static convertStyle(element) {
      let t7;
      if (element == null) dart.nullFailed(I[27], 132, 39, "element");
      let style = (t7 = element.getAttribute("style"), t7 == null ? null : t7[$trim]());
      if (style != null && style[$isNotEmpty]) {
        let iter = style[$split](";");
        for (let style of iter) {
          if (style[$trim]()[$isEmpty]) {
            continue;
          }
          let kv = core.RegExp.new("([\\w-]+)\\s*:\\s*(.*)").allMatches(style)[$first];
          let key = dart.nullCheck(kv.group(1));
          let value = dart.nullCheck(kv.group(2));
          element.setAttribute(key, value);
        }
      }
    }
  };
  (parser$.SvgParser.__ = function(width, height, viewBox, root, colorFilter) {
    if (viewBox == null) dart.nullFailed(I[27], 63, 10, "viewBox");
    if (root == null) dart.nullFailed(I[27], 64, 10, "root");
    this[width$2] = width;
    this[height$1] = height;
    this[viewBox$] = viewBox;
    this[root$] = root;
    this[colorFilter$] = colorFilter;
    ;
  }).prototype = parser$.SvgParser.prototype;
  dart.addTypeTests(parser$.SvgParser);
  dart.addTypeCaches(parser$.SvgParser);
  dart.setMethodSignature(parser$.SvgParser, () => ({
    __proto__: dart.getMethods(parser$.SvgParser.__proto__),
    findById: dart.fnType(dart.nullable(element$.XmlElement), [core.String])
  }));
  dart.setLibraryUri(parser$.SvgParser, I[28]);
  dart.setFieldSignature(parser$.SvgParser, () => ({
    __proto__: dart.getFields(parser$.SvgParser.__proto__),
    viewBox: dart.finalFieldType(rect$.PdfRect),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    root: dart.finalFieldType(element$.XmlElement),
    colorFilter: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  dart.defineLazy(parser$.SvgParser, {
    /*parser$.SvgParser._transformParameterRegExp*/get _transformParameterRegExp() {
      return core.RegExp.new("[\\w.-]+(px|pt|em|cm|mm|in|%|)");
    }
  }, false);
  var _name$2 = dart.privateName(parser$, "_name");
  parser$.SvgUnit = class SvgUnit extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (parser$.SvgUnit.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[27], 149, 6, "index");
    if (_name == null) dart.nullFailed(I[27], 149, 6, "_name");
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = parser$.SvgUnit.prototype;
  dart.addTypeTests(parser$.SvgUnit);
  dart.addTypeCaches(parser$.SvgUnit);
  dart.setLibraryUri(parser$.SvgUnit, I[28]);
  dart.setFieldSignature(parser$.SvgUnit, () => ({
    __proto__: dart.getFields(parser$.SvgUnit.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$2]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(parser$.SvgUnit, ['toString']);
  parser$.SvgUnit.pixels = C[29] || CT.C29;
  parser$.SvgUnit.milimeters = C[30] || CT.C30;
  parser$.SvgUnit.centimeters = C[31] || CT.C31;
  parser$.SvgUnit.inch = C[32] || CT.C32;
  parser$.SvgUnit.em = C[33] || CT.C33;
  parser$.SvgUnit.percent = C[34] || CT.C34;
  parser$.SvgUnit.points = C[35] || CT.C35;
  parser$.SvgUnit.direct = C[36] || CT.C36;
  parser$.SvgUnit.values = C[37] || CT.C37;
  var value$2 = dart.privateName(parser$, "SvgNumeric.value");
  var unit$ = dart.privateName(parser$, "SvgNumeric.unit");
  var brush$1 = dart.privateName(parser$, "SvgNumeric.brush");
  parser$.SvgNumeric = class SvgNumeric extends core.Object {
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    get unit() {
      return this[unit$];
    }
    set unit(value) {
      super.unit = value;
    }
    get brush() {
      return this[brush$1];
    }
    set brush(value) {
      super.brush = value;
    }
    static new(value, brush) {
      if (value == null) dart.nullFailed(I[27], 161, 29, "value");
      let r = core.RegExp.new("([-+]?[\\d\\.]+)\\s*(px|pt|em|cm|mm|in|%|)").allMatches(value)[$first];
      return new parser$.SvgNumeric.value(core.double.parse(dart.nullCheck(r.group(1))), brush, dart.nullCheck(parser$.SvgNumeric._svgUnits[$_get](r.group(2))));
    }
    get colorValue() {
      switch (this.unit) {
        case C[34] || CT.C34:
        {
          return dart.notNull(this.value) / 100.0;
        }
        case C[36] || CT.C36:
        {
          return dart.notNull(this.value) / 255.0;
        }
        default:
        {
          dart.throw(core.Exception.new("Invalid color value " + dart.str(this.value) + " (" + dart.str(this.unit) + ")"));
        }
      }
    }
    get sizeValue() {
      switch (this.unit) {
        case C[34] || CT.C34:
        {
          return dart.notNull(this.value) / 100.0;
        }
        case C[36] || CT.C36:
        case C[29] || CT.C29:
        case C[35] || CT.C35:
        {
          return this.value;
        }
        case C[30] || CT.C30:
        {
          return dart.notNull(this.value) * 2.834645669291339;
        }
        case C[31] || CT.C31:
        {
          return dart.notNull(this.value) * 28.346456692913385;
        }
        case C[32] || CT.C32:
        {
          return dart.notNull(this.value) * 72;
        }
        case C[33] || CT.C33:
        {
          return dart.notNull(this.value) * dart.notNull(dart.nullCheck(dart.nullCheck(this.brush).fontSize).sizeValue);
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
  };
  (parser$.SvgNumeric.value = function(value, brush, unit = C[36] || CT.C36) {
    if (value == null) dart.nullFailed(I[27], 171, 10, "value");
    if (unit == null) dart.nullFailed(I[27], 173, 10, "unit");
    this[value$2] = value;
    this[brush$1] = brush;
    this[unit$] = unit;
    ;
  }).prototype = parser$.SvgNumeric.prototype;
  dart.addTypeTests(parser$.SvgNumeric);
  dart.addTypeCaches(parser$.SvgNumeric);
  dart.setGetterSignature(parser$.SvgNumeric, () => ({
    __proto__: dart.getGetters(parser$.SvgNumeric.__proto__),
    colorValue: core.double,
    sizeValue: core.double
  }));
  dart.setLibraryUri(parser$.SvgNumeric, I[28]);
  dart.setFieldSignature(parser$.SvgNumeric, () => ({
    __proto__: dart.getFields(parser$.SvgNumeric.__proto__),
    value: dart.finalFieldType(core.double),
    unit: dart.finalFieldType(parser$.SvgUnit),
    brush: dart.finalFieldType(dart.nullable(brush$.SvgBrush))
  }));
  dart.defineLazy(parser$.SvgNumeric, {
    /*parser$.SvgNumeric._svgUnits*/get _svgUnits() {
      return C[38] || CT.C38;
    }
  }, false);
  var children$3 = dart.privateName(mask_path, "SvgMaskPath.children");
  var painter$2 = dart.privateName(mask_path, "SvgMaskPath.painter");
  mask_path.SvgMaskPath = class SvgMaskPath extends core.Object {
    get children() {
      return this[children$3];
    }
    set children(value) {
      super.children = value;
    }
    get painter() {
      return this[painter$2];
    }
    set painter(value) {
      super.painter = value;
    }
    static fromXml(element, painter, brush) {
      if (element == null) dart.nullFailed(I[29], 30, 18, "element");
      if (painter == null) dart.nullFailed(I[29], 30, 38, "painter");
      if (brush == null) dart.nullFailed(I[29], 30, 56, "brush");
      let maskPathAttr = element.getAttribute("mask");
      if (maskPathAttr == null) {
        return null;
      }
      let children = null;
      if (maskPathAttr[$startsWith]("url(#")) {
        let id = maskPathAttr[$substring](5, maskPathAttr[$lastIndexOf](")"));
        let maskPath = painter.parser.findById(id);
        if (maskPath != null) {
          let maskBrush = brush$.SvgBrush.fromXml(maskPath, brush, painter);
          children = maskPath.children.whereType(element$.XmlElement)[$map](T$.SvgOperationN(), dart.fn(c => {
            if (c == null) dart.nullFailed(I[29], 44, 14, "c");
            return operation.SvgOperation.fromXml(c, painter, maskBrush);
          }, T$.XmlElementToSvgOperationN()));
          return new mask_path.SvgMaskPath.new(children, painter);
        }
      }
      return null;
    }
    apply(canvas) {
      if (canvas == null) dart.nullFailed(I[29], 56, 26, "canvas");
      let mask = new smask.PdfSoftMask.new(this.painter.document, {boundingBox: this.painter.boundingBox});
      let maskCanvas = mask.getGraphics();
      for (let child of this.children) {
        dart.nullCheck(child).paint(dart.nullCheck(maskCanvas));
      }
      canvas.setGraphicState(new graphic_state.PdfGraphicState.new({softMask: mask}));
    }
  };
  (mask_path.SvgMaskPath.new = function(children, painter) {
    if (children == null) dart.nullFailed(I[29], 27, 26, "children");
    if (painter == null) dart.nullFailed(I[29], 27, 41, "painter");
    this[children$3] = children;
    this[painter$2] = painter;
    ;
  }).prototype = mask_path.SvgMaskPath.prototype;
  dart.addTypeTests(mask_path.SvgMaskPath);
  dart.addTypeCaches(mask_path.SvgMaskPath);
  dart.setMethodSignature(mask_path.SvgMaskPath, () => ({
    __proto__: dart.getMethods(mask_path.SvgMaskPath.__proto__),
    apply: dart.fnType(dart.void, [graphics.PdfGraphics])
  }));
  dart.setLibraryUri(mask_path.SvgMaskPath, I[30]);
  dart.setFieldSignature(mask_path.SvgMaskPath, () => ({
    __proto__: dart.getFields(mask_path.SvgMaskPath.__proto__),
    children: dart.finalFieldType(core.Iterable$(dart.nullable(operation.SvgOperation))),
    painter: dart.finalFieldType(painter$.SvgPainter)
  }));
  brush$.SvgTextAnchor = class SvgTextAnchor extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (brush$.SvgTextAnchor.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[31], 26, 6, "index");
    if (_name == null) dart.nullFailed(I[31], 26, 6, "_name");
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = brush$.SvgTextAnchor.prototype;
  dart.addTypeTests(brush$.SvgTextAnchor);
  dart.addTypeCaches(brush$.SvgTextAnchor);
  dart.setLibraryUri(brush$.SvgTextAnchor, I[32]);
  dart.setFieldSignature(brush$.SvgTextAnchor, () => ({
    __proto__: dart.getFields(brush$.SvgTextAnchor.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(brush$.SvgTextAnchor, ['toString']);
  brush$.SvgTextAnchor.start = C[23] || CT.C23;
  brush$.SvgTextAnchor.middle = C[24] || CT.C24;
  brush$.SvgTextAnchor.end = C[25] || CT.C25;
  brush$.SvgTextAnchor.values = C[39] || CT.C39;
  var opacity$ = dart.privateName(brush$, "SvgBrush.opacity");
  var fill$ = dart.privateName(brush$, "SvgBrush.fill");
  var fillEvenOdd$ = dart.privateName(brush$, "SvgBrush.fillEvenOdd");
  var fillOpacity$ = dart.privateName(brush$, "SvgBrush.fillOpacity");
  var stroke$ = dart.privateName(brush$, "SvgBrush.stroke");
  var strokeOpacity$ = dart.privateName(brush$, "SvgBrush.strokeOpacity");
  var strokeWidth$0 = dart.privateName(brush$, "SvgBrush.strokeWidth");
  var strokeDashArray$ = dart.privateName(brush$, "SvgBrush.strokeDashArray");
  var strokeDashOffset$ = dart.privateName(brush$, "SvgBrush.strokeDashOffset");
  var strokeLineCap$ = dart.privateName(brush$, "SvgBrush.strokeLineCap");
  var strokeLineJoin$ = dart.privateName(brush$, "SvgBrush.strokeLineJoin");
  var strokeMiterLimit$ = dart.privateName(brush$, "SvgBrush.strokeMiterLimit");
  var fontSize$ = dart.privateName(brush$, "SvgBrush.fontSize");
  var fontFamily$ = dart.privateName(brush$, "SvgBrush.fontFamily");
  var fontStyle$ = dart.privateName(brush$, "SvgBrush.fontStyle");
  var fontWeight$ = dart.privateName(brush$, "SvgBrush.fontWeight");
  var textAnchor$ = dart.privateName(brush$, "SvgBrush.textAnchor");
  var blendMode$ = dart.privateName(brush$, "SvgBrush.blendMode");
  var mask$ = dart.privateName(brush$, "SvgBrush.mask");
  var _name = dart.privateName(graphics, "_name");
  var SvgColor_inherit = dart.privateName(color$0, "SvgColor.inherit");
  var SvgColor_opacity = dart.privateName(color$0, "SvgColor.opacity");
  var SvgColor_color = dart.privateName(color$0, "SvgColor.color");
  var _name$3 = dart.privateName(graphic_state, "_name");
  brush$.SvgBrush = class SvgBrush extends core.Object {
    get opacity() {
      return this[opacity$];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get fill() {
      return this[fill$];
    }
    set fill(value) {
      super.fill = value;
    }
    get fillEvenOdd() {
      return this[fillEvenOdd$];
    }
    set fillEvenOdd(value) {
      super.fillEvenOdd = value;
    }
    get fillOpacity() {
      return this[fillOpacity$];
    }
    set fillOpacity(value) {
      super.fillOpacity = value;
    }
    get stroke() {
      return this[stroke$];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get strokeOpacity() {
      return this[strokeOpacity$];
    }
    set strokeOpacity(value) {
      super.strokeOpacity = value;
    }
    get strokeWidth() {
      return this[strokeWidth$0];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get strokeDashArray() {
      return this[strokeDashArray$];
    }
    set strokeDashArray(value) {
      super.strokeDashArray = value;
    }
    get strokeDashOffset() {
      return this[strokeDashOffset$];
    }
    set strokeDashOffset(value) {
      super.strokeDashOffset = value;
    }
    get strokeLineCap() {
      return this[strokeLineCap$];
    }
    set strokeLineCap(value) {
      super.strokeLineCap = value;
    }
    get strokeLineJoin() {
      return this[strokeLineJoin$];
    }
    set strokeLineJoin(value) {
      super.strokeLineJoin = value;
    }
    get strokeMiterLimit() {
      return this[strokeMiterLimit$];
    }
    set strokeMiterLimit(value) {
      super.strokeMiterLimit = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get textAnchor() {
      return this[textAnchor$];
    }
    set textAnchor(value) {
      super.textAnchor = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    get mask() {
      return this[mask$];
    }
    set mask(value) {
      super.mask = value;
    }
    static fromXml(element, parent, painter) {
      let t7;
      if (element == null) dart.nullFailed(I[31], 53, 16, "element");
      if (parent == null) dart.nullFailed(I[31], 54, 14, "parent");
      if (painter == null) dart.nullFailed(I[31], 55, 16, "painter");
      parser$.SvgParser.convertStyle(element);
      let strokeDashArray = element.getAttribute("stroke-dasharray");
      let fillRule = element.getAttribute("fill-rule");
      let strokeLineCap = element.getAttribute("stroke-linecap");
      let strokeLineJoin = element.getAttribute("stroke-linejoin");
      let blendMode = element.getAttribute("mix-blend-mode");
      let result = parent.merge(new brush$.SvgBrush.new({opacity: parser$.SvgParser.getDouble(element, "opacity", {defaultValue: null}), blendMode: blendMode == null ? null : brush$.SvgBrush._blendModes[$_get](blendMode), fillOpacity: parser$.SvgParser.getDouble(element, "fill-opacity", {defaultValue: null}), strokeOpacity: parser$.SvgParser.getDouble(element, "stroke-opacity", {defaultValue: null}), strokeLineCap: strokeLineCap == null ? null : brush$.SvgBrush._strokeLineCap[$_get](strokeLineCap), strokeLineJoin: strokeLineJoin == null ? null : brush$.SvgBrush._strokeLineJoin[$_get](strokeLineJoin), strokeMiterLimit: parser$.SvgParser.getDouble(element, "stroke-miterlimit", {defaultValue: null}), fill: color$0.SvgColor.fromXml(element.getAttribute("fill"), painter), fillEvenOdd: fillRule == null ? null : fillRule === "evenodd", stroke: color$0.SvgColor.fromXml(element.getAttribute("stroke"), painter), strokeWidth: parser$.SvgParser.getNumeric(element, "stroke-width", parent), strokeDashArray: strokeDashArray == null ? null : strokeDashArray === "none" ? T$.JSArrayOfdouble().of([]) : parser$.SvgParser.splitDoubles(strokeDashArray)[$toList](), strokeDashOffset: (t7 = parser$.SvgParser.getNumeric(element, "stroke-dashoffset", parent), t7 == null ? null : t7.sizeValue), fontSize: parser$.SvgParser.getNumeric(element, "font-size", parent), fontFamily: element.getAttribute("font-family"), fontStyle: element.getAttribute("font-style"), fontWeight: element.getAttribute("font-weight"), textAnchor: brush$.SvgBrush._textAnchors[$_get](element.getAttribute("text-anchor"))}));
      let mask = mask_path.SvgMaskPath.fromXml(element, painter, result);
      if (mask != null) {
        return result.copyWith({mask: mask});
      }
      return result;
    }
    merge(other) {
      let t7, t7$, t7$0, t7$1, t7$2, t7$3, t7$4, t7$5, t7$6, t7$7, t7$8, t7$9, t7$10, t7$11, t7$12, t7$13, t7$14, t7$15, t7$16, t7$17, t7$18;
      if (other == null) {
        return this;
      }
      let _fill = (t7 = other.fill, t7 == null ? this.fill : t7);
      if (dart.test((t7$0 = (t7$ = _fill, t7$ == null ? null : t7$.inherit), t7$0 == null ? false : t7$0))) {
        _fill = dart.nullCheck(this.fill).merge(dart.nullCheck(other.fill));
      }
      let _stroke = (t7$1 = other.stroke, t7$1 == null ? this.stroke : t7$1);
      if (dart.test((t7$3 = (t7$2 = _stroke, t7$2 == null ? null : t7$2.inherit), t7$3 == null ? false : t7$3))) {
        _stroke = dart.nullCheck(this.stroke).merge(dart.nullCheck(other.stroke));
      }
      return new brush$.SvgBrush.new({opacity: (t7$4 = other.opacity, t7$4 == null ? 1.0 : t7$4), blendMode: other.blendMode, fillOpacity: (t7$5 = other.fillOpacity, t7$5 == null ? this.fillOpacity : t7$5), strokeOpacity: (t7$6 = other.strokeOpacity, t7$6 == null ? this.strokeOpacity : t7$6), fill: _fill, fillEvenOdd: (t7$7 = other.fillEvenOdd, t7$7 == null ? this.fillEvenOdd : t7$7), stroke: _stroke, strokeWidth: (t7$8 = other.strokeWidth, t7$8 == null ? this.strokeWidth : t7$8), strokeDashArray: (t7$9 = other.strokeDashArray, t7$9 == null ? this.strokeDashArray : t7$9), strokeDashOffset: (t7$10 = other.strokeDashOffset, t7$10 == null ? this.strokeDashOffset : t7$10), fontSize: (t7$11 = other.fontSize, t7$11 == null ? this.fontSize : t7$11), fontFamily: (t7$12 = other.fontFamily, t7$12 == null ? this.fontFamily : t7$12), fontStyle: (t7$13 = other.fontStyle, t7$13 == null ? this.fontStyle : t7$13), fontWeight: (t7$14 = other.fontWeight, t7$14 == null ? this.fontWeight : t7$14), textAnchor: (t7$15 = other.textAnchor, t7$15 == null ? this.textAnchor : t7$15), strokeLineCap: (t7$16 = other.strokeLineCap, t7$16 == null ? this.strokeLineCap : t7$16), strokeLineJoin: (t7$17 = other.strokeLineJoin, t7$17 == null ? this.strokeLineJoin : t7$17), strokeMiterLimit: (t7$18 = other.strokeMiterLimit, t7$18 == null ? this.strokeMiterLimit : t7$18), mask: other.mask});
    }
    copyWith(opts) {
      let t7, t7$, t7$0, t7$1, t7$2, t7$3, t7$4, t7$5, t7$6, t7$7, t7$8, t7$9, t7$10, t7$11, t7$12, t7$13, t7$14, t7$15, t7$16;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let fill = opts && 'fill' in opts ? opts.fill : null;
      let fillEvenOdd = opts && 'fillEvenOdd' in opts ? opts.fillEvenOdd : null;
      let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let strokeOpacity = opts && 'strokeOpacity' in opts ? opts.strokeOpacity : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
      let strokeDashArray = opts && 'strokeDashArray' in opts ? opts.strokeDashArray : null;
      let strokeDashOffset = opts && 'strokeDashOffset' in opts ? opts.strokeDashOffset : null;
      let strokeLineCap = opts && 'strokeLineCap' in opts ? opts.strokeLineCap : null;
      let strokeLineJoin = opts && 'strokeLineJoin' in opts ? opts.strokeLineJoin : null;
      let strokeMiterLimit = opts && 'strokeMiterLimit' in opts ? opts.strokeMiterLimit : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textAnchor = opts && 'textAnchor' in opts ? opts.textAnchor : null;
      let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
      let mask = opts && 'mask' in opts ? opts.mask : null;
      return new brush$.SvgBrush.new({opacity: (t7 = opacity, t7 == null ? this.opacity : t7), fill: (t7$ = fill, t7$ == null ? this.fill : t7$), fillEvenOdd: (t7$0 = fillEvenOdd, t7$0 == null ? this.fillEvenOdd : t7$0), fillOpacity: (t7$1 = fillOpacity, t7$1 == null ? this.fillOpacity : t7$1), stroke: (t7$2 = stroke, t7$2 == null ? this.stroke : t7$2), strokeOpacity: (t7$3 = strokeOpacity, t7$3 == null ? this.strokeOpacity : t7$3), strokeWidth: (t7$4 = strokeWidth, t7$4 == null ? this.strokeWidth : t7$4), strokeDashArray: (t7$5 = strokeDashArray, t7$5 == null ? this.strokeDashArray : t7$5), strokeDashOffset: (t7$6 = strokeDashOffset, t7$6 == null ? this.strokeDashOffset : t7$6), strokeLineCap: (t7$7 = strokeLineCap, t7$7 == null ? this.strokeLineCap : t7$7), strokeLineJoin: (t7$8 = strokeLineJoin, t7$8 == null ? this.strokeLineJoin : t7$8), strokeMiterLimit: (t7$9 = strokeMiterLimit, t7$9 == null ? this.strokeMiterLimit : t7$9), fontSize: (t7$10 = fontSize, t7$10 == null ? this.fontSize : t7$10), fontFamily: (t7$11 = fontFamily, t7$11 == null ? this.fontFamily : t7$11), fontStyle: (t7$12 = fontStyle, t7$12 == null ? this.fontStyle : t7$12), fontWeight: (t7$13 = fontWeight, t7$13 == null ? this.fontWeight : t7$13), textAnchor: (t7$14 = textAnchor, t7$14 == null ? this.textAnchor : t7$14), blendMode: (t7$15 = blendMode, t7$15 == null ? this.blendMode : t7$15), mask: (t7$16 = mask, t7$16 == null ? this.mask : t7$16)});
    }
    toString() {
      return dart.str(this[$runtimeType]) + " fill: " + dart.str(this.fill) + " fillEvenOdd: " + dart.str(this.fillEvenOdd) + " stroke:" + dart.str(this.stroke) + " strokeWidth:" + dart.str(this.strokeWidth) + " strokeDashArray:" + dart.str(this.strokeDashArray) + " fontSize:" + dart.str(this.fontSize) + " fontFamily:" + dart.str(this.fontFamily) + " textAnchor:" + dart.str(this.textAnchor) + " ";
    }
  };
  (brush$.SvgBrush.new = function(opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let fill = opts && 'fill' in opts ? opts.fill : null;
    let fillEvenOdd = opts && 'fillEvenOdd' in opts ? opts.fillEvenOdd : null;
    let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let strokeOpacity = opts && 'strokeOpacity' in opts ? opts.strokeOpacity : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let strokeDashArray = opts && 'strokeDashArray' in opts ? opts.strokeDashArray : null;
    let strokeDashOffset = opts && 'strokeDashOffset' in opts ? opts.strokeDashOffset : null;
    let strokeLineCap = opts && 'strokeLineCap' in opts ? opts.strokeLineCap : null;
    let strokeLineJoin = opts && 'strokeLineJoin' in opts ? opts.strokeLineJoin : null;
    let strokeMiterLimit = opts && 'strokeMiterLimit' in opts ? opts.strokeMiterLimit : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let textAnchor = opts && 'textAnchor' in opts ? opts.textAnchor : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    let mask = opts && 'mask' in opts ? opts.mask : null;
    this[opacity$] = opacity;
    this[fill$] = fill;
    this[fillEvenOdd$] = fillEvenOdd;
    this[fillOpacity$] = fillOpacity;
    this[stroke$] = stroke;
    this[strokeOpacity$] = strokeOpacity;
    this[strokeWidth$0] = strokeWidth;
    this[strokeDashArray$] = strokeDashArray;
    this[strokeDashOffset$] = strokeDashOffset;
    this[strokeLineCap$] = strokeLineCap;
    this[strokeLineJoin$] = strokeLineJoin;
    this[strokeMiterLimit$] = strokeMiterLimit;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[fontStyle$] = fontStyle;
    this[fontWeight$] = fontWeight;
    this[textAnchor$] = textAnchor;
    this[blendMode$] = blendMode;
    this[mask$] = mask;
    ;
  }).prototype = brush$.SvgBrush.prototype;
  dart.addTypeTests(brush$.SvgBrush);
  dart.addTypeCaches(brush$.SvgBrush);
  dart.setMethodSignature(brush$.SvgBrush, () => ({
    __proto__: dart.getMethods(brush$.SvgBrush.__proto__),
    merge: dart.fnType(brush$.SvgBrush, [dart.nullable(brush$.SvgBrush)]),
    copyWith: dart.fnType(brush$.SvgBrush, [], {blendMode: dart.nullable(graphic_state.PdfBlendMode), fill: dart.nullable(color$0.SvgColor), fillEvenOdd: dart.nullable(core.bool), fillOpacity: dart.nullable(core.double), fontFamily: dart.nullable(core.String), fontSize: dart.nullable(parser$.SvgNumeric), fontStyle: dart.nullable(core.String), fontWeight: dart.nullable(core.String), mask: dart.nullable(mask_path.SvgMaskPath), opacity: dart.nullable(core.double), stroke: dart.nullable(color$0.SvgColor), strokeDashArray: dart.nullable(core.List$(core.double)), strokeDashOffset: dart.nullable(core.double), strokeLineCap: dart.nullable(graphics.PdfLineCap), strokeLineJoin: dart.nullable(graphics.PdfLineJoin), strokeMiterLimit: dart.nullable(core.double), strokeOpacity: dart.nullable(core.double), strokeWidth: dart.nullable(parser$.SvgNumeric), textAnchor: dart.nullable(brush$.SvgTextAnchor)}, {})
  }));
  dart.setLibraryUri(brush$.SvgBrush, I[32]);
  dart.setFieldSignature(brush$.SvgBrush, () => ({
    __proto__: dart.getFields(brush$.SvgBrush.__proto__),
    opacity: dart.finalFieldType(dart.nullable(core.double)),
    fill: dart.finalFieldType(dart.nullable(color$0.SvgColor)),
    fillEvenOdd: dart.finalFieldType(dart.nullable(core.bool)),
    fillOpacity: dart.finalFieldType(dart.nullable(core.double)),
    stroke: dart.finalFieldType(dart.nullable(color$0.SvgColor)),
    strokeOpacity: dart.finalFieldType(dart.nullable(core.double)),
    strokeWidth: dart.finalFieldType(dart.nullable(parser$.SvgNumeric)),
    strokeDashArray: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    strokeDashOffset: dart.finalFieldType(dart.nullable(core.double)),
    strokeLineCap: dart.finalFieldType(dart.nullable(graphics.PdfLineCap)),
    strokeLineJoin: dart.finalFieldType(dart.nullable(graphics.PdfLineJoin)),
    strokeMiterLimit: dart.finalFieldType(dart.nullable(core.double)),
    fontSize: dart.finalFieldType(dart.nullable(parser$.SvgNumeric)),
    fontFamily: dart.finalFieldType(dart.nullable(core.String)),
    fontStyle: dart.finalFieldType(dart.nullable(core.String)),
    fontWeight: dart.finalFieldType(dart.nullable(core.String)),
    textAnchor: dart.finalFieldType(dart.nullable(brush$.SvgTextAnchor)),
    blendMode: dart.finalFieldType(dart.nullable(graphic_state.PdfBlendMode)),
    mask: dart.finalFieldType(dart.nullable(mask_path.SvgMaskPath))
  }));
  dart.defineExtensionMethods(brush$.SvgBrush, ['toString']);
  dart.defineLazy(brush$.SvgBrush, {
    /*brush$.SvgBrush.defaultContext*/get defaultContext() {
      return C[40] || CT.C40;
    },
    /*brush$.SvgBrush._blendModes*/get _blendModes() {
      return C[48] || CT.C48;
    },
    /*brush$.SvgBrush._strokeLineCap*/get _strokeLineCap() {
      return C[63] || CT.C63;
    },
    /*brush$.SvgBrush._strokeLineJoin*/get _strokeLineJoin() {
      return C[66] || CT.C66;
    },
    /*brush$.SvgBrush._textAnchors*/get _textAnchors() {
      return C[69] || CT.C69;
    }
  }, false);
  var _name$4 = dart.privateName(gradient$, "_name");
  gradient$.GradientUnits = class GradientUnits extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (gradient$.GradientUnits.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[33], 26, 6, "index");
    if (_name == null) dart.nullFailed(I[33], 26, 6, "_name");
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = gradient$.GradientUnits.prototype;
  dart.addTypeTests(gradient$.GradientUnits);
  dart.addTypeCaches(gradient$.GradientUnits);
  dart.setLibraryUri(gradient$.GradientUnits, I[34]);
  dart.setFieldSignature(gradient$.GradientUnits, () => ({
    __proto__: dart.getFields(gradient$.GradientUnits.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(gradient$.GradientUnits, ['toString']);
  gradient$.GradientUnits.objectBoundingBox = C[70] || CT.C70;
  gradient$.GradientUnits.userSpaceOnUse = C[71] || CT.C71;
  gradient$.GradientUnits.values = C[72] || CT.C72;
  var gradientUnits$ = dart.privateName(gradient$, "SvgGradient.gradientUnits");
  var transform$1 = dart.privateName(gradient$, "SvgGradient.transform");
  var colors$0 = dart.privateName(gradient$, "SvgGradient.colors");
  var stops$ = dart.privateName(gradient$, "SvgGradient.stops");
  var opacityList$ = dart.privateName(gradient$, "SvgGradient.opacityList");
  const color$2 = SvgColor_color;
  const opacity$0 = SvgColor_opacity;
  const inherit$ = SvgColor_inherit;
  color$0.SvgColor = class SvgColor extends core.Object {
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    get opacity() {
      return this[opacity$0];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get inherit() {
      return this[inherit$];
    }
    set inherit(value) {
      super.inherit = value;
    }
    static fromXml(color, painter) {
      if (painter == null) dart.nullFailed(I[35], 32, 54, "painter");
      if (color == null) {
        return color$0.SvgColor.inherited;
      }
      if (color === "none") {
        return color$0.SvgColor.none;
      }
      if (painter.parser.colorFilter != null) {
        return new color$0.SvgColor.new({color: painter.parser.colorFilter});
      }
      if (dart.test(colors$.svgColors[$containsKey](color))) {
        return new color$0.SvgColor.new({color: colors$.svgColors[$_get](color)});
      }
      if (color[$toLowerCase]()[$startsWith]("rgba")) {
        let rgba = parser$.SvgParser.splitNumeric(color[$substring](color[$indexOf]("(") + 1, color[$indexOf](")")), null)[$toList]();
        return new color$0.SvgColor.new({color: new color$.PdfColor.new(rgba[$_get](0).colorValue, rgba[$_get](1).colorValue, rgba[$_get](2).colorValue, rgba[$_get](3).value)});
      }
      if (color[$toLowerCase]()[$startsWith]("hsl")) {
        let hsl = parser$.SvgParser.splitNumeric(color[$substring](color[$indexOf]("(") + 1, color[$indexOf](")")), null)[$toList]();
        return new color$0.SvgColor.new({color: color$.PdfColorHsl.new(hsl[$_get](0).colorValue, hsl[$_get](1).colorValue, hsl[$_get](2).colorValue)});
      }
      if (color[$toLowerCase]()[$startsWith]("rgb")) {
        let rgb = parser$.SvgParser.splitNumeric(color[$substring](color[$indexOf]("(") + 1, color[$indexOf](")")), null)[$toList]();
        return new color$0.SvgColor.new({color: new color$.PdfColor.new(rgb[$_get](0).colorValue, rgb[$_get](1).colorValue, rgb[$_get](2).colorValue)});
      }
      if (color[$toLowerCase]()[$startsWith]("url(#")) {
        let gradient = dart.nullCheck(painter.parser.findById(color[$substring](5, color[$indexOf](")"))));
        if (gradient.name.local === "linearGradient") {
          return gradient$.SvgLinearGradient.fromXml(gradient, painter);
        }
        if (gradient.name.local === "radialGradient") {
          return gradient$.SvgRadialGradient.fromXml(gradient, painter);
        }
        return color$0.SvgColor.unknown;
      }
      try {
        return new color$0.SvgColor.new({color: color$.PdfColor.fromHex(color)});
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          core.print("Unknown color: " + dart.str(color));
          return color$0.SvgColor.unknown;
        } else
          throw e$;
      }
    }
    get isEmpty() {
      return this.color == null;
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    merge(other) {
      let t8;
      if (other == null) dart.nullFailed(I[35], 133, 27, "other");
      return new color$0.SvgColor.new({color: (t8 = other.color, t8 == null ? this.color : t8)});
    }
    setFillColor(op, canvas) {
      if (op == null) dart.nullFailed(I[35], 139, 34, "op");
      if (canvas == null) dart.nullFailed(I[35], 139, 50, "canvas");
      if (dart.test(this.isEmpty)) {
        return;
      }
      canvas.setFillColor(this.color);
    }
    setStrokeColor(op, canvas) {
      if (op == null) dart.nullFailed(I[35], 147, 36, "op");
      if (canvas == null) dart.nullFailed(I[35], 147, 52, "canvas");
      if (dart.test(this.isEmpty)) {
        return;
      }
      canvas.setStrokeColor(this.color);
    }
    toString() {
      return dart.str(this[$runtimeType]) + " color: " + dart.str(this.color) + " inherit:" + dart.str(this.inherit) + " isEmpty: " + dart.str(this.isEmpty);
    }
  };
  (color$0.SvgColor.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let inherit = opts && 'inherit' in opts ? opts.inherit : false;
    if (inherit == null) dart.nullFailed(I[35], 29, 10, "inherit");
    this[color$2] = color;
    this[opacity$0] = opacity;
    this[inherit$] = inherit;
    ;
  }).prototype = color$0.SvgColor.prototype;
  dart.addTypeTests(color$0.SvgColor);
  dart.addTypeCaches(color$0.SvgColor);
  dart.setMethodSignature(color$0.SvgColor, () => ({
    __proto__: dart.getMethods(color$0.SvgColor.__proto__),
    merge: dart.fnType(color$0.SvgColor, [color$0.SvgColor]),
    setFillColor: dart.fnType(dart.void, [operation.SvgOperation, graphics.PdfGraphics]),
    setStrokeColor: dart.fnType(dart.void, [operation.SvgOperation, graphics.PdfGraphics])
  }));
  dart.setGetterSignature(color$0.SvgColor, () => ({
    __proto__: dart.getGetters(color$0.SvgColor.__proto__),
    isEmpty: core.bool,
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(color$0.SvgColor, I[36]);
  dart.setFieldSignature(color$0.SvgColor, () => ({
    __proto__: dart.getFields(color$0.SvgColor.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    opacity: dart.finalFieldType(dart.nullable(core.double)),
    inherit: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(color$0.SvgColor, ['toString']);
  dart.defineLazy(color$0.SvgColor, {
    /*color$0.SvgColor.unknown*/get unknown() {
      return C[46] || CT.C46;
    },
    /*color$0.SvgColor.defaultColor*/get defaultColor() {
      return C[47] || CT.C47;
    },
    /*color$0.SvgColor.none*/get none() {
      return C[46] || CT.C46;
    },
    /*color$0.SvgColor.inherited*/get inherited() {
      return C[73] || CT.C73;
    }
  }, false);
  gradient$.SvgGradient = class SvgGradient extends color$0.SvgColor {
    get gradientUnits() {
      return this[gradientUnits$];
    }
    set gradientUnits(value) {
      super.gradientUnits = value;
    }
    get transform() {
      return this[transform$1];
    }
    set transform(value) {
      super.transform = value;
    }
    get colors() {
      return this[colors$0];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
    get opacityList() {
      return this[opacityList$];
    }
    set opacityList(value) {
      super.opacityList = value;
    }
    get isEmpty() {
      return this.colors[$isEmpty];
    }
    setFillColor(op, canvas) {
      if (op == null) dart.nullFailed(I[33], 59, 34, "op");
      if (canvas == null) dart.nullFailed(I[33], 59, 50, "canvas");
      if (dart.test(this.isEmpty)) {
        return;
      }
      canvas.setFillPattern(this.buildGradient(op, canvas, this.colors));
      if (dart.test(this.opacityList[$any](dart.fn(o => {
        if (o == null) dart.nullFailed(I[33], 66, 26, "o");
        return dart.notNull(o) < 1;
      }, T$.doubleTobool())))) {
        let mask = new smask.PdfSoftMask.new(op.painter.document, {boundingBox: op.painter.boundingBox});
        canvas.setGraphicState(new graphic_state.PdfGraphicState.new({softMask: mask}));
        let maskCanvas = dart.nullCheck(mask.getGraphics());
        maskCanvas.drawBox(op.boundingBox());
        maskCanvas.setFillPattern(this.buildGradient(op, maskCanvas, this.opacityList[$map](color$.PdfColor, dart.fn(o => {
          if (o == null) dart.nullFailed(I[33], 82, 38, "o");
          return new color$.PdfColor.new(o, o, o);
        }, T$.doubleToPdfColor()))[$toList]()));
        maskCanvas.fillPath();
        canvas.setFillPattern(this.buildGradient(op, canvas, this.colors));
      }
    }
    setStrokeColor(op, canvas) {
      if (op == null) dart.nullFailed(I[33], 91, 36, "op");
      if (canvas == null) dart.nullFailed(I[33], 91, 52, "canvas");
      if (dart.test(this.isEmpty)) {
        return;
      }
      canvas.setStrokePattern(this.buildGradient(op, canvas, this.colors));
    }
  };
  (gradient$.SvgGradient.new = function(gradientUnits, transform, colors, stops, opacityList) {
    if (transform == null) dart.nullFailed(I[33], 34, 10, "transform");
    if (colors == null) dart.nullFailed(I[33], 35, 10, "colors");
    if (stops == null) dart.nullFailed(I[33], 36, 10, "stops");
    if (opacityList == null) dart.nullFailed(I[33], 37, 10, "opacityList");
    this[gradientUnits$] = gradientUnits;
    this[transform$1] = transform;
    this[colors$0] = colors;
    this[stops$] = stops;
    this[opacityList$] = opacityList;
    if (!(colors[$length] == stops[$length])) dart.assertFailed(null, I[33], 38, 16, "colors.length == stops.length");
    if (!(stops[$length] == opacityList[$length])) dart.assertFailed(null, I[33], 39, 16, "stops.length == opacityList.length");
    gradient$.SvgGradient.__proto__.new.call(this);
    ;
  }).prototype = gradient$.SvgGradient.prototype;
  dart.addTypeTests(gradient$.SvgGradient);
  dart.addTypeCaches(gradient$.SvgGradient);
  dart.setLibraryUri(gradient$.SvgGradient, I[34]);
  dart.setFieldSignature(gradient$.SvgGradient, () => ({
    __proto__: dart.getFields(gradient$.SvgGradient.__proto__),
    gradientUnits: dart.finalFieldType(dart.nullable(gradient$.GradientUnits)),
    transform: dart.finalFieldType(transform$.SvgTransform),
    colors: dart.finalFieldType(core.List$(dart.nullable(color$.PdfColor))),
    stops: dart.finalFieldType(core.List$(core.double)),
    opacityList: dart.finalFieldType(core.List$(core.double))
  }));
  var x1$ = dart.privateName(gradient$, "SvgLinearGradient.x1");
  var y1$ = dart.privateName(gradient$, "SvgLinearGradient.y1");
  var x2$ = dart.privateName(gradient$, "SvgLinearGradient.x2");
  var y2$ = dart.privateName(gradient$, "SvgLinearGradient.y2");
  gradient$.SvgLinearGradient = class SvgLinearGradient extends gradient$.SvgGradient {
    get x1() {
      return this[x1$];
    }
    set x1(value) {
      super.x1 = value;
    }
    get y1() {
      return this[y1$];
    }
    set y1(value) {
      super.y1 = value;
    }
    get x2() {
      return this[x2$];
    }
    set x2(value) {
      super.x2 = value;
    }
    get y2() {
      return this[y2$];
    }
    set y2(value) {
      super.y2 = value;
    }
    static fromXml(element, painter) {
      let t8, t8$, t8$0, t8$1, t8$2, t8$3;
      if (element == null) dart.nullFailed(I[33], 113, 48, "element");
      if (painter == null) dart.nullFailed(I[33], 113, 68, "painter");
      let x1 = (t8 = parser$.SvgParser.getNumeric(element, "x1", null), t8 == null ? null : t8.sizeValue);
      let y1 = (t8$ = parser$.SvgParser.getNumeric(element, "y1", null), t8$ == null ? null : t8$.sizeValue);
      let x2 = (t8$0 = parser$.SvgParser.getNumeric(element, "x2", null), t8$0 == null ? null : t8$0.sizeValue);
      let y2 = (t8$1 = parser$.SvgParser.getNumeric(element, "y2", null), t8$1 == null ? null : t8$1.sizeValue);
      let colors = T$.JSArrayOfPdfColorN().of([]);
      let stops = T$.JSArrayOfdouble().of([]);
      let opacityList = T$.JSArrayOfdouble().of([]);
      for (let child of element.children.whereType(element$.XmlElement)[$where](dart.fn(e => {
        if (e == null) dart.nullFailed(I[33], 125, 17, "e");
        return e.name.local === "stop";
      }, T$.XmlElementTobool()))) {
        parser$.SvgParser.convertStyle(child);
        let color = color$0.SvgColor.fromXml((t8$2 = child.getAttribute("stop-color"), t8$2 == null ? "black" : t8$2), painter);
        let opacity = dart.nullCheck(parser$.SvgParser.getDouble(child, "stop-opacity", {defaultValue: 1.0}));
        let stop = dart.nullCheck(parser$.SvgParser.getNumeric(child, "offset", null, {defaultValue: 0.0})).sizeValue;
        colors[$add](color.color);
        stops[$add](stop);
        opacityList[$add](opacity);
      }
      let gradientUnits = null;
      switch (element.getAttribute("gradientUnits")) {
        case "userSpaceOnUse":
        {
          gradientUnits = gradient$.GradientUnits.userSpaceOnUse;
          break;
        }
        case "objectBoundingBox":
        {
          gradientUnits = gradient$.GradientUnits.objectBoundingBox;
          break;
        }
      }
      let result = new gradient$.SvgLinearGradient.new(gradientUnits, x1, y1, x2, y2, transform$.SvgTransform.fromString(element.getAttribute("gradientTransform")), colors, stops, opacityList);
      let href = null;
      let hrefAttr = (t8$3 = element.getAttribute("href"), t8$3 == null ? element.getAttribute("href", {namespace: "http://www.w3.org/1999/xlink"}) : t8$3);
      if (hrefAttr != null) {
        let hrefElement = painter.parser.findById(hrefAttr[$substring](1));
        if (hrefElement != null) {
          href = gradient$.SvgLinearGradient.fromXml(hrefElement, painter);
          return href.mergeWith(result);
        }
      }
      return result;
    }
    mergeWith(other) {
      let t8, t8$, t8$0, t8$1, t8$2;
      if (other == null) dart.nullFailed(I[33], 180, 49, "other");
      return new gradient$.SvgLinearGradient.new((t8 = other.gradientUnits, t8 == null ? this.gradientUnits : t8), (t8$ = other.x1, t8$ == null ? this.x1 : t8$), (t8$0 = other.y1, t8$0 == null ? this.y1 : t8$0), (t8$1 = other.x2, t8$1 == null ? this.x2 : t8$1), (t8$2 = other.y2, t8$2 == null ? this.y2 : t8$2), dart.test(other.transform.isNotEmpty) ? other.transform : this.transform, dart.test(other.colors[$isNotEmpty]) ? other.colors : this.colors, dart.test(other.stops[$isNotEmpty]) ? other.stops : this.stops, dart.test(other.opacityList[$isNotEmpty]) ? other.opacityList : this.opacityList);
    }
    buildGradient(op, canvas, colors) {
      let t8, t8$, t8$0, t8$1, t8$2;
      if (op == null) dart.nullFailed(I[33], 196, 20, "op");
      if (canvas == null) dart.nullFailed(I[33], 196, 36, "canvas");
      if (colors == null) dart.nullFailed(I[33], 196, 60, "colors");
      let mat = canvas.getTransform();
      if (this.gradientUnits != gradient$.GradientUnits.userSpaceOnUse) {
        let bb = op.boundingBox();
        t8 = mat;
        (() => {
          t8.translate(bb.x, bb.y);
          t8.scale(bb.width, bb.height);
          return t8;
        })();
      }
      if (dart.test(this.transform.isNotEmpty)) {
        mat.multiply(dart.nullCheck(this.transform.matrix));
      }
      return new pattern.PdfShadingPattern.new(op.painter.document, {shading: new shading.PdfShading.new(op.painter.document, {shadingType: shading.PdfShadingType.axial, function: $function.PdfBaseFunction.colorsAndStops(op.painter.document, colors, this.stops), start: new point$.PdfPoint.new((t8$ = this.x1, t8$ == null ? 0.0 : t8$), (t8$0 = this.y1, t8$0 == null ? 0.0 : t8$0)), end: new point$.PdfPoint.new((t8$1 = this.x2, t8$1 == null ? 1.0 : t8$1), (t8$2 = this.y2, t8$2 == null ? 0.0 : t8$2)), extendStart: true, extendEnd: true}), matrix: mat});
    }
    toString() {
      return dart.str(this[$runtimeType]) + " userSpace:" + dart.str(this.gradientUnits) + " x1:" + dart.str(this.x1) + " y1:" + dart.str(this.y1) + " x2:" + dart.str(this.x2) + " y2:" + dart.str(this.y2) + " colors:" + dart.str(this.colors) + " stops:" + dart.str(this.stops) + " opacityList:" + dart.str(this.opacityList);
    }
  };
  (gradient$.SvgLinearGradient.new = function(gradientUnits, x1, y1, x2, y2, transform, colors, stops, opacityList) {
    if (transform == null) dart.nullFailed(I[33], 107, 20, "transform");
    if (colors == null) dart.nullFailed(I[33], 108, 23, "colors");
    if (stops == null) dart.nullFailed(I[33], 109, 20, "stops");
    if (opacityList == null) dart.nullFailed(I[33], 110, 20, "opacityList");
    this[x1$] = x1;
    this[y1$] = y1;
    this[x2$] = x2;
    this[y2$] = y2;
    gradient$.SvgLinearGradient.__proto__.new.call(this, gradientUnits, transform, colors, stops, opacityList);
    ;
  }).prototype = gradient$.SvgLinearGradient.prototype;
  dart.addTypeTests(gradient$.SvgLinearGradient);
  dart.addTypeCaches(gradient$.SvgLinearGradient);
  dart.setMethodSignature(gradient$.SvgLinearGradient, () => ({
    __proto__: dart.getMethods(gradient$.SvgLinearGradient.__proto__),
    mergeWith: dart.fnType(gradient$.SvgLinearGradient, [gradient$.SvgLinearGradient]),
    buildGradient: dart.fnType(pattern.PdfPattern, [operation.SvgOperation, graphics.PdfGraphics, core.List$(dart.nullable(color$.PdfColor))])
  }));
  dart.setLibraryUri(gradient$.SvgLinearGradient, I[34]);
  dart.setFieldSignature(gradient$.SvgLinearGradient, () => ({
    __proto__: dart.getFields(gradient$.SvgLinearGradient.__proto__),
    x1: dart.finalFieldType(dart.nullable(core.double)),
    y1: dart.finalFieldType(dart.nullable(core.double)),
    x2: dart.finalFieldType(dart.nullable(core.double)),
    y2: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(gradient$.SvgLinearGradient, ['toString']);
  var r$ = dart.privateName(gradient$, "SvgRadialGradient.r");
  var cx$ = dart.privateName(gradient$, "SvgRadialGradient.cx");
  var cy$ = dart.privateName(gradient$, "SvgRadialGradient.cy");
  var fr$ = dart.privateName(gradient$, "SvgRadialGradient.fr");
  var fx$ = dart.privateName(gradient$, "SvgRadialGradient.fx");
  var fy$ = dart.privateName(gradient$, "SvgRadialGradient.fy");
  gradient$.SvgRadialGradient = class SvgRadialGradient extends gradient$.SvgGradient {
    get r() {
      return this[r$];
    }
    set r(value) {
      super.r = value;
    }
    get cx() {
      return this[cx$];
    }
    set cx(value) {
      super.cx = value;
    }
    get cy() {
      return this[cy$];
    }
    set cy(value) {
      super.cy = value;
    }
    get fr() {
      return this[fr$];
    }
    set fr(value) {
      super.fr = value;
    }
    get fx() {
      return this[fx$];
    }
    set fx(value) {
      super.fx = value;
    }
    get fy() {
      return this[fy$];
    }
    set fy(value) {
      super.fy = value;
    }
    static fromXml(element, painter) {
      let t8, t8$;
      if (element == null) dart.nullFailed(I[33], 249, 48, "element");
      if (painter == null) dart.nullFailed(I[33], 249, 68, "painter");
      let r = dart.nullCheck(parser$.SvgParser.getNumeric(element, "r", null, {defaultValue: 0.5})).sizeValue;
      let cx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cx", null, {defaultValue: 0.5})).sizeValue;
      let cy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cy", null, {defaultValue: 0.5})).sizeValue;
      let fr = dart.nullCheck(parser$.SvgParser.getNumeric(element, "fr", null, {defaultValue: 0.0})).sizeValue;
      let fx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "fx", null, {defaultValue: cx})).sizeValue;
      let fy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "fy", null, {defaultValue: cy})).sizeValue;
      let colors = T$.JSArrayOfPdfColorN().of([]);
      let stops = T$.JSArrayOfdouble().of([]);
      let opacityList = T$.JSArrayOfdouble().of([]);
      for (let child of element.children.whereType(element$.XmlElement)[$where](dart.fn(e => {
        if (e == null) dart.nullFailed(I[33], 269, 17, "e");
        return e.name.local === "stop";
      }, T$.XmlElementTobool()))) {
        parser$.SvgParser.convertStyle(child);
        let color = color$0.SvgColor.fromXml((t8 = child.getAttribute("stop-color"), t8 == null ? "black" : t8), painter);
        let opacity = parser$.SvgParser.getDouble(child, "stop-opacity", {defaultValue: 1.0});
        let stop = dart.nullCheck(parser$.SvgParser.getNumeric(child, "offset", null, {defaultValue: 0.0})).sizeValue;
        colors[$add](color.color);
        stops[$add](stop);
        opacityList[$add](dart.nullCheck(opacity));
      }
      let gradientUnits = null;
      switch (element.getAttribute("gradientUnits")) {
        case "userSpaceOnUse":
        {
          gradientUnits = gradient$.GradientUnits.userSpaceOnUse;
          break;
        }
        case "objectBoundingBox":
        {
          gradientUnits = gradient$.GradientUnits.objectBoundingBox;
          break;
        }
      }
      let result = new gradient$.SvgRadialGradient.new(gradientUnits, r, cx, cy, fr, fx, fy, transform$.SvgTransform.fromString(element.getAttribute("gradientTransform")), colors, stops, opacityList);
      let href = null;
      let hrefAttr = (t8$ = element.getAttribute("href"), t8$ == null ? element.getAttribute("href", {namespace: "http://www.w3.org/1999/xlink"}) : t8$);
      if (hrefAttr != null) {
        let hrefElement = painter.parser.findById(hrefAttr[$substring](1));
        if (hrefElement != null) {
          href = gradient$.SvgRadialGradient.fromXml(hrefElement, painter);
          return href.mergeWith(result);
        }
      }
      return result;
    }
    mergeWith(other) {
      let t8, t8$, t8$0, t8$1, t8$2, t8$3, t8$4;
      if (other == null) dart.nullFailed(I[33], 327, 49, "other");
      return new gradient$.SvgRadialGradient.new((t8 = other.gradientUnits, t8 == null ? this.gradientUnits : t8), (t8$ = other.r, t8$ == null ? this.r : t8$), (t8$0 = other.cx, t8$0 == null ? this.cx : t8$0), (t8$1 = other.cy, t8$1 == null ? this.cy : t8$1), (t8$2 = other.fr, t8$2 == null ? this.fr : t8$2), (t8$3 = other.fx, t8$3 == null ? this.fx : t8$3), (t8$4 = other.fy, t8$4 == null ? this.fy : t8$4), dart.test(other.transform.isNotEmpty) ? other.transform : this.transform, dart.test(other.colors[$isNotEmpty]) ? other.colors : this.colors, dart.test(other.stops[$isNotEmpty]) ? other.stops : this.stops, dart.test(other.opacityList[$isNotEmpty]) ? other.opacityList : this.opacityList);
    }
    buildGradient(op, canvas, colors) {
      let t8, t8$, t8$0, t8$1, t8$2, t8$3, t8$4, t8$5, t8$6;
      if (op == null) dart.nullFailed(I[33], 345, 20, "op");
      if (canvas == null) dart.nullFailed(I[33], 345, 36, "canvas");
      if (colors == null) dart.nullFailed(I[33], 345, 60, "colors");
      let mat = canvas.getTransform();
      if (this.gradientUnits != gradient$.GradientUnits.userSpaceOnUse) {
        let bb = op.boundingBox();
        t8 = mat;
        (() => {
          t8.translate(bb.x, bb.y);
          t8.scale(bb.width, bb.height);
          return t8;
        })();
      }
      if (dart.test(this.transform.isNotEmpty)) {
        mat.multiply(dart.nullCheck(this.transform.matrix));
      }
      return new pattern.PdfShadingPattern.new(op.painter.document, {shading: new shading.PdfShading.new(op.painter.document, {shadingType: shading.PdfShadingType.radial, function: $function.PdfBaseFunction.colorsAndStops(op.painter.document, colors, this.stops), start: new point$.PdfPoint.new((t8$0 = (t8$ = this.fx, t8$ == null ? this.cx : t8$), t8$0 == null ? 0.5 : t8$0), (t8$2 = (t8$1 = this.fy, t8$1 == null ? this.cy : t8$1), t8$2 == null ? 0.5 : t8$2)), end: new point$.PdfPoint.new((t8$3 = this.cx, t8$3 == null ? 0.5 : t8$3), (t8$4 = this.cy, t8$4 == null ? 0.5 : t8$4)), radius0: (t8$5 = this.fr, t8$5 == null ? 0.0 : t8$5), radius1: (t8$6 = this.r, t8$6 == null ? 0.5 : t8$6), extendStart: true, extendEnd: true}), matrix: mat});
    }
    toString() {
      return dart.str(this[$runtimeType]) + " userSpace:" + dart.str(this.gradientUnits) + " cx:" + dart.str(this.cx) + " cy:" + dart.str(this.cy) + " r:" + dart.str(this.r) + " fx:" + dart.str(this.fx) + " fy:" + dart.str(this.fy) + " fr:" + dart.str(this.fr) + " colors:" + dart.str(this.colors) + " stops:" + dart.str(this.stops) + " opacityList:" + dart.str(this.opacityList);
    }
  };
  (gradient$.SvgRadialGradient.new = function(gradientUnits, r, cx, cy, fr, fx, fy, transform, colors, stops, opacityList) {
    if (transform == null) dart.nullFailed(I[33], 243, 18, "transform");
    if (colors == null) dart.nullFailed(I[33], 244, 21, "colors");
    if (stops == null) dart.nullFailed(I[33], 245, 18, "stops");
    if (opacityList == null) dart.nullFailed(I[33], 246, 18, "opacityList");
    this[r$] = r;
    this[cx$] = cx;
    this[cy$] = cy;
    this[fr$] = fr;
    this[fx$] = fx;
    this[fy$] = fy;
    gradient$.SvgRadialGradient.__proto__.new.call(this, gradientUnits, transform, colors, stops, opacityList);
    ;
  }).prototype = gradient$.SvgRadialGradient.prototype;
  dart.addTypeTests(gradient$.SvgRadialGradient);
  dart.addTypeCaches(gradient$.SvgRadialGradient);
  dart.setMethodSignature(gradient$.SvgRadialGradient, () => ({
    __proto__: dart.getMethods(gradient$.SvgRadialGradient.__proto__),
    mergeWith: dart.fnType(gradient$.SvgRadialGradient, [gradient$.SvgRadialGradient]),
    buildGradient: dart.fnType(pattern.PdfPattern, [operation.SvgOperation, graphics.PdfGraphics, core.List$(dart.nullable(color$.PdfColor))])
  }));
  dart.setLibraryUri(gradient$.SvgRadialGradient, I[34]);
  dart.setFieldSignature(gradient$.SvgRadialGradient, () => ({
    __proto__: dart.getFields(gradient$.SvgRadialGradient.__proto__),
    r: dart.finalFieldType(dart.nullable(core.double)),
    cx: dart.finalFieldType(dart.nullable(core.double)),
    cy: dart.finalFieldType(dart.nullable(core.double)),
    fr: dart.finalFieldType(dart.nullable(core.double)),
    fx: dart.finalFieldType(dart.nullable(core.double)),
    fy: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(gradient$.SvgRadialGradient, ['toString']);
  var parser$0 = dart.privateName(painter$, "SvgPainter.parser");
  var document$1 = dart.privateName(painter$, "SvgPainter.document");
  var boundingBox$ = dart.privateName(painter$, "SvgPainter.boundingBox");
  var _fontCache = dart.privateName(painter$, "_fontCache");
  var _canvas$ = dart.privateName(painter$, "_canvas");
  painter$.SvgPainter = class SvgPainter extends core.Object {
    get parser() {
      return this[parser$0];
    }
    set parser(value) {
      super.parser = value;
    }
    get document() {
      return this[document$1];
    }
    set document(value) {
      super.document = value;
    }
    get boundingBox() {
      return this[boundingBox$];
    }
    set boundingBox(value) {
      super.boundingBox = value;
    }
    paint() {
      let brush = this.parser.colorFilter == null ? brush$.SvgBrush.defaultContext : brush$.SvgBrush.defaultContext.copyWith({fill: new color$0.SvgColor.new({color: this.parser.colorFilter})});
      group.SvgGroup.fromXml(this.parser.root, this, brush).paint(dart.nullCheck(this[_canvas$]));
    }
    getFontCache(fontFamily, fontStyle, fontWeight) {
      if (fontFamily == null) dart.nullFailed(I[37], 52, 29, "fontFamily");
      if (fontStyle == null) dart.nullFailed(I[37], 52, 48, "fontStyle");
      if (fontWeight == null) dart.nullFailed(I[37], 52, 66, "fontWeight");
      let cache = dart.str(fontFamily) + "-" + dart.str(fontStyle) + "-" + dart.str(fontWeight);
      if (!dart.test(this[_fontCache][$containsKey](cache))) {
        this[_fontCache][$_set](cache, this.getFont(fontFamily, fontStyle, fontWeight));
      }
      return this[_fontCache][$_get](cache);
    }
    getFont(fontFamily, fontStyle, fontWeight) {
      if (fontFamily == null) dart.nullFailed(I[37], 62, 23, "fontFamily");
      if (fontStyle == null) dart.nullFailed(I[37], 62, 42, "fontStyle");
      if (fontWeight == null) dart.nullFailed(I[37], 62, 60, "fontWeight");
      switch (fontFamily) {
        case "serif":
        {
          switch (fontStyle) {
            case "normal":
            {
              switch (fontWeight) {
                case "normal":
                case "lighter":
                {
                  return font$.Font.times();
                }
              }
              return font$.Font.timesBold();
            }
          }
          switch (fontWeight) {
            case "normal":
            case "lighter":
            {
              return font$.Font.timesItalic();
            }
          }
          return font$.Font.timesBoldItalic();
        }
        case "monospace":
        {
          switch (fontStyle) {
            case "normal":
            {
              switch (fontWeight) {
                case "normal":
                case "lighter":
                {
                  return font$.Font.courier();
                }
              }
              return font$.Font.courierBold();
            }
          }
          switch (fontWeight) {
            case "normal":
            case "lighter":
            {
              return font$.Font.courierOblique();
            }
          }
          return font$.Font.courierBoldOblique();
        }
      }
      switch (fontStyle) {
        case "normal":
        {
          switch (fontWeight) {
            case "normal":
            case "lighter":
            {
              return font$.Font.helvetica();
            }
          }
          return font$.Font.helveticaBold();
        }
      }
      switch (fontWeight) {
        case "normal":
        case "lighter":
        {
          return font$.Font.helveticaOblique();
        }
      }
      return font$.Font.helveticaBoldOblique();
    }
  };
  (painter$.SvgPainter.new = function(parser, _canvas, document, boundingBox) {
    if (parser == null) dart.nullFailed(I[37], 27, 10, "parser");
    if (document == null) dart.nullFailed(I[37], 29, 10, "document");
    if (boundingBox == null) dart.nullFailed(I[37], 30, 10, "boundingBox");
    this[_fontCache] = new (T$.IdentityMapOfString$Font()).new();
    this[parser$0] = parser;
    this[_canvas$] = _canvas;
    this[document$1] = document;
    this[boundingBox$] = boundingBox;
    ;
  }).prototype = painter$.SvgPainter.prototype;
  dart.addTypeTests(painter$.SvgPainter);
  dart.addTypeCaches(painter$.SvgPainter);
  dart.setMethodSignature(painter$.SvgPainter, () => ({
    __proto__: dart.getMethods(painter$.SvgPainter.__proto__),
    paint: dart.fnType(dart.void, []),
    getFontCache: dart.fnType(dart.nullable(font$.Font), [core.String, core.String, core.String]),
    getFont: dart.fnType(font$.Font, [core.String, core.String, core.String])
  }));
  dart.setLibraryUri(painter$.SvgPainter, I[38]);
  dart.setFieldSignature(painter$.SvgPainter, () => ({
    __proto__: dart.getFields(painter$.SvgPainter.__proto__),
    parser: dart.finalFieldType(parser$.SvgParser),
    [_canvas$]: dart.finalFieldType(dart.nullable(graphics.PdfGraphics)),
    document: dart.finalFieldType(document.PdfDocument),
    boundingBox: dart.finalFieldType(rect$.PdfRect),
    [_fontCache]: dart.finalFieldType(core.Map$(core.String, font$.Font))
  }));
  var fit$ = dart.privateName(svg$, "SvgImage.fit");
  var alignment$ = dart.privateName(svg$, "SvgImage.alignment");
  var clip$0 = dart.privateName(svg$, "SvgImage.clip");
  var width$3 = dart.privateName(svg$, "SvgImage.width");
  var height$2 = dart.privateName(svg$, "SvgImage.height");
  var __SvgImage_sizes = dart.privateName(svg$, "_#SvgImage#sizes");
  var __SvgImage_sizes_isSet = dart.privateName(svg$, "_#SvgImage#sizes#isSet");
  var _svgParser$ = dart.privateName(svg$, "_svgParser");
  var _name$5 = dart.privateName(basic, "_name");
  svg$.SvgImage = class SvgImage extends widget$.Widget {
    get fit() {
      return this[fit$];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get clip() {
      return this[clip$0];
    }
    set clip(value) {
      super.clip = value;
    }
    get width() {
      return this[width$3];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$2];
    }
    set height(value) {
      super.height = value;
    }
    static new(opts) {
      let svg = opts && 'svg' in opts ? opts.svg : null;
      if (svg == null) dart.nullFailed(I[39], 28, 21, "svg");
      let fit = opts && 'fit' in opts ? opts.fit : C[74] || CT.C74;
      if (fit == null) dart.nullFailed(I[39], 29, 12, "fit");
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      if (alignment == null) dart.nullFailed(I[39], 30, 15, "alignment");
      let clip = opts && 'clip' in opts ? opts.clip : true;
      if (clip == null) dart.nullFailed(I[39], 31, 10, "clip");
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      let xml = document$.XmlDocument.parse(svg);
      let parser = parser$.SvgParser.new({xml: xml, colorFilter: colorFilter});
      return new svg$.SvgImage._fromParser(parser, fit, alignment, clip, width, height);
    }
    get sizes() {
      let t8;
      return dart.test(this[__SvgImage_sizes_isSet]) ? (t8 = this[__SvgImage_sizes], t8) : dart.throw(new _internal.LateError.fieldNI("sizes"));
    }
    set sizes(t8) {
      if (t8 == null) dart.nullFailed(I[39], 73, 20, "null");
      this[__SvgImage_sizes_isSet] = true;
      this[__SvgImage_sizes] = t8;
    }
    layout(context, constraints, opts) {
      let t9, t9$;
      if (context == null) dart.nullFailed(I[39], 76, 23, "context");
      if (constraints == null) dart.nullFailed(I[39], 76, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[39], 77, 13, "parentUsesSize");
      let w = this.width != null || this[_svgParser$].width != null ? constraints.constrainWidth((t9 = this.width, t9 == null ? dart.nullCheck(this[_svgParser$].width) : t9)) : dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : constraints.constrainWidth(this[_svgParser$].viewBox.width);
      let h = this.height != null || this[_svgParser$].height != null ? constraints.constrainHeight((t9$ = this.height, t9$ == null ? dart.nullCheck(this[_svgParser$].height) : t9$)) : dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : constraints.constrainHeight(this[_svgParser$].viewBox.height);
      this.sizes = geometry.applyBoxFit(this.fit, this[_svgParser$].viewBox.size, new point$.PdfPoint.new(w, h));
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, dart.nullCheck(this.sizes.destination));
    }
    paint(context) {
      let t9, t9$;
      if (context == null) dart.nullFailed(I[39], 94, 22, "context");
      super.paint(context);
      let _alignment = new geometry.Alignment.new(this.alignment.x, -dart.notNull(this.alignment.y));
      let sourceRect = _alignment.inscribe(dart.nullCheck(this.sizes.source), this[_svgParser$].viewBox);
      let sx = dart.notNull(dart.nullCheck(this.sizes.destination).x) / dart.notNull(dart.nullCheck(this.sizes.source).x);
      let sy = dart.notNull(dart.nullCheck(this.sizes.destination).y) / dart.notNull(dart.nullCheck(this.sizes.source).y);
      let dx = dart.notNull(sourceRect.x) * sx;
      let dy = dart.notNull(sourceRect.y) * sy;
      let mat = (t9 = vector_math_64.Matrix4.identity(), (() => {
        t9.translate(dart.notNull(dart.nullCheck(this.box).x) - dx, dart.notNull(dart.nullCheck(this.box).y) + dy + dart.notNull(dart.nullCheck(this.box).height));
        t9.scale(sx, -sy);
        return t9;
      })());
      context.canvas.saveContext();
      if (dart.test(this.clip)) {
        t9$ = context.canvas;
        (() => {
          t9$.drawBox(dart.nullCheck(this.box));
          t9$.clipPath();
          return t9$;
        })();
      }
      context.canvas.setTransform(mat);
      let painter = new painter$.SvgPainter.new(this[_svgParser$], context.canvas, context.document, new rect$.PdfRect.new(0.0, 0.0, context.page.pageFormat.width, context.page.pageFormat.height));
      painter.paint();
      context.canvas.restoreContext();
    }
  };
  (svg$.SvgImage._fromParser = function(_svgParser, fit, alignment, clip, width, height) {
    if (_svgParser == null) dart.nullFailed(I[39], 53, 10, "_svgParser");
    if (fit == null) dart.nullFailed(I[39], 54, 10, "fit");
    if (alignment == null) dart.nullFailed(I[39], 55, 10, "alignment");
    if (clip == null) dart.nullFailed(I[39], 56, 10, "clip");
    this[__SvgImage_sizes] = null;
    this[__SvgImage_sizes_isSet] = false;
    this[_svgParser$] = _svgParser;
    this[fit$] = fit;
    this[alignment$] = alignment;
    this[clip$0] = clip;
    this[width$3] = width;
    this[height$2] = height;
    svg$.SvgImage.__proto__.new.call(this);
    ;
  }).prototype = svg$.SvgImage.prototype;
  dart.addTypeTests(svg$.SvgImage);
  dart.addTypeCaches(svg$.SvgImage);
  dart.setMethodSignature(svg$.SvgImage, () => ({
    __proto__: dart.getMethods(svg$.SvgImage.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setGetterSignature(svg$.SvgImage, () => ({
    __proto__: dart.getGetters(svg$.SvgImage.__proto__),
    sizes: geometry.FittedSizes
  }));
  dart.setSetterSignature(svg$.SvgImage, () => ({
    __proto__: dart.getSetters(svg$.SvgImage.__proto__),
    sizes: geometry.FittedSizes
  }));
  dart.setLibraryUri(svg$.SvgImage, I[40]);
  dart.setFieldSignature(svg$.SvgImage, () => ({
    __proto__: dart.getFields(svg$.SvgImage.__proto__),
    [_svgParser$]: dart.finalFieldType(parser$.SvgParser),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment),
    clip: dart.finalFieldType(core.bool),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    [__SvgImage_sizes]: dart.fieldType(dart.nullable(geometry.FittedSizes)),
    [__SvgImage_sizes_isSet]: dart.fieldType(core.bool)
  }));
  var svg$0 = dart.privateName(svg$, "DecorationSvgImage.svg");
  var fit$0 = dart.privateName(svg$, "DecorationSvgImage.fit");
  var alignment$0 = dart.privateName(svg$, "DecorationSvgImage.alignment");
  decoration$.DecorationGraphic = class DecorationGraphic extends core.Object {};
  (decoration$.DecorationGraphic.new = function() {
    ;
  }).prototype = decoration$.DecorationGraphic.prototype;
  dart.addTypeTests(decoration$.DecorationGraphic);
  dart.addTypeCaches(decoration$.DecorationGraphic);
  dart.setLibraryUri(decoration$.DecorationGraphic, I[41]);
  svg$.DecorationSvgImage = class DecorationSvgImage extends decoration$.DecorationGraphic {
    get svg() {
      return this[svg$0];
    }
    set svg(value) {
      super.svg = value;
    }
    get fit() {
      return this[fit$0];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$0];
    }
    set alignment(value) {
      super.alignment = value;
    }
    paint(context, box) {
      if (context == null) dart.nullFailed(I[39], 148, 22, "context");
      if (box == null) dart.nullFailed(I[39], 148, 39, "box");
      widget$.Widget.draw(svg$.SvgImage.new({svg: this.svg, fit: this.fit, alignment: this.alignment}), {offset: box.offset, context: context, constraints: new geometry.BoxConstraints.tight(box.size)});
    }
  };
  (svg$.DecorationSvgImage.new = function(opts) {
    let svg = opts && 'svg' in opts ? opts.svg : null;
    if (svg == null) dart.nullFailed(I[39], 138, 19, "svg");
    let fit = opts && 'fit' in opts ? opts.fit : C[75] || CT.C75;
    if (fit == null) dart.nullFailed(I[39], 139, 10, "fit");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    if (alignment == null) dart.nullFailed(I[39], 140, 10, "alignment");
    this[svg$0] = svg;
    this[fit$0] = fit;
    this[alignment$0] = alignment;
    svg$.DecorationSvgImage.__proto__.new.call(this);
    ;
  }).prototype = svg$.DecorationSvgImage.prototype;
  dart.addTypeTests(svg$.DecorationSvgImage);
  dart.addTypeCaches(svg$.DecorationSvgImage);
  dart.setMethodSignature(svg$.DecorationSvgImage, () => ({
    __proto__: dart.getMethods(svg$.DecorationSvgImage.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(svg$.DecorationSvgImage, I[40]);
  dart.setFieldSignature(svg$.DecorationSvgImage, () => ({
    __proto__: dart.getFields(svg$.DecorationSvgImage.__proto__),
    svg: dart.finalFieldType(core.String),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment)
  }));
  var color$3 = dart.privateName(placeholders, "Placeholder.color");
  var strokeWidth$1 = dart.privateName(placeholders, "Placeholder.strokeWidth");
  var fallbackWidth$ = dart.privateName(placeholders, "Placeholder.fallbackWidth");
  var fallbackHeight$ = dart.privateName(placeholders, "Placeholder.fallbackHeight");
  placeholders.Placeholder = class Placeholder extends widget$.Widget {
    get color() {
      return this[color$3];
    }
    set color(value) {
      super.color = value;
    }
    get strokeWidth() {
      return this[strokeWidth$1];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get fallbackWidth() {
      return this[fallbackWidth$];
    }
    set fallbackWidth(value) {
      super.fallbackWidth = value;
    }
    get fallbackHeight() {
      return this[fallbackHeight$];
    }
    set fallbackHeight(value) {
      super.fallbackHeight = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[42], 45, 23, "context");
      if (constraints == null) dart.nullFailed(I[42], 45, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[42], 46, 13, "parentUsesSize");
      this.box = new rect$.PdfRect.new(0.0, 0.0, constraints.constrainWidth(dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : this.fallbackWidth), constraints.constrainHeight(dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : this.fallbackHeight));
    }
    paint(context) {
      let t9;
      if (context == null) dart.nullFailed(I[42], 58, 22, "context");
      super.paint(context);
      t9 = context.canvas;
      (() => {
        t9.setStrokeColor(this.color);
        t9.moveTo(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t9.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).top);
        t9.moveTo(dart.nullCheck(this.box).x, dart.nullCheck(this.box).top);
        t9.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).y);
        t9.drawBox(dart.nullCheck(this.box));
        t9.setLineWidth(this.strokeWidth);
        t9.strokePath();
        return t9;
      })();
    }
  };
  (placeholders.Placeholder.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[76] || CT.C76;
    if (color == null) dart.nullFailed(I[42], 31, 13, "color");
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 2;
    if (strokeWidth == null) dart.nullFailed(I[42], 32, 12, "strokeWidth");
    let fallbackWidth = opts && 'fallbackWidth' in opts ? opts.fallbackWidth : 400;
    if (fallbackWidth == null) dart.nullFailed(I[42], 33, 12, "fallbackWidth");
    let fallbackHeight = opts && 'fallbackHeight' in opts ? opts.fallbackHeight : 400;
    if (fallbackHeight == null) dart.nullFailed(I[42], 34, 12, "fallbackHeight");
    this[color$3] = color;
    this[strokeWidth$1] = strokeWidth;
    this[fallbackWidth$] = fallbackWidth;
    this[fallbackHeight$] = fallbackHeight;
    placeholders.Placeholder.__proto__.new.call(this);
    ;
  }).prototype = placeholders.Placeholder.prototype;
  dart.addTypeTests(placeholders.Placeholder);
  dart.addTypeCaches(placeholders.Placeholder);
  dart.setMethodSignature(placeholders.Placeholder, () => ({
    __proto__: dart.getMethods(placeholders.Placeholder.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(placeholders.Placeholder, I[43]);
  dart.setFieldSignature(placeholders.Placeholder, () => ({
    __proto__: dart.getFields(placeholders.Placeholder.__proto__),
    color: dart.finalFieldType(color$.PdfColor),
    strokeWidth: dart.finalFieldType(core.double),
    fallbackWidth: dart.finalFieldType(core.double),
    fallbackHeight: dart.finalFieldType(core.double)
  }));
  var color$4 = dart.privateName(placeholders, "PdfLogo.color");
  var fit$1 = dart.privateName(placeholders, "PdfLogo.fit");
  var _child = dart.privateName(widget$, "_child");
  const Widget_SpanningWidget$36$ = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$.new = function() {
    Widget_SpanningWidget$36$.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$, multi_page.SpanningWidget);
  widget$.StatelessWidget = class StatelessWidget extends Widget_SpanningWidget$36$ {
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[5], 226, 23, "context");
      if (constraints == null) dart.nullFailed(I[5], 226, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[5], 227, 13, "parentUsesSize");
      this[_child] == null ? this[_child] = this.build(context) : null;
      if (this[_child] != null) {
        dart.nullCheck(this[_child]).layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this[_child]).box != null)) dart.assertFailed(null, I[5], 232, 14, "_child!.box != null");
        this.box = dart.nullCheck(this[_child]).box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paint(context) {
      let t9;
      if (context == null) dart.nullFailed(I[5], 240, 22, "context");
      super.paint(context);
      if (this[_child] != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t9 = context.canvas;
        (() => {
          t9.saveContext();
          t9.setTransform(mat);
          return t9;
        })();
        dart.nullCheck(this[_child]).paint(context);
        context.canvas.restoreContext();
      }
    }
    get canSpan() {
      return multi_page.SpanningWidget.is(this[_child]) && dart.test(multi_page.SpanningWidget.as(this[_child]).canSpan);
    }
    get hasMoreWidgets() {
      return multi_page.SpanningWidget.is(this[_child]) && dart.test(multi_page.SpanningWidget.as(this[_child]).hasMoreWidgets);
    }
    restoreContext(context) {
      multi_page.WidgetContext.as(context);
      if (context == null) dart.nullFailed(I[5], 266, 47, "context");
      if (multi_page.SpanningWidget.is(this[_child])) {
        multi_page.SpanningWidget.as(this[_child]).restoreContext(context);
      }
    }
    saveContext() {
      if (multi_page.SpanningWidget.is(this[_child])) {
        return multi_page.SpanningWidget.as(this[_child]).saveContext();
      }
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (widget$.StatelessWidget.new = function() {
    this[_child] = null;
    widget$.StatelessWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.StatelessWidget.prototype;
  dart.addTypeTests(widget$.StatelessWidget);
  dart.addTypeCaches(widget$.StatelessWidget);
  dart.setMethodSignature(widget$.StatelessWidget, () => ({
    __proto__: dart.getMethods(widget$.StatelessWidget.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(widget$.StatelessWidget, () => ({
    __proto__: dart.getGetters(widget$.StatelessWidget.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(widget$.StatelessWidget, I[6]);
  dart.setFieldSignature(widget$.StatelessWidget, () => ({
    __proto__: dart.getFields(widget$.StatelessWidget.__proto__),
    [_child]: dart.fieldType(dart.nullable(widget$.Widget))
  }));
  placeholders.PdfLogo = class PdfLogo extends widget$.StatelessWidget {
    get color() {
      return this[color$4];
    }
    set color(value) {
      super.color = value;
    }
    get fit() {
      return this[fit$1];
    }
    set fit(value) {
      super.fit = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[42], 83, 24, "context");
      return new image$1.Shape.new(placeholders.PdfLogo.pdf, {width: 24.0, height: 27.0, fillColor: this.color, fit: this.fit});
    }
  };
  (placeholders.PdfLogo.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[77] || CT.C77;
    if (color == null) dart.nullFailed(I[42], 74, 17, "color");
    let fit = opts && 'fit' in opts ? opts.fit : C[74] || CT.C74;
    if (fit == null) dart.nullFailed(I[42], 74, 45, "fit");
    this[color$4] = color;
    this[fit$1] = fit;
    placeholders.PdfLogo.__proto__.new.call(this);
    ;
  }).prototype = placeholders.PdfLogo.prototype;
  dart.addTypeTests(placeholders.PdfLogo);
  dart.addTypeCaches(placeholders.PdfLogo);
  dart.setMethodSignature(placeholders.PdfLogo, () => ({
    __proto__: dart.getMethods(placeholders.PdfLogo.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(placeholders.PdfLogo, I[43]);
  dart.setFieldSignature(placeholders.PdfLogo, () => ({
    __proto__: dart.getFields(placeholders.PdfLogo.__proto__),
    color: dart.finalFieldType(color$.PdfColor),
    fit: dart.finalFieldType(basic.BoxFit)
  }));
  dart.defineLazy(placeholders.PdfLogo, {
    /*placeholders.PdfLogo.pdf*/get pdf() {
      return "M 2.424 26.712 L 2.424 26.712 C 2.076 26.712 1.742 26.599 1.457 26.386 C 0.416 25.605 0.276 24.736 0.342 24.144 C 0.524 22.516 2.537 20.812 6.327 19.076 C 7.831 15.78 9.262 11.719 10.115 8.326 C 9.117 6.154 8.147 3.336 8.854 1.683 C 9.102 1.104 9.411 0.66 9.988 0.468 C 10.216 0.392 10.792 0.296 11.004 0.296 C 11.508 0.296 11.951 0.945 12.265 1.345 C 12.56 1.721 13.229 2.518 11.892 8.147 C 13.24 10.931 15.15 13.767 16.98 15.709 C 18.291 15.472 19.419 15.351 20.338 15.351 C 21.904 15.351 22.853 15.716 23.24 16.468 C 23.56 17.09 23.429 17.817 22.85 18.628 C 22.293 19.407 21.525 19.819 20.63 19.819 C 19.414 19.819 17.998 19.051 16.419 17.534 C 13.582 18.127 10.269 19.185 7.591 20.356 C 6.755 22.13 5.954 23.559 5.208 24.607 C 4.183 26.042 3.299 26.712 2.424 26.712 Z M 5.086 21.586 C 2.949 22.787 2.078 23.774 2.015 24.33 C 2.005 24.422 1.978 24.664 2.446 25.022 C 2.595 24.975 3.465 24.578 5.086 21.586 Z M 18.723 17.144 C 19.538 17.771 19.737 18.088 20.27 18.088 C 20.504 18.088 21.171 18.078 21.48 17.647 C 21.629 17.438 21.687 17.304 21.71 17.232 C 21.587 17.167 21.424 17.035 20.535 17.035 C 20.03 17.036 19.395 17.058 18.723 17.144 Z M 11.253 10.562 C 10.538 13.036 9.594 15.707 8.579 18.126 C 10.669 17.315 12.941 16.607 15.075 16.106 C 13.725 14.538 12.376 12.58 11.253 10.562 Z M 10.646 2.1 C 10.548 2.133 9.316 3.857 10.742 5.316 C 11.691 3.201 10.689 2.086 10.646 2.1 Z";
    }
  }, false);
  var fit$2 = dart.privateName(placeholders, "FlutterLogo.fit");
  placeholders.FlutterLogo = class FlutterLogo extends widget$.StatelessWidget {
    get fit() {
      return this[fit$2];
    }
    set fit(value) {
      super.fit = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[42], 94, 24, "context");
      return svg$.SvgImage.new({svg: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg version=\"1.1\" viewBox=\"0 0 256 317\" xmlns=\"http://www.w3.org/2000/svg\"><defs><linearGradient id=\"a\" x1=\"10%\" x2=\"67%\" y1=\"40%\" y2=\"35%\"><stop stop-color=\"#1a237e\" stop-opacity=\".4\" offset=\"0\"/><stop stop-color=\"#1a237e\" stop-opacity=\"0\" offset=\"1\"/></linearGradient></defs><polygon points=\"157.67 0 0 157.67 48.801 206.47 255.27 0\" fill=\"#54c5f8\"/><polygon points=\"156.57 145.4 72.149 229.82 121.13 279.53 169.84 230.82 255.27 145.4\" fill=\"#54c5f8\"/><polygon points=\"121.13 279.53 158.21 316.61 255.27 316.61 169.84 230.82\" fill=\"#01579b\"/><polygon points=\"71.6 230.36 120.4 181.56 169.84 230.82 121.13 279.53\" fill=\"#29b6f6\"/><polygon points=\"121.13 279.53 189.44 253.83 167.85 233.75\" fill=\"url(#a)\" fill-opacity=\".8\"/></svg>", fit: this.fit});
    }
  };
  (placeholders.FlutterLogo.new = function(opts) {
    let fit = opts && 'fit' in opts ? opts.fit : C[74] || CT.C74;
    if (fit == null) dart.nullFailed(I[42], 89, 21, "fit");
    this[fit$2] = fit;
    placeholders.FlutterLogo.__proto__.new.call(this);
    ;
  }).prototype = placeholders.FlutterLogo.prototype;
  dart.addTypeTests(placeholders.FlutterLogo);
  dart.addTypeCaches(placeholders.FlutterLogo);
  dart.setMethodSignature(placeholders.FlutterLogo, () => ({
    __proto__: dart.getMethods(placeholders.FlutterLogo.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(placeholders.FlutterLogo, I[43]);
  dart.setFieldSignature(placeholders.FlutterLogo, () => ({
    __proto__: dart.getFields(placeholders.FlutterLogo.__proto__),
    fit: dart.finalFieldType(basic.BoxFit)
  }));
  var random$ = dart.privateName(placeholders, "LoremText.random");
  placeholders.LoremText = class LoremText extends core.Object {
    get random() {
      return this[random$];
    }
    set random(value) {
      super.random = value;
    }
    word() {
      return placeholders.LoremText.words[$_get](this.random.nextInt(dart.notNull(placeholders.LoremText.words[$length]) - 1));
    }
    sentence(length) {
      if (length == null) dart.nullFailed(I[42], 116, 23, "length");
      let wordList = T$.JSArrayOfString().of([]);
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let w = this.word();
        if (i < dart.notNull(length) - 1 && this.random.nextInt(10) === 0) {
          w = dart.notNull(w) + ",";
        }
        wordList[$add](w);
      }
      let text = dart.notNull(wordList[$join](" ")) + ".";
      return text[$_get](0)[$toUpperCase]() + text[$substring](1);
    }
    paragraph(length) {
      if (length == null) dart.nullFailed(I[42], 129, 24, "length");
      let wordsCount = 0;
      let sentenceList = T$.JSArrayOfString().of([]);
      let n = 0;
      while (wordsCount < dart.notNull(length)) {
        n = n + 1;
        if (n > 100) {
          break;
        }
        let count = math.min(core.int, length, math.max(core.int, 10, math.min(core.int, 3, this.random.nextInt(dart.notNull(length) - wordsCount))));
        sentenceList[$add](this.sentence(count));
        wordsCount = wordsCount + count;
      }
      return sentenceList[$join](" ");
    }
  };
  (placeholders.LoremText.new = function(opts) {
    let t9;
    let random = opts && 'random' in opts ? opts.random : null;
    this[random$] = (t9 = random, t9 == null ? math.Random.new(978) : t9);
    ;
  }).prototype = placeholders.LoremText.prototype;
  dart.addTypeTests(placeholders.LoremText);
  dart.addTypeCaches(placeholders.LoremText);
  dart.setMethodSignature(placeholders.LoremText, () => ({
    __proto__: dart.getMethods(placeholders.LoremText.__proto__),
    word: dart.fnType(core.String, []),
    sentence: dart.fnType(core.String, [core.int]),
    paragraph: dart.fnType(core.String, [core.int])
  }));
  dart.setLibraryUri(placeholders.LoremText, I[43]);
  dart.setFieldSignature(placeholders.LoremText, () => ({
    __proto__: dart.getFields(placeholders.LoremText.__proto__),
    random: dart.finalFieldType(math.Random)
  }));
  dart.defineLazy(placeholders.LoremText, {
    /*placeholders.LoremText.words*/get words() {
      return "ad adipiscing aliqua aliquip amet anim aute cillum commodo consectetur consequat culpa cupidatat deserunt do dolor dolore duis ea eiusmod elit enim esse est et eu ex excepteur exercitation fugiat id in incididunt ipsum irure labore laboris laborum lorem magna minim mollit nisi non nostrud nulla occaecat officia pariatur proident qui quis reprehenderit sed sint sit sunt tempor ullamco ut velit veniam voluptate"[$split](" ");
    }
  }, false);
  var length$ = dart.privateName(placeholders, "Lorem.length");
  var random$0 = dart.privateName(placeholders, "Lorem.random");
  var style$ = dart.privateName(placeholders, "Lorem.style");
  var textAlign$ = dart.privateName(placeholders, "Lorem.textAlign");
  var softWrap$ = dart.privateName(placeholders, "Lorem.softWrap");
  var textScaleFactor$ = dart.privateName(placeholders, "Lorem.textScaleFactor");
  var maxLines$ = dart.privateName(placeholders, "Lorem.maxLines");
  var _name$6 = dart.privateName(text$1, "_name");
  placeholders.Lorem = class Lorem extends widget$.StatelessWidget {
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get random() {
      return this[random$0];
    }
    set random(value) {
      super.random = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[softWrap$];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get maxLines() {
      return this[maxLines$];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[42], 166, 24, "context");
      let lorem = new placeholders.LoremText.new({random: this.random});
      let text = lorem.paragraph(this.length);
      return new text$1.Text.new(text, {style: this.style, textAlign: this.textAlign, softWrap: this.softWrap, textScaleFactor: this.textScaleFactor, maxLines: this.maxLines});
    }
  };
  (placeholders.Lorem.new = function(opts) {
    let length = opts && 'length' in opts ? opts.length : 50;
    if (length == null) dart.nullFailed(I[42], 149, 13, "length");
    let random = opts && 'random' in opts ? opts.random : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[78] || CT.C78;
    if (textAlign == null) dart.nullFailed(I[42], 152, 12, "textAlign");
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
    if (softWrap == null) dart.nullFailed(I[42], 153, 12, "softWrap");
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    if (textScaleFactor == null) dart.nullFailed(I[42], 154, 12, "textScaleFactor");
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[length$] = length;
    this[random$0] = random;
    this[style$] = style;
    this[textAlign$] = textAlign;
    this[softWrap$] = softWrap;
    this[textScaleFactor$] = textScaleFactor;
    this[maxLines$] = maxLines;
    placeholders.Lorem.__proto__.new.call(this);
    ;
  }).prototype = placeholders.Lorem.prototype;
  dart.addTypeTests(placeholders.Lorem);
  dart.addTypeCaches(placeholders.Lorem);
  dart.setMethodSignature(placeholders.Lorem, () => ({
    __proto__: dart.getMethods(placeholders.Lorem.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(placeholders.Lorem, I[43]);
  dart.setFieldSignature(placeholders.Lorem, () => ({
    __proto__: dart.getFields(placeholders.Lorem.__proto__),
    length: dart.finalFieldType(core.int),
    random: dart.finalFieldType(dart.nullable(math.Random)),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    textAlign: dart.finalFieldType(text$1.TextAlign),
    softWrap: dart.finalFieldType(core.bool),
    textScaleFactor: dart.finalFieldType(core.double),
    maxLines: dart.finalFieldType(dart.nullable(core.int))
  }));
  var width$4 = dart.privateName(partitions, "Partition.width");
  var flex$2 = dart.privateName(partitions, "Partition.flex");
  var child$ = dart.privateName(partitions, "Partition.child");
  const Widget_SpanningWidget$36$0 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$0.new = function() {
    Widget_SpanningWidget$36$0.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$0.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$0, multi_page.SpanningWidget);
  partitions.Partition = class Partition extends Widget_SpanningWidget$36$0 {
    get width() {
      return this[width$4];
    }
    set width(value) {
      super.width = value;
    }
    get flex() {
      return this[flex$2];
    }
    set flex(value) {
      super.flex = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get box() {
      return this.child.box;
    }
    set box(value) {
      return this.child.box = value;
    }
    get canSpan() {
      return this.child.canSpan;
    }
    debugPaint(context) {
      if (context == null) dart.nullFailed(I[44], 50, 27, "context");
      this.child.debugPaint(context);
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[44], 55, 23, "context");
      if (constraints == null) dart.nullFailed(I[44], 55, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[44], 56, 13, "parentUsesSize");
      this.child.layout(context, constraints, {parentUsesSize: parentUsesSize});
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[44], 61, 22, "context");
      super.paint(context);
      this.child.paint(context);
    }
    restoreContext(context) {
      multi_page.WidgetContext.as(context);
      if (context == null) dart.nullFailed(I[44], 67, 37, "context");
      this.child.restoreContext(context);
    }
    saveContext() {
      return this.child.saveContext();
    }
    get hasMoreWidgets() {
      return this.child.hasMoreWidgets;
    }
  };
  (partitions.Partition.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[44], 29, 19, "child");
    let width = opts && 'width' in opts ? opts.width : null;
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    if (flex == null) dart.nullFailed(I[44], 31, 9, "flex");
    this[child$] = child;
    this[width$4] = width;
    this[flex$2] = width == null ? flex : 0;
    partitions.Partition.__proto__.new.call(this);
    ;
  }).prototype = partitions.Partition.prototype;
  dart.addTypeTests(partitions.Partition);
  dart.addTypeCaches(partitions.Partition);
  dart.setMethodSignature(partitions.Partition, () => ({
    __proto__: dart.getMethods(partitions.Partition.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(partitions.Partition, () => ({
    __proto__: dart.getGetters(partitions.Partition.__proto__),
    box: dart.nullable(rect$.PdfRect),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setSetterSignature(partitions.Partition, () => ({
    __proto__: dart.getSetters(partitions.Partition.__proto__),
    box: dart.nullable(rect$.PdfRect)
  }));
  dart.setLibraryUri(partitions.Partition, I[45]);
  dart.setFieldSignature(partitions.Partition, () => ({
    __proto__: dart.getFields(partitions.Partition.__proto__),
    width: dart.finalFieldType(dart.nullable(core.double)),
    flex: dart.finalFieldType(core.int),
    child: dart.finalFieldType(multi_page.SpanningWidget)
  }));
  partitions._PartitionsContext = class _PartitionsContext extends multi_page.WidgetContext {
    apply(other) {
      let t9;
      multi_page.WidgetContext.as(other);
      if (other == null) dart.nullFailed(I[44], 87, 28, "other");
      if (partitions._PartitionsContext.is(other)) {
        for (let index = 0; index < dart.notNull(this.partitionContext[$length]); index = index + 1) {
          t9 = this.partitionContext[$_get](index);
          t9 == null ? null : t9.apply(dart.nullCheck(other.partitionContext[$_get](index)));
        }
      }
    }
    clone() {
      let context = new partitions._PartitionsContext.new(this.partitionContext[$length]);
      for (let index = 0; index < dart.notNull(this.partitionContext[$length]); index = index + 1) {
        context.partitionContext[$_set](index, dart.nullCheck(this.partitionContext[$_get](index)).clone());
      }
      return context;
    }
  };
  (partitions._PartitionsContext.new = function(count) {
    if (count == null) dart.nullFailed(I[44], 81, 26, "count");
    this.partitionContext = T$.ListOfWidgetContextN().filled(count, null);
    ;
  }).prototype = partitions._PartitionsContext.prototype;
  dart.addTypeTests(partitions._PartitionsContext);
  dart.addTypeCaches(partitions._PartitionsContext);
  dart.setMethodSignature(partitions._PartitionsContext, () => ({
    __proto__: dart.getMethods(partitions._PartitionsContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(partitions._PartitionsContext, I[45]);
  dart.setFieldSignature(partitions._PartitionsContext, () => ({
    __proto__: dart.getFields(partitions._PartitionsContext.__proto__),
    partitionContext: dart.finalFieldType(core.List$(dart.nullable(multi_page.WidgetContext)))
  }));
  var children$4 = dart.privateName(partitions, "Partitions.children");
  var mainAxisSize$ = dart.privateName(partitions, "Partitions.mainAxisSize");
  var _name$7 = dart.privateName(flex$, "_name");
  var _context$ = dart.privateName(partitions, "_context");
  const Widget_SpanningWidget$36$1 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$1.new = function() {
    Widget_SpanningWidget$36$1.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$1.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$1, multi_page.SpanningWidget);
  partitions.Partitions = class Partitions extends Widget_SpanningWidget$36$1 {
    get children() {
      return this[children$4];
    }
    set children(value) {
      super.children = value;
    }
    get mainAxisSize() {
      return this[mainAxisSize$];
    }
    set mainAxisSize(value) {
      super.mainAxisSize = value;
    }
    get canSpan() {
      return this.children[$any](dart.fn(part => {
        if (part == null) dart.nullFailed(I[44], 120, 47, "part");
        return part.canSpan;
      }, T$.PartitionTobool()));
    }
    get hasMoreWidgets() {
      return !dart.test(this.children[$any](dart.fn(part => {
        if (part == null) dart.nullFailed(I[44], 124, 32, "part");
        return !dart.test(part.hasMoreWidgets);
      }, T$.PartitionTobool())));
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[44], 127, 23, "context");
      if (constraints == null) dart.nullFailed(I[44], 127, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[44], 128, 13, "parentUsesSize");
      let maxMainSize = constraints.maxWidth;
      let canFlex = dart.notNull(maxMainSize) < 1 / 0;
      let allocatedSize = 0.0;
      let totalFlex = 0;
      let widths = T$.ListOfdoubleN().filled(this.children[$length], 0.0);
      let index = 0;
      for (let child of this.children) {
        if (dart.notNull(child.flex) > 0) {
          if (!dart.test(dart.fn(() => {
            if (!canFlex) {
              dart.throw(core.Exception.new("Partition children have non-zero flex but incoming width constraints are unbounded."));
            } else {
              return true;
            }
          }, T$.VoidTobool())())) dart.assertFailed(null, I[44], 140, 16, "() {\n          if (!canFlex) {\n            throw Exception(\n                'Partition children have non-zero flex but incoming width constraints are unbounded.');\n          } else {\n            return true;\n          }\n        }()");
          totalFlex = totalFlex + dart.notNull(child.flex);
        } else {
          allocatedSize = allocatedSize + dart.nullCheck(child.width);
          widths[$_set](index, child.width);
        }
        index = index + 1;
      }
      if (totalFlex > 0 && canFlex) {
        let freeSpace = math.max(core.num, 0, dart.notNull(canFlex ? maxMainSize : 0.0) - allocatedSize);
        let spacePerFlex = freeSpace / totalFlex;
        index = 0;
        for (let child of this.children) {
          if (dart.notNull(child.flex) > 0) {
            let childExtent = spacePerFlex * dart.notNull(child.flex);
            allocatedSize = allocatedSize + childExtent;
            widths[$_set](index, childExtent);
          }
          index = index + 1;
        }
      }
      let totalHeight = 0.0;
      index = 0;
      for (let child of this.children) {
        if (dart.nullCheck(widths[$_get](index)) > 0) {
          let innerConstraints = new geometry.BoxConstraints.new({minWidth: dart.nullCheck(widths[$_get](index)), maxWidth: dart.nullCheck(widths[$_get](index)), maxHeight: constraints.maxHeight});
          child.layout(context, innerConstraints);
          if (!(child.box != null)) dart.assertFailed(null, I[44], 184, 16, "child.box != null");
          totalHeight = math.max(core.double, totalHeight, dart.nullCheck(child.box).height);
        }
        index = index + 1;
      }
      index = 0;
      allocatedSize = 0.0;
      for (let child of this.children) {
        if (dart.nullCheck(widths[$_get](index)) > 0) {
          let offsetY = totalHeight - dart.notNull(dart.nullCheck(child.box).height);
          child.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(allocatedSize, offsetY), dart.nullCheck(child.box).size);
          totalHeight = math.max(core.double, totalHeight, dart.nullCheck(child.box).height);
          allocatedSize = allocatedSize + dart.nullCheck(widths[$_get](index));
        }
        index = index + 1;
      }
      this.box = new rect$.PdfRect.new(0.0, 0.0, allocatedSize, totalHeight);
    }
    paint(context) {
      let t9;
      if (context == null) dart.nullFailed(I[44], 208, 22, "context");
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t9 = context.canvas;
      (() => {
        t9.saveContext();
        t9.setTransform(mat);
        return t9;
      })();
      for (let child of this.children) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    restoreContext(context) {
      multi_page.WidgetContext.as(context);
      if (context == null) dart.nullFailed(I[44], 223, 37, "context");
      this[_context$].apply(context);
      let index = 0;
      for (let child of this.children) {
        child.restoreContext(dart.nullCheck(this[_context$].partitionContext[$_get](index)));
        index = index + 1;
      }
    }
    saveContext() {
      let index = 0;
      for (let child of this.children) {
        this[_context$].partitionContext[$_set](index, child.saveContext());
        index = index + 1;
      }
      return this[_context$];
    }
  };
  (partitions.Partitions.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    if (children == null) dart.nullFailed(I[44], 108, 19, "children");
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[79] || CT.C79;
    if (mainAxisSize == null) dart.nullFailed(I[44], 109, 10, "mainAxisSize");
    this[children$4] = children;
    this[mainAxisSize$] = mainAxisSize;
    this[_context$] = new partitions._PartitionsContext.new(children[$length]);
    partitions.Partitions.__proto__.new.call(this);
    ;
  }).prototype = partitions.Partitions.prototype;
  dart.addTypeTests(partitions.Partitions);
  dart.addTypeCaches(partitions.Partitions);
  dart.setMethodSignature(partitions.Partitions, () => ({
    __proto__: dart.getMethods(partitions.Partitions.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(partitions.Partitions, () => ({
    __proto__: dart.getGetters(partitions.Partitions.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(partitions.Partitions, I[45]);
  dart.setFieldSignature(partitions.Partitions, () => ({
    __proto__: dart.getFields(partitions.Partitions.__proto__),
    children: dart.finalFieldType(core.List$(partitions.Partition)),
    [_context$]: dart.finalFieldType(partitions._PartitionsContext),
    mainAxisSize: dart.finalFieldType(flex$.MainAxisSize)
  }));
  var image$3 = dart.privateName(image$1, "Image.image");
  var fit$3 = dart.privateName(image$1, "Image.fit");
  var alignment$1 = dart.privateName(image$1, "Image.alignment");
  var width$5 = dart.privateName(image$1, "Image.width");
  var height$3 = dart.privateName(image$1, "Image.height");
  var dpi$ = dart.privateName(image$1, "Image.dpi");
  image$1.Image = class Image extends widget$.Widget {
    get image() {
      return this[image$3];
    }
    set image(value) {
      super.image = value;
    }
    get fit() {
      return this[fit$3];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$1];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get width() {
      return this[width$5];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$3];
    }
    set height(value) {
      super.height = value;
    }
    get dpi() {
      return this[dpi$];
    }
    set dpi(value) {
      super.dpi = value;
    }
    layout(context, constraints, opts) {
      let t9, t9$;
      if (context == null) dart.nullFailed(I[46], 98, 23, "context");
      if (constraints == null) dart.nullFailed(I[46], 98, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[46], 99, 13, "parentUsesSize");
      let w = (t9 = this.width, t9 == null ? dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : constraints.constrainWidth(dart.nullCheck(this.image.width)[$toDouble]()) : t9);
      let h = (t9$ = this.height, t9$ == null ? dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : constraints.constrainHeight(dart.nullCheck(this.image.height)[$toDouble]()) : t9$);
      let sizes = geometry.applyBoxFit(this.fit, new point$.PdfPoint.new(dart.nullCheck(this.image.width)[$toDouble](), dart.nullCheck(this.image.height)[$toDouble]()), new point$.PdfPoint.new(w, h));
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, dart.nullCheck(sizes.destination));
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[46], 117, 22, "context");
      super.paint(context);
      let rect = context.localToGlobal(dart.nullCheck(this.box));
      image$1._paintImage({canvas: context.canvas, image: this.image.resolve(context, rect.size, {dpi: this.dpi}), rect: dart.nullCheck(this.box), alignment: this.alignment, fit: this.fit});
    }
  };
  (image$1.Image.new = function(image, opts) {
    if (image == null) dart.nullFailed(I[46], 77, 10, "image");
    let fit = opts && 'fit' in opts ? opts.fit : C[74] || CT.C74;
    if (fit == null) dart.nullFailed(I[46], 78, 10, "fit");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    if (alignment == null) dart.nullFailed(I[46], 79, 10, "alignment");
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    this[image$3] = image;
    this[fit$3] = fit;
    this[alignment$1] = alignment;
    this[width$5] = width;
    this[height$3] = height;
    this[dpi$] = dpi;
    image$1.Image.__proto__.new.call(this);
    ;
  }).prototype = image$1.Image.prototype;
  dart.addTypeTests(image$1.Image);
  dart.addTypeCaches(image$1.Image);
  dart.setMethodSignature(image$1.Image, () => ({
    __proto__: dart.getMethods(image$1.Image.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(image$1.Image, I[47]);
  dart.setFieldSignature(image$1.Image, () => ({
    __proto__: dart.getFields(image$1.Image.__proto__),
    image: dart.finalFieldType(image_provider.ImageProvider),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    dpi: dart.finalFieldType(dart.nullable(core.double))
  }));
  var shape$ = dart.privateName(image$1, "Shape.shape");
  var strokeColor$ = dart.privateName(image$1, "Shape.strokeColor");
  var fillColor$ = dart.privateName(image$1, "Shape.fillColor");
  var width$6 = dart.privateName(image$1, "Shape.width");
  var height$4 = dart.privateName(image$1, "Shape.height");
  var fit$4 = dart.privateName(image$1, "Shape.fit");
  var __Shape__boundingBox = dart.privateName(image$1, "_#Shape#_boundingBox");
  var __Shape__boundingBox_isSet = dart.privateName(image$1, "_#Shape#_boundingBox#isSet");
  var _boundingBox = dart.privateName(image$1, "_boundingBox");
  image$1.Shape = class Shape extends widget$.Widget {
    get shape() {
      return this[shape$];
    }
    set shape(value) {
      super.shape = value;
    }
    get strokeColor() {
      return this[strokeColor$];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get width() {
      return this[width$6];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$4];
    }
    set height(value) {
      super.height = value;
    }
    get fit() {
      return this[fit$4];
    }
    set fit(value) {
      super.fit = value;
    }
    get [_boundingBox]() {
      let t9;
      return dart.test(this[__Shape__boundingBox_isSet]) ? (t9 = this[__Shape__boundingBox], t9) : dart.throw(new _internal.LateError.fieldNI("_boundingBox"));
    }
    set [_boundingBox](t9) {
      if (t9 == null) dart.nullFailed(I[46], 155, 16, "null");
      this[__Shape__boundingBox_isSet] = true;
      this[__Shape__boundingBox] = t9;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[46], 158, 23, "context");
      if (constraints == null) dart.nullFailed(I[46], 158, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[46], 159, 13, "parentUsesSize");
      if (this.width == null || this.height == null) {
        this[_boundingBox] = graphics.PdfGraphics.shapeBoundingBox(this.shape);
      } else {
        this[_boundingBox] = new rect$.PdfRect.new(0.0, 0.0, dart.nullCheck(this.width), dart.nullCheck(this.height));
      }
      let w = dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : constraints.constrainWidth(this[_boundingBox].width);
      let h = dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : constraints.constrainHeight(this[_boundingBox].height);
      let sizes = geometry.applyBoxFit(this.fit, this[_boundingBox].size, new point$.PdfPoint.new(w, h));
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, dart.nullCheck(sizes.destination));
    }
    paint(context) {
      let t11, t10, t10$, t10$0;
      if (context == null) dart.nullFailed(I[46], 182, 22, "context");
      super.paint(context);
      t10 = context.canvas;
      (() => {
        t10.saveContext();
        t10.setTransform((t11 = vector_math_64.Matrix4.identity(), (() => {
          t11.translate(dart.nullCheck(this.box).x, dart.notNull(dart.nullCheck(this.box).y) + dart.notNull(dart.nullCheck(this.box).height));
          t11.scale(dart.notNull(dart.nullCheck(this.box).width) / dart.notNull(this[_boundingBox].width), -dart.notNull(dart.nullCheck(this.box).height) / dart.notNull(this[_boundingBox].height));
          t11.translate(-dart.notNull(this[_boundingBox].x), -dart.notNull(this[_boundingBox].y));
          return t11;
        })()));
        return t10;
      })();
      if (this.fillColor != null) {
        t10$ = context.canvas;
        (() => {
          t10$.setFillColor(this.fillColor);
          t10$.drawShape(this.shape);
          t10$.fillPath();
          return t10$;
        })();
      }
      if (this.strokeColor != null) {
        t10$0 = context.canvas;
        (() => {
          t10$0.setStrokeColor(this.strokeColor);
          t10$0.drawShape(this.shape);
          t10$0.strokePath();
          return t10$0;
        })();
      }
      context.canvas.restoreContext();
    }
  };
  (image$1.Shape.new = function(shape, opts) {
    if (shape == null) dart.nullFailed(I[46], 134, 10, "shape");
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[74] || CT.C74;
    if (fit == null) dart.nullFailed(I[46], 139, 10, "fit");
    this[__Shape__boundingBox] = null;
    this[__Shape__boundingBox_isSet] = false;
    this[shape$] = shape;
    this[strokeColor$] = strokeColor;
    this[fillColor$] = fillColor;
    this[width$6] = width;
    this[height$4] = height;
    this[fit$4] = fit;
    if (!(width == null || dart.notNull(width) > 0.0)) dart.assertFailed(null, I[46], 140, 16, "width == null || width > 0.0");
    if (!(height == null || dart.notNull(height) > 0.0)) dart.assertFailed(null, I[46], 141, 16, "height == null || height > 0.0");
    image$1.Shape.__proto__.new.call(this);
    ;
  }).prototype = image$1.Shape.prototype;
  dart.addTypeTests(image$1.Shape);
  dart.addTypeCaches(image$1.Shape);
  dart.setMethodSignature(image$1.Shape, () => ({
    __proto__: dart.getMethods(image$1.Shape.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setGetterSignature(image$1.Shape, () => ({
    __proto__: dart.getGetters(image$1.Shape.__proto__),
    [_boundingBox]: rect$.PdfRect
  }));
  dart.setSetterSignature(image$1.Shape, () => ({
    __proto__: dart.getSetters(image$1.Shape.__proto__),
    [_boundingBox]: rect$.PdfRect
  }));
  dart.setLibraryUri(image$1.Shape, I[47]);
  dart.setFieldSignature(image$1.Shape, () => ({
    __proto__: dart.getFields(image$1.Shape.__proto__),
    shape: dart.finalFieldType(core.String),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    fillColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    fit: dart.finalFieldType(basic.BoxFit),
    [__Shape__boundingBox]: dart.fieldType(dart.nullable(rect$.PdfRect)),
    [__Shape__boundingBox_isSet]: dart.fieldType(core.bool)
  }));
  image$1._paintImage = function _paintImage(opts) {
    let canvas = opts && 'canvas' in opts ? opts.canvas : null;
    if (canvas == null) dart.nullFailed(I[46], 26, 24, "canvas");
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[46], 27, 20, "rect");
    let image = opts && 'image' in opts ? opts.image : null;
    if (image == null) dart.nullFailed(I[46], 28, 21, "image");
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    if (scale == null) dart.nullFailed(I[46], 29, 10, "scale");
    let fit = opts && 'fit' in opts ? opts.fit : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    if (alignment == null) dart.nullFailed(I[46], 31, 13, "alignment");
    let outputSize = rect.size;
    let inputSize = new point$.PdfPoint.new(image.width[$toDouble](), image.height[$toDouble]());
    fit == null ? fit = basic.BoxFit.scaleDown : null;
    let fittedSizes = geometry.applyBoxFit(fit, new point$.PdfPoint.new(dart.notNull(inputSize.x) / dart.notNull(scale), dart.notNull(inputSize.y) / dart.notNull(scale)), outputSize);
    let sourceSize = new point$.PdfPoint.new(dart.notNull(dart.nullCheck(fittedSizes.source).x) * dart.notNull(scale), dart.notNull(dart.nullCheck(fittedSizes.source).y) * dart.notNull(scale));
    let destinationSize = dart.nullCheck(fittedSizes.destination);
    let halfWidthDelta = (dart.notNull(outputSize.x) - dart.notNull(destinationSize.x)) / 2.0;
    let halfHeightDelta = (dart.notNull(outputSize.y) - dart.notNull(destinationSize.y)) / 2.0;
    let dx = halfWidthDelta + dart.notNull(alignment.x) * halfWidthDelta;
    let dy = halfHeightDelta + dart.notNull(alignment.y) * halfHeightDelta;
    let destinationPosition = rect.topLeft.translate(dx, dy);
    let destinationRect = rect$.PdfRect.fromPoints(destinationPosition, destinationSize);
    let sourceRect = alignment.inscribe(sourceSize, rect$.PdfRect.fromPoints(point$.PdfPoint.zero, inputSize));
    image$1._drawImageRect(canvas, image, sourceRect, destinationRect);
  };
  image$1._drawImageRect = function _drawImageRect(canvas, image, sourceRect, destinationRect) {
    let t10;
    if (canvas == null) dart.nullFailed(I[46], 56, 33, "canvas");
    if (image == null) dart.nullFailed(I[46], 56, 50, "image");
    if (sourceRect == null) dart.nullFailed(I[46], 56, 65, "sourceRect");
    if (destinationRect == null) dart.nullFailed(I[46], 57, 13, "destinationRect");
    let fw = dart.notNull(destinationRect.width) / dart.notNull(sourceRect.width);
    let fh = dart.notNull(destinationRect.height) / dart.notNull(sourceRect.height);
    canvas.saveContext();
    t10 = canvas;
    (() => {
      t10.drawBox(destinationRect);
      t10.clipPath();
      t10.drawImage(image, dart.notNull(destinationRect.x) - dart.notNull(sourceRect.x) * fw, dart.notNull(destinationRect.y) - dart.notNull(sourceRect.y) * fh, image.width[$toDouble]() * fw, image.height[$toDouble]() * fh);
      t10.restoreContext();
      return t10;
    })();
  };
  grid_view._GridViewContext = class _GridViewContext extends multi_page.WidgetContext {
    apply(other) {
      grid_view._GridViewContext.as(other);
      if (other == null) dart.nullFailed(I[48], 35, 31, "other");
      this.firstChild = other.firstChild;
      this.lastChild = other.lastChild;
      this.childCrossAxis = other.childCrossAxis;
      this.childMainAxis = other.childMainAxis;
    }
    clone() {
      let t10;
      t10 = new grid_view._GridViewContext.new();
      return (() => {
        t10.firstChild = this.firstChild;
        t10.lastChild = this.lastChild;
        t10.childCrossAxis = this.childCrossAxis;
        t10.childMainAxis = this.childMainAxis;
        return t10;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " first:" + dart.str(this.firstChild) + " last:" + dart.str(this.lastChild) + " size:" + dart.str(this.childCrossAxis) + "x" + dart.str(this.childMainAxis);
    }
  };
  (grid_view._GridViewContext.new = function() {
    this.firstChild = 0;
    this.lastChild = 0;
    this.childCrossAxis = null;
    this.childMainAxis = null;
    ;
  }).prototype = grid_view._GridViewContext.prototype;
  dart.addTypeTests(grid_view._GridViewContext);
  dart.addTypeCaches(grid_view._GridViewContext);
  dart.setMethodSignature(grid_view._GridViewContext, () => ({
    __proto__: dart.getMethods(grid_view._GridViewContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(grid_view._GridViewContext, I[49]);
  dart.setFieldSignature(grid_view._GridViewContext, () => ({
    __proto__: dart.getFields(grid_view._GridViewContext.__proto__),
    firstChild: dart.fieldType(core.int),
    lastChild: dart.fieldType(core.int),
    childCrossAxis: dart.fieldType(dart.nullable(core.double)),
    childMainAxis: dart.fieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(grid_view._GridViewContext, ['toString']);
  var direction$ = dart.privateName(grid_view, "GridView.direction");
  var padding$ = dart.privateName(grid_view, "GridView.padding");
  var crossAxisCount$ = dart.privateName(grid_view, "GridView.crossAxisCount");
  var mainAxisSpacing$ = dart.privateName(grid_view, "GridView.mainAxisSpacing");
  var crossAxisSpacing$ = dart.privateName(grid_view, "GridView.crossAxisSpacing");
  var childAspectRatio$ = dart.privateName(grid_view, "GridView.childAspectRatio");
  var _context$0 = dart.privateName(grid_view, "_context");
  var _mainAxisCount = dart.privateName(grid_view, "_mainAxisCount");
  var children$5 = dart.privateName(widget$, "MultiChildWidget.children");
  widget$.MultiChildWidget = class MultiChildWidget extends widget$.Widget {
    get children() {
      return this[children$5];
    }
    set children(value) {
      super.children = value;
    }
  };
  (widget$.MultiChildWidget.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : C[82] || CT.C82;
    if (children == null) dart.nullFailed(I[5], 338, 26, "children");
    this[children$5] = children;
    widget$.MultiChildWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.MultiChildWidget.prototype;
  dart.addTypeTests(widget$.MultiChildWidget);
  dart.addTypeCaches(widget$.MultiChildWidget);
  dart.setLibraryUri(widget$.MultiChildWidget, I[6]);
  dart.setFieldSignature(widget$.MultiChildWidget, () => ({
    __proto__: dart.getFields(widget$.MultiChildWidget.__proto__),
    children: dart.finalFieldType(core.List$(widget$.Widget))
  }));
  const MultiChildWidget_SpanningWidget$36 = class MultiChildWidget_SpanningWidget extends widget$.MultiChildWidget {};
  (MultiChildWidget_SpanningWidget$36.new = function(opts) {
    MultiChildWidget_SpanningWidget$36.__proto__.new.call(this, opts);
  }).prototype = MultiChildWidget_SpanningWidget$36.prototype;
  dart.applyMixin(MultiChildWidget_SpanningWidget$36, multi_page.SpanningWidget);
  grid_view.GridView = class GridView extends MultiChildWidget_SpanningWidget$36 {
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get crossAxisCount() {
      return this[crossAxisCount$];
    }
    set crossAxisCount(value) {
      super.crossAxisCount = value;
    }
    get mainAxisSpacing() {
      return this[mainAxisSpacing$];
    }
    set mainAxisSpacing(value) {
      super.mainAxisSpacing = value;
    }
    get crossAxisSpacing() {
      return this[crossAxisSpacing$];
    }
    set crossAxisSpacing(value) {
      super.crossAxisSpacing = value;
    }
    get childAspectRatio() {
      return this[childAspectRatio$];
    }
    set childAspectRatio(value) {
      super.childAspectRatio = value;
    }
    layout(context, constraints, opts) {
      let t30, t30$;
      if (context == null) dart.nullFailed(I[48], 79, 23, "context");
      if (constraints == null) dart.nullFailed(I[48], 79, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[48], 80, 13, "parentUsesSize");
      if (dart.test(this.children[$isEmpty])) {
        this.box = rect$.PdfRect.zero;
        return;
      }
      if (!dart.test(dart.fn(() => {
        if (constraints.maxHeight[$isInfinite] && this.childAspectRatio[$isInfinite]) {
          core.print("Unable to calculate the GridView dimensions. Please set the height constraints or childAspectRatio.");
          return false;
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[48], 86, 12, "() {\n      if (constraints.maxHeight.isInfinite && childAspectRatio.isInfinite) {\n        print(\n            'Unable to calculate the GridView dimensions. Please set the height constraints or childAspectRatio.');\n        return false;\n      }\n      return true;\n    }()");
      let mainAxisExtent = null;
      let mainAxisExtent$35isSet = false;
      function mainAxisExtent$35get() {
        return mainAxisExtent$35isSet ? mainAxisExtent : dart.throw(new _internal.LateError.localNI("mainAxisExtent"));
      }
      dart.fn(mainAxisExtent$35get, T$.VoidTodouble());
      function mainAxisExtent$35set(t13) {
        if (t13 == null) dart.nullFailed(I[48], 95, 17, "null");
        mainAxisExtent$35isSet = true;
        return mainAxisExtent = t13;
      }
      dart.fn(mainAxisExtent$35set, T$.doubleTodynamic());
      let crossAxisExtent = null;
      let crossAxisExtent$35isSet = false;
      function crossAxisExtent$35get() {
        return crossAxisExtent$35isSet ? crossAxisExtent : dart.throw(new _internal.LateError.localNI("crossAxisExtent"));
      }
      dart.fn(crossAxisExtent$35get, T$.VoidTodouble());
      function crossAxisExtent$35set(t18) {
        if (t18 == null) dart.nullFailed(I[48], 96, 17, "null");
        crossAxisExtent$35isSet = true;
        return crossAxisExtent = t18;
      }
      dart.fn(crossAxisExtent$35set, T$.doubleTodynamic());
      switch (this.direction) {
        case C[80] || CT.C80:
        {
          mainAxisExtent$35set(dart.notNull(constraints.maxHeight) - dart.notNull(this.padding.vertical));
          crossAxisExtent$35set(dart.notNull(constraints.maxWidth) - dart.notNull(this.padding.horizontal));
          break;
        }
        case C[83] || CT.C83:
        {
          mainAxisExtent$35set(dart.notNull(constraints.maxWidth) - dart.notNull(this.padding.horizontal));
          crossAxisExtent$35set(dart.notNull(constraints.maxHeight) - dart.notNull(this.padding.vertical));
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      if (constraints.maxHeight[$isInfinite] || this[_mainAxisCount] == null) {
        this[_mainAxisCount] = ((dart.notNull(this.children[$length]) - dart.notNull(this[_context$0].firstChild)) / dart.notNull(this.crossAxisCount))[$ceil]();
        this[_context$0].childCrossAxis = dart.notNull(crossAxisExtent$35get()) / dart.notNull(this.crossAxisCount) - dart.notNull(this.crossAxisSpacing) * (dart.notNull(this.crossAxisCount) - 1) / dart.notNull(this.crossAxisCount);
        this[_context$0].childMainAxis = math.min(core.double, dart.nullCheck(this[_context$0].childCrossAxis) * dart.notNull(this.childAspectRatio), dart.notNull(mainAxisExtent$35get()) / dart.nullCheck(this[_mainAxisCount]) - dart.notNull(this.mainAxisSpacing) * (dart.nullCheck(this[_mainAxisCount]) - 1) / dart.nullCheck(this[_mainAxisCount]));
        if (dart.nullCheck(this[_context$0].childCrossAxis)[$isInfinite]) {
          dart.throw(core.Exception.new("Unable to calculate child height as the height constraint is infinite."));
        }
      } else {
        this[_mainAxisCount] = ((dart.notNull(mainAxisExtent$35get()) + dart.notNull(this.mainAxisSpacing)) / (dart.notNull(this.mainAxisSpacing) + dart.nullCheck(this[_context$0].childMainAxis)))[$floor]();
        if (dart.nullCheck(this[_mainAxisCount]) < 0) {
          this[_mainAxisCount] = 0;
        }
      }
      let totalMain = (dart.nullCheck(this[_context$0].childMainAxis) + dart.notNull(this.mainAxisSpacing)) * dart.nullCheck(this[_mainAxisCount]) - dart.notNull(this.mainAxisSpacing);
      let totalCross = (dart.nullCheck(this[_context$0].childCrossAxis) + dart.notNull(this.crossAxisSpacing)) * dart.notNull(this.crossAxisCount) - dart.notNull(this.crossAxisSpacing);
      let startX = this.padding.left;
      let mainAxis = null;
      let mainAxis$35isSet = false;
      function mainAxis$35get() {
        return mainAxis$35isSet ? mainAxis : dart.throw(new _internal.LateError.localNI("mainAxis"));
      }
      dart.fn(mainAxis$35get, T$.VoidTodouble());
      function mainAxis$35set(t23) {
        if (t23 == null) dart.nullFailed(I[48], 144, 17, "null");
        mainAxis$35isSet = true;
        return mainAxis = t23;
      }
      dart.fn(mainAxis$35set, T$.doubleTodynamic());
      let crossAxis = null;
      let crossAxis$35isSet = false;
      function crossAxis$35get() {
        return crossAxis$35isSet ? crossAxis : dart.throw(new _internal.LateError.localNI("crossAxis"));
      }
      dart.fn(crossAxis$35get, T$.VoidTodouble());
      function crossAxis$35set(t28) {
        if (t28 == null) dart.nullFailed(I[48], 145, 17, "null");
        crossAxis$35isSet = true;
        return crossAxis = t28;
      }
      dart.fn(crossAxis$35set, T$.doubleTodynamic());
      let innerConstraints = null;
      switch (this.direction) {
        case C[80] || CT.C80:
        {
          innerConstraints = new geometry.BoxConstraints.tightFor({width: this[_context$0].childCrossAxis, height: this[_context$0].childMainAxis});
          crossAxis$35set(startX);
          mainAxis$35set(0);
          break;
        }
        case C[83] || CT.C83:
        {
          innerConstraints = new geometry.BoxConstraints.tightFor({width: this[_context$0].childMainAxis, height: this[_context$0].childCrossAxis});
          mainAxis$35set(startX);
          crossAxis$35set(0);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let c = 0;
      this[_context$0].lastChild = this[_context$0].firstChild;
      for (let child of this.children[$sublist](this[_context$0].firstChild, math.min(core.int, this.children[$length], dart.notNull(this[_context$0].firstChild) + dart.notNull(this.crossAxisCount) * dart.nullCheck(this[_mainAxisCount])))) {
        child.layout(context, innerConstraints);
        if (!(child.box != null)) dart.assertFailed(null, I[48], 170, 14, "child.box != null");
        switch (this.direction) {
          case C[80] || CT.C80:
          {
            child.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new((dart.nullCheck(this[_context$0].childCrossAxis) - dart.notNull(dart.nullCheck(child.box).width)) / 2.0 + dart.notNull(crossAxis$35get()), totalMain + dart.notNull(this.padding.bottom) - (dart.nullCheck(this[_context$0].childMainAxis) - dart.notNull(dart.nullCheck(child.box).height)) / 2.0 - dart.notNull(mainAxis$35get()) - dart.notNull(dart.nullCheck(child.box).height)), dart.nullCheck(child.box).size);
            break;
          }
          case C[83] || CT.C83:
          {
            child.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new((dart.nullCheck(this[_context$0].childMainAxis) - dart.notNull(dart.nullCheck(child.box).width)) / 2.0 + dart.notNull(mainAxis$35get()), totalCross + dart.notNull(this.padding.bottom) - (dart.nullCheck(this[_context$0].childCrossAxis) - dart.notNull(dart.nullCheck(child.box).height)) / 2.0 - dart.notNull(crossAxis$35get()) - dart.notNull(dart.nullCheck(child.box).height)), dart.nullCheck(child.box).size);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        if ((c = c + 1) >= dart.notNull(this.crossAxisCount)) {
          mainAxis$35set(dart.notNull(mainAxis$35get()) + (dart.nullCheck(this[_context$0].childMainAxis) + dart.notNull(this.mainAxisSpacing)));
          switch (this.direction) {
            case C[80] || CT.C80:
            {
              crossAxis$35set(startX);
              break;
            }
            case C[83] || CT.C83:
            {
              crossAxis$35set(0);
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
          c = 0;
          if (dart.notNull(mainAxis$35get()) > dart.notNull(mainAxisExtent$35get())) {
            t30 = this[_context$0];
            t30.lastChild = dart.notNull(t30.lastChild) + 1;
            break;
          }
        } else {
          crossAxis$35set(dart.notNull(crossAxis$35get()) + (dart.nullCheck(this[_context$0].childCrossAxis) + dart.notNull(this.crossAxisSpacing)));
        }
        t30$ = this[_context$0];
        t30$.lastChild = dart.notNull(t30$.lastChild) + 1;
      }
      switch (this.direction) {
        case C[80] || CT.C80:
        {
          this.box = constraints.constrainRect({width: totalCross + dart.notNull(this.padding.horizontal), height: totalMain + dart.notNull(this.padding.vertical)});
          break;
        }
        case C[83] || CT.C83:
        {
          this.box = constraints.constrainRect({width: totalMain + dart.notNull(this.padding.horizontal), height: totalCross + dart.notNull(this.padding.vertical)});
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    debugPaint(context) {
      let t30, t30$, t30$0, t30$1, t30$2;
      if (context == null) dart.nullFailed(I[48], 236, 27, "context");
      super.debugPaint(context);
      if (dart.test(this.children[$isEmpty])) {
        return;
      }
      t30 = context.canvas;
      (() => {
        t30.setFillColor(colors.PdfColors.lime);
        t30.moveTo(dart.nullCheck(this.box).left, dart.nullCheck(this.box).bottom);
        t30.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).bottom);
        t30.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).top);
        t30.lineTo(dart.nullCheck(this.box).left, dart.nullCheck(this.box).top);
        t30.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.padding.left), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.padding.bottom));
        t30.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.padding.left), dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(this.padding.top));
        t30.lineTo(dart.notNull(dart.nullCheck(this.box).right) - dart.notNull(this.padding.right), dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(this.padding.top));
        t30.lineTo(dart.notNull(dart.nullCheck(this.box).right) - dart.notNull(this.padding.right), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.padding.bottom));
        t30.fillPath();
        return t30;
      })();
      for (let c = 1; c < dart.notNull(this.crossAxisCount); c = c + 1) {
        switch (this.direction) {
          case C[80] || CT.C80:
          {
            t30$ = context.canvas;
            (() => {
              t30$.drawRect(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.padding.left) + (dart.nullCheck(this[_context$0].childCrossAxis) + dart.notNull(this.crossAxisSpacing)) * c - dart.notNull(this.crossAxisSpacing), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.padding.bottom), math.max(core.double, this.crossAxisSpacing, 1.0), dart.notNull(dart.nullCheck(this.box).height) - dart.notNull(this.padding.vertical));
              t30$.fillPath();
              return t30$;
            })();
            break;
          }
          case C[83] || CT.C83:
          {
            t30$0 = context.canvas;
            (() => {
              t30$0.drawRect(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.padding.left), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.padding.bottom) + (dart.nullCheck(this[_context$0].childCrossAxis) + dart.notNull(this.crossAxisSpacing)) * c - dart.notNull(this.crossAxisSpacing), dart.notNull(dart.nullCheck(this.box).width) - dart.notNull(this.padding.horizontal), math.max(core.double, this.crossAxisSpacing, 1.0));
              t30$0.fillPath();
              return t30$0;
            })();
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      for (let c = 1; c < dart.nullCheck(this[_mainAxisCount]); c = c + 1) {
        switch (this.direction) {
          case C[80] || CT.C80:
          {
            t30$1 = context.canvas;
            (() => {
              t30$1.drawRect(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.padding.left), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.padding.bottom) + (dart.nullCheck(this[_context$0].childMainAxis) + dart.notNull(this.mainAxisSpacing)) * c - dart.notNull(this.mainAxisSpacing), dart.notNull(dart.nullCheck(this.box).width) - dart.notNull(this.padding.horizontal), math.max(core.double, this.mainAxisSpacing, 1.0));
              t30$1.fillPath();
              return t30$1;
            })();
            break;
          }
          case C[83] || CT.C83:
          {
            t30$2 = context.canvas;
            (() => {
              t30$2.drawRect(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.padding.left) + (dart.nullCheck(this[_context$0].childMainAxis) + dart.notNull(this.mainAxisSpacing)) * c - dart.notNull(this.mainAxisSpacing), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.padding.bottom), math.max(core.double, this.mainAxisSpacing, 1.0), dart.notNull(dart.nullCheck(this.box).height) - dart.notNull(this.padding.vertical));
              t30$2.fillPath();
              return t30$2;
            })();
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
    paint(context) {
      let t30;
      if (context == null) dart.nullFailed(I[48], 315, 22, "context");
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t30 = context.canvas;
      (() => {
        t30.saveContext();
        t30.setTransform(mat);
        return t30;
      })();
      for (let child of this.children[$sublist](this[_context$0].firstChild, this[_context$0].lastChild)) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    get canSpan() {
      return true;
    }
    get hasMoreWidgets() {
      return true;
    }
    restoreContext(context) {
      grid_view._GridViewContext.as(context);
      if (context == null) dart.nullFailed(I[48], 338, 40, "context");
      this[_context$0].firstChild = context.lastChild;
    }
    saveContext() {
      return this[_context$0];
    }
  };
  (grid_view.GridView.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[80] || CT.C80;
    if (direction == null) dart.nullFailed(I[48], 58, 13, "direction");
    let padding = opts && 'padding' in opts ? opts.padding : C[81] || CT.C81;
    if (padding == null) dart.nullFailed(I[48], 59, 12, "padding");
    let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
    if (crossAxisCount == null) dart.nullFailed(I[48], 60, 21, "crossAxisCount");
    let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
    if (mainAxisSpacing == null) dart.nullFailed(I[48], 61, 12, "mainAxisSpacing");
    let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
    if (crossAxisSpacing == null) dart.nullFailed(I[48], 62, 12, "crossAxisSpacing");
    let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1 / 0;
    if (childAspectRatio == null) dart.nullFailed(I[48], 63, 12, "childAspectRatio");
    let children = opts && 'children' in opts ? opts.children : C[82] || CT.C82;
    if (children == null) dart.nullFailed(I[48], 64, 20, "children");
    this[_context$0] = new grid_view._GridViewContext.new();
    this[_mainAxisCount] = null;
    this[direction$] = direction;
    this[padding$] = padding;
    this[crossAxisCount$] = crossAxisCount;
    this[mainAxisSpacing$] = mainAxisSpacing;
    this[crossAxisSpacing$] = crossAxisSpacing;
    this[childAspectRatio$] = childAspectRatio;
    grid_view.GridView.__proto__.new.call(this, {children: children});
    ;
  }).prototype = grid_view.GridView.prototype;
  dart.addTypeTests(grid_view.GridView);
  dart.addTypeCaches(grid_view.GridView);
  dart.setMethodSignature(grid_view.GridView, () => ({
    __proto__: dart.getMethods(grid_view.GridView.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(grid_view.GridView, () => ({
    __proto__: dart.getGetters(grid_view.GridView.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(grid_view.GridView, I[49]);
  dart.setFieldSignature(grid_view.GridView, () => ({
    __proto__: dart.getFields(grid_view.GridView.__proto__),
    direction: dart.finalFieldType(flex$.Axis),
    padding: dart.finalFieldType(geometry.EdgeInsets),
    crossAxisCount: dart.finalFieldType(core.int),
    mainAxisSpacing: dart.finalFieldType(core.double),
    crossAxisSpacing: dart.finalFieldType(core.double),
    childAspectRatio: dart.finalFieldType(core.double),
    [_context$0]: dart.finalFieldType(grid_view._GridViewContext),
    [_mainAxisCount]: dart.fieldType(dart.nullable(core.int))
  }));
  var horizontalColor = dart.privateName(grid_paper, "GridPaper.horizontalColor");
  var verticalColor = dart.privateName(grid_paper, "GridPaper.verticalColor");
  var horizontalInterval = dart.privateName(grid_paper, "GridPaper.horizontalInterval");
  var verticalInterval = dart.privateName(grid_paper, "GridPaper.verticalInterval");
  var horizontalDivisions = dart.privateName(grid_paper, "GridPaper.horizontalDivisions");
  var verticalDivisions = dart.privateName(grid_paper, "GridPaper.verticalDivisions");
  var horizontalSubdivisions = dart.privateName(grid_paper, "GridPaper.horizontalSubdivisions");
  var verticalSubdivisions = dart.privateName(grid_paper, "GridPaper.verticalSubdivisions");
  var margin$ = dart.privateName(grid_paper, "GridPaper.margin");
  var horizontalOffset = dart.privateName(grid_paper, "GridPaper.horizontalOffset");
  var verticalOffset = dart.privateName(grid_paper, "GridPaper.verticalOffset");
  var border$0 = dart.privateName(grid_paper, "GridPaper.border");
  var scale = dart.privateName(grid_paper, "GridPaper.scale");
  var opacity = dart.privateName(grid_paper, "GridPaper.opacity");
  var child$0 = dart.privateName(widget$, "SingleChildWidget.child");
  const Widget_SpanningWidget$36$2 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$2.new = function() {
    Widget_SpanningWidget$36$2.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$2.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$2, multi_page.SpanningWidget);
  widget$.SingleChildWidget = class SingleChildWidget extends Widget_SpanningWidget$36$2 {
    get child() {
      return this[child$0];
    }
    set child(value) {
      super.child = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[5], 288, 23, "context");
      if (constraints == null) dart.nullFailed(I[5], 288, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[5], 289, 13, "parentUsesSize");
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[5], 292, 14, "child!.box != null");
        this.box = dart.nullCheck(this.child).box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paintChild(context) {
      let t30;
      if (context == null) dart.nullFailed(I[5], 300, 27, "context");
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t30 = context.canvas;
        (() => {
          t30.saveContext();
          t30.setTransform(mat);
          return t30;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
    get canSpan() {
      return multi_page.SpanningWidget.is(this.child) && dart.test(multi_page.SpanningWidget.as(this.child).canSpan);
    }
    get hasMoreWidgets() {
      return multi_page.SpanningWidget.is(this.child) && dart.test(multi_page.SpanningWidget.as(this.child).hasMoreWidgets);
    }
    restoreContext(context) {
      multi_page.WidgetContext.as(context);
      if (context == null) dart.nullFailed(I[5], 321, 47, "context");
      if (multi_page.SpanningWidget.is(this.child)) {
        multi_page.SpanningWidget.as(this.child).restoreContext(context);
      }
    }
    saveContext() {
      if (multi_page.SpanningWidget.is(this.child)) {
        return multi_page.SpanningWidget.as(this.child).saveContext();
      }
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (widget$.SingleChildWidget.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$0] = child;
    widget$.SingleChildWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.SingleChildWidget.prototype;
  dart.addTypeTests(widget$.SingleChildWidget);
  dart.addTypeCaches(widget$.SingleChildWidget);
  dart.setMethodSignature(widget$.SingleChildWidget, () => ({
    __proto__: dart.getMethods(widget$.SingleChildWidget.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    paintChild: dart.fnType(dart.void, [widget$.Context]),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(widget$.SingleChildWidget, () => ({
    __proto__: dart.getGetters(widget$.SingleChildWidget.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(widget$.SingleChildWidget, I[6]);
  dart.setFieldSignature(widget$.SingleChildWidget, () => ({
    __proto__: dart.getFields(widget$.SingleChildWidget.__proto__),
    child: dart.finalFieldType(dart.nullable(widget$.Widget))
  }));
  grid_paper.GridPaper = class GridPaper extends widget$.SingleChildWidget {
    get horizontalColor() {
      return this[horizontalColor];
    }
    set horizontalColor(value) {
      super.horizontalColor = value;
    }
    get verticalColor() {
      return this[verticalColor];
    }
    set verticalColor(value) {
      super.verticalColor = value;
    }
    get horizontalInterval() {
      return this[horizontalInterval];
    }
    set horizontalInterval(value) {
      super.horizontalInterval = value;
    }
    get verticalInterval() {
      return this[verticalInterval];
    }
    set verticalInterval(value) {
      super.verticalInterval = value;
    }
    get horizontalDivisions() {
      return this[horizontalDivisions];
    }
    set horizontalDivisions(value) {
      super.horizontalDivisions = value;
    }
    get verticalDivisions() {
      return this[verticalDivisions];
    }
    set verticalDivisions(value) {
      super.verticalDivisions = value;
    }
    get horizontalSubdivisions() {
      return this[horizontalSubdivisions];
    }
    set horizontalSubdivisions(value) {
      super.horizontalSubdivisions = value;
    }
    get verticalSubdivisions() {
      return this[verticalSubdivisions];
    }
    set verticalSubdivisions(value) {
      super.verticalSubdivisions = value;
    }
    get margin() {
      return this[margin$];
    }
    set margin(value) {
      super.margin = value;
    }
    get horizontalOffset() {
      return this[horizontalOffset];
    }
    set horizontalOffset(value) {
      super.horizontalOffset = value;
    }
    get verticalOffset() {
      return this[verticalOffset];
    }
    set verticalOffset(value) {
      super.verticalOffset = value;
    }
    get border() {
      return this[border$0];
    }
    set border(value) {
      super.border = value;
    }
    get scale() {
      return this[scale];
    }
    set scale(value) {
      super.scale = value;
    }
    get opacity() {
      return this[opacity];
    }
    set opacity(value) {
      super.opacity = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[50], 205, 23, "context");
      if (constraints == null) dart.nullFailed(I[50], 205, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[50], 206, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
      if (this.child != null) {
        if (dart.test(constraints.hasBoundedWidth) && dart.test(constraints.hasBoundedHeight)) {
          let childConstraints = new geometry.BoxConstraints.new({maxWidth: dart.notNull(constraints.maxWidth) - dart.notNull(this.margin.horizontal), maxHeight: dart.notNull(constraints.maxHeight) - dart.notNull(this.margin.vertical)});
          dart.nullCheck(this.child).layout(context, childConstraints, {parentUsesSize: false});
        } else {
          dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: false});
        }
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[50], 219, 14, "child!.box != null");
        dart.nullCheck(this.child).box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(this.margin.left, dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(this.margin.top) - dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).height)), dart.nullCheck(dart.nullCheck(this.child).box).size);
      }
    }
    paint(context) {
      let t30, t30$, t30$0, t30$1, t30$2, t30$3;
      if (context == null) dart.nullFailed(I[50], 227, 22, "context");
      super.paint(context);
      this.paintChild(context);
      context.canvas.saveContext();
      context.canvas.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.opacity}));
      context.canvas.setStrokeColor(this.horizontalColor);
      let l = this.scale;
      let m = dart.notNull(l) / 2;
      let s = m / 2;
      let allHorizontalDivisions = (dart.notNull(this.horizontalDivisions) * dart.notNull(this.horizontalSubdivisions))[$toDouble]();
      let n = this.horizontalOffset;
      for (let x = dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.margin.left); x <= dart.notNull(dart.nullCheck(this.box).right) - dart.notNull(this.margin.right); x = x + dart.notNull(this.horizontalInterval) / allHorizontalDivisions) {
        t30 = context.canvas;
        (() => {
          t30.setLineWidth(n[$modulo](dart.notNull(this.horizontalSubdivisions) * dart.notNull(this.horizontalDivisions)) === 0 ? l : n[$modulo](this.horizontalSubdivisions) === 0 ? m : s);
          t30.drawLine(x, dart.nullCheck(this.box).top, x, dart.nullCheck(this.box).bottom);
          t30.strokePath();
          return t30;
        })();
        n = dart.notNull(n) + 1;
      }
      context.canvas.setStrokeColor(this.verticalColor);
      let allVerticalDivisions = (dart.notNull(this.verticalDivisions) * dart.notNull(this.verticalSubdivisions))[$toDouble]();
      n = this.verticalOffset;
      for (let y = dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(this.margin.top); y >= dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.margin.bottom); y = y - dart.notNull(this.verticalInterval) / allVerticalDivisions) {
        t30$ = context.canvas;
        (() => {
          t30$.setLineWidth(n[$modulo](dart.notNull(this.verticalSubdivisions) * dart.notNull(this.verticalDivisions)) === 0 ? l : n[$modulo](this.verticalSubdivisions) === 0 ? m : s);
          t30$.drawLine(dart.nullCheck(this.box).left, y, dart.nullCheck(this.box).right, y);
          t30$.strokePath();
          return t30$;
        })();
        n = dart.notNull(n) + 1;
      }
      if (dart.test(this.border.left.style.paint)) {
        this.border.left.style.setStyle(context);
        t30$0 = context.canvas;
        (() => {
          t30$0.setStrokeColor(this.border.left.color);
          t30$0.setLineWidth(this.border.left.width);
          t30$0.drawLine(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.margin.left), dart.nullCheck(this.box).top, dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.margin.left), dart.nullCheck(this.box).bottom);
          t30$0.strokePath();
          return t30$0;
        })();
        this.border.left.style.unsetStyle(context);
      }
      if (dart.test(this.border.right.style.paint)) {
        this.border.right.style.setStyle(context);
        t30$1 = context.canvas;
        (() => {
          t30$1.setStrokeColor(this.border.right.color);
          t30$1.setLineWidth(this.border.right.width);
          t30$1.drawLine(dart.notNull(dart.nullCheck(this.box).right) - dart.notNull(this.margin.right), dart.nullCheck(this.box).top, dart.notNull(dart.nullCheck(this.box).right) - dart.notNull(this.margin.right), dart.nullCheck(this.box).bottom);
          t30$1.strokePath();
          return t30$1;
        })();
        this.border.right.style.unsetStyle(context);
      }
      if (dart.test(this.border.top.style.paint)) {
        this.border.top.style.setStyle(context);
        t30$2 = context.canvas;
        (() => {
          t30$2.setStrokeColor(this.border.top.color);
          t30$2.setLineWidth(this.border.top.width);
          t30$2.drawLine(dart.nullCheck(this.box).left, dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(this.margin.top), dart.nullCheck(this.box).right, dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(this.margin.top));
          t30$2.strokePath();
          return t30$2;
        })();
        this.border.top.style.unsetStyle(context);
      }
      if (dart.test(this.border.bottom.style.paint)) {
        this.border.bottom.style.setStyle(context);
        t30$3 = context.canvas;
        (() => {
          t30$3.setStrokeColor(this.border.bottom.color);
          t30$3.setLineWidth(this.border.bottom.width);
          t30$3.drawLine(dart.nullCheck(this.box).left, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.margin.bottom), dart.nullCheck(this.box).right, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.margin.bottom));
          t30$3.strokePath();
          return t30$3;
        })();
        this.border.bottom.style.unsetStyle(context);
      }
      context.canvas.restoreContext();
    }
  };
  (grid_paper.GridPaper.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[84] || CT.C84;
    if (color == null) dart.nullFailed(I[50], 29, 14, "color");
    let interval = opts && 'interval' in opts ? opts.interval : 100;
    if (interval == null) dart.nullFailed(I[50], 30, 12, "interval");
    let divisions = opts && 'divisions' in opts ? opts.divisions : 5;
    if (divisions == null) dart.nullFailed(I[50], 31, 9, "divisions");
    let subdivisions = opts && 'subdivisions' in opts ? opts.subdivisions : 2;
    if (subdivisions == null) dart.nullFailed(I[50], 32, 9, "subdivisions");
    let child = opts && 'child' in opts ? opts.child : null;
    if (!(dart.notNull(divisions) > 0)) dart.assertFailed("The \"divisions\" property must be greater than zero. If there were no divisions, the grid paper would not paint anything.", I[50], 34, 16, "divisions > 0");
    if (!(dart.notNull(subdivisions) > 0)) dart.assertFailed("The \"subdivisions\" property must be greater than zero. If there were no subdivisions, the grid paper would not paint anything.", I[50], 36, 16, "subdivisions > 0");
    this[horizontalColor] = color;
    this[verticalColor] = color;
    this[horizontalInterval] = interval;
    this[verticalInterval] = interval;
    this[horizontalDivisions] = divisions;
    this[verticalDivisions] = divisions;
    this[horizontalSubdivisions] = subdivisions;
    this[verticalSubdivisions] = subdivisions;
    this[margin$] = geometry.EdgeInsets.zero;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 0;
    this[border$0] = C[85] || CT.C85;
    this[scale] = 1.0;
    this[opacity] = 0.5;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.millimeter = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[84] || CT.C84;
    if (color == null) dart.nullFailed(I[50], 55, 14, "color");
    let child = opts && 'child' in opts ? opts.child : null;
    this[horizontalColor] = color;
    this[verticalColor] = color;
    this[horizontalInterval] = 5 * 28.346456692913385;
    this[verticalInterval] = 5 * 28.346456692913385;
    this[horizontalDivisions] = 5;
    this[verticalDivisions] = 5;
    this[horizontalSubdivisions] = 10;
    this[verticalSubdivisions] = 10;
    this[margin$] = geometry.EdgeInsets.zero;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 0;
    this[border$0] = C[85] || CT.C85;
    this[scale] = 1.0;
    this[opacity] = 0.5;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.seyes = function(opts) {
    let margin = opts && 'margin' in opts ? opts.margin : C[86] || CT.C86;
    if (margin == null) dart.nullFailed(I[50], 74, 10, "margin");
    let child = opts && 'child' in opts ? opts.child : null;
    this[margin$] = margin;
    this[horizontalColor] = C[87] || CT.C87;
    this[verticalColor] = C[87] || CT.C87;
    this[horizontalInterval] = 8 * 2.834645669291339;
    this[verticalInterval] = 8 * 2.834645669291339;
    this[horizontalDivisions] = 1;
    this[verticalDivisions] = 4;
    this[horizontalSubdivisions] = 1;
    this[verticalSubdivisions] = 1;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 1;
    this[border$0] = C[88] || CT.C88;
    this[scale] = 1.0;
    this[opacity] = 1.0;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.collegeRuled = function(opts) {
    let margin = opts && 'margin' in opts ? opts.margin : C[91] || CT.C91;
    if (margin == null) dart.nullFailed(I[50], 100, 10, "margin");
    let child = opts && 'child' in opts ? opts.child : null;
    this[margin$] = margin;
    this[horizontalColor] = grid_paper.GridPaper.lineColor;
    this[verticalColor] = grid_paper.GridPaper.lineColor;
    this[horizontalInterval] = 1 / 0;
    this[verticalInterval] = 9 / 32 * 72;
    this[horizontalDivisions] = 1;
    this[verticalDivisions] = 1;
    this[horizontalSubdivisions] = 1;
    this[verticalSubdivisions] = 1;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 1;
    this[border$0] = C[92] || CT.C92;
    this[scale] = 1.0;
    this[opacity] = 1.0;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.quad = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[84] || CT.C84;
    if (color == null) dart.nullFailed(I[50], 126, 14, "color");
    let child = opts && 'child' in opts ? opts.child : null;
    this[horizontalColor] = color;
    this[verticalColor] = color;
    this[horizontalInterval] = 72;
    this[verticalInterval] = 72;
    this[horizontalDivisions] = 4;
    this[verticalDivisions] = 4;
    this[horizontalSubdivisions] = 1;
    this[verticalSubdivisions] = 1;
    this[margin$] = geometry.EdgeInsets.zero;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 0;
    this[border$0] = C[85] || CT.C85;
    this[scale] = 1.0;
    this[opacity] = 0.5;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.engineering = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[84] || CT.C84;
    if (color == null) dart.nullFailed(I[50], 145, 14, "color");
    let child = opts && 'child' in opts ? opts.child : null;
    this[horizontalColor] = color;
    this[verticalColor] = color;
    this[horizontalInterval] = 72;
    this[verticalInterval] = 72;
    this[horizontalDivisions] = 5;
    this[verticalDivisions] = 5;
    this[horizontalSubdivisions] = 2;
    this[verticalSubdivisions] = 2;
    this[margin$] = geometry.EdgeInsets.zero;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 0;
    this[border$0] = C[85] || CT.C85;
    this[scale] = 1.0;
    this[opacity] = 0.5;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  dart.addTypeTests(grid_paper.GridPaper);
  dart.addTypeCaches(grid_paper.GridPaper);
  dart.setLibraryUri(grid_paper.GridPaper, I[51]);
  dart.setFieldSignature(grid_paper.GridPaper, () => ({
    __proto__: dart.getFields(grid_paper.GridPaper.__proto__),
    horizontalColor: dart.finalFieldType(color$.PdfColor),
    verticalColor: dart.finalFieldType(color$.PdfColor),
    horizontalInterval: dart.finalFieldType(core.double),
    verticalInterval: dart.finalFieldType(core.double),
    horizontalDivisions: dart.finalFieldType(core.int),
    verticalDivisions: dart.finalFieldType(core.int),
    horizontalSubdivisions: dart.finalFieldType(core.int),
    verticalSubdivisions: dart.finalFieldType(core.int),
    margin: dart.finalFieldType(geometry.EdgeInsets),
    horizontalOffset: dart.finalFieldType(core.int),
    verticalOffset: dart.finalFieldType(core.int),
    border: dart.finalFieldType(box_border.BoxBorder),
    scale: dart.finalFieldType(core.double),
    opacity: dart.finalFieldType(core.double)
  }));
  dart.defineLazy(grid_paper.GridPaper, {
    /*grid_paper.GridPaper.lineColor*/get lineColor() {
      return C[84] || CT.C84;
    }
  }, false);
  var value$3 = dart.privateName(forms, "Checkbox.value");
  var tristate$ = dart.privateName(forms, "Checkbox.tristate");
  var activeColor$ = dart.privateName(forms, "Checkbox.activeColor");
  var checkColor$ = dart.privateName(forms, "Checkbox.checkColor");
  var name$ = dart.privateName(forms, "Checkbox.name");
  forms.Checkbox = class Checkbox extends widget$.SingleChildWidget {
    get value() {
      return this[value$3];
    }
    set value(value) {
      super.value = value;
    }
    get tristate() {
      return this[tristate$];
    }
    set tristate(value) {
      super.tristate = value;
    }
    get activeColor() {
      return this[activeColor$];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get checkColor() {
      return this[checkColor$];
    }
    set checkColor(value) {
      super.checkColor = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[52], 67, 22, "context");
      super.paint(context);
      this.paintChild(context);
      let bf = new annotation.PdfButtonField.new({rect: context.localToGlobal(dart.nullCheck(this.box)), fieldName: this.name, value: dart.test(this.value) ? "/Yes" : null, defaultValue: dart.test(this.value) ? "/Yes" : null, flags: T$.LinkedHashSetOfPdfAnnotFlags().from([annotation.PdfAnnotFlags.print])});
      let g = bf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {name: "/Yes", selected: this.value});
      g.drawRect(0.0, 0.0, bf.rect.width, bf.rect.height);
      g.setFillColor(this.activeColor);
      g.fillPath();
      g.moveTo(2.0, dart.notNull(bf.rect.height) / 2);
      g.lineTo(dart.notNull(bf.rect.width) / 3, dart.notNull(bf.rect.height) / 4);
      g.lineTo(dart.notNull(bf.rect.width) - 2, dart.notNull(bf.rect.height) / 4 * 3);
      g.setStrokeColor(this.checkColor);
      g.setLineWidth(2.0);
      g.strokePath();
      bf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {name: "/Off", selected: !dart.test(this.value)});
      new annotation.PdfAnnot.new(context.page, bf);
    }
  };
  (forms.Checkbox.new = function(opts) {
    let t30;
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[52], 36, 19, "value");
    let tristate = opts && 'tristate' in opts ? opts.tristate : false;
    if (tristate == null) dart.nullFailed(I[52], 37, 10, "tristate");
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : C[94] || CT.C94;
    if (activeColor == null) dart.nullFailed(I[52], 38, 10, "activeColor");
    let checkColor = opts && 'checkColor' in opts ? opts.checkColor : C[95] || CT.C95;
    if (checkColor == null) dart.nullFailed(I[52], 39, 10, "checkColor");
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[52], 40, 19, "name");
    let width = opts && 'width' in opts ? opts.width : 13;
    if (width == null) dart.nullFailed(I[52], 41, 12, "width");
    let height = opts && 'height' in opts ? opts.height : 13;
    if (height == null) dart.nullFailed(I[52], 42, 12, "height");
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    this[value$3] = value;
    this[tristate$] = tristate;
    this[activeColor$] = activeColor;
    this[checkColor$] = checkColor;
    this[name$] = name;
    forms.Checkbox.__proto__.new.call(this, {child: new container$.Container.new({width: width, height: height, margin: C[96] || CT.C96, decoration: (t30 = decoration, t30 == null ? new decoration$.BoxDecoration.new({border: box_border.Border.all({color: colors.PdfColors.grey600, width: 2.0})}) : t30)})});
    ;
  }).prototype = forms.Checkbox.prototype;
  dart.addTypeTests(forms.Checkbox);
  dart.addTypeCaches(forms.Checkbox);
  dart.setLibraryUri(forms.Checkbox, I[53]);
  dart.setFieldSignature(forms.Checkbox, () => ({
    __proto__: dart.getFields(forms.Checkbox.__proto__),
    value: dart.finalFieldType(core.bool),
    tristate: dart.finalFieldType(core.bool),
    activeColor: dart.finalFieldType(color$.PdfColor),
    checkColor: dart.finalFieldType(color$.PdfColor),
    name: dart.finalFieldType(core.String)
  }));
  var name$0 = dart.privateName(forms, "FlatButton.name");
  var flags$ = dart.privateName(forms, "FlatButton.flags");
  var _childDown = dart.privateName(forms, "_childDown");
  var Radius_y = dart.privateName(border_radius, "Radius.y");
  var Radius_x = dart.privateName(border_radius, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var _childRollover = dart.privateName(forms, "_childRollover");
  forms.FlatButton = class FlatButton extends widget$.SingleChildWidget {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    paint(context) {
      let t30;
      if (context == null) dart.nullFailed(I[52], 160, 22, "context");
      super.paint(context);
      let bf = new annotation.PdfButtonField.new({rect: context.localToGlobal(dart.nullCheck(this.box)), fieldName: this.name, flags: this.flags, fieldFlags: T$.LinkedHashSetOfPdfFieldFlags().from([annotation.PdfFieldFlags.pushButton])});
      let mat = context.canvas.getTransform();
      let translation = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
      let rotation = vector_math_64.Quaternion.new(0.0, 0.0, 0.0, 0.0);
      let scale = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
      t30 = mat;
      (() => {
        t30.decompose(translation, rotation, scale);
        t30.leftTranslate(-dart.notNull(translation.x), -dart.notNull(translation.y));
        t30.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        return t30;
      })();
      let canvas = bf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {matrix: mat, boundingBox: this.box});
      widget$.Widget.draw(dart.nullCheck(this.child), {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
      canvas = bf.appearance(context.document, annotation.PdfAnnotAppearance.down, {matrix: mat, boundingBox: this.box});
      widget$.Widget.draw(this[_childDown], {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
      canvas = bf.appearance(context.document, annotation.PdfAnnotAppearance.rollover, {matrix: mat, boundingBox: this.box});
      widget$.Widget.draw(this[_childRollover], {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
      new annotation.PdfAnnot.new(context.page, bf);
    }
  };
  (forms.FlatButton.new = function(opts) {
    let t30, t30$, t30$0, t30$1, t30$2, t30$3;
    let textColor = opts && 'textColor' in opts ? opts.textColor : C[95] || CT.C95;
    if (textColor == null) dart.nullFailed(I[52], 100, 14, "textColor");
    let color = opts && 'color' in opts ? opts.color : C[94] || CT.C94;
    if (color == null) dart.nullFailed(I[52], 101, 14, "color");
    let colorDown = opts && 'colorDown' in opts ? opts.colorDown : C[77] || CT.C77;
    if (colorDown == null) dart.nullFailed(I[52], 102, 14, "colorDown");
    let colorRollover = opts && 'colorRollover' in opts ? opts.colorRollover : C[97] || CT.C97;
    if (colorRollover == null) dart.nullFailed(I[52], 103, 14, "colorRollover");
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[52], 107, 21, "child");
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[52], 108, 19, "name");
    this[flags$] = flags;
    this[name$0] = name;
    this[_childDown] = new container$.Container.new({child: new theme$.DefaultTextStyle.new({style: new text_style.TextStyle.new({color: textColor}), child: child}), decoration: (t30 = decoration, t30 == null ? new decoration$.BoxDecoration.new({color: colorDown, borderRadius: C[98] || CT.C98}) : t30), padding: (t30$ = padding, t30$ == null ? C[100] || CT.C100 : t30$)});
    this[_childRollover] = new container$.Container.new({child: new theme$.DefaultTextStyle.new({style: new text_style.TextStyle.new({color: textColor}), child: child}), decoration: (t30$0 = decoration, t30$0 == null ? new decoration$.BoxDecoration.new({color: colorRollover, borderRadius: C[98] || CT.C98}) : t30$0), padding: (t30$1 = padding, t30$1 == null ? C[100] || CT.C100 : t30$1)});
    forms.FlatButton.__proto__.new.call(this, {child: new container$.Container.new({child: new theme$.DefaultTextStyle.new({style: new text_style.TextStyle.new({color: textColor}), child: child}), decoration: (t30$2 = decoration, t30$2 == null ? new decoration$.BoxDecoration.new({color: color, borderRadius: C[98] || CT.C98}) : t30$2), padding: (t30$3 = padding, t30$3 == null ? C[100] || CT.C100 : t30$3)})});
    ;
  }).prototype = forms.FlatButton.prototype;
  dart.addTypeTests(forms.FlatButton);
  dart.addTypeCaches(forms.FlatButton);
  dart.setLibraryUri(forms.FlatButton, I[53]);
  dart.setFieldSignature(forms.FlatButton, () => ({
    __proto__: dart.getFields(forms.FlatButton.__proto__),
    name: dart.finalFieldType(core.String),
    [_childDown]: dart.finalFieldType(widget$.Widget),
    [_childRollover]: dart.finalFieldType(widget$.Widget),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags)))
  }));
  var child$1 = dart.privateName(forms, "TextField.child");
  var width$7 = dart.privateName(forms, "TextField.width");
  var height$5 = dart.privateName(forms, "TextField.height");
  var name$1 = dart.privateName(forms, "TextField.name");
  var border$1 = dart.privateName(forms, "TextField.border");
  var flags$0 = dart.privateName(forms, "TextField.flags");
  var date$ = dart.privateName(forms, "TextField.date");
  var color$5 = dart.privateName(forms, "TextField.color");
  var backgroundColor$1 = dart.privateName(forms, "TextField.backgroundColor");
  var highlighting$ = dart.privateName(forms, "TextField.highlighting");
  var maxLength$ = dart.privateName(forms, "TextField.maxLength");
  var alternateName$ = dart.privateName(forms, "TextField.alternateName");
  var mappingName$ = dart.privateName(forms, "TextField.mappingName");
  var fieldFlags$ = dart.privateName(forms, "TextField.fieldFlags");
  var value$4 = dart.privateName(forms, "TextField.value");
  var defaultValue$ = dart.privateName(forms, "TextField.defaultValue");
  var textStyle$ = dart.privateName(forms, "TextField.textStyle");
  var _name$8 = dart.privateName(annotation, "_name");
  var PdfName_value = dart.privateName(data_types, "PdfName.value");
  forms.TextField = class TextField extends widget$.StatelessWidget {
    get child() {
      return this[child$1];
    }
    set child(value) {
      super.child = value;
    }
    get width() {
      return this[width$7];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$5];
    }
    set height(value) {
      super.height = value;
    }
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get border() {
      return this[border$1];
    }
    set border(value) {
      super.border = value;
    }
    get flags() {
      return this[flags$0];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$5];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$1];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get highlighting() {
      return this[highlighting$];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get maxLength() {
      return this[maxLength$];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get alternateName() {
      return this[alternateName$];
    }
    set alternateName(value) {
      super.alternateName = value;
    }
    get mappingName() {
      return this[mappingName$];
    }
    set mappingName(value) {
      super.mappingName = value;
    }
    get fieldFlags() {
      return this[fieldFlags$];
    }
    set fieldFlags(value) {
      super.fieldFlags = value;
    }
    get value() {
      return this[value$4];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    build(context) {
      let t30;
      if (context == null) dart.nullFailed(I[52], 256, 24, "context");
      t30 = this.child;
      return t30 == null ? new basic.SizedBox.new({width: this.width, height: this.height}) : t30;
    }
    paint(context) {
      let t30, t30$;
      if (context == null) dart.nullFailed(I[52], 261, 22, "context");
      super.paint(context);
      let _textStyle = theme$.Theme.of(context).defaultTextStyle.merge(this.textStyle);
      let tf = new annotation.PdfTextField.new({rect: context.localToGlobal(dart.nullCheck(this.box)), fieldName: this.name, border: this.border, flags: (t30 = this.flags, t30 == null ? C[101] || CT.C101 : t30), date: this.date, color: this.color, backgroundColor: this.backgroundColor, highlighting: this.highlighting, maxLength: this.maxLength, alternateName: this.alternateName, mappingName: this.mappingName, fieldFlags: this.fieldFlags, value: this.value, defaultValue: this.defaultValue, font: dart.nullCheck(dart.nullCheck(_textStyle.font).getFont(context)), fontSize: dart.nullCheck(_textStyle.fontSize), textColor: dart.nullCheck(_textStyle.color)});
      let mat = context.canvas.getTransform();
      let translation = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
      let rotation = vector_math_64.Quaternion.new(0.0, 0.0, 0.0, 0.0);
      let scale = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
      t30$ = mat;
      (() => {
        t30$.decompose(translation, rotation, scale);
        t30$.leftTranslate(-dart.notNull(translation.x), -dart.notNull(translation.y));
        t30$.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        return t30$;
      })();
      if (this.value != null) {
        let canvas = tf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {matrix: mat, boundingBox: this.box});
        canvas.markContentBegin(C[103] || CT.C103);
        widget$.Widget.draw(new text$1.Text.new(dart.nullCheck(this.value), {style: _textStyle}), {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
        canvas.markContentEnd();
      }
      new annotation.PdfAnnot.new(context.page, tf);
    }
  };
  (forms.TextField.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let width = opts && 'width' in opts ? opts.width : 120;
    if (width == null) dart.nullFailed(I[52], 219, 10, "width");
    let height = opts && 'height' in opts ? opts.height : 13;
    if (height == null) dart.nullFailed(I[52], 220, 10, "height");
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[52], 221, 19, "name");
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    this[child$1] = child;
    this[width$7] = width;
    this[height$5] = height;
    this[name$1] = name;
    this[border$1] = border;
    this[flags$0] = flags;
    this[date$] = date;
    this[color$5] = color;
    this[backgroundColor$1] = backgroundColor;
    this[highlighting$] = highlighting;
    this[maxLength$] = maxLength;
    this[alternateName$] = alternateName;
    this[mappingName$] = mappingName;
    this[fieldFlags$] = fieldFlags;
    this[value$4] = value;
    this[defaultValue$] = defaultValue;
    this[textStyle$] = textStyle;
    forms.TextField.__proto__.new.call(this);
    ;
  }).prototype = forms.TextField.prototype;
  dart.addTypeTests(forms.TextField);
  dart.addTypeCaches(forms.TextField);
  dart.setMethodSignature(forms.TextField, () => ({
    __proto__: dart.getMethods(forms.TextField.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(forms.TextField, I[53]);
  dart.setFieldSignature(forms.TextField, () => ({
    __proto__: dart.getFields(forms.TextField.__proto__),
    child: dart.finalFieldType(dart.nullable(widget$.Widget)),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    name: dart.finalFieldType(core.String),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags))),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    highlighting: dart.finalFieldType(dart.nullable(annotation.PdfAnnotHighlighting)),
    maxLength: dart.finalFieldType(dart.nullable(core.int)),
    alternateName: dart.finalFieldType(dart.nullable(core.String)),
    mappingName: dart.finalFieldType(dart.nullable(core.String)),
    fieldFlags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfFieldFlags))),
    value: dart.finalFieldType(dart.nullable(core.String)),
    defaultValue: dart.finalFieldType(dart.nullable(core.String)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle))
  }));
  var name$2 = dart.privateName(forms, "Signature.name");
  var value$5 = dart.privateName(forms, "Signature.value");
  var appendOnly$ = dart.privateName(forms, "Signature.appendOnly");
  var border$2 = dart.privateName(forms, "Signature.border");
  var flags$1 = dart.privateName(forms, "Signature.flags");
  var date$0 = dart.privateName(forms, "Signature.date");
  var color$6 = dart.privateName(forms, "Signature.color");
  var highlighting$0 = dart.privateName(forms, "Signature.highlighting");
  var crl$ = dart.privateName(forms, "Signature.crl");
  var cert$ = dart.privateName(forms, "Signature.cert");
  var ocsp$ = dart.privateName(forms, "Signature.ocsp");
  forms.Signature = class Signature extends widget$.SingleChildWidget {
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$5];
    }
    set value(value) {
      super.value = value;
    }
    get appendOnly() {
      return this[appendOnly$];
    }
    set appendOnly(value) {
      super.appendOnly = value;
    }
    get border() {
      return this[border$2];
    }
    set border(value) {
      super.border = value;
    }
    get flags() {
      return this[flags$1];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$0];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$6];
    }
    set color(value) {
      super.color = value;
    }
    get highlighting() {
      return this[highlighting$0];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get crl() {
      return this[crl$];
    }
    set crl(value) {
      super.crl = value;
    }
    get cert() {
      return this[cert$];
    }
    set cert(value) {
      super.cert = value;
    }
    get ocsp() {
      return this[ocsp$];
    }
    set ocsp(value) {
      super.ocsp = value;
    }
    paint(context) {
      let t30, t31;
      if (context == null) dart.nullFailed(I[52], 365, 22, "context");
      super.paint(context);
      if (this.value != null) {
        t30 = context.document;
        t30.sign == null ? t30.sign = new signature.PdfSignature.new(context.document, {value: dart.nullCheck(this.value), flags: (() => {
            let t31 = T$.LinkedHashSetOfPdfSigFlags().from([signature.PdfSigFlags.signaturesExist]);
            if (dart.test(this.appendOnly)) t31.add(signature.PdfSigFlags.appendOnly);
            return t31;
          })(), crl: this.crl, cert: this.cert, ocsp: this.ocsp}) : null;
      } else {
        this.paintChild(context);
      }
      let bf = new annotation.PdfAnnotSign.new({rect: context.localToGlobal(dart.nullCheck(this.box)), fieldName: this.name, border: this.border, flags: this.flags, date: this.date, color: this.color, highlighting: this.highlighting});
      if (this.child != null && this.value != null) {
        let mat = context.canvas.getTransform();
        let translation = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
        let rotation = vector_math_64.Quaternion.new(0.0, 0.0, 0.0, 0.0);
        let scale = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
        t31 = mat;
        (() => {
          t31.decompose(translation, rotation, scale);
          t31.leftTranslate(-dart.notNull(translation.x), -dart.notNull(translation.y));
          t31.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
          return t31;
        })();
        let canvas = bf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {matrix: mat});
        widget$.Widget.draw(dart.nullCheck(this.child), {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
      }
      new annotation.PdfAnnot.new(context.page, bf);
    }
  };
  (forms.Signature.new = function(opts) {
    let t30;
    let child = opts && 'child' in opts ? opts.child : null;
    let crypto = opts && 'crypto' in opts ? opts.crypto : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[52], 319, 19, "name");
    let appendOnly = opts && 'appendOnly' in opts ? opts.appendOnly : false;
    if (appendOnly == null) dart.nullFailed(I[52], 320, 10, "appendOnly");
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let crl = opts && 'crl' in opts ? opts.crl : null;
    let cert = opts && 'cert' in opts ? opts.cert : null;
    let ocsp = opts && 'ocsp' in opts ? opts.ocsp : null;
    this[name$2] = name;
    this[appendOnly$] = appendOnly;
    this[border$2] = border;
    this[flags$1] = flags;
    this[date$0] = date;
    this[color$6] = color;
    this[highlighting$0] = highlighting;
    this[crl$] = crl;
    this[cert$] = cert;
    this[ocsp$] = ocsp;
    this[value$5] = (t30 = value, t30 == null ? crypto : t30);
    forms.Signature.__proto__.new.call(this, {child: child});
    ;
  }).prototype = forms.Signature.prototype;
  dart.addTypeTests(forms.Signature);
  dart.addTypeCaches(forms.Signature);
  dart.setLibraryUri(forms.Signature, I[53]);
  dart.setFieldSignature(forms.Signature, () => ({
    __proto__: dart.getFields(forms.Signature.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(dart.nullable(signature.PdfSignatureBase)),
    appendOnly: dart.finalFieldType(core.bool),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags))),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    highlighting: dart.finalFieldType(dart.nullable(annotation.PdfAnnotHighlighting)),
    crl: dart.finalFieldType(dart.nullable(core.List$(typed_data.Uint8List))),
    cert: dart.finalFieldType(dart.nullable(core.List$(typed_data.Uint8List))),
    ocsp: dart.finalFieldType(dart.nullable(core.List$(typed_data.Uint8List)))
  }));
  var title$ = dart.privateName(content, "Header.title");
  var text$3 = dart.privateName(content, "Header.text");
  var child$2 = dart.privateName(content, "Header.child");
  var level$ = dart.privateName(content, "Header.level");
  var decoration$1 = dart.privateName(content, "Header.decoration");
  var margin$0 = dart.privateName(content, "Header.margin");
  var padding$0 = dart.privateName(content, "Header.padding");
  var textStyle$0 = dart.privateName(content, "Header.textStyle");
  var outlineColor$ = dart.privateName(content, "Header.outlineColor");
  var outlineStyle$ = dart.privateName(content, "Header.outlineStyle");
  var _name$9 = dart.privateName(outline, "_name");
  var BoxDecoration_boxShadow = dart.privateName(decoration$, "BoxDecoration.boxShadow");
  var BoxDecoration_gradient = dart.privateName(decoration$, "BoxDecoration.gradient");
  var BoxDecoration_image = dart.privateName(decoration$, "BoxDecoration.image");
  var BoxDecoration_shape = dart.privateName(decoration$, "BoxDecoration.shape");
  var BoxDecoration_borderRadius = dart.privateName(decoration$, "BoxDecoration.borderRadius");
  var BoxDecoration_border = dart.privateName(decoration$, "BoxDecoration.border");
  var BoxDecoration_color = dart.privateName(decoration$, "BoxDecoration.color");
  content.Header = class Header extends widget$.StatelessWidget {
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get text() {
      return this[text$3];
    }
    set text(value) {
      super.text = value;
    }
    get child() {
      return this[child$2];
    }
    set child(value) {
      super.child = value;
    }
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get decoration() {
      return this[decoration$1];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get margin() {
      return this[margin$0];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$0];
    }
    set padding(value) {
      super.padding = value;
    }
    get textStyle() {
      return this[textStyle$0];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get outlineColor() {
      return this[outlineColor$];
    }
    set outlineColor(value) {
      super.outlineColor = value;
    }
    get outlineStyle() {
      return this[outlineStyle$];
    }
    set outlineStyle(value) {
      super.outlineStyle = value;
    }
    build(context) {
      let t31;
      if (context == null) dart.nullFailed(I[54], 71, 24, "context");
      let _decoration = this.decoration;
      let _margin = this.margin;
      let _padding = this.padding;
      let _textStyle = this.textStyle;
      switch (this.level) {
        case 0:
        {
          _margin == null ? _margin = C[105] || CT.C105 : null;
          _padding == null ? _padding = C[106] || CT.C106 : null;
          _decoration == null ? _decoration = C[107] || CT.C107 : null;
          _textStyle == null ? _textStyle = theme$.Theme.of(context).header0 : null;
          break;
        }
        case 1:
        {
          _margin == null ? _margin = C[109] || CT.C109 : null;
          _decoration == null ? _decoration = C[110] || CT.C110 : null;
          _textStyle == null ? _textStyle = theme$.Theme.of(context).header1 : null;
          break;
        }
        case 2:
        {
          _margin == null ? _margin = C[113] || CT.C113 : null;
          _textStyle == null ? _textStyle = theme$.Theme.of(context).header2 : null;
          break;
        }
        case 3:
        {
          _margin == null ? _margin = C[113] || CT.C113 : null;
          _textStyle == null ? _textStyle = theme$.Theme.of(context).header3 : null;
          break;
        }
        case 4:
        {
          _margin == null ? _margin = C[113] || CT.C113 : null;
          _textStyle == null ? _textStyle = theme$.Theme.of(context).header4 : null;
          break;
        }
        case 5:
        {
          _margin == null ? _margin = C[113] || CT.C113 : null;
          _textStyle == null ? _textStyle = theme$.Theme.of(context).header5 : null;
          break;
        }
      }
      let container = new container$.Container.new({alignment: geometry.Alignment.topLeft, margin: _margin, padding: _padding, decoration: _decoration, child: (t31 = this.child, t31 == null ? new text$1.Text.new(dart.nullCheck(this.text), {style: _textStyle}) : t31)});
      if (this.title == null) {
        return container;
      }
      return new annotations.Outline.new({name: dart.toString(dart.hashCode(this.text)), title: dart.nullCheck(this.title), child: container, level: this.level, color: this.outlineColor, style: this.outlineStyle});
    }
  };
  (content.Header.new = function(opts) {
    let t31;
    let level = opts && 'level' in opts ? opts.level : 1;
    if (level == null) dart.nullFailed(I[54], 36, 10, "level");
    let text = opts && 'text' in opts ? opts.text : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let outlineColor = opts && 'outlineColor' in opts ? opts.outlineColor : null;
    let outlineStyle = opts && 'outlineStyle' in opts ? opts.outlineStyle : C[104] || CT.C104;
    if (outlineStyle == null) dart.nullFailed(I[54], 45, 10, "outlineStyle");
    this[level$] = level;
    this[text$3] = text;
    this[child$2] = child;
    this[decoration$1] = decoration;
    this[margin$0] = margin;
    this[padding$0] = padding;
    this[textStyle$0] = textStyle;
    this[outlineColor$] = outlineColor;
    this[outlineStyle$] = outlineStyle;
    if (!(dart.notNull(level) >= 0 && dart.notNull(level) <= 5)) dart.assertFailed(null, I[54], 46, 16, "level >= 0 && level <= 5");
    if (!(child != null || text != null)) dart.assertFailed(null, I[54], 47, 16, "child != null || text != null");
    this[title$] = (t31 = title, t31 == null ? text : t31);
    content.Header.__proto__.new.call(this);
    ;
  }).prototype = content.Header.prototype;
  dart.addTypeTests(content.Header);
  dart.addTypeCaches(content.Header);
  dart.setMethodSignature(content.Header, () => ({
    __proto__: dart.getMethods(content.Header.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Header, I[55]);
  dart.setFieldSignature(content.Header, () => ({
    __proto__: dart.getFields(content.Header.__proto__),
    title: dart.finalFieldType(dart.nullable(core.String)),
    text: dart.finalFieldType(dart.nullable(core.String)),
    child: dart.finalFieldType(dart.nullable(widget$.Widget)),
    level: dart.finalFieldType(core.int),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    margin: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    outlineColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    outlineStyle: dart.finalFieldType(outline.PdfOutlineStyle)
  }));
  var _buildToc = dart.privateName(content, "_buildToc");
  content.TableOfContent = class TableOfContent extends widget$.StatelessWidget {
    [_buildToc](o, l) {
      if (o == null) dart.nullFailed(I[54], 137, 41, "o");
      if (l == null) dart.nullFailed(I[54], 137, 48, "l");
      return new (T$.SyncIterableOfWidget()).new((function* _buildToc$() {
        for (let c of o.outlines) {
          if (c.title != null) {
            yield new basic.Padding.new({padding: C[114] || CT.C114, child: new annotations.Link.new({destination: dart.nullCheck(c.anchor), child: new flex$.Row.new({children: T$.JSArrayOfWidget().of([new basic.SizedBox.new({width: 10.0 * dart.notNull(l)}), new text$1.Text.new(dart.str(c.title)), new basic.SizedBox.new({width: 8.0}), new flex$.Expanded.new({child: new basic.Divider.new({borderStyle: box_border.BorderStyle.dotted, thickness: 0.2})}), new basic.SizedBox.new({width: 8.0}), new text$1.Text.new(dart.str(c.page))])})})});
            yield* this[_buildToc](c, dart.notNull(l) + 1);
          }
        }
      }).bind(this));
    }
    build(context) {
      if (context == null) dart.nullFailed(I[54], 166, 24, "context");
      if (!!multi_page.MultiPage.is(context.page)) dart.assertFailed(dart.str(this[$runtimeType]) + " will not work with MultiPage", I[54], 167, 12, "context.page is! MultiPage");
      return new flex$.Column.new({crossAxisAlignment: flex$.CrossAxisAlignment.start, children: (() => {
          let t31 = T$.ListOfWidget().of(this[_buildToc](context.document.outline, 0));
          return t31;
        })()});
    }
  };
  (content.TableOfContent.new = function() {
    content.TableOfContent.__proto__.new.call(this);
    ;
  }).prototype = content.TableOfContent.prototype;
  dart.addTypeTests(content.TableOfContent);
  dart.addTypeCaches(content.TableOfContent);
  dart.setMethodSignature(content.TableOfContent, () => ({
    __proto__: dart.getMethods(content.TableOfContent.__proto__),
    [_buildToc]: dart.fnType(core.Iterable$(widget$.Widget), [outline.PdfOutline, core.int]),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.TableOfContent, I[55]);
  var text$4 = dart.privateName(content, "Paragraph.text");
  var textAlign$0 = dart.privateName(content, "Paragraph.textAlign");
  var style$0 = dart.privateName(content, "Paragraph.style");
  var margin$1 = dart.privateName(content, "Paragraph.margin");
  var padding$1 = dart.privateName(content, "Paragraph.padding");
  content.Paragraph = class Paragraph extends widget$.StatelessWidget {
    get text() {
      return this[text$4];
    }
    set text(value) {
      super.text = value;
    }
    get textAlign() {
      return this[textAlign$0];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get style() {
      return this[style$0];
    }
    set style(value) {
      super.style = value;
    }
    get margin() {
      return this[margin$1];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$1];
    }
    set padding(value) {
      super.padding = value;
    }
    build(context) {
      let t32;
      if (context == null) dart.nullFailed(I[54], 199, 24, "context");
      return new container$.Container.new({margin: this.margin, padding: this.padding, child: new text$1.Text.new(dart.nullCheck(this.text), {textAlign: this.textAlign, style: (t32 = this.style, t32 == null ? theme$.Theme.of(context).paragraphStyle : t32), overflow: text$1.TextOverflow.span})});
    }
  };
  (content.Paragraph.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[115] || CT.C115;
    if (textAlign == null) dart.nullFailed(I[54], 182, 10, "textAlign");
    let style = opts && 'style' in opts ? opts.style : null;
    let margin = opts && 'margin' in opts ? opts.margin : C[105] || CT.C105;
    if (margin == null) dart.nullFailed(I[54], 184, 10, "margin");
    let padding = opts && 'padding' in opts ? opts.padding : null;
    this[text$4] = text;
    this[textAlign$0] = textAlign;
    this[style$0] = style;
    this[margin$1] = margin;
    this[padding$1] = padding;
    content.Paragraph.__proto__.new.call(this);
    ;
  }).prototype = content.Paragraph.prototype;
  dart.addTypeTests(content.Paragraph);
  dart.addTypeCaches(content.Paragraph);
  dart.setMethodSignature(content.Paragraph, () => ({
    __proto__: dart.getMethods(content.Paragraph.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Paragraph, I[55]);
  dart.setFieldSignature(content.Paragraph, () => ({
    __proto__: dart.getFields(content.Paragraph.__proto__),
    text: dart.finalFieldType(dart.nullable(core.String)),
    textAlign: dart.finalFieldType(text$1.TextAlign),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    margin: dart.finalFieldType(geometry.EdgeInsets),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets))
  }));
  var text$5 = dart.privateName(content, "Bullet.text");
  var textAlign$1 = dart.privateName(content, "Bullet.textAlign");
  var style$1 = dart.privateName(content, "Bullet.style");
  var margin$2 = dart.privateName(content, "Bullet.margin");
  var padding$2 = dart.privateName(content, "Bullet.padding");
  var bulletMargin$ = dart.privateName(content, "Bullet.bulletMargin");
  var bulletSize$ = dart.privateName(content, "Bullet.bulletSize");
  var bulletShape$ = dart.privateName(content, "Bullet.bulletShape");
  var bulletColor$ = dart.privateName(content, "Bullet.bulletColor");
  content.Bullet = class Bullet extends widget$.StatelessWidget {
    get text() {
      return this[text$5];
    }
    set text(value) {
      super.text = value;
    }
    get textAlign() {
      return this[textAlign$1];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get style() {
      return this[style$1];
    }
    set style(value) {
      super.style = value;
    }
    get margin() {
      return this[margin$2];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$2];
    }
    set padding(value) {
      super.padding = value;
    }
    get bulletMargin() {
      return this[bulletMargin$];
    }
    set bulletMargin(value) {
      super.bulletMargin = value;
    }
    get bulletSize() {
      return this[bulletSize$];
    }
    set bulletSize(value) {
      super.bulletSize = value;
    }
    get bulletShape() {
      return this[bulletShape$];
    }
    set bulletShape(value) {
      super.bulletShape = value;
    }
    get bulletColor() {
      return this[bulletColor$];
    }
    set bulletColor(value) {
      super.bulletColor = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[54], 249, 24, "context");
      return new container$.Container.new({margin: this.margin, padding: this.padding, child: new flex$.Row.new({crossAxisAlignment: flex$.CrossAxisAlignment.start, children: T$.JSArrayOfWidget().of([new container$.Container.new({width: this.bulletSize, height: this.bulletSize, margin: this.bulletMargin, decoration: new decoration$.BoxDecoration.new({color: this.bulletColor, shape: this.bulletShape})}), new flex$.Expanded.new({child: this.text == null ? new basic.SizedBox.new() : new text$1.Text.new(dart.nullCheck(this.text), {textAlign: this.textAlign, style: theme$.Theme.of(context).bulletStyle.merge(this.style)})})])})});
    }
  };
  (content.Bullet.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[78] || CT.C78;
    if (textAlign == null) dart.nullFailed(I[54], 216, 10, "textAlign");
    let style = opts && 'style' in opts ? opts.style : null;
    let margin = opts && 'margin' in opts ? opts.margin : C[116] || CT.C116;
    if (margin == null) dart.nullFailed(I[54], 218, 10, "margin");
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let bulletSize = opts && 'bulletSize' in opts ? opts.bulletSize : 5.669291338582678;
    if (bulletSize == null) dart.nullFailed(I[54], 220, 10, "bulletSize");
    let bulletMargin = opts && 'bulletMargin' in opts ? opts.bulletMargin : C[117] || CT.C117;
    if (bulletMargin == null) dart.nullFailed(I[54], 221, 10, "bulletMargin");
    let bulletShape = opts && 'bulletShape' in opts ? opts.bulletShape : C[13] || CT.C13;
    if (bulletShape == null) dart.nullFailed(I[54], 226, 10, "bulletShape");
    let bulletColor = opts && 'bulletColor' in opts ? opts.bulletColor : C[10] || CT.C10;
    if (bulletColor == null) dart.nullFailed(I[54], 227, 10, "bulletColor");
    this[text$5] = text;
    this[textAlign$1] = textAlign;
    this[style$1] = style;
    this[margin$2] = margin;
    this[padding$2] = padding;
    this[bulletSize$] = bulletSize;
    this[bulletMargin$] = bulletMargin;
    this[bulletShape$] = bulletShape;
    this[bulletColor$] = bulletColor;
    content.Bullet.__proto__.new.call(this);
    ;
  }).prototype = content.Bullet.prototype;
  dart.addTypeTests(content.Bullet);
  dart.addTypeCaches(content.Bullet);
  dart.setMethodSignature(content.Bullet, () => ({
    __proto__: dart.getMethods(content.Bullet.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Bullet, I[55]);
  dart.setFieldSignature(content.Bullet, () => ({
    __proto__: dart.getFields(content.Bullet.__proto__),
    text: dart.finalFieldType(dart.nullable(core.String)),
    textAlign: dart.finalFieldType(text$1.TextAlign),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    margin: dart.finalFieldType(geometry.EdgeInsets),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    bulletMargin: dart.finalFieldType(geometry.EdgeInsets),
    bulletSize: dart.finalFieldType(core.double),
    bulletShape: dart.finalFieldType(decoration$.BoxShape),
    bulletColor: dart.finalFieldType(color$.PdfColor)
  }));
  var child$3 = dart.privateName(content, "Watermark.child");
  var angle$ = dart.privateName(content, "Watermark.angle");
  var fit$5 = dart.privateName(content, "Watermark.fit");
  content.Watermark = class Watermark extends widget$.StatelessWidget {
    get child() {
      return this[child$3];
    }
    set child(value) {
      super.child = value;
    }
    get angle() {
      return this[angle$];
    }
    set angle(value) {
      super.angle = value;
    }
    get fit() {
      return this[fit$5];
    }
    set fit(value) {
      super.fit = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[54], 305, 24, "context");
      return new basic.SizedBox.expand({child: new basic.FittedBox.new({fit: this.fit, child: new basic.Transform.rotateBox({angle: this.angle, child: this.child})})});
    }
  };
  (content.Watermark.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[54], 279, 19, "child");
    let fit = opts && 'fit' in opts ? opts.fit : C[74] || CT.C74;
    if (fit == null) dart.nullFailed(I[54], 280, 10, "fit");
    let angle = opts && 'angle' in opts ? opts.angle : 0;
    if (angle == null) dart.nullFailed(I[54], 281, 10, "angle");
    this[child$3] = child;
    this[fit$5] = fit;
    this[angle$] = angle;
    content.Watermark.__proto__.new.call(this);
    ;
  }).prototype = content.Watermark.prototype;
  (content.Watermark.text = function(text, opts) {
    let t32;
    if (text == null) dart.nullFailed(I[54], 285, 12, "text");
    let style = opts && 'style' in opts ? opts.style : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[74] || CT.C74;
    if (fit == null) dart.nullFailed(I[54], 287, 10, "fit");
    let angle = opts && 'angle' in opts ? opts.angle : 0.7853981633974483;
    if (angle == null) dart.nullFailed(I[54], 288, 10, "angle");
    this[fit$5] = fit;
    this[angle$] = angle;
    this[child$3] = new text$1.Text.new(text, {style: (t32 = style, t32 == null ? new text_style.TextStyle.new({color: colors.PdfColors.grey200, fontWeight: text_style.FontWeight.bold}) : t32)});
    content.Watermark.__proto__.new.call(this);
    ;
  }).prototype = content.Watermark.prototype;
  dart.addTypeTests(content.Watermark);
  dart.addTypeCaches(content.Watermark);
  dart.setMethodSignature(content.Watermark, () => ({
    __proto__: dart.getMethods(content.Watermark.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Watermark, I[55]);
  dart.setFieldSignature(content.Watermark, () => ({
    __proto__: dart.getFields(content.Watermark.__proto__),
    child: dart.finalFieldType(widget$.Widget),
    angle: dart.finalFieldType(core.double),
    fit: dart.finalFieldType(basic.BoxFit)
  }));
  var leading$ = dart.privateName(content, "Footer.leading");
  var title$0 = dart.privateName(content, "Footer.title");
  var trailing$ = dart.privateName(content, "Footer.trailing");
  var margin$3 = dart.privateName(content, "Footer.margin");
  var padding$3 = dart.privateName(content, "Footer.padding");
  var decoration$2 = dart.privateName(content, "Footer.decoration");
  content.Footer = class Footer extends widget$.StatelessWidget {
    get leading() {
      return this[leading$];
    }
    set leading(value) {
      super.leading = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      super.title = value;
    }
    get trailing() {
      return this[trailing$];
    }
    set trailing(value) {
      super.trailing = value;
    }
    get margin() {
      return this[margin$3];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$3];
    }
    set padding(value) {
      super.padding = value;
    }
    get decoration() {
      return this[decoration$2];
    }
    set decoration(value) {
      super.decoration = value;
    }
    build(context) {
      let t32, t32$, t32$0;
      if (context == null) dart.nullFailed(I[54], 341, 24, "context");
      return new container$.Container.new({margin: this.margin, padding: this.padding, decoration: this.decoration, child: new flex$.Row.new({mainAxisSize: flex$.MainAxisSize.max, mainAxisAlignment: flex$.MainAxisAlignment.spaceBetween, children: T$.JSArrayOfWidget().of([(t32 = this.leading, t32 == null ? new basic.SizedBox.new() : t32), (t32$ = this.title, t32$ == null ? new basic.SizedBox.new() : t32$), (t32$0 = this.trailing, t32$0 == null ? new basic.SizedBox.new() : t32$0)])})});
    }
  };
  (content.Footer.new = function(opts) {
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let trailing = opts && 'trailing' in opts ? opts.trailing : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    this[leading$] = leading;
    this[title$0] = title;
    this[trailing$] = trailing;
    this[margin$3] = margin;
    this[padding$3] = padding;
    this[decoration$2] = decoration;
    content.Footer.__proto__.new.call(this);
    ;
  }).prototype = content.Footer.prototype;
  dart.addTypeTests(content.Footer);
  dart.addTypeCaches(content.Footer);
  dart.setMethodSignature(content.Footer, () => ({
    __proto__: dart.getMethods(content.Footer.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Footer, I[55]);
  dart.setFieldSignature(content.Footer, () => ({
    __proto__: dart.getFields(content.Footer.__proto__),
    leading: dart.finalFieldType(dart.nullable(widget$.Widget)),
    title: dart.finalFieldType(dart.nullable(widget$.Widget)),
    trailing: dart.finalFieldType(dart.nullable(widget$.Widget)),
    margin: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration))
  }));
  clip.ClipRect = class ClipRect extends widget$.SingleChildWidget {
    debugPaint(context) {
      let t32;
      if (context == null) dart.nullFailed(I[56], 26, 27, "context");
      t32 = context.canvas;
      (() => {
        t32.setStrokeColor(colors.PdfColors.deepPurple);
        t32.setLineWidth(1.0);
        t32.drawBox(dart.nullCheck(this.box));
        t32.strokePath();
        return t32;
      })();
    }
    paint(context) {
      let t32;
      if (context == null) dart.nullFailed(I[56], 35, 22, "context");
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t32 = context.canvas;
        (() => {
          t32.saveContext();
          t32.drawBox(dart.nullCheck(this.box));
          t32.clipPath();
          t32.setTransform(mat);
          return t32;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (clip.ClipRect.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    clip.ClipRect.__proto__.new.call(this, {child: child});
    ;
  }).prototype = clip.ClipRect.prototype;
  dart.addTypeTests(clip.ClipRect);
  dart.addTypeCaches(clip.ClipRect);
  dart.setLibraryUri(clip.ClipRect, I[57]);
  var horizontalRadius$ = dart.privateName(clip, "ClipRRect.horizontalRadius");
  var verticalRadius$ = dart.privateName(clip, "ClipRRect.verticalRadius");
  clip.ClipRRect = class ClipRRect extends widget$.SingleChildWidget {
    get horizontalRadius() {
      return this[horizontalRadius$];
    }
    set horizontalRadius(value) {
      super.horizontalRadius = value;
    }
    get verticalRadius() {
      return this[verticalRadius$];
    }
    set verticalRadius(value) {
      super.verticalRadius = value;
    }
    debugPaint(context) {
      let t32;
      if (context == null) dart.nullFailed(I[56], 63, 27, "context");
      t32 = context.canvas;
      (() => {
        t32.setStrokeColor(colors.PdfColors.deepPurple);
        t32.setLineWidth(1.0);
        t32.drawRRect(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height, this.horizontalRadius, this.verticalRadius);
        t32.strokePath();
        return t32;
      })();
    }
    paint(context) {
      let t32;
      if (context == null) dart.nullFailed(I[56], 73, 22, "context");
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t32 = context.canvas;
        (() => {
          t32.saveContext();
          t32.drawRRect(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height, this.horizontalRadius, this.verticalRadius);
          t32.clipPath();
          t32.setTransform(mat);
          return t32;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (clip.ClipRRect.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let horizontalRadius = opts && 'horizontalRadius' in opts ? opts.horizontalRadius : 0;
    if (horizontalRadius == null) dart.nullFailed(I[56], 55, 10, "horizontalRadius");
    let verticalRadius = opts && 'verticalRadius' in opts ? opts.verticalRadius : 0;
    if (verticalRadius == null) dart.nullFailed(I[56], 56, 10, "verticalRadius");
    this[horizontalRadius$] = horizontalRadius;
    this[verticalRadius$] = verticalRadius;
    clip.ClipRRect.__proto__.new.call(this, {child: child});
    ;
  }).prototype = clip.ClipRRect.prototype;
  dart.addTypeTests(clip.ClipRRect);
  dart.addTypeCaches(clip.ClipRRect);
  dart.setLibraryUri(clip.ClipRRect, I[57]);
  dart.setFieldSignature(clip.ClipRRect, () => ({
    __proto__: dart.getFields(clip.ClipRRect.__proto__),
    horizontalRadius: dart.finalFieldType(core.double),
    verticalRadius: dart.finalFieldType(core.double)
  }));
  clip.ClipOval = class ClipOval extends widget$.SingleChildWidget {
    debugPaint(context) {
      let t32;
      if (context == null) dart.nullFailed(I[56], 95, 27, "context");
      let rx = dart.notNull(dart.nullCheck(this.box).width) / 2.0;
      let ry = dart.notNull(dart.nullCheck(this.box).height) / 2.0;
      t32 = context.canvas;
      (() => {
        t32.setStrokeColor(colors.PdfColors.deepPurple);
        t32.setLineWidth(1.0);
        t32.drawEllipse(dart.notNull(dart.nullCheck(this.box).x) + rx, dart.notNull(dart.nullCheck(this.box).y) + ry, rx, ry);
        t32.strokePath();
        return t32;
      })();
    }
    paint(context) {
      let t32;
      if (context == null) dart.nullFailed(I[56], 107, 22, "context");
      super.paint(context);
      let rx = dart.notNull(dart.nullCheck(this.box).width) / 2.0;
      let ry = dart.notNull(dart.nullCheck(this.box).height) / 2.0;
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t32 = context.canvas;
        (() => {
          t32.saveContext();
          t32.drawEllipse(dart.notNull(dart.nullCheck(this.box).x) + rx, dart.notNull(dart.nullCheck(this.box).y) + ry, rx, ry);
          t32.clipPath();
          t32.setTransform(mat);
          return t32;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (clip.ClipOval.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    clip.ClipOval.__proto__.new.call(this, {child: child});
    ;
  }).prototype = clip.ClipOval.prototype;
  dart.addTypeTests(clip.ClipOval);
  dart.addTypeCaches(clip.ClipOval);
  dart.setLibraryUri(clip.ClipOval, I[57]);
  var startAngle$ = dart.privateName(pie_chart, "PieGrid.startAngle");
  var __PieGrid__radius = dart.privateName(pie_chart, "_#PieGrid#_radius");
  var __PieGrid__radius_isSet = dart.privateName(pie_chart, "_#PieGrid#_radius#isSet");
  var _radius = dart.privateName(pie_chart, "_radius");
  chart.ChartGrid = class ChartGrid extends widget$.Widget {
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[59], 138, 23, "context");
      if (constraints == null) dart.nullFailed(I[59], 138, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[59], 139, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
  };
  (chart.ChartGrid.new = function() {
    chart.ChartGrid.__proto__.new.call(this);
    ;
  }).prototype = chart.ChartGrid.prototype;
  dart.addTypeTests(chart.ChartGrid);
  dart.addTypeCaches(chart.ChartGrid);
  dart.setMethodSignature(chart.ChartGrid, () => ({
    __proto__: dart.getMethods(chart.ChartGrid.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(chart.ChartGrid, I[60]);
  pie_chart.PieGrid = class PieGrid extends chart.ChartGrid {
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get [_radius]() {
      let t32;
      return dart.test(this[__PieGrid__radius_isSet]) ? (t32 = this[__PieGrid__radius], t32) : dart.throw(new _internal.LateError.fieldNI("_radius"));
    }
    set [_radius](t32) {
      if (t32 == null) dart.nullFailed(I[58], 16, 15, "null");
      this[__PieGrid__radius_isSet] = true;
      this[__PieGrid__radius] = t32;
    }
    get radius() {
      return this[_radius];
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[58], 22, 23, "context");
      if (constraints == null) dart.nullFailed(I[58], 22, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[58], 23, 13, "parentUsesSize");
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      let datasets = chart.Chart.of(context).datasets;
      let size = constraints.biggest;
      let _gridBox = new rect$.PdfRect.new(0.0, 0.0, size.x, size.y);
      let _total = 0.0;
      for (let dataset of datasets) {
        if (!pie_chart.PieDataSet.is(dataset)) dart.assertFailed("Use only PieDataset with a PieGrid", I[58], 34, 14, "dataset is PieDataSet");
        if (pie_chart.PieDataSet.is(dataset)) {
          _total = _total + dart.notNull(dataset.value);
        }
      }
      let unit = 3.141592653589793 / _total * 2;
      let angle = this.startAngle;
      for (let dataset of datasets) {
        if (pie_chart.PieDataSet.is(dataset)) {
          dataset.angleStart = angle;
          angle = dart.notNull(angle) + dart.notNull(dataset.value) * unit;
          dataset.angleEnd = angle;
        }
      }
      this[_radius] = math.min(core.double, dart.notNull(_gridBox.width) / 2, dart.notNull(_gridBox.height) / 2);
      let reduce = false;
      do {
        reduce = false;
        for (let dataset of datasets) {
          if (pie_chart.PieDataSet.is(dataset)) {
            dataset.layout(context, new geometry.BoxConstraints.tight(_gridBox.size));
            if (!(dataset.box != null)) dart.assertFailed(null, I[58], 59, 18, "dataset.box != null");
            if (dart.notNull(this[_radius]) > 20 && (dart.notNull(dart.nullCheck(dataset.box).width) > dart.notNull(_gridBox.width) || dart.notNull(dart.nullCheck(dataset.box).height) > dart.notNull(_gridBox.height))) {
              this[_radius] = dart.notNull(this[_radius]) - 10;
              reduce = true;
              break;
            }
          }
        }
      } while (reduce);
    }
    toChart(p) {
      if (p == null) dart.nullFailed(I[58], 73, 29, "p");
      return p;
    }
    clip(context, size) {
      if (context == null) dart.nullFailed(I[58], 77, 21, "context");
      if (size == null) dart.nullFailed(I[58], 77, 39, "size");
    }
    paint(context) {
      let t33;
      if (context == null) dart.nullFailed(I[58], 80, 22, "context");
      super.paint(context);
      let datasets = chart.Chart.of(context).datasets;
      t33 = context.canvas;
      (() => {
        t33.saveContext();
        t33.setTransform(vector_math_64.Matrix4.translationValues(dart.notNull(dart.nullCheck(this.box).width) / 2, dart.notNull(dart.nullCheck(this.box).height) / 2, 0.0));
        return t33;
      })();
      for (let dataSet of datasets) {
        if (pie_chart.PieDataSet.is(dataSet)) {
          dataSet.paintBackground(context);
        }
      }
      for (let dataSet of datasets) {
        if (pie_chart.PieDataSet.is(dataSet)) {
          dataSet.paint(context);
        }
      }
      for (let dataSet of datasets) {
        if (pie_chart.PieDataSet.is(dataSet)) {
          dataSet.paintLegend(context);
        }
      }
      context.canvas.restoreContext();
    }
  };
  (pie_chart.PieGrid.new = function(opts) {
    let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0;
    if (startAngle == null) dart.nullFailed(I[58], 11, 17, "startAngle");
    this[__PieGrid__radius] = null;
    this[__PieGrid__radius_isSet] = false;
    this[startAngle$] = startAngle;
    pie_chart.PieGrid.__proto__.new.call(this);
    ;
  }).prototype = pie_chart.PieGrid.prototype;
  dart.addTypeTests(pie_chart.PieGrid);
  dart.addTypeCaches(pie_chart.PieGrid);
  dart.setMethodSignature(pie_chart.PieGrid, () => ({
    __proto__: dart.getMethods(pie_chart.PieGrid.__proto__),
    toChart: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    clip: dart.fnType(dart.void, [widget$.Context, point$.PdfPoint])
  }));
  dart.setGetterSignature(pie_chart.PieGrid, () => ({
    __proto__: dart.getGetters(pie_chart.PieGrid.__proto__),
    [_radius]: core.double,
    radius: core.double
  }));
  dart.setSetterSignature(pie_chart.PieGrid, () => ({
    __proto__: dart.getSetters(pie_chart.PieGrid.__proto__),
    [_radius]: core.double
  }));
  dart.setLibraryUri(pie_chart.PieGrid, I[61]);
  dart.setFieldSignature(pie_chart.PieGrid, () => ({
    __proto__: dart.getFields(pie_chart.PieGrid.__proto__),
    startAngle: dart.finalFieldType(core.double),
    [__PieGrid__radius]: dart.fieldType(dart.nullable(core.double)),
    [__PieGrid__radius_isSet]: dart.fieldType(core.bool)
  }));
  var _name$10 = dart.privateName(pie_chart, "_name");
  pie_chart.PieLegendPosition = class PieLegendPosition extends core.Object {
    toString() {
      return this[_name$10];
    }
  };
  (pie_chart.PieLegendPosition.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[58], 113, 6, "index");
    if (_name == null) dart.nullFailed(I[58], 113, 6, "_name");
    this.index = index;
    this[_name$10] = _name;
    ;
  }).prototype = pie_chart.PieLegendPosition.prototype;
  dart.addTypeTests(pie_chart.PieLegendPosition);
  dart.addTypeCaches(pie_chart.PieLegendPosition);
  dart.setLibraryUri(pie_chart.PieLegendPosition, I[61]);
  dart.setFieldSignature(pie_chart.PieLegendPosition, () => ({
    __proto__: dart.getFields(pie_chart.PieLegendPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$10]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(pie_chart.PieLegendPosition, ['toString']);
  pie_chart.PieLegendPosition.none = C[118] || CT.C118;
  pie_chart.PieLegendPosition.auto = C[119] || CT.C119;
  pie_chart.PieLegendPosition.inside = C[120] || CT.C120;
  pie_chart.PieLegendPosition.outside = C[121] || CT.C121;
  pie_chart.PieLegendPosition.values = C[122] || CT.C122;
  var value$6 = dart.privateName(pie_chart, "PieDataSet.value");
  var drawBorder$ = dart.privateName(pie_chart, "PieDataSet.drawBorder");
  var borderColor$ = dart.privateName(pie_chart, "PieDataSet.borderColor");
  var borderWidth$ = dart.privateName(pie_chart, "PieDataSet.borderWidth");
  var drawSurface$ = dart.privateName(pie_chart, "PieDataSet.drawSurface");
  var surfaceOpacity$ = dart.privateName(pie_chart, "PieDataSet.surfaceOpacity");
  var offset$ = dart.privateName(pie_chart, "PieDataSet.offset");
  var legendStyle$ = dart.privateName(pie_chart, "PieDataSet.legendStyle");
  var legendAlign$ = dart.privateName(pie_chart, "PieDataSet.legendAlign");
  var legendPosition$ = dart.privateName(pie_chart, "PieDataSet.legendPosition");
  var legendOffset$ = dart.privateName(pie_chart, "PieDataSet.legendOffset");
  var legendLineWidth$ = dart.privateName(pie_chart, "PieDataSet.legendLineWidth");
  var legendLineColor$ = dart.privateName(pie_chart, "PieDataSet.legendLineColor");
  var innerRadius$ = dart.privateName(pie_chart, "PieDataSet.innerRadius");
  var __PieDataSet_angleStart = dart.privateName(pie_chart, "_#PieDataSet#angleStart");
  var __PieDataSet_angleStart_isSet = dart.privateName(pie_chart, "_#PieDataSet#angleStart#isSet");
  var __PieDataSet_angleEnd = dart.privateName(pie_chart, "_#PieDataSet#angleEnd");
  var __PieDataSet_angleEnd_isSet = dart.privateName(pie_chart, "_#PieDataSet#angleEnd#isSet");
  var _legendAnchor = dart.privateName(pie_chart, "_legendAnchor");
  var _legendPivot = dart.privateName(pie_chart, "_legendPivot");
  var _legendStart = dart.privateName(pie_chart, "_legendStart");
  var _legendWidget = dart.privateName(pie_chart, "_legendWidget");
  var _isFullCircle = dart.privateName(pie_chart, "_isFullCircle");
  var _paintSliceShape = dart.privateName(pie_chart, "_paintSliceShape");
  var _paintDonnutShape = dart.privateName(pie_chart, "_paintDonnutShape");
  var _paintShape = dart.privateName(pie_chart, "_paintShape");
  var legend$ = dart.privateName(chart, "Dataset.legend");
  var color$7 = dart.privateName(chart, "Dataset.color");
  chart.Dataset = class Dataset extends widget$.Widget {
    get legend() {
      return this[legend$];
    }
    set legend(value) {
      super.legend = value;
    }
    get color() {
      return this[color$7];
    }
    set color(value) {
      super.color = value;
    }
    paintBackground(context) {
      if (context == null) dart.nullFailed(I[59], 161, 32, "context");
    }
    legendShape() {
      return new container$.Container.new({decoration: new decoration$.BoxDecoration.new({color: this.color, border: box_border.Border.all({color: colors.PdfColors.black, width: 0.5})})});
    }
  };
  (chart.Dataset.new = function(opts) {
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[legend$] = legend;
    this[color$7] = color;
    chart.Dataset.__proto__.new.call(this);
    ;
  }).prototype = chart.Dataset.prototype;
  dart.addTypeTests(chart.Dataset);
  dart.addTypeCaches(chart.Dataset);
  dart.setMethodSignature(chart.Dataset, () => ({
    __proto__: dart.getMethods(chart.Dataset.__proto__),
    paintBackground: dart.fnType(dart.void, [widget$.Context]),
    legendShape: dart.fnType(widget$.Widget, [])
  }));
  dart.setLibraryUri(chart.Dataset, I[60]);
  dart.setFieldSignature(chart.Dataset, () => ({
    __proto__: dart.getFields(chart.Dataset.__proto__),
    legend: dart.finalFieldType(dart.nullable(core.String)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  pie_chart.PieDataSet = class PieDataSet extends chart.Dataset {
    get value() {
      return this[value$6];
    }
    set value(value) {
      super.value = value;
    }
    get drawBorder() {
      return this[drawBorder$];
    }
    set drawBorder(value) {
      super.drawBorder = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get drawSurface() {
      return this[drawSurface$];
    }
    set drawSurface(value) {
      super.drawSurface = value;
    }
    get surfaceOpacity() {
      return this[surfaceOpacity$];
    }
    set surfaceOpacity(value) {
      super.surfaceOpacity = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get legendStyle() {
      return this[legendStyle$];
    }
    set legendStyle(value) {
      super.legendStyle = value;
    }
    get legendAlign() {
      return this[legendAlign$];
    }
    set legendAlign(value) {
      super.legendAlign = value;
    }
    get legendPosition() {
      return this[legendPosition$];
    }
    set legendPosition(value) {
      super.legendPosition = value;
    }
    get legendOffset() {
      return this[legendOffset$];
    }
    set legendOffset(value) {
      super.legendOffset = value;
    }
    get legendLineWidth() {
      return this[legendLineWidth$];
    }
    set legendLineWidth(value) {
      super.legendLineWidth = value;
    }
    get legendLineColor() {
      return this[legendLineColor$];
    }
    set legendLineColor(value) {
      super.legendLineColor = value;
    }
    get innerRadius() {
      return this[innerRadius$];
    }
    set innerRadius(value) {
      super.innerRadius = value;
    }
    get angleStart() {
      let t33;
      return dart.test(this[__PieDataSet_angleStart_isSet]) ? (t33 = this[__PieDataSet_angleStart], t33) : dart.throw(new _internal.LateError.fieldNI("angleStart"));
    }
    set angleStart(t33) {
      if (t33 == null) dart.nullFailed(I[58], 148, 15, "null");
      this[__PieDataSet_angleStart_isSet] = true;
      this[__PieDataSet_angleStart] = t33;
    }
    get angleEnd() {
      let t34;
      return dart.test(this[__PieDataSet_angleEnd_isSet]) ? (t34 = this[__PieDataSet_angleEnd], t34) : dart.throw(new _internal.LateError.fieldNI("angleEnd"));
    }
    set angleEnd(t34) {
      if (t34 == null) dart.nullFailed(I[58], 150, 15, "null");
      this[__PieDataSet_angleEnd_isSet] = true;
      this[__PieDataSet_angleEnd] = t34;
    }
    get [_isFullCircle]() {
      return dart.notNull(this.angleEnd) - dart.notNull(this.angleStart) >= 3.141592653589793 * 2;
    }
    layout(context, constraints, opts) {
      let t35;
      if (context == null) dart.nullFailed(I[58], 184, 23, "context");
      if (constraints == null) dart.nullFailed(I[58], 184, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[58], 185, 13, "parentUsesSize");
      let _offset = dart.test(this[_isFullCircle]) ? 0 : this.offset;
      let grid = pie_chart.PieGrid.as(chart.Chart.of(context).grid);
      let len = dart.notNull(grid.radius) + dart.notNull(_offset);
      let x = -len;
      let y = -len;
      let w = len * 2;
      let h = len * 2;
      let lp = this.legendPosition == pie_chart.PieLegendPosition.auto ? dart.notNull(this.angleEnd) - dart.notNull(this.angleStart) > 3.141592653589793 / 6 ? pie_chart.PieLegendPosition.inside : pie_chart.PieLegendPosition.outside : this.legendPosition;
      let bisect = dart.test(this[_isFullCircle]) ? 1 / 4 * 3.141592653589793 : (dart.notNull(this.angleStart) + dart.notNull(this.angleEnd)) / 2;
      let _legendAlign = (t35 = this.legendAlign, t35 == null ? lp == pie_chart.PieLegendPosition.inside ? text$1.TextAlign.center : bisect > 3.141592653589793 ? text$1.TextAlign.right : text$1.TextAlign.left : t35);
      this[_legendWidget] == null ? this[_legendWidget] = this.legend == null ? null : new text$1.RichText.new({text: new text$1.TextSpan.new({children: T$.JSArrayOfInlineSpan().of([new text$1.TextSpan.new({text: dart.nullCheck(this.legend), style: this.legendStyle})]), style: new text_style.TextStyle.new({color: lp == pie_chart.PieLegendPosition.inside ? dart.test(dart.nullCheck(this.color).isLight) ? colors.PdfColors.white : colors.PdfColors.black : null})}), textAlign: _legendAlign}) : null;
      if (this[_legendWidget] != null) {
        dart.nullCheck(this[_legendWidget]).layout(context, new geometry.BoxConstraints.new({maxWidth: grid.radius, maxHeight: grid.radius}));
        if (!(dart.nullCheck(this[_legendWidget]).box != null)) dart.assertFailed(null, I[58], 227, 14, "_legendWidget!.box != null");
        let ls = dart.nullCheck(dart.nullCheck(this[_legendWidget]).box).size;
        switch (lp) {
          case C[121] || CT.C121:
          {
            let o = dart.notNull(grid.radius) + dart.notNull(this.legendOffset);
            let cx = math.sin(bisect) * (dart.notNull(_offset) + o);
            let cy = math.cos(bisect) * (dart.notNull(_offset) + o);
            this[_legendStart] = new point$.PdfPoint.new(math.sin(bisect) * (dart.notNull(_offset) + dart.notNull(grid.radius) + dart.notNull(this.legendOffset) * 0.1), math.cos(bisect) * (dart.notNull(_offset) + dart.notNull(grid.radius) + dart.notNull(this.legendOffset) * 0.1));
            this[_legendPivot] = new point$.PdfPoint.new(cx, cy);
            if (bisect > 3.141592653589793) {
              this[_legendAnchor] = new point$.PdfPoint.new(cx - dart.notNull(this.legendOffset) / 2 * 0.8, cy);
              dart.nullCheck(this[_legendWidget]).box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(cx - dart.notNull(this.legendOffset) / 2 - dart.notNull(ls.x), cy - dart.notNull(ls.y) / 2), ls);
              w = math.max(core.double, w, (-cx + dart.notNull(this.legendOffset) / 2 + dart.notNull(ls.x)) * 2);
              h = math.max(core.double, h, cy[$abs]() * 2 + dart.notNull(ls.y));
              x = -w / 2;
              y = -h / 2;
            } else {
              this[_legendAnchor] = new point$.PdfPoint.new(cx + dart.notNull(this.legendOffset) / 2 * 0.8, cy);
              dart.nullCheck(this[_legendWidget]).box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(cx + dart.notNull(this.legendOffset) / 2, cy - dart.notNull(ls.y) / 2), ls);
              w = math.max(core.double, w, (cx + dart.notNull(this.legendOffset) / 2 + dart.notNull(ls.x)) * 2);
              h = math.max(core.double, h, cy[$abs]() * 2 + dart.notNull(ls.y));
              x = -w / 2;
              y = -h / 2;
            }
            break;
          }
          case C[120] || CT.C120:
          {
            let o = null;
            let cx = null;
            let cy = null;
            if (this.innerRadius === 0) {
              o = dart.test(this[_isFullCircle]) ? 0.0 : dart.notNull(grid.radius) * 2 / 3;
              cx = math.sin(bisect) * (dart.notNull(_offset) + dart.notNull(o));
              cy = math.cos(bisect) * (dart.notNull(_offset) + dart.notNull(o));
            } else {
              o = (dart.notNull(grid.radius) + dart.notNull(this.innerRadius)) / 2;
              if (dart.test(this[_isFullCircle])) {
                cx = 0.0;
                cy = o;
              } else {
                cx = math.sin(bisect) * (dart.notNull(_offset) + dart.notNull(o));
                cy = math.cos(bisect) * (dart.notNull(_offset) + dart.notNull(o));
              }
            }
            dart.nullCheck(this[_legendWidget]).box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(dart.notNull(cx) - dart.notNull(ls.x) / 2, dart.notNull(cy) - dart.notNull(ls.y) / 2), ls);
            break;
          }
          default:
          {
            break;
          }
        }
      }
      this.box = new rect$.PdfRect.new(x, y, w, h);
    }
    [_paintSliceShape](context) {
      let t35;
      if (context == null) dart.nullFailed(I[58], 310, 33, "context");
      let grid = pie_chart.PieGrid.as(chart.Chart.of(context).grid);
      let bisect = (dart.notNull(this.angleStart) + dart.notNull(this.angleEnd)) / 2;
      let cx = math.sin(bisect) * dart.notNull(this.offset);
      let cy = math.cos(bisect) * dart.notNull(this.offset);
      let sx = cx + math.sin(this.angleStart) * dart.notNull(grid.radius);
      let sy = cy + math.cos(this.angleStart) * dart.notNull(grid.radius);
      let ex = cx + math.sin(this.angleEnd) * dart.notNull(grid.radius);
      let ey = cy + math.cos(this.angleEnd) * dart.notNull(grid.radius);
      if (dart.test(this[_isFullCircle])) {
        context.canvas.drawEllipse(0.0, 0.0, grid.radius, grid.radius);
      } else {
        t35 = context.canvas;
        (() => {
          t35.moveTo(cx, cy);
          t35.lineTo(sx, sy);
          t35.bezierArc(sx, sy, grid.radius, grid.radius, ex, ey, {large: dart.notNull(this.angleEnd) - dart.notNull(this.angleStart) > 3.141592653589793});
          return t35;
        })();
      }
    }
    [_paintDonnutShape](context) {
      let t35;
      if (context == null) dart.nullFailed(I[58], 334, 34, "context");
      let grid = pie_chart.PieGrid.as(chart.Chart.of(context).grid);
      let bisect = (dart.notNull(this.angleStart) + dart.notNull(this.angleEnd)) / 2;
      let cx = math.sin(bisect) * dart.notNull(this.offset);
      let cy = math.cos(bisect) * dart.notNull(this.offset);
      let stx = cx + math.sin(this.angleStart) * dart.notNull(grid.radius);
      let sty = cy + math.cos(this.angleStart) * dart.notNull(grid.radius);
      let etx = cx + math.sin(this.angleEnd) * dart.notNull(grid.radius);
      let ety = cy + math.cos(this.angleEnd) * dart.notNull(grid.radius);
      let sbx = cx + math.sin(this.angleStart) * dart.notNull(this.innerRadius);
      let sby = cy + math.cos(this.angleStart) * dart.notNull(this.innerRadius);
      let ebx = cx + math.sin(this.angleEnd) * dart.notNull(this.innerRadius);
      let eby = cy + math.cos(this.angleEnd) * dart.notNull(this.innerRadius);
      if (dart.test(this[_isFullCircle])) {
        context.canvas.drawEllipse(0.0, 0.0, grid.radius, grid.radius);
        context.canvas.drawEllipse(0.0, 0.0, this.innerRadius, this.innerRadius, {clockwise: false});
      } else {
        t35 = context.canvas;
        (() => {
          t35.moveTo(stx, sty);
          t35.bezierArc(stx, sty, grid.radius, grid.radius, etx, ety, {large: dart.notNull(this.angleEnd) - dart.notNull(this.angleStart) > 3.141592653589793});
          t35.lineTo(ebx, eby);
          t35.bezierArc(ebx, eby, this.innerRadius, this.innerRadius, sbx, sby, {large: dart.notNull(this.angleEnd) - dart.notNull(this.angleStart) > 3.141592653589793, sweep: true});
          t35.lineTo(stx, sty);
          return t35;
        })();
      }
    }
    [_paintShape](context) {
      if (context == null) dart.nullFailed(I[58], 367, 28, "context");
      if (this.innerRadius === 0) {
        this[_paintSliceShape](context);
      } else {
        this[_paintDonnutShape](context);
      }
    }
    paintBackground(context) {
      let t35, t35$;
      if (context == null) dart.nullFailed(I[58], 376, 32, "context");
      super.paint(context);
      if (dart.test(this.drawSurface)) {
        this[_paintShape](context);
        if (this.surfaceOpacity !== 1) {
          t35 = context.canvas;
          (() => {
            t35.saveContext();
            t35.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.surfaceOpacity}));
            return t35;
          })();
        }
        t35$ = context.canvas;
        (() => {
          t35$.setFillColor(this.color);
          t35$.fillPath();
          return t35$;
        })();
        if (this.surfaceOpacity !== 1) {
          context.canvas.restoreContext();
        }
      }
    }
    paint(context) {
      let t36, t35;
      if (context == null) dart.nullFailed(I[58], 400, 22, "context");
      super.paint(context);
      if (dart.test(this.drawBorder)) {
        this[_paintShape](context);
        t35 = context.canvas;
        (() => {
          t35.setLineWidth(this.borderWidth);
          t35.setLineJoin(graphics.PdfLineJoin.round);
          t35.setStrokeColor((t36 = this.borderColor, t36 == null ? this.color : t36));
          t35.strokePath({close: true});
          return t35;
        })();
      }
    }
    paintLegend(context) {
      let t35;
      if (context == null) dart.nullFailed(I[58], 414, 28, "context");
      if (this.legendPosition != pie_chart.PieLegendPosition.none && this[_legendWidget] != null) {
        if (this[_legendAnchor] != null && this[_legendPivot] != null && this[_legendStart] != null) {
          t35 = context.canvas;
          (() => {
            t35.saveContext();
            t35.moveTo(dart.nullCheck(this[_legendStart]).x, dart.nullCheck(this[_legendStart]).y);
            t35.lineTo(dart.nullCheck(this[_legendPivot]).x, dart.nullCheck(this[_legendPivot]).y);
            t35.lineTo(dart.nullCheck(this[_legendAnchor]).x, dart.nullCheck(this[_legendAnchor]).y);
            t35.setLineWidth(this.legendLineWidth);
            t35.setLineCap(graphics.PdfLineCap.round);
            t35.setLineJoin(graphics.PdfLineJoin.round);
            t35.setStrokeColor(this.legendLineColor);
            t35.strokePath();
            t35.restoreContext();
            return t35;
          })();
        }
        dart.nullCheck(this[_legendWidget]).paint(context);
      }
    }
    debugPaint(context) {
      let t35;
      if (context == null) dart.nullFailed(I[58], 437, 27, "context");
      super.debugPaint(context);
      let grid = pie_chart.PieGrid.as(chart.Chart.of(context).grid);
      let bisect = (dart.notNull(this.angleStart) + dart.notNull(this.angleEnd)) / 2;
      let cx = math.sin(bisect) * (dart.notNull(this.offset) + dart.notNull(grid.radius) + dart.notNull(this.legendOffset));
      let cy = math.cos(bisect) * (dart.notNull(this.offset) + dart.notNull(grid.radius) + dart.notNull(this.legendOffset));
      if (this[_legendWidget] != null) {
        t35 = context.canvas;
        (() => {
          t35.saveContext();
          t35.moveTo(0.0, 0.0);
          t35.lineTo(cx, cy);
          t35.setLineWidth(0.5);
          t35.setLineDashPattern(T$.JSArrayOfnum().of([3, 1]));
          t35.setStrokeColor(colors.PdfColors.blue);
          t35.strokePath();
          t35.restoreContext();
          return t35;
        })();
      }
    }
  };
  (pie_chart.PieDataSet.new = function(opts) {
    let t33, t33$, t33$0;
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[58], 117, 19, "value");
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let color = opts && 'color' in opts ? opts.color : null;
    if (color == null) dart.nullFailed(I[58], 119, 23, "color");
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[95] || CT.C95;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1.5;
    if (borderWidth == null) dart.nullFailed(I[58], 121, 10, "borderWidth");
    let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : null;
    let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : true;
    if (drawSurface == null) dart.nullFailed(I[58], 123, 10, "drawSurface");
    let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 1;
    if (surfaceOpacity == null) dart.nullFailed(I[58], 124, 10, "surfaceOpacity");
    let offset = opts && 'offset' in opts ? opts.offset : 0;
    if (offset == null) dart.nullFailed(I[58], 125, 10, "offset");
    let legendStyle = opts && 'legendStyle' in opts ? opts.legendStyle : null;
    let legendAlign = opts && 'legendAlign' in opts ? opts.legendAlign : null;
    let legendPosition = opts && 'legendPosition' in opts ? opts.legendPosition : C[119] || CT.C119;
    if (legendPosition == null) dart.nullFailed(I[58], 128, 10, "legendPosition");
    let legendLineWidth = opts && 'legendLineWidth' in opts ? opts.legendLineWidth : 1;
    if (legendLineWidth == null) dart.nullFailed(I[58], 129, 10, "legendLineWidth");
    let legendLineColor = opts && 'legendLineColor' in opts ? opts.legendLineColor : null;
    let legendWidget = opts && 'legendWidget' in opts ? opts.legendWidget : null;
    let legendOffset = opts && 'legendOffset' in opts ? opts.legendOffset : 20;
    if (legendOffset == null) dart.nullFailed(I[58], 132, 10, "legendOffset");
    let innerRadius = opts && 'innerRadius' in opts ? opts.innerRadius : 0;
    if (innerRadius == null) dart.nullFailed(I[58], 133, 10, "innerRadius");
    this[__PieDataSet_angleStart] = null;
    this[__PieDataSet_angleStart_isSet] = false;
    this[__PieDataSet_angleEnd] = null;
    this[__PieDataSet_angleEnd_isSet] = false;
    this[_legendAnchor] = null;
    this[_legendPivot] = null;
    this[_legendStart] = null;
    this[value$6] = value;
    this[borderColor$] = borderColor;
    this[borderWidth$] = borderWidth;
    this[drawSurface$] = drawSurface;
    this[surfaceOpacity$] = surfaceOpacity;
    this[offset$] = offset;
    this[legendStyle$] = legendStyle;
    this[legendAlign$] = legendAlign;
    this[legendPosition$] = legendPosition;
    this[legendLineWidth$] = legendLineWidth;
    this[legendOffset$] = legendOffset;
    this[innerRadius$] = innerRadius;
    if (!(dart.notNull(innerRadius) >= 0)) dart.assertFailed(null, I[58], 134, 16, "innerRadius >= 0");
    if (!(dart.notNull(offset) >= 0)) dart.assertFailed(null, I[58], 135, 16, "offset >= 0");
    this[drawBorder$] = (t33 = drawBorder, t33 == null ? borderColor != null && !dart.equals(color, borderColor) : t33);
    if (!(dart.test((t33$ = drawBorder, t33$ == null ? borderColor != null && !dart.equals(color, borderColor) : t33$)) || dart.test(drawSurface))) dart.assertFailed(null, I[58], 137, 16, "(drawBorder ?? borderColor != null && color != borderColor) ||\n            drawSurface");
    this[_legendWidget] = legendWidget;
    this[legendLineColor$] = (t33$0 = legendLineColor, t33$0 == null ? color : t33$0);
    pie_chart.PieDataSet.__proto__.new.call(this, {legend: legend, color: color});
    ;
  }).prototype = pie_chart.PieDataSet.prototype;
  dart.addTypeTests(pie_chart.PieDataSet);
  dart.addTypeCaches(pie_chart.PieDataSet);
  dart.setMethodSignature(pie_chart.PieDataSet, () => ({
    __proto__: dart.getMethods(pie_chart.PieDataSet.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    [_paintSliceShape]: dart.fnType(dart.void, [widget$.Context]),
    [_paintDonnutShape]: dart.fnType(dart.void, [widget$.Context]),
    [_paintShape]: dart.fnType(dart.void, [widget$.Context]),
    paintLegend: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setGetterSignature(pie_chart.PieDataSet, () => ({
    __proto__: dart.getGetters(pie_chart.PieDataSet.__proto__),
    angleStart: core.double,
    angleEnd: core.double,
    [_isFullCircle]: core.bool
  }));
  dart.setSetterSignature(pie_chart.PieDataSet, () => ({
    __proto__: dart.getSetters(pie_chart.PieDataSet.__proto__),
    angleStart: core.double,
    angleEnd: core.double
  }));
  dart.setLibraryUri(pie_chart.PieDataSet, I[61]);
  dart.setFieldSignature(pie_chart.PieDataSet, () => ({
    __proto__: dart.getFields(pie_chart.PieDataSet.__proto__),
    value: dart.finalFieldType(core.num),
    [__PieDataSet_angleStart]: dart.fieldType(dart.nullable(core.double)),
    [__PieDataSet_angleStart_isSet]: dart.fieldType(core.bool),
    [__PieDataSet_angleEnd]: dart.fieldType(dart.nullable(core.double)),
    [__PieDataSet_angleEnd_isSet]: dart.fieldType(core.bool),
    drawBorder: dart.finalFieldType(core.bool),
    borderColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    borderWidth: dart.finalFieldType(core.double),
    drawSurface: dart.finalFieldType(core.bool),
    surfaceOpacity: dart.finalFieldType(core.double),
    offset: dart.finalFieldType(core.double),
    legendStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    legendAlign: dart.finalFieldType(dart.nullable(text$1.TextAlign)),
    legendPosition: dart.finalFieldType(pie_chart.PieLegendPosition),
    [_legendWidget]: dart.fieldType(dart.nullable(widget$.Widget)),
    legendOffset: dart.finalFieldType(core.double),
    legendLineWidth: dart.finalFieldType(core.double),
    legendLineColor: dart.finalFieldType(color$.PdfColor),
    innerRadius: dart.finalFieldType(core.double),
    [_legendAnchor]: dart.fieldType(dart.nullable(point$.PdfPoint)),
    [_legendPivot]: dart.fieldType(dart.nullable(point$.PdfPoint)),
    [_legendStart]: dart.fieldType(dart.nullable(point$.PdfPoint))
  }));
  var _name$11 = dart.privateName(wrap$, "_name");
  wrap$.WrapAlignment = class WrapAlignment extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (wrap$.WrapAlignment.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[62], 28, 6, "index");
    if (_name == null) dart.nullFailed(I[62], 28, 6, "_name");
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = wrap$.WrapAlignment.prototype;
  dart.addTypeTests(wrap$.WrapAlignment);
  dart.addTypeCaches(wrap$.WrapAlignment);
  dart.setLibraryUri(wrap$.WrapAlignment, I[63]);
  dart.setFieldSignature(wrap$.WrapAlignment, () => ({
    __proto__: dart.getFields(wrap$.WrapAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(wrap$.WrapAlignment, ['toString']);
  wrap$.WrapAlignment.start = C[123] || CT.C123;
  wrap$.WrapAlignment.end = C[124] || CT.C124;
  wrap$.WrapAlignment.center = C[125] || CT.C125;
  wrap$.WrapAlignment.spaceBetween = C[126] || CT.C126;
  wrap$.WrapAlignment.spaceAround = C[127] || CT.C127;
  wrap$.WrapAlignment.spaceEvenly = C[128] || CT.C128;
  wrap$.WrapAlignment.values = C[129] || CT.C129;
  wrap$.WrapCrossAlignment = class WrapCrossAlignment extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (wrap$.WrapCrossAlignment.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[62], 38, 6, "index");
    if (_name == null) dart.nullFailed(I[62], 38, 6, "_name");
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = wrap$.WrapCrossAlignment.prototype;
  dart.addTypeTests(wrap$.WrapCrossAlignment);
  dart.addTypeCaches(wrap$.WrapCrossAlignment);
  dart.setLibraryUri(wrap$.WrapCrossAlignment, I[63]);
  dart.setFieldSignature(wrap$.WrapCrossAlignment, () => ({
    __proto__: dart.getFields(wrap$.WrapCrossAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(wrap$.WrapCrossAlignment, ['toString']);
  wrap$.WrapCrossAlignment.start = C[130] || CT.C130;
  wrap$.WrapCrossAlignment.end = C[131] || CT.C131;
  wrap$.WrapCrossAlignment.center = C[132] || CT.C132;
  wrap$.WrapCrossAlignment.values = C[133] || CT.C133;
  wrap$._RunMetrics = class _RunMetrics extends core.Object {};
  (wrap$._RunMetrics.new = function(mainAxisExtent, crossAxisExtent, childCount) {
    if (mainAxisExtent == null) dart.nullFailed(I[62], 41, 20, "mainAxisExtent");
    if (crossAxisExtent == null) dart.nullFailed(I[62], 41, 41, "crossAxisExtent");
    if (childCount == null) dart.nullFailed(I[62], 41, 63, "childCount");
    this.mainAxisExtent = mainAxisExtent;
    this.crossAxisExtent = crossAxisExtent;
    this.childCount = childCount;
    ;
  }).prototype = wrap$._RunMetrics.prototype;
  dart.addTypeTests(wrap$._RunMetrics);
  dart.addTypeCaches(wrap$._RunMetrics);
  dart.setLibraryUri(wrap$._RunMetrics, I[63]);
  dart.setFieldSignature(wrap$._RunMetrics, () => ({
    __proto__: dart.getFields(wrap$._RunMetrics.__proto__),
    mainAxisExtent: dart.finalFieldType(core.double),
    crossAxisExtent: dart.finalFieldType(core.double),
    childCount: dart.finalFieldType(core.int)
  }));
  wrap$._WrapContext = class _WrapContext extends multi_page.WidgetContext {
    apply(other) {
      wrap$._WrapContext.as(other);
      if (other == null) dart.nullFailed(I[62], 53, 27, "other");
      this.firstChild = other.firstChild;
      this.lastChild = other.lastChild;
    }
    clone() {
      let t35;
      t35 = new wrap$._WrapContext.new();
      return (() => {
        t35.firstChild = this.firstChild;
        t35.lastChild = this.lastChild;
        return t35;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " first:" + dart.str(this.firstChild) + " last:" + dart.str(this.lastChild);
    }
  };
  (wrap$._WrapContext.new = function() {
    this.firstChild = 0;
    this.lastChild = 0;
    ;
  }).prototype = wrap$._WrapContext.prototype;
  dart.addTypeTests(wrap$._WrapContext);
  dart.addTypeCaches(wrap$._WrapContext);
  dart.setMethodSignature(wrap$._WrapContext, () => ({
    __proto__: dart.getMethods(wrap$._WrapContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(wrap$._WrapContext, I[63]);
  dart.setFieldSignature(wrap$._WrapContext, () => ({
    __proto__: dart.getFields(wrap$._WrapContext.__proto__),
    firstChild: dart.fieldType(core.int),
    lastChild: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(wrap$._WrapContext, ['toString']);
  var direction$0 = dart.privateName(wrap$, "Wrap.direction");
  var alignment$2 = dart.privateName(wrap$, "Wrap.alignment");
  var spacing$ = dart.privateName(wrap$, "Wrap.spacing");
  var runAlignment$ = dart.privateName(wrap$, "Wrap.runAlignment");
  var runSpacing$ = dart.privateName(wrap$, "Wrap.runSpacing");
  var crossAxisAlignment$ = dart.privateName(wrap$, "Wrap.crossAxisAlignment");
  var verticalDirection$ = dart.privateName(wrap$, "Wrap.verticalDirection");
  var _context$1 = dart.privateName(wrap$, "_context");
  var _getMainAxisExtent = dart.privateName(wrap$, "_getMainAxisExtent");
  var _getCrossAxisExtent = dart.privateName(wrap$, "_getCrossAxisExtent");
  var _getOffset = dart.privateName(wrap$, "_getOffset");
  var _getChildCrossAxisOffset = dart.privateName(wrap$, "_getChildCrossAxisOffset");
  const MultiChildWidget_SpanningWidget$36$ = class MultiChildWidget_SpanningWidget extends widget$.MultiChildWidget {};
  (MultiChildWidget_SpanningWidget$36$.new = function(opts) {
    MultiChildWidget_SpanningWidget$36$.__proto__.new.call(this, opts);
  }).prototype = MultiChildWidget_SpanningWidget$36$.prototype;
  dart.applyMixin(MultiChildWidget_SpanningWidget$36$, multi_page.SpanningWidget);
  wrap$.Wrap = class Wrap extends MultiChildWidget_SpanningWidget$36$ {
    get direction() {
      return this[direction$0];
    }
    set direction(value) {
      super.direction = value;
    }
    get alignment() {
      return this[alignment$2];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get spacing() {
      return this[spacing$];
    }
    set spacing(value) {
      super.spacing = value;
    }
    get runAlignment() {
      return this[runAlignment$];
    }
    set runAlignment(value) {
      super.runAlignment = value;
    }
    get runSpacing() {
      return this[runSpacing$];
    }
    set runSpacing(value) {
      super.runSpacing = value;
    }
    get crossAxisAlignment() {
      return this[crossAxisAlignment$];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get verticalDirection() {
      return this[verticalDirection$];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    get textDirection() {
      return false;
    }
    get canSpan() {
      return true;
    }
    get hasMoreWidgets() {
      return dart.notNull(this[_context$1].lastChild) < dart.notNull(this.children[$length]);
    }
    [_getMainAxisExtent](child) {
      if (child == null) dart.nullFailed(I[62], 117, 37, "child");
      switch (this.direction) {
        case C[83] || CT.C83:
        {
          return dart.nullCheck(child.box).width;
        }
        case C[80] || CT.C80:
        {
          return dart.nullCheck(child.box).height;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_getCrossAxisExtent](child) {
      if (child == null) dart.nullFailed(I[62], 126, 38, "child");
      switch (this.direction) {
        case C[83] || CT.C83:
        {
          return dart.nullCheck(child.box).height;
        }
        case C[80] || CT.C80:
        {
          return dart.nullCheck(child.box).width;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_getOffset](mainAxisOffset, crossAxisOffset) {
      if (mainAxisOffset == null) dart.nullFailed(I[62], 135, 30, "mainAxisOffset");
      if (crossAxisOffset == null) dart.nullFailed(I[62], 135, 53, "crossAxisOffset");
      switch (this.direction) {
        case C[83] || CT.C83:
        {
          return new point$.PdfPoint.new(mainAxisOffset, crossAxisOffset);
        }
        case C[80] || CT.C80:
        {
          return new point$.PdfPoint.new(crossAxisOffset, mainAxisOffset);
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_getChildCrossAxisOffset](flipCrossAxis, runCrossAxisExtent, childCrossAxisExtent) {
      if (flipCrossAxis == null) dart.nullFailed(I[62], 144, 40, "flipCrossAxis");
      if (runCrossAxisExtent == null) dart.nullFailed(I[62], 144, 62, "runCrossAxisExtent");
      if (childCrossAxisExtent == null) dart.nullFailed(I[62], 145, 14, "childCrossAxisExtent");
      let freeSpace = dart.notNull(runCrossAxisExtent) - dart.notNull(childCrossAxisExtent);
      switch (this.crossAxisAlignment) {
        case C[130] || CT.C130:
        {
          return dart.test(flipCrossAxis) ? freeSpace : 0.0;
        }
        case C[131] || CT.C131:
        {
          return dart.test(flipCrossAxis) ? 0.0 : freeSpace;
        }
        case C[132] || CT.C132:
        {
          return freeSpace / 2.0;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[62], 158, 23, "context");
      if (constraints == null) dart.nullFailed(I[62], 158, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[62], 159, 13, "parentUsesSize");
      if (dart.test(this.children[$isEmpty]) || dart.notNull(this[_context$1].firstChild) >= dart.notNull(this.children[$length])) {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
        return;
      }
      let childConstraints = null;
      let mainAxisLimit = 0.0;
      let flipMainAxis = false;
      let flipCrossAxis = false;
      switch (this.direction) {
        case C[83] || CT.C83:
        {
          childConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth});
          mainAxisLimit = constraints.maxWidth;
          if (this.verticalDirection == flex$.VerticalDirection.down) {
            flipCrossAxis = true;
          }
          break;
        }
        case C[80] || CT.C80:
        {
          childConstraints = new geometry.BoxConstraints.new({maxHeight: constraints.maxHeight});
          mainAxisLimit = constraints.maxHeight;
          if (this.verticalDirection == flex$.VerticalDirection.down) {
            flipMainAxis = true;
          }
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let runMetrics = T$.JSArrayOf_RunMetrics().of([]);
      let childRunMetrics = new (T$.LinkedMapOfWidget$int()).new();
      let mainAxisExtent = 0.0;
      let crossAxisExtent = 0.0;
      let runMainAxisExtent = 0.0;
      let runCrossAxisExtent = 0.0;
      let childCount = 0;
      for (let child of this.children[$sublist](this[_context$1].firstChild)) {
        child.layout(context, childConstraints, {parentUsesSize: true});
        let childMainAxisExtent = dart.nullCheck(this[_getMainAxisExtent](child));
        let childCrossAxisExtent = dart.nullCheck(this[_getCrossAxisExtent](child));
        if (childCount > 0 && runMainAxisExtent + dart.notNull(this.spacing) + childMainAxisExtent > dart.notNull(mainAxisLimit)) {
          mainAxisExtent = math.max(core.double, mainAxisExtent, runMainAxisExtent);
          crossAxisExtent = crossAxisExtent + runCrossAxisExtent;
          if (dart.test(runMetrics[$isNotEmpty])) {
            crossAxisExtent = crossAxisExtent + dart.notNull(this.runSpacing);
          }
          runMetrics[$add](new wrap$._RunMetrics.new(runMainAxisExtent, runCrossAxisExtent, childCount));
          runMainAxisExtent = 0.0;
          runCrossAxisExtent = 0.0;
          childCount = 0;
        }
        runMainAxisExtent = runMainAxisExtent + childMainAxisExtent;
        if (childCount > 0) {
          runMainAxisExtent = runMainAxisExtent + dart.notNull(this.spacing);
        }
        runCrossAxisExtent = math.max(core.double, runCrossAxisExtent, childCrossAxisExtent);
        childCount = childCount + 1;
        childRunMetrics[$_set](child, runMetrics[$length]);
      }
      if (childCount > 0) {
        mainAxisExtent = math.max(core.double, mainAxisExtent, runMainAxisExtent);
        crossAxisExtent = crossAxisExtent + runCrossAxisExtent;
        if (dart.test(runMetrics[$isNotEmpty])) {
          crossAxisExtent = crossAxisExtent + dart.notNull(this.runSpacing);
        }
        runMetrics[$add](new wrap$._RunMetrics.new(runMainAxisExtent, runCrossAxisExtent, childCount));
      }
      let runCount = runMetrics[$length];
      if (!(dart.notNull(runCount) > 0)) dart.assertFailed(null, I[62], 238, 12, "runCount > 0");
      let containerMainAxisExtent = 0.0;
      let containerCrossAxisExtent = 0.0;
      switch (this.direction) {
        case C[83] || CT.C83:
        {
          this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.constrain(new point$.PdfPoint.new(mainAxisExtent, crossAxisExtent)));
          containerMainAxisExtent = dart.nullCheck(this.box).width;
          containerCrossAxisExtent = dart.nullCheck(this.box).height;
          break;
        }
        case C[80] || CT.C80:
        {
          this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.constrain(new point$.PdfPoint.new(crossAxisExtent, mainAxisExtent)));
          containerMainAxisExtent = dart.nullCheck(this.box).height;
          containerCrossAxisExtent = dart.nullCheck(this.box).width;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let crossAxisFreeSpace = math.max(core.double, 0.0, dart.notNull(containerCrossAxisExtent) - crossAxisExtent);
      let runLeadingSpace = 0.0;
      let runBetweenSpace = 0.0;
      switch (this.runAlignment) {
        case C[123] || CT.C123:
        {
          break;
        }
        case C[124] || CT.C124:
        {
          runLeadingSpace = crossAxisFreeSpace;
          break;
        }
        case C[125] || CT.C125:
        {
          runLeadingSpace = crossAxisFreeSpace / 2.0;
          break;
        }
        case C[126] || CT.C126:
        {
          runBetweenSpace = dart.notNull(runCount) > 1 ? crossAxisFreeSpace / (dart.notNull(runCount) - 1) : 0.0;
          break;
        }
        case C[127] || CT.C127:
        {
          runBetweenSpace = crossAxisFreeSpace / dart.notNull(runCount);
          runLeadingSpace = runBetweenSpace / 2.0;
          break;
        }
        case C[128] || CT.C128:
        {
          runBetweenSpace = crossAxisFreeSpace / (dart.notNull(runCount) + 1);
          runLeadingSpace = runBetweenSpace;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      runBetweenSpace = runBetweenSpace + dart.notNull(this.runSpacing);
      let crossAxisOffset = flipCrossAxis ? dart.notNull(containerCrossAxisExtent) - runLeadingSpace : runLeadingSpace;
      this[_context$1].lastChild = this[_context$1].firstChild;
      for (let i = 0; i < dart.notNull(runCount); i = i + 1) {
        let metrics = runMetrics[$_get](i);
        let runMainAxisExtent = metrics.mainAxisExtent;
        let runCrossAxisExtent = metrics.crossAxisExtent;
        let childCount = metrics.childCount;
        let mainAxisFreeSpace = math.max(core.double, 0.0, dart.notNull(containerMainAxisExtent) - dart.notNull(runMainAxisExtent));
        let childLeadingSpace = 0.0;
        let childBetweenSpace = 0.0;
        switch (this.alignment) {
          case C[123] || CT.C123:
          {
            break;
          }
          case C[124] || CT.C124:
          {
            childLeadingSpace = mainAxisFreeSpace;
            break;
          }
          case C[125] || CT.C125:
          {
            childLeadingSpace = mainAxisFreeSpace / 2.0;
            break;
          }
          case C[126] || CT.C126:
          {
            childBetweenSpace = dart.notNull(childCount) > 1 ? mainAxisFreeSpace / (dart.notNull(childCount) - 1) : 0.0;
            break;
          }
          case C[127] || CT.C127:
          {
            childBetweenSpace = mainAxisFreeSpace / dart.notNull(childCount);
            childLeadingSpace = childBetweenSpace / 2.0;
            break;
          }
          case C[128] || CT.C128:
          {
            childBetweenSpace = mainAxisFreeSpace / (dart.notNull(childCount) + 1);
            childLeadingSpace = childBetweenSpace;
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        childBetweenSpace = childBetweenSpace + dart.notNull(this.spacing);
        let childMainPosition = flipMainAxis ? dart.notNull(containerMainAxisExtent) - childLeadingSpace : childLeadingSpace;
        if (flipCrossAxis) {
          crossAxisOffset = crossAxisOffset - dart.notNull(runCrossAxisExtent);
        }
        if (crossAxisOffset < -0.01 || crossAxisOffset + dart.notNull(runCrossAxisExtent) > dart.notNull(containerCrossAxisExtent) + 0.01) {
          break;
        }
        let currentWidget = this[_context$1].lastChild;
        for (let child of this.children[$sublist](currentWidget)) {
          let runIndex = childRunMetrics[$_get](child);
          if (runIndex !== i) {
            break;
          }
          currentWidget = dart.notNull(currentWidget) + 1;
          let childMainAxisExtent = this[_getMainAxisExtent](child);
          let childCrossAxisExtent = dart.nullCheck(this[_getCrossAxisExtent](child));
          let childCrossAxisOffset = this[_getChildCrossAxisOffset](flipCrossAxis, runCrossAxisExtent, childCrossAxisExtent);
          if (flipMainAxis) {
            childMainPosition = childMainPosition - dart.nullCheck(childMainAxisExtent);
          }
          child.box = rect$.PdfRect.fromPoints(this[_getOffset](childMainPosition, crossAxisOffset + dart.notNull(childCrossAxisOffset)), dart.nullCheck(child.box).size);
          if (flipMainAxis) {
            childMainPosition = childMainPosition - childBetweenSpace;
          } else {
            childMainPosition = childMainPosition + (dart.nullCheck(childMainAxisExtent) + childBetweenSpace);
          }
        }
        if (flipCrossAxis) {
          crossAxisOffset = crossAxisOffset - runBetweenSpace;
        } else {
          crossAxisOffset = crossAxisOffset + (dart.notNull(runCrossAxisExtent) + runBetweenSpace);
        }
        this[_context$1].lastChild = currentWidget;
      }
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[62], 378, 22, "context");
      super.paint(context);
      context.canvas.saveContext();
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      context.canvas.setTransform(mat);
      for (let child of this.children[$sublist](this[_context$1].firstChild, this[_context$1].lastChild)) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    restoreContext(context) {
      wrap$._WrapContext.as(context);
      if (context == null) dart.nullFailed(I[62], 395, 36, "context");
      this[_context$1].firstChild = context.lastChild;
    }
    saveContext() {
      return this[_context$1];
    }
  };
  (wrap$.Wrap.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[83] || CT.C83;
    if (direction == null) dart.nullFailed(I[62], 74, 10, "direction");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[123] || CT.C123;
    if (alignment == null) dart.nullFailed(I[62], 75, 10, "alignment");
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    if (spacing == null) dart.nullFailed(I[62], 76, 10, "spacing");
    let runAlignment = opts && 'runAlignment' in opts ? opts.runAlignment : C[123] || CT.C123;
    if (runAlignment == null) dart.nullFailed(I[62], 77, 10, "runAlignment");
    let runSpacing = opts && 'runSpacing' in opts ? opts.runSpacing : 0;
    if (runSpacing == null) dart.nullFailed(I[62], 78, 10, "runSpacing");
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[130] || CT.C130;
    if (crossAxisAlignment == null) dart.nullFailed(I[62], 79, 10, "crossAxisAlignment");
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[134] || CT.C134;
    if (verticalDirection == null) dart.nullFailed(I[62], 80, 10, "verticalDirection");
    let children = opts && 'children' in opts ? opts.children : C[82] || CT.C82;
    if (children == null) dart.nullFailed(I[62], 81, 18, "children");
    this[_context$1] = new wrap$._WrapContext.new();
    this[direction$0] = direction;
    this[alignment$2] = alignment;
    this[spacing$] = spacing;
    this[runAlignment$] = runAlignment;
    this[runSpacing$] = runSpacing;
    this[crossAxisAlignment$] = crossAxisAlignment;
    this[verticalDirection$] = verticalDirection;
    wrap$.Wrap.__proto__.new.call(this, {children: children});
    ;
  }).prototype = wrap$.Wrap.prototype;
  dart.addTypeTests(wrap$.Wrap);
  dart.addTypeCaches(wrap$.Wrap);
  dart.setMethodSignature(wrap$.Wrap, () => ({
    __proto__: dart.getMethods(wrap$.Wrap.__proto__),
    [_getMainAxisExtent]: dart.fnType(dart.nullable(core.double), [widget$.Widget]),
    [_getCrossAxisExtent]: dart.fnType(dart.nullable(core.double), [widget$.Widget]),
    [_getOffset]: dart.fnType(point$.PdfPoint, [core.double, core.double]),
    [_getChildCrossAxisOffset]: dart.fnType(core.double, [core.bool, core.double, core.double]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(wrap$.Wrap, () => ({
    __proto__: dart.getGetters(wrap$.Wrap.__proto__),
    textDirection: core.bool,
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(wrap$.Wrap, I[63]);
  dart.setFieldSignature(wrap$.Wrap, () => ({
    __proto__: dart.getFields(wrap$.Wrap.__proto__),
    direction: dart.finalFieldType(flex$.Axis),
    alignment: dart.finalFieldType(wrap$.WrapAlignment),
    spacing: dart.finalFieldType(core.double),
    runAlignment: dart.finalFieldType(wrap$.WrapAlignment),
    runSpacing: dart.finalFieldType(core.double),
    crossAxisAlignment: dart.finalFieldType(wrap$.WrapCrossAlignment),
    verticalDirection: dart.finalFieldType(flex$.VerticalDirection),
    [_context$1]: dart.finalFieldType(wrap$._WrapContext)
  }));
  var textStyle$1 = dart.privateName(legend, "ChartLegend.textStyle");
  var position$ = dart.privateName(legend, "ChartLegend.position");
  var direction$1 = dart.privateName(legend, "ChartLegend.direction");
  var decoration$3 = dart.privateName(legend, "ChartLegend.decoration");
  var padding$4 = dart.privateName(legend, "ChartLegend.padding");
  var _buildLegend = dart.privateName(legend, "_buildLegend");
  legend.ChartLegend = class ChartLegend extends widget$.StatelessWidget {
    get textStyle() {
      return this[textStyle$1];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get direction() {
      return this[direction$1];
    }
    set direction(value) {
      super.direction = value;
    }
    get decoration() {
      return this[decoration$3];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get padding() {
      return this[padding$4];
    }
    set padding(value) {
      super.padding = value;
    }
    [_buildLegend](context, dataset) {
      if (context == null) dart.nullFailed(I[64], 50, 31, "context");
      if (dataset == null) dart.nullFailed(I[64], 50, 48, "dataset");
      let style = theme$.Theme.of(context).defaultTextStyle.merge(this.textStyle);
      return new flex$.Row.new({mainAxisSize: flex$.MainAxisSize.min, children: T$.JSArrayOfWidget().of([new container$.Container.new({width: style.fontSize, height: style.fontSize, margin: C[136] || CT.C136, child: dataset.legendShape()}), new text$1.Text.new(dart.nullCheck(dataset.legend), {style: this.textStyle})])});
    }
    build(context) {
      let t36;
      if (context == null) dart.nullFailed(I[64], 71, 24, "context");
      let datasets = chart.Chart.of(context).datasets;
      let wrap = new wrap$.Wrap.new({direction: this.direction, spacing: 10.0, runSpacing: 10.0, crossAxisAlignment: this.direction == flex$.Axis.horizontal ? wrap$.WrapCrossAlignment.center : wrap$.WrapCrossAlignment.start, children: (() => {
          let t35 = T$.JSArrayOfWidget().of([]);
          for (let dataset of datasets)
            if (dataset.legend != null) t35[$add](this[_buildLegend](context, dataset));
          return t35;
        })()});
      return new basic.Align.new({alignment: this.position, child: new container$.Container.new({decoration: (t36 = this.decoration, t36 == null ? C[137] || CT.C137 : t36), padding: this.padding, child: wrap})});
    }
  };
  (legend.ChartLegend.new = function(opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let position = opts && 'position' in opts ? opts.position : C[135] || CT.C135;
    if (position == null) dart.nullFailed(I[64], 34, 10, "position");
    let direction = opts && 'direction' in opts ? opts.direction : C[80] || CT.C80;
    if (direction == null) dart.nullFailed(I[64], 35, 10, "direction");
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let padding = opts && 'padding' in opts ? opts.padding : C[17] || CT.C17;
    if (padding == null) dart.nullFailed(I[64], 37, 10, "padding");
    this[textStyle$1] = textStyle;
    this[position$] = position;
    this[direction$1] = direction;
    this[decoration$3] = decoration;
    this[padding$4] = padding;
    legend.ChartLegend.__proto__.new.call(this);
    ;
  }).prototype = legend.ChartLegend.prototype;
  dart.addTypeTests(legend.ChartLegend);
  dart.addTypeCaches(legend.ChartLegend);
  dart.setMethodSignature(legend.ChartLegend, () => ({
    __proto__: dart.getMethods(legend.ChartLegend.__proto__),
    [_buildLegend]: dart.fnType(widget$.Widget, [widget$.Context, chart.Dataset]),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(legend.ChartLegend, I[65]);
  dart.setFieldSignature(legend.ChartLegend, () => ({
    __proto__: dart.getFields(legend.ChartLegend.__proto__),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    position: dart.finalFieldType(geometry.Alignment),
    direction: dart.finalFieldType(flex$.Axis),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    padding: dart.finalFieldType(geometry.EdgeInsets)
  }));
  var __RadialGrid_gridBox = dart.privateName(grid_radial, "_#RadialGrid#gridBox");
  var __RadialGrid_gridBox_isSet = dart.privateName(grid_radial, "_#RadialGrid#gridBox#isSet");
  grid_radial.RadialGrid = class RadialGrid extends chart.ChartGrid {
    get gridBox() {
      let t36;
      return dart.test(this[__RadialGrid_gridBox_isSet]) ? (t36 = this[__RadialGrid_gridBox], t36) : dart.throw(new _internal.LateError.fieldNI("gridBox"));
    }
    set gridBox(t36) {
      if (t36 == null) dart.nullFailed(I[66], 30, 16, "null");
      this[__RadialGrid_gridBox_isSet] = true;
      this[__RadialGrid_gridBox] = t36;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[66], 33, 23, "context");
      if (constraints == null) dart.nullFailed(I[66], 33, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[66], 34, 13, "parentUsesSize");
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      let datasets = chart.Chart.of(context).datasets;
      let size = constraints.biggest;
      this.gridBox = new rect$.PdfRect.new(0.0, 0.0, size.x, size.y);
      for (let dataset of datasets) {
        dataset.layout(context, new geometry.BoxConstraints.tight(this.gridBox.size));
      }
    }
    toChart(p) {
      if (p == null) dart.nullFailed(I[66], 48, 29, "p");
      return new point$.PdfPoint.new(3 * dart.notNull(p.y) * math.cos(dart.notNull(p.x) / 7 * 3.141592653589793 * 2) + dart.notNull(this.gridBox.width) / 2, 3 * dart.notNull(p.y) * math.sin(dart.notNull(p.x) / 7 * 3.141592653589793 * 2) + dart.notNull(this.gridBox.height) / 2);
    }
    paintBackground(context) {
      if (context == null) dart.nullFailed(I[66], 56, 32, "context");
    }
    clip(context, size) {
      let t37;
      if (context == null) dart.nullFailed(I[66], 58, 21, "context");
      if (size == null) dart.nullFailed(I[66], 58, 39, "size");
      t37 = context.canvas;
      (() => {
        t37.saveContext();
        t37.drawBox(this.gridBox);
        t37.clipPath();
        return t37;
      })();
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[66], 66, 22, "context");
      super.paint(context);
      let datasets = chart.Chart.of(context).datasets;
      this.clip(context, dart.nullCheck(this.box).size);
      for (let dataSet of datasets) {
        dataSet.paintBackground(context);
      }
      context.canvas.restoreContext();
      this.paintBackground(context);
      this.clip(context, dart.nullCheck(this.box).size);
      for (let dataSet of datasets) {
        dataSet.paint(context);
      }
      context.canvas.restoreContext();
    }
  };
  (grid_radial.RadialGrid.new = function() {
    this[__RadialGrid_gridBox] = null;
    this[__RadialGrid_gridBox_isSet] = false;
    grid_radial.RadialGrid.__proto__.new.call(this);
    ;
  }).prototype = grid_radial.RadialGrid.prototype;
  dart.addTypeTests(grid_radial.RadialGrid);
  dart.addTypeCaches(grid_radial.RadialGrid);
  dart.setMethodSignature(grid_radial.RadialGrid, () => ({
    __proto__: dart.getMethods(grid_radial.RadialGrid.__proto__),
    toChart: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    paintBackground: dart.fnType(dart.void, [widget$.Context]),
    clip: dart.fnType(dart.void, [widget$.Context, point$.PdfPoint])
  }));
  dart.setGetterSignature(grid_radial.RadialGrid, () => ({
    __proto__: dart.getGetters(grid_radial.RadialGrid.__proto__),
    gridBox: rect$.PdfRect
  }));
  dart.setSetterSignature(grid_radial.RadialGrid, () => ({
    __proto__: dart.getSetters(grid_radial.RadialGrid.__proto__),
    gridBox: rect$.PdfRect
  }));
  dart.setLibraryUri(grid_radial.RadialGrid, I[67]);
  dart.setFieldSignature(grid_radial.RadialGrid, () => ({
    __proto__: dart.getFields(grid_radial.RadialGrid.__proto__),
    [__RadialGrid_gridBox]: dart.fieldType(dart.nullable(rect$.PdfRect)),
    [__RadialGrid_gridBox_isSet]: dart.fieldType(core.bool)
  }));
  var x$2 = dart.privateName(line_chart, "LineChartValue.x");
  var y$2 = dart.privateName(line_chart, "LineChartValue.y");
  chart.ChartValue = class ChartValue extends core.Object {};
  (chart.ChartValue.new = function() {
    ;
  }).prototype = chart.ChartValue.prototype;
  dart.addTypeTests(chart.ChartValue);
  dart.addTypeCaches(chart.ChartValue);
  dart.setLibraryUri(chart.ChartValue, I[60]);
  line_chart.LineChartValue = class LineChartValue extends chart.ChartValue {
    get x() {
      return this[x$2];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    get point() {
      return new point$.PdfPoint.new(this.x, this.y);
    }
  };
  (line_chart.LineChartValue.new = function(x, y) {
    if (x == null) dart.nullFailed(I[68], 25, 29, "x");
    if (y == null) dart.nullFailed(I[68], 25, 37, "y");
    this[x$2] = x;
    this[y$2] = y;
    line_chart.LineChartValue.__proto__.new.call(this);
    ;
  }).prototype = line_chart.LineChartValue.prototype;
  dart.addTypeTests(line_chart.LineChartValue);
  dart.addTypeCaches(line_chart.LineChartValue);
  dart.setGetterSignature(line_chart.LineChartValue, () => ({
    __proto__: dart.getGetters(line_chart.LineChartValue.__proto__),
    point: point$.PdfPoint
  }));
  dart.setLibraryUri(line_chart.LineChartValue, I[69]);
  dart.setFieldSignature(line_chart.LineChartValue, () => ({
    __proto__: dart.getFields(line_chart.LineChartValue.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  var data$ = dart.privateName(line_chart, "LineDataSet.data");
  var drawLine$ = dart.privateName(line_chart, "LineDataSet.drawLine");
  var lineWidth$ = dart.privateName(line_chart, "LineDataSet.lineWidth");
  var drawPoints$ = dart.privateName(line_chart, "LineDataSet.drawPoints");
  var pointColor$ = dart.privateName(line_chart, "LineDataSet.pointColor");
  var pointSize$ = dart.privateName(line_chart, "LineDataSet.pointSize");
  var drawSurface$0 = dart.privateName(line_chart, "LineDataSet.drawSurface");
  var surfaceColor$ = dart.privateName(line_chart, "LineDataSet.surfaceColor");
  var surfaceOpacity$0 = dart.privateName(line_chart, "LineDataSet.surfaceOpacity");
  var isCurved$ = dart.privateName(line_chart, "LineDataSet.isCurved");
  var smoothness$ = dart.privateName(line_chart, "LineDataSet.smoothness");
  var _drawLine = dart.privateName(line_chart, "_drawLine");
  var _drawSurface = dart.privateName(line_chart, "_drawSurface");
  var _drawPoints = dart.privateName(line_chart, "_drawPoints");
  line_chart.LineDataSet = class LineDataSet extends chart.Dataset {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get drawLine() {
      return this[drawLine$];
    }
    set drawLine(value) {
      super.drawLine = value;
    }
    get lineWidth() {
      return this[lineWidth$];
    }
    set lineWidth(value) {
      super.lineWidth = value;
    }
    get drawPoints() {
      return this[drawPoints$];
    }
    set drawPoints(value) {
      super.drawPoints = value;
    }
    get pointColor() {
      return this[pointColor$];
    }
    set pointColor(value) {
      super.pointColor = value;
    }
    get pointSize() {
      return this[pointSize$];
    }
    set pointSize(value) {
      super.pointSize = value;
    }
    get drawSurface() {
      return this[drawSurface$0];
    }
    set drawSurface(value) {
      super.drawSurface = value;
    }
    get surfaceColor() {
      return this[surfaceColor$];
    }
    set surfaceColor(value) {
      super.surfaceColor = value;
    }
    get surfaceOpacity() {
      return this[surfaceOpacity$0];
    }
    set surfaceOpacity(value) {
      super.surfaceOpacity = value;
    }
    get isCurved() {
      return this[isCurved$];
    }
    set isCurved(value) {
      super.isCurved = value;
    }
    get smoothness() {
      return this[smoothness$];
    }
    set smoothness(value) {
      super.smoothness = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[68], 71, 23, "context");
      if (constraints == null) dart.nullFailed(I[68], 71, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[68], 72, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    [_drawLine](context, grid, moveTo) {
      if (context == null) dart.nullFailed(I[68], 76, 26, "context");
      if (grid == null) dart.nullFailed(I[68], 76, 45, "grid");
      if (moveTo == null) dart.nullFailed(I[68], 76, 56, "moveTo");
      if (dart.notNull(this.data[$length]) < 2) {
        return;
      }
      let t = C[26] || CT.C26;
      let p = grid.toChart(this.data[$first].point);
      if (dart.test(moveTo)) {
        context.canvas.moveTo(p.x, p.y);
      } else {
        context.canvas.lineTo(p.x, p.y);
      }
      for (let i = 1; i < dart.notNull(this.data[$length]); i = i + 1) {
        let p = grid.toChart(this.data[$_get](i).point);
        if (!dart.test(this.isCurved)) {
          context.canvas.lineTo(p.x, p.y);
          continue;
        }
        let pp = grid.toChart(this.data[$_get](i - 1).point);
        let pn = grid.toChart(this.data[$_get](i + 1 < dart.notNull(this.data[$length]) ? i + 1 : i).point);
        let c1 = new point$.PdfPoint.new(dart.notNull(pp.x) + dart.notNull(t.x), dart.notNull(pp.y) + dart.notNull(t.y));
        t = new point$.PdfPoint.new((dart.notNull(pn.x) - dart.notNull(pp.x)) / 2 * dart.notNull(this.smoothness), (dart.notNull(pn.y) - dart.notNull(pp.y)) / 2 * dart.notNull(this.smoothness));
        let c2 = new point$.PdfPoint.new(dart.notNull(p.x) - dart.notNull(t.x), dart.notNull(p.y) - dart.notNull(t.y));
        context.canvas.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);
      }
    }
    [_drawSurface](context, grid) {
      if (context == null) dart.nullFailed(I[68], 112, 29, "context");
      if (grid == null) dart.nullFailed(I[68], 112, 48, "grid");
      if (dart.notNull(this.data[$length]) < 2) {
        return;
      }
      let y = grid_cartesian.CartesianGrid.is(grid) ? grid.xAxisOffset : 0.0;
      this[_drawLine](context, grid, true);
      let pe = grid.toChart(this.data[$last].point);
      context.canvas.lineTo(pe.x, y);
      let pf = grid.toChart(this.data[$first].point);
      context.canvas.lineTo(pf.x, y);
    }
    [_drawPoints](context, grid) {
      if (context == null) dart.nullFailed(I[68], 126, 28, "context");
      if (grid == null) dart.nullFailed(I[68], 126, 47, "grid");
      for (let value of this.data) {
        let p = grid.toChart(value.point);
        context.canvas.drawEllipse(p.x, p.y, this.pointSize, this.pointSize);
      }
    }
    paintBackground(context) {
      let t37, t38, t37$;
      if (context == null) dart.nullFailed(I[68], 134, 32, "context");
      if (dart.test(this.data[$isEmpty])) {
        return;
      }
      let grid = chart.Chart.of(context).grid;
      if (dart.test(this.drawSurface)) {
        this[_drawSurface](context, grid);
        if (this.surfaceOpacity !== 1) {
          t37 = context.canvas;
          (() => {
            t37.saveContext();
            t37.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.surfaceOpacity}));
            return t37;
          })();
        }
        t37$ = context.canvas;
        (() => {
          t37$.setFillColor((t38 = this.surfaceColor, t38 == null ? this.color : t38));
          t37$.fillPath();
          return t37$;
        })();
        if (this.surfaceOpacity !== 1) {
          context.canvas.restoreContext();
        }
      }
    }
    paint(context) {
      let t37, t38, t37$;
      if (context == null) dart.nullFailed(I[68], 163, 22, "context");
      super.paint(context);
      if (dart.test(this.data[$isEmpty])) {
        return;
      }
      let grid = chart.Chart.of(context).grid;
      if (dart.test(this.drawLine)) {
        this[_drawLine](context, grid, true);
        t37 = context.canvas;
        (() => {
          t37.setStrokeColor(this.color);
          t37.setLineWidth(this.lineWidth);
          t37.setLineCap(graphics.PdfLineCap.round);
          t37.setLineJoin(graphics.PdfLineJoin.round);
          t37.strokePath();
          return t37;
        })();
      }
      if (dart.test(this.drawPoints)) {
        this[_drawPoints](context, grid);
        t37$ = context.canvas;
        (() => {
          t37$.setColor((t38 = this.pointColor, t38 == null ? this.color : t38));
          t37$.fillPath();
          return t37$;
        })();
      }
    }
  };
  (line_chart.LineDataSet.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[68], 34, 19, "data");
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let pointColor = opts && 'pointColor' in opts ? opts.pointColor : null;
    let pointSize = opts && 'pointSize' in opts ? opts.pointSize : 3;
    if (pointSize == null) dart.nullFailed(I[68], 37, 10, "pointSize");
    let color = opts && 'color' in opts ? opts.color : C[94] || CT.C94;
    if (color == null) dart.nullFailed(I[68], 38, 14, "color");
    let lineWidth = opts && 'lineWidth' in opts ? opts.lineWidth : 2;
    if (lineWidth == null) dart.nullFailed(I[68], 39, 10, "lineWidth");
    let drawLine = opts && 'drawLine' in opts ? opts.drawLine : true;
    if (drawLine == null) dart.nullFailed(I[68], 40, 10, "drawLine");
    let drawPoints = opts && 'drawPoints' in opts ? opts.drawPoints : true;
    if (drawPoints == null) dart.nullFailed(I[68], 41, 10, "drawPoints");
    let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : false;
    if (drawSurface == null) dart.nullFailed(I[68], 42, 10, "drawSurface");
    let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 0.2;
    if (surfaceOpacity == null) dart.nullFailed(I[68], 43, 10, "surfaceOpacity");
    let surfaceColor = opts && 'surfaceColor' in opts ? opts.surfaceColor : null;
    let isCurved = opts && 'isCurved' in opts ? opts.isCurved : false;
    if (isCurved == null) dart.nullFailed(I[68], 45, 10, "isCurved");
    let smoothness = opts && 'smoothness' in opts ? opts.smoothness : 0.35;
    if (smoothness == null) dart.nullFailed(I[68], 46, 10, "smoothness");
    this[data$] = data;
    this[pointColor$] = pointColor;
    this[pointSize$] = pointSize;
    this[lineWidth$] = lineWidth;
    this[drawLine$] = drawLine;
    this[drawPoints$] = drawPoints;
    this[drawSurface$0] = drawSurface;
    this[surfaceOpacity$0] = surfaceOpacity;
    this[surfaceColor$] = surfaceColor;
    this[isCurved$] = isCurved;
    this[smoothness$] = smoothness;
    if (!(dart.test(drawLine) || dart.test(drawPoints) || dart.test(drawSurface))) dart.assertFailed(null, I[68], 47, 16, "drawLine || drawPoints || drawSurface");
    line_chart.LineDataSet.__proto__.new.call(this, {legend: legend, color: color});
    ;
  }).prototype = line_chart.LineDataSet.prototype;
  dart.addTypeTests(line_chart.LineDataSet);
  dart.addTypeCaches(line_chart.LineDataSet);
  dart.setMethodSignature(line_chart.LineDataSet, () => ({
    __proto__: dart.getMethods(line_chart.LineDataSet.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    [_drawLine]: dart.fnType(dart.void, [widget$.Context, chart.ChartGrid, core.bool]),
    [_drawSurface]: dart.fnType(dart.void, [widget$.Context, chart.ChartGrid]),
    [_drawPoints]: dart.fnType(dart.void, [widget$.Context, chart.ChartGrid])
  }));
  dart.setLibraryUri(line_chart.LineDataSet, I[69]);
  dart.setFieldSignature(line_chart.LineDataSet, () => ({
    __proto__: dart.getFields(line_chart.LineDataSet.__proto__),
    data: dart.finalFieldType(core.List$(line_chart.LineChartValue)),
    drawLine: dart.finalFieldType(core.bool),
    lineWidth: dart.finalFieldType(core.double),
    drawPoints: dart.finalFieldType(core.bool),
    pointColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    pointSize: dart.finalFieldType(core.double),
    drawSurface: dart.finalFieldType(core.bool),
    surfaceColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    surfaceOpacity: dart.finalFieldType(core.double),
    isCurved: dart.finalFieldType(core.bool),
    smoothness: dart.finalFieldType(core.double)
  }));
  var direction = dart.privateName(grid_axis, "GridAxis.direction");
  var format$ = dart.privateName(grid_axis, "GridAxis.format");
  var buildLabel$ = dart.privateName(grid_axis, "GridAxis.buildLabel");
  var textStyle$2 = dart.privateName(grid_axis, "GridAxis.textStyle");
  var margin$4 = dart.privateName(grid_axis, "GridAxis.margin");
  var crossAxisPosition = dart.privateName(grid_axis, "GridAxis.crossAxisPosition");
  var color$8 = dart.privateName(grid_axis, "GridAxis.color");
  var width$8 = dart.privateName(grid_axis, "GridAxis.width");
  var divisions$ = dart.privateName(grid_axis, "GridAxis.divisions");
  var divisionsWidth$ = dart.privateName(grid_axis, "GridAxis.divisionsWidth");
  var divisionsColor$ = dart.privateName(grid_axis, "GridAxis.divisionsColor");
  var divisionsDashed$ = dart.privateName(grid_axis, "GridAxis.divisionsDashed");
  var ticks$ = dart.privateName(grid_axis, "GridAxis.ticks");
  var axisPosition = dart.privateName(grid_axis, "GridAxis.axisPosition");
  var angle$0 = dart.privateName(grid_axis, "GridAxis.angle");
  var __GridAxis__textMargin = dart.privateName(grid_axis, "_#GridAxis#_textMargin");
  var __GridAxis__textMargin_isSet = dart.privateName(grid_axis, "_#GridAxis#_textMargin#isSet");
  var _marginStart = dart.privateName(grid_axis, "_marginStart");
  var _marginEnd = dart.privateName(grid_axis, "_marginEnd");
  var _axisTick = dart.privateName(grid_axis, "_axisTick");
  var _textMargin = dart.privateName(grid_axis, "_textMargin");
  grid_axis.GridAxis = class GridAxis extends widget$.Widget {
    get direction() {
      return this[direction];
    }
    set direction(value) {
      this[direction] = value;
    }
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    get buildLabel() {
      return this[buildLabel$];
    }
    set buildLabel(value) {
      super.buildLabel = value;
    }
    get textStyle() {
      return this[textStyle$2];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get margin() {
      return this[margin$4];
    }
    set margin(value) {
      super.margin = value;
    }
    get crossAxisPosition() {
      return this[crossAxisPosition];
    }
    set crossAxisPosition(value) {
      this[crossAxisPosition] = value;
    }
    get color() {
      return this[color$8];
    }
    set color(value) {
      super.color = value;
    }
    get width() {
      return this[width$8];
    }
    set width(value) {
      super.width = value;
    }
    get divisions() {
      return this[divisions$];
    }
    set divisions(value) {
      super.divisions = value;
    }
    get divisionsWidth() {
      return this[divisionsWidth$];
    }
    set divisionsWidth(value) {
      super.divisionsWidth = value;
    }
    get divisionsColor() {
      return this[divisionsColor$];
    }
    set divisionsColor(value) {
      super.divisionsColor = value;
    }
    get divisionsDashed() {
      return this[divisionsDashed$];
    }
    set divisionsDashed(value) {
      super.divisionsDashed = value;
    }
    get ticks() {
      return this[ticks$];
    }
    set ticks(value) {
      super.ticks = value;
    }
    get axisPosition() {
      return this[axisPosition];
    }
    set axisPosition(value) {
      this[axisPosition] = value;
    }
    get angle() {
      return this[angle$0];
    }
    set angle(value) {
      super.angle = value;
    }
    get [_textMargin]() {
      let t37;
      return dart.test(this[__GridAxis__textMargin_isSet]) ? (t37 = this[__GridAxis__textMargin], t37) : dart.throw(new _internal.LateError.fieldNI("_textMargin"));
    }
    set [_textMargin](t37) {
      if (t37 == null) dart.nullFailed(I[70], 75, 15, "null");
      this[__GridAxis__textMargin_isSet] = true;
      this[__GridAxis__textMargin] = t37;
    }
    static _defaultFormat(v) {
      if (v == null) dart.nullFailed(I[70], 101, 36, "v");
      return dart.toString(v);
    }
    transfer(input) {
      if (input == null) dart.nullFailed(I[70], 103, 23, "input");
      return input[$toDouble]();
    }
  };
  (grid_axis.GridAxis.new = function(opts) {
    let t37, t37$, t37$0, t37$1, t37$2, t37$3, t37$4, t37$5, t37$6, t37$7;
    let format = opts && 'format' in opts ? opts.format : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let marginStart = opts && 'marginStart' in opts ? opts.marginStart : null;
    let marginEnd = opts && 'marginEnd' in opts ? opts.marginEnd : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let divisions = opts && 'divisions' in opts ? opts.divisions : null;
    let divisionsWidth = opts && 'divisionsWidth' in opts ? opts.divisionsWidth : null;
    let divisionsColor = opts && 'divisionsColor' in opts ? opts.divisionsColor : null;
    let divisionsDashed = opts && 'divisionsDashed' in opts ? opts.divisionsDashed : null;
    let ticks = opts && 'ticks' in opts ? opts.ticks : null;
    let axisTick = opts && 'axisTick' in opts ? opts.axisTick : null;
    let angle = opts && 'angle' in opts ? opts.angle : 0;
    if (angle == null) dart.nullFailed(I[70], 48, 10, "angle");
    let buildLabel = opts && 'buildLabel' in opts ? opts.buildLabel : null;
    this[crossAxisPosition] = 0.0;
    this[__GridAxis__textMargin] = null;
    this[__GridAxis__textMargin_isSet] = false;
    this[axisPosition] = 0.0;
    this[textStyle$2] = textStyle;
    this[margin$4] = margin;
    this[angle$0] = angle;
    this[buildLabel$] = buildLabel;
    this[format$] = (t37 = format, t37 == null ? C[138] || CT.C138 : t37);
    this[color$8] = (t37$ = color, t37$ == null ? colors.PdfColors.black : t37$);
    this[width$8] = (t37$0 = width, t37$0 == null ? 1.0 : t37$0);
    this[divisions$] = (t37$1 = divisions, t37$1 == null ? false : t37$1);
    this[divisionsWidth$] = (t37$2 = divisionsWidth, t37$2 == null ? 0.5 : t37$2);
    this[divisionsColor$] = (t37$3 = divisionsColor, t37$3 == null ? colors.PdfColors.grey : t37$3);
    this[_marginStart] = (t37$4 = marginStart, t37$4 == null ? 0.0 : t37$4);
    this[_marginEnd] = (t37$5 = marginEnd, t37$5 == null ? 0.0 : t37$5);
    this[ticks$] = (t37$6 = ticks, t37$6 == null ? false : t37$6);
    this[_axisTick] = axisTick;
    this[divisionsDashed$] = (t37$7 = divisionsDashed, t37$7 == null ? false : t37$7);
    this[direction] = flex$.Axis.horizontal;
    grid_axis.GridAxis.__proto__.new.call(this);
    ;
  }).prototype = grid_axis.GridAxis.prototype;
  dart.addTypeTests(grid_axis.GridAxis);
  dart.addTypeCaches(grid_axis.GridAxis);
  dart.setMethodSignature(grid_axis.GridAxis, () => ({
    __proto__: dart.getMethods(grid_axis.GridAxis.__proto__),
    transfer: dart.fnType(core.double, [core.num])
  }));
  dart.setGetterSignature(grid_axis.GridAxis, () => ({
    __proto__: dart.getGetters(grid_axis.GridAxis.__proto__),
    [_textMargin]: core.double
  }));
  dart.setSetterSignature(grid_axis.GridAxis, () => ({
    __proto__: dart.getSetters(grid_axis.GridAxis.__proto__),
    [_textMargin]: core.double
  }));
  dart.setLibraryUri(grid_axis.GridAxis, I[71]);
  dart.setFieldSignature(grid_axis.GridAxis, () => ({
    __proto__: dart.getFields(grid_axis.GridAxis.__proto__),
    direction: dart.fieldType(flex$.Axis),
    format: dart.finalFieldType(dart.fnType(core.String, [core.num])),
    buildLabel: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [core.num]))),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    margin: dart.finalFieldType(dart.nullable(core.double)),
    crossAxisPosition: dart.fieldType(core.double),
    [__GridAxis__textMargin]: dart.fieldType(dart.nullable(core.double)),
    [__GridAxis__textMargin_isSet]: dart.fieldType(core.bool),
    [_marginStart]: dart.finalFieldType(core.double),
    [_marginEnd]: dart.fieldType(core.double),
    color: dart.finalFieldType(color$.PdfColor),
    width: dart.finalFieldType(core.double),
    divisions: dart.finalFieldType(core.bool),
    divisionsWidth: dart.finalFieldType(core.double),
    divisionsColor: dart.finalFieldType(color$.PdfColor),
    divisionsDashed: dart.finalFieldType(core.bool),
    ticks: dart.finalFieldType(core.bool),
    [_axisTick]: dart.fieldType(dart.nullable(core.bool)),
    axisPosition: dart.fieldType(core.double),
    angle: dart.finalFieldType(core.double)
  }));
  var values$ = dart.privateName(grid_axis, "FixedAxis.values");
  var _text = dart.privateName(grid_axis, "_text");
  var _angleDirection = dart.privateName(grid_axis, "_angleDirection");
  var _drawYValues = dart.privateName(grid_axis, "_drawYValues");
  var _drawXValues = dart.privateName(grid_axis, "_drawXValues");
  const _is_FixedAxis_default = Symbol('_is_FixedAxis_default');
  grid_axis.FixedAxis$ = dart.generic(T => {
    class FixedAxis extends grid_axis.GridAxis {
      get values() {
        return this[values$];
      }
      set values(value) {
        super.values = value;
      }
      static fromStrings(values, opts) {
        if (values == null) dart.nullFailed(I[70], 150, 18, "values");
        let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
        let margin = opts && 'margin' in opts ? opts.margin : null;
        let marginStart = opts && 'marginStart' in opts ? opts.marginStart : null;
        let marginEnd = opts && 'marginEnd' in opts ? opts.marginEnd : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let width = opts && 'width' in opts ? opts.width : null;
        let divisions = opts && 'divisions' in opts ? opts.divisions : null;
        let divisionsWidth = opts && 'divisionsWidth' in opts ? opts.divisionsWidth : null;
        let divisionsColor = opts && 'divisionsColor' in opts ? opts.divisionsColor : null;
        let divisionsDashed = opts && 'divisionsDashed' in opts ? opts.divisionsDashed : null;
        let ticks = opts && 'ticks' in opts ? opts.ticks : null;
        let axisTick = opts && 'axisTick' in opts ? opts.axisTick : null;
        let angle = opts && 'angle' in opts ? opts.angle : 0;
        if (angle == null) dart.nullFailed(I[70], 163, 12, "angle");
        let buildLabel = opts && 'buildLabel' in opts ? opts.buildLabel : null;
        return new (T$.FixedAxisOfint()).new(T$.ListOfint().generate(values[$length], dart.fn(index => {
          if (index == null) dart.nullFailed(I[70], 167, 46, "index");
          return index;
        }, T$.intToint())), {format: dart.fn(v => {
            if (v == null) dart.nullFailed(I[70], 168, 20, "v");
            return values[$_get](v[$toInt]());
          }, T$.numToString()), textStyle: textStyle, margin: margin, marginStart: marginStart, marginEnd: marginEnd, color: color, width: width, divisions: divisions, divisionsWidth: divisionsWidth, divisionsColor: divisionsColor, divisionsDashed: divisionsDashed, ticks: ticks, axisTick: axisTick, angle: angle, buildLabel: buildLabel});
      }
      static _isSortedAscending(list) {
        if (list == null) dart.nullFailed(I[70], 188, 44, "list");
        let prev = list[$first];
        for (let elem of list) {
          if (dart.notNull(prev) > dart.notNull(elem)) {
            return false;
          }
          prev = elem;
        }
        return true;
      }
      toChart(input) {
        let offset = this.transfer(this.values[$first]);
        let total = dart.notNull(this.transfer(this.values[$last])) - dart.notNull(offset);
        let start = dart.notNull(this.crossAxisPosition) + dart.notNull(this[_marginStart]);
        switch (this.direction) {
          case C[83] || CT.C83:
          {
            return dart.notNull(dart.nullCheck(this.box).left) + start + (dart.notNull(dart.nullCheck(this.box).width) - start - dart.notNull(this[_marginEnd])) * (dart.notNull(this.transfer(dart.nullCheck(input))) - dart.notNull(offset)) / total;
          }
          case C[80] || CT.C80:
          {
            return dart.notNull(dart.nullCheck(this.box).bottom) + start + (dart.notNull(dart.nullCheck(this.box).height) - start - dart.notNull(this[_marginEnd])) * (dart.notNull(this.transfer(dart.nullCheck(input))) - dart.notNull(offset)) / total;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      [_text](value) {
        let t38;
        if (value == null) dart.nullFailed(I[70], 220, 20, "value");
        let t = this.buildLabel == null ? new text$1.Text.new((t38 = value, this.format(t38)), {style: this.textStyle}) : dart.nullCheck(this.buildLabel)(value);
        if (this.angle === 0.0) {
          return t;
        }
        return new basic.Transform.rotateBox({angle: this.angle, child: t});
      }
      [_angleDirection]() {
        if (this.angle === 0.0) {
          return 0;
        }
        if (this.angle[$modulo](3.141592653589793) > 3.141592653589793 / 2) {
          return -1;
        }
        return 1;
      }
      layout(context, constraints, opts) {
        let t38, t38$;
        if (context == null) dart.nullFailed(I[70], 245, 23, "context");
        if (constraints == null) dart.nullFailed(I[70], 245, 47, "constraints");
        let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
        if (parentUsesSize == null) dart.nullFailed(I[70], 246, 13, "parentUsesSize");
        let size = constraints.biggest;
        let maxWidth = 0.0;
        let maxHeight = 0.0;
        let first = null;
        let last = null;
        for (let value of this.values) {
          last = widget$.Widget.measure(this[_text](value), {context: context});
          maxWidth = math.max(core.double, maxWidth, last.x);
          maxHeight = math.max(core.double, maxHeight, last.y);
          first == null ? first = last : null;
        }
        let ad = this[_angleDirection]();
        switch (this.direction) {
          case C[83] || CT.C83:
          {
            this[_textMargin] = (t38 = this.margin, t38 == null ? 2.0 : t38);
            this[_axisTick] == null ? this[_axisTick] = false : null;
            let minStart = ad === 0 ? dart.notNull(dart.nullCheck(first).x) / 2 : dart.notNull(ad) > 0 ? dart.nullCheck(first).x : 0.0;
            this[_marginEnd] = math.max(core.double, this[_marginEnd], ad === 0 ? dart.notNull(dart.nullCheck(last).x) / 2 : dart.notNull(ad) > 0 ? 0.0 : dart.nullCheck(last).x);
            this.crossAxisPosition = math.max(core.double, this.crossAxisPosition, minStart);
            this.axisPosition = math.max(core.double, this.axisPosition, maxHeight + dart.notNull(this[_textMargin]));
            this.box = new rect$.PdfRect.new(0.0, 0.0, size.x, this.axisPosition);
            break;
          }
          case C[80] || CT.C80:
          {
            this[_textMargin] = (t38$ = this.margin, t38$ == null ? 10.0 : t38$);
            this[_axisTick] == null ? this[_axisTick] = true : null;
            this[_marginEnd] = math.max(core.double, this[_marginEnd], ad === 0 ? dart.notNull(dart.nullCheck(last).x) / 2 : dart.notNull(ad) < 0 ? dart.nullCheck(last).x : 0.0);
            let minStart = ad === 0 ? dart.notNull(dart.nullCheck(first).y) / 2 : dart.notNull(ad) > 0 ? dart.nullCheck(first).x : 0.0;
            this.crossAxisPosition = math.max(core.double, this.crossAxisPosition, minStart);
            this.axisPosition = math.max(core.double, this.axisPosition, maxWidth + dart.notNull(this[_textMargin]));
            this.box = new rect$.PdfRect.new(0.0, 0.0, this.axisPosition, size.y);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      [_drawYValues](context) {
        let t38, t38$, t38$0, t38$1;
        if (context == null) dart.nullFailed(I[70], 287, 29, "context");
        t38 = context.canvas;
        (() => {
          t38.moveTo(this.axisPosition, dart.nullCheck(this.box).top);
          t38.lineTo(this.axisPosition, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.crossAxisPosition));
          return t38;
        })();
        if (dart.nullCheck(this[_axisTick]) && dart.notNull(this[_textMargin]) > 0) {
          t38$ = context.canvas;
          (() => {
            t38$.moveTo(this.axisPosition, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.crossAxisPosition));
            t38$.lineTo(dart.notNull(this.axisPosition) - dart.notNull(this[_textMargin]) / 2, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(this.crossAxisPosition));
            return t38$;
          })();
        }
        if (dart.test(this.ticks) && dart.notNull(this[_textMargin]) > 0) {
          for (let x of this.values) {
            let p = this.toChart(x);
            t38$0 = context.canvas;
            (() => {
              t38$0.moveTo(this.axisPosition, p);
              t38$0.lineTo(dart.notNull(this.axisPosition) - dart.notNull(this[_textMargin]) / 2, p);
              return t38$0;
            })();
          }
        }
        t38$1 = context.canvas;
        (() => {
          t38$1.setStrokeColor(this.color);
          t38$1.setLineWidth(this.width);
          t38$1.setLineJoin(graphics.PdfLineJoin.bevel);
          t38$1.strokePath();
          return t38$1;
        })();
        let ad = this[_angleDirection]();
        for (let y of this.values) {
          let p = this.toChart(y);
          widget$.Widget.draw(this[_text](y), {offset: new point$.PdfPoint.new(dart.notNull(this.axisPosition) - dart.notNull(this[_textMargin]), p), context: context, alignment: ad === 0 ? geometry.Alignment.centerRight : dart.notNull(ad) > 0 ? geometry.Alignment.topRight : geometry.Alignment.bottomRight});
        }
      }
      [_drawXValues](context) {
        let t38, t38$, t38$0, t38$1;
        if (context == null) dart.nullFailed(I[70], 330, 29, "context");
        t38 = context.canvas;
        (() => {
          t38.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.crossAxisPosition), this.axisPosition);
          t38.lineTo(dart.nullCheck(this.box).right, this.axisPosition);
          return t38;
        })();
        if (dart.nullCheck(this[_axisTick]) && dart.notNull(this[_textMargin]) > 0) {
          t38$ = context.canvas;
          (() => {
            t38$.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.crossAxisPosition), this.axisPosition);
            t38$.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(this.crossAxisPosition), dart.notNull(this.axisPosition) - dart.notNull(this[_textMargin]));
            return t38$;
          })();
        }
        if (dart.test(this.ticks) && dart.notNull(this[_textMargin]) > 0) {
          for (let x of this.values) {
            let p = this.toChart(x);
            t38$0 = context.canvas;
            (() => {
              t38$0.moveTo(p, this.axisPosition);
              t38$0.lineTo(p, dart.notNull(this.axisPosition) - dart.notNull(this[_textMargin]));
              return t38$0;
            })();
          }
        }
        t38$1 = context.canvas;
        (() => {
          t38$1.setStrokeColor(this.color);
          t38$1.setLineWidth(this.width);
          t38$1.setLineJoin(graphics.PdfLineJoin.bevel);
          t38$1.strokePath();
          return t38$1;
        })();
        let ad = this[_angleDirection]();
        for (let x of this.values) {
          let p = this.toChart(x);
          widget$.Widget.draw(this[_text](x), {offset: new point$.PdfPoint.new(p, dart.notNull(this.axisPosition) - dart.notNull(this[_textMargin])), context: context, alignment: ad === 0 ? geometry.Alignment.topCenter : dart.notNull(ad) > 0 ? geometry.Alignment.topRight : geometry.Alignment.topLeft});
        }
      }
      paintBackground(context) {
        let t38;
        if (context == null) dart.nullFailed(I[70], 373, 32, "context");
        if (!dart.test(this.divisions)) {
          return;
        }
        let grid = grid_cartesian.CartesianGrid.as(chart.Chart.of(context).grid);
        switch (this.direction) {
          case C[83] || CT.C83:
          {
            for (let x of this.values[$sublist](dart.notNull(this[_marginStart]) > 0 ? 0 : 1)) {
              let p = this.toChart(x);
              context.canvas.drawLine(p, grid.gridBox.top, p, grid.gridBox.bottom);
            }
            break;
          }
          case C[80] || CT.C80:
          {
            for (let y of this.values[$sublist](dart.notNull(this[_marginStart]) > 0 ? 0 : 1)) {
              let p = this.toChart(y);
              context.canvas.drawLine(grid.gridBox.left, p, grid.gridBox.right, p);
            }
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        if (dart.test(this.divisionsDashed)) {
          context.canvas.setLineDashPattern(T$.JSArrayOfint().of([4, 2]));
        }
        t38 = context.canvas;
        (() => {
          t38.setStrokeColor(this.divisionsColor);
          t38.setLineWidth(this.divisionsWidth);
          t38.setLineJoin(graphics.PdfLineJoin.miter);
          t38.strokePath();
          return t38;
        })();
        if (dart.test(this.divisionsDashed)) {
          context.canvas.setLineDashPattern();
        }
      }
      debugPaint(context) {
        let t38, t38$;
        if (context == null) dart.nullFailed(I[70], 413, 27, "context");
        switch (this.direction) {
          case C[83] || CT.C83:
          {
            t38 = context.canvas;
            (() => {
              t38.setFillColor(colors.PdfColors.grey300);
              t38.drawBox(dart.nullCheck(this.box));
              t38.fillPath();
              return t38;
            })();
            break;
          }
          case C[80] || CT.C80:
          {
            t38$ = context.canvas;
            (() => {
              t38$.setFillColor(colors.PdfColors.grey300);
              t38$.drawRect(dart.nullCheck(this.box).x, dart.notNull(dart.nullCheck(this.box).y) + dart.notNull(this.crossAxisPosition), dart.nullCheck(this.box).width, dart.notNull(dart.nullCheck(this.box).height) - dart.notNull(this.crossAxisPosition));
              t38$.fillPath();
              return t38$;
            })();
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      paint(context) {
        if (context == null) dart.nullFailed(I[70], 432, 22, "context");
        super.paint(context);
        switch (this.direction) {
          case C[83] || CT.C83:
          {
            this[_drawXValues](context);
            break;
          }
          case C[80] || CT.C80:
          {
            this[_drawYValues](context);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
    (FixedAxis.new = function(values, opts) {
      if (values == null) dart.nullFailed(I[70], 114, 10, "values");
      let format = opts && 'format' in opts ? opts.format : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let marginStart = opts && 'marginStart' in opts ? opts.marginStart : null;
      let marginEnd = opts && 'marginEnd' in opts ? opts.marginEnd : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let divisions = opts && 'divisions' in opts ? opts.divisions : null;
      let divisionsWidth = opts && 'divisionsWidth' in opts ? opts.divisionsWidth : null;
      let divisionsColor = opts && 'divisionsColor' in opts ? opts.divisionsColor : null;
      let divisionsDashed = opts && 'divisionsDashed' in opts ? opts.divisionsDashed : null;
      let ticks = opts && 'ticks' in opts ? opts.ticks : null;
      let axisTick = opts && 'axisTick' in opts ? opts.axisTick : null;
      let angle = opts && 'angle' in opts ? opts.angle : 0;
      if (angle == null) dart.nullFailed(I[70], 128, 12, "angle");
      let buildLabel = opts && 'buildLabel' in opts ? opts.buildLabel : null;
      this[values$] = values;
      if (!dart.test(grid_axis.FixedAxis._isSortedAscending(values))) dart.assertFailed(null, I[70], 130, 16, "_isSortedAscending(values)");
      FixedAxis.__proto__.new.call(this, {format: format, textStyle: textStyle, margin: margin, marginStart: marginStart, marginEnd: marginEnd, color: color, width: width, divisions: divisions, divisionsWidth: divisionsWidth, divisionsColor: divisionsColor, divisionsDashed: divisionsDashed, ticks: ticks, axisTick: axisTick, angle: angle, buildLabel: buildLabel});
      ;
    }).prototype = FixedAxis.prototype;
    dart.addTypeTests(FixedAxis);
    FixedAxis.prototype[_is_FixedAxis_default] = true;
    dart.addTypeCaches(FixedAxis);
    dart.setMethodSignature(FixedAxis, () => ({
      __proto__: dart.getMethods(FixedAxis.__proto__),
      toChart: dart.fnType(core.double, [dart.nullable(core.num)]),
      [_text]: dart.fnType(widget$.Widget, [core.num]),
      [_angleDirection]: dart.fnType(core.int, []),
      layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
      [_drawYValues]: dart.fnType(dart.void, [widget$.Context]),
      [_drawXValues]: dart.fnType(dart.void, [widget$.Context]),
      paintBackground: dart.fnType(dart.void, [widget$.Context])
    }));
    dart.setLibraryUri(FixedAxis, I[71]);
    dart.setFieldSignature(FixedAxis, () => ({
      __proto__: dart.getFields(FixedAxis.__proto__),
      values: dart.finalFieldType(core.List$(T))
    }));
    return FixedAxis;
  });
  grid_axis.FixedAxis = grid_axis.FixedAxis$();
  dart.addTypeTests(grid_axis.FixedAxis, _is_FixedAxis_default);
  var __CartesianGrid_gridBox = dart.privateName(grid_cartesian, "_#CartesianGrid#gridBox");
  var __CartesianGrid_gridBox_isSet = dart.privateName(grid_cartesian, "_#CartesianGrid#gridBox#isSet");
  var _xAxis = dart.privateName(grid_cartesian, "_xAxis");
  var _yAxis = dart.privateName(grid_cartesian, "_yAxis");
  grid_cartesian.CartesianGrid = class CartesianGrid extends chart.ChartGrid {
    get gridBox() {
      let t38;
      return dart.test(this[__CartesianGrid_gridBox_isSet]) ? (t38 = this[__CartesianGrid_gridBox], t38) : dart.throw(new _internal.LateError.fieldNI("gridBox"));
    }
    set gridBox(t38) {
      if (t38 == null) dart.nullFailed(I[72], 37, 16, "null");
      this[__CartesianGrid_gridBox_isSet] = true;
      this[__CartesianGrid_gridBox] = t38;
    }
    layout(context, constraints, opts) {
      let t39;
      if (context == null) dart.nullFailed(I[72], 40, 23, "context");
      if (constraints == null) dart.nullFailed(I[72], 40, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[72], 41, 13, "parentUsesSize");
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      let datasets = chart.Chart.of(context).datasets;
      let size = constraints.biggest;
      let count = 5;
      while ((t39 = count, count = t39 - 1, t39) > 0) {
        this[_xAxis].crossAxisPosition = this[_yAxis].axisPosition;
        this[_xAxis].axisPosition = math.max(core.double, this[_xAxis].axisPosition, this[_yAxis].crossAxisPosition);
        this[_xAxis].layout(context, constraints);
        if (!(this[_xAxis].box != null)) dart.assertFailed(null, I[72], 54, 14, "_xAxis.box != null");
        this[_yAxis].crossAxisPosition = this[_xAxis].axisPosition;
        this[_yAxis].axisPosition = math.max(core.double, this[_yAxis].axisPosition, this[_xAxis].crossAxisPosition);
        this[_yAxis].layout(context, constraints);
        if (!(this[_yAxis].box != null)) dart.assertFailed(null, I[72], 59, 14, "_yAxis.box != null");
        if (this[_yAxis].crossAxisPosition == this[_xAxis].axisPosition && this[_xAxis].crossAxisPosition == this[_yAxis].axisPosition) {
          break;
        }
      }
      let width = this[_yAxis].axisPosition;
      let height = this[_xAxis].axisPosition;
      this.gridBox = new rect$.PdfRect.new(width, height, dart.notNull(size.x) - dart.notNull(width), dart.notNull(size.y) - dart.notNull(height));
      for (let dataset of datasets) {
        dataset.layout(context, new geometry.BoxConstraints.tight(this.gridBox.size));
        dataset.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(width, height), dart.nullCheck(dataset.box).size);
      }
    }
    toChart(p) {
      if (p == null) dart.nullFailed(I[72], 78, 29, "p");
      return new point$.PdfPoint.new(this[_xAxis].toChart(p.x), this[_yAxis].toChart(p.y));
    }
    get xAxisOffset() {
      return this[_xAxis].axisPosition;
    }
    get yAxisOffset() {
      return this[_yAxis].axisPosition;
    }
    paintBackground(context) {
      if (context == null) dart.nullFailed(I[72], 89, 32, "context");
      this[_xAxis].paintBackground(context);
      this[_yAxis].paintBackground(context);
    }
    clip(context, size) {
      let t39;
      if (context == null) dart.nullFailed(I[72], 94, 21, "context");
      if (size == null) dart.nullFailed(I[72], 94, 39, "size");
      t39 = context.canvas;
      (() => {
        t39.saveContext();
        t39.drawBox(this.gridBox);
        t39.clipPath();
        return t39;
      })();
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[72], 102, 22, "context");
      super.paint(context);
      let datasets = chart.Chart.of(context).datasets;
      this.clip(context, dart.nullCheck(this.box).size);
      for (let dataSet of datasets) {
        dataSet.paintBackground(context);
      }
      context.canvas.restoreContext();
      this.paintBackground(context);
      this.clip(context, dart.nullCheck(this.box).size);
      for (let dataSet of datasets) {
        dataSet.paint(context);
      }
      context.canvas.restoreContext();
      this[_xAxis].paint(context);
      this[_yAxis].paint(context);
    }
  };
  (grid_cartesian.CartesianGrid.new = function(opts) {
    let t38, t38$;
    let xAxis = opts && 'xAxis' in opts ? opts.xAxis : null;
    if (xAxis == null) dart.nullFailed(I[72], 29, 23, "xAxis");
    let yAxis = opts && 'yAxis' in opts ? opts.yAxis : null;
    if (yAxis == null) dart.nullFailed(I[72], 30, 23, "yAxis");
    this[__CartesianGrid_gridBox] = null;
    this[__CartesianGrid_gridBox_isSet] = false;
    this[_xAxis] = (t38 = xAxis, (() => {
      t38.direction = flex$.Axis.horizontal;
      return t38;
    })());
    this[_yAxis] = (t38$ = yAxis, (() => {
      t38$.direction = flex$.Axis.vertical;
      return t38$;
    })());
    grid_cartesian.CartesianGrid.__proto__.new.call(this);
    ;
  }).prototype = grid_cartesian.CartesianGrid.prototype;
  dart.addTypeTests(grid_cartesian.CartesianGrid);
  dart.addTypeCaches(grid_cartesian.CartesianGrid);
  dart.setMethodSignature(grid_cartesian.CartesianGrid, () => ({
    __proto__: dart.getMethods(grid_cartesian.CartesianGrid.__proto__),
    toChart: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    paintBackground: dart.fnType(dart.void, [widget$.Context]),
    clip: dart.fnType(dart.void, [widget$.Context, point$.PdfPoint])
  }));
  dart.setGetterSignature(grid_cartesian.CartesianGrid, () => ({
    __proto__: dart.getGetters(grid_cartesian.CartesianGrid.__proto__),
    gridBox: rect$.PdfRect,
    xAxisOffset: core.double,
    yAxisOffset: core.double
  }));
  dart.setSetterSignature(grid_cartesian.CartesianGrid, () => ({
    __proto__: dart.getSetters(grid_cartesian.CartesianGrid.__proto__),
    gridBox: rect$.PdfRect
  }));
  dart.setLibraryUri(grid_cartesian.CartesianGrid, I[73]);
  dart.setFieldSignature(grid_cartesian.CartesianGrid, () => ({
    __proto__: dart.getFields(grid_cartesian.CartesianGrid.__proto__),
    [_xAxis]: dart.finalFieldType(grid_axis.GridAxis),
    [_yAxis]: dart.finalFieldType(grid_axis.GridAxis),
    [__CartesianGrid_gridBox]: dart.fieldType(dart.nullable(rect$.PdfRect)),
    [__CartesianGrid_gridBox_isSet]: dart.fieldType(core.bool)
  }));
  var _name$12 = dart.privateName(stack, "_name");
  stack.StackFit = class StackFit extends core.Object {
    toString() {
      return this[_name$12];
    }
  };
  (stack.StackFit.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[74], 27, 6, "index");
    if (_name == null) dart.nullFailed(I[74], 27, 6, "_name");
    this.index = index;
    this[_name$12] = _name;
    ;
  }).prototype = stack.StackFit.prototype;
  dart.addTypeTests(stack.StackFit);
  dart.addTypeCaches(stack.StackFit);
  dart.setLibraryUri(stack.StackFit, I[75]);
  dart.setFieldSignature(stack.StackFit, () => ({
    __proto__: dart.getFields(stack.StackFit.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$12]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(stack.StackFit, ['toString']);
  stack.StackFit.loose = C[139] || CT.C139;
  stack.StackFit.expand = C[140] || CT.C140;
  stack.StackFit.passthrough = C[141] || CT.C141;
  stack.StackFit.values = C[142] || CT.C142;
  stack.Overflow = class Overflow extends core.Object {
    toString() {
      return this[_name$12];
    }
  };
  (stack.Overflow.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[74], 31, 6, "index");
    if (_name == null) dart.nullFailed(I[74], 31, 6, "_name");
    this.index = index;
    this[_name$12] = _name;
    ;
  }).prototype = stack.Overflow.prototype;
  dart.addTypeTests(stack.Overflow);
  dart.addTypeCaches(stack.Overflow);
  dart.setLibraryUri(stack.Overflow, I[75]);
  dart.setFieldSignature(stack.Overflow, () => ({
    __proto__: dart.getFields(stack.Overflow.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$12]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(stack.Overflow, ['toString']);
  stack.Overflow.visible = C[143] || CT.C143;
  stack.Overflow.clip = C[144] || CT.C144;
  stack.Overflow.values = C[145] || CT.C145;
  var left$0 = dart.privateName(stack, "Positioned.left");
  var top$0 = dart.privateName(stack, "Positioned.top");
  var right$0 = dart.privateName(stack, "Positioned.right");
  var bottom$0 = dart.privateName(stack, "Positioned.bottom");
  stack.Positioned = class Positioned extends widget$.SingleChildWidget {
    get left() {
      return this[left$0];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$0];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$0];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$0];
    }
    set bottom(value) {
      super.bottom = value;
    }
    static directional(opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (textDirection == null) dart.nullFailed(I[74], 55, 28, "textDirection");
      let start = opts && 'start' in opts ? opts.start : null;
      let top = opts && 'top' in opts ? opts.top : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (child == null) dart.nullFailed(I[74], 60, 21, "child");
      let left = null;
      let right = null;
      switch (textDirection) {
        case C[146] || CT.C146:
        {
          left = end;
          right = start;
          break;
        }
        case C[147] || CT.C147:
        {
          left = start;
          right = end;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      return new stack.Positioned.new({left: left, top: top, right: right, bottom: bottom, child: child});
    }
    get width() {
      let t39;
      t39 = this.box;
      return t39 == null ? null : t39.width;
    }
    get height() {
      let t39;
      t39 = this.box;
      return t39 == null ? null : t39.height;
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[74], 96, 22, "context");
      super.paint(context);
      this.paintChild(context);
    }
  };
  (stack.Positioned.new = function(opts) {
    let left = opts && 'left' in opts ? opts.left : null;
    let top = opts && 'top' in opts ? opts.top : null;
    let right = opts && 'right' in opts ? opts.right : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[74], 40, 21, "child");
    this[left$0] = left;
    this[top$0] = top;
    this[right$0] = right;
    this[bottom$0] = bottom;
    stack.Positioned.__proto__.new.call(this, {child: child});
    ;
  }).prototype = stack.Positioned.prototype;
  (stack.Positioned.fill = function(opts) {
    let left = opts && 'left' in opts ? opts.left : 0;
    let top = opts && 'top' in opts ? opts.top : 0;
    let right = opts && 'right' in opts ? opts.right : 0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[74], 50, 21, "child");
    this[left$0] = left;
    this[top$0] = top;
    this[right$0] = right;
    this[bottom$0] = bottom;
    stack.Positioned.__proto__.new.call(this, {child: child});
    ;
  }).prototype = stack.Positioned.prototype;
  dart.addTypeTests(stack.Positioned);
  dart.addTypeCaches(stack.Positioned);
  dart.setGetterSignature(stack.Positioned, () => ({
    __proto__: dart.getGetters(stack.Positioned.__proto__),
    width: dart.nullable(core.double),
    height: dart.nullable(core.double)
  }));
  dart.setLibraryUri(stack.Positioned, I[75]);
  dart.setFieldSignature(stack.Positioned, () => ({
    __proto__: dart.getFields(stack.Positioned.__proto__),
    left: dart.finalFieldType(dart.nullable(core.double)),
    top: dart.finalFieldType(dart.nullable(core.double)),
    right: dart.finalFieldType(dart.nullable(core.double)),
    bottom: dart.finalFieldType(dart.nullable(core.double))
  }));
  var alignment$3 = dart.privateName(stack, "Stack.alignment");
  var fit$6 = dart.privateName(stack, "Stack.fit");
  var overflow$ = dart.privateName(stack, "Stack.overflow");
  stack.Stack = class Stack extends widget$.MultiChildWidget {
    get alignment() {
      return this[alignment$3];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get fit() {
      return this[fit$6];
    }
    set fit(value) {
      super.fit = value;
    }
    get overflow() {
      return this[overflow$];
    }
    set overflow(value) {
      super.overflow = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[74], 122, 23, "context");
      if (constraints == null) dart.nullFailed(I[74], 122, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[74], 123, 13, "parentUsesSize");
      let childCount = this.children[$length];
      let hasNonPositionedChildren = false;
      if (childCount === 0) {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
        return;
      }
      let width = constraints.minWidth;
      let height = constraints.minHeight;
      let nonPositionedConstraints = null;
      switch (this.fit) {
        case C[139] || CT.C139:
        {
          nonPositionedConstraints = constraints.loosen();
          break;
        }
        case C[140] || CT.C140:
        {
          nonPositionedConstraints = new geometry.BoxConstraints.tight(constraints.biggest);
          break;
        }
        case C[141] || CT.C141:
        {
          nonPositionedConstraints = constraints;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      for (let child of this.children) {
        if (!stack.Positioned.is(child)) {
          hasNonPositionedChildren = true;
          child.layout(context, nonPositionedConstraints, {parentUsesSize: true});
          if (!(child.box != null)) dart.assertFailed(null, I[74], 155, 16, "child.box != null");
          let childSize = dart.nullCheck(child.box);
          width = math.max(core.double, width, childSize.width);
          height = math.max(core.double, height, childSize.height);
        }
      }
      if (hasNonPositionedChildren) {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, new point$.PdfPoint.new(width, height));
        if (!(dart.nullCheck(this.box).width == constraints.constrainWidth(width))) dart.assertFailed(null, I[74], 165, 14, "box!.width == constraints.constrainWidth(width)");
        if (!(dart.nullCheck(this.box).height == constraints.constrainHeight(height))) dart.assertFailed(null, I[74], 166, 14, "box!.height == constraints.constrainHeight(height)");
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
      }
      for (let child of this.children) {
        if (!stack.Positioned.is(child)) {
          child.box = rect$.PdfRect.fromPoints(this.alignment.inscribe(dart.nullCheck(child.box).size, dart.nullCheck(this.box)).offset, dart.nullCheck(child.box).size);
        } else {
          let positioned = child;
          let childConstraints = C[14] || CT.C14;
          if (positioned.left != null && positioned.right != null) {
            childConstraints = childConstraints.tighten({width: dart.notNull(dart.nullCheck(this.box).width) - dart.nullCheck(positioned.right) - dart.nullCheck(positioned.left)});
          } else if (positioned.width != null) {
            childConstraints = childConstraints.tighten({width: positioned.width});
          }
          if (positioned.top != null && positioned.bottom != null) {
            childConstraints = childConstraints.tighten({height: dart.notNull(dart.nullCheck(this.box).height) - dart.nullCheck(positioned.bottom) - dart.nullCheck(positioned.top)});
          } else if (positioned.height != null) {
            childConstraints = childConstraints.tighten({height: positioned.height});
          }
          positioned.layout(context, childConstraints, {parentUsesSize: true});
          if (!(positioned.box != null)) dart.assertFailed(null, I[74], 195, 16, "positioned.box != null");
          let x = null;
          if (positioned.left != null) {
            x = positioned.left;
          } else if (positioned.right != null) {
            x = dart.notNull(dart.nullCheck(this.box).width) - dart.nullCheck(positioned.right) - dart.nullCheck(positioned.width);
          } else {
            x = this.alignment.inscribe(dart.nullCheck(positioned.box).size, dart.nullCheck(this.box)).x;
          }
          let y = null;
          if (positioned.bottom != null) {
            y = positioned.bottom;
          } else if (positioned.top != null) {
            y = dart.notNull(dart.nullCheck(this.box).height) - dart.nullCheck(positioned.top) - dart.nullCheck(positioned.height);
          } else {
            y = this.alignment.inscribe(dart.nullCheck(positioned.box).size, dart.nullCheck(this.box)).y;
          }
          positioned.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(dart.nullCheck(x), dart.nullCheck(y)), dart.nullCheck(positioned.box).size);
        }
      }
    }
    paint(context) {
      let t39, t39$;
      if (context == null) dart.nullFailed(I[74], 222, 22, "context");
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t39 = context.canvas;
      (() => {
        t39.saveContext();
        t39.setTransform(mat);
        return t39;
      })();
      if (this.overflow == stack.Overflow.clip) {
        t39$ = context.canvas;
        (() => {
          t39$.drawRect(0.0, 0.0, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height);
          t39$.clipPath();
          return t39$;
        })();
      }
      for (let child of this.children) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
  };
  (stack.Stack.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[18] || CT.C18;
    if (alignment == null) dart.nullFailed(I[74], 105, 10, "alignment");
    let fit = opts && 'fit' in opts ? opts.fit : C[139] || CT.C139;
    if (fit == null) dart.nullFailed(I[74], 106, 10, "fit");
    let overflow = opts && 'overflow' in opts ? opts.overflow : C[144] || CT.C144;
    if (overflow == null) dart.nullFailed(I[74], 107, 10, "overflow");
    let children = opts && 'children' in opts ? opts.children : C[82] || CT.C82;
    if (children == null) dart.nullFailed(I[74], 108, 18, "children");
    this[alignment$3] = alignment;
    this[fit$6] = fit;
    this[overflow$] = overflow;
    stack.Stack.__proto__.new.call(this, {children: children});
    ;
  }).prototype = stack.Stack.prototype;
  dart.addTypeTests(stack.Stack);
  dart.addTypeCaches(stack.Stack);
  dart.setMethodSignature(stack.Stack, () => ({
    __proto__: dart.getMethods(stack.Stack.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(stack.Stack, I[75]);
  dart.setFieldSignature(stack.Stack, () => ({
    __proto__: dart.getFields(stack.Stack.__proto__),
    alignment: dart.finalFieldType(geometry.Alignment),
    fit: dart.finalFieldType(stack.StackFit),
    overflow: dart.finalFieldType(stack.Overflow)
  }));
  var grid$ = dart.privateName(chart, "Chart.grid");
  var datasets$ = dart.privateName(chart, "Chart.datasets");
  var overlay$ = dart.privateName(chart, "Chart.overlay");
  var title$1 = dart.privateName(chart, "Chart.title");
  var bottom$1 = dart.privateName(chart, "Chart.bottom");
  var left$1 = dart.privateName(chart, "Chart.left");
  var right$1 = dart.privateName(chart, "Chart.right");
  var _context$2 = dart.privateName(chart, "_context");
  var __Chart__child = dart.privateName(chart, "_#Chart#_child");
  var __Chart__child_isSet = dart.privateName(chart, "_#Chart#_child#isSet");
  var _child$ = dart.privateName(chart, "_child");
  var _computeSize = dart.privateName(chart, "_computeSize");
  var _build = dart.privateName(chart, "_build");
  chart.Chart = class Chart extends widget$.Widget {
    get grid() {
      return this[grid$];
    }
    set grid(value) {
      super.grid = value;
    }
    get datasets() {
      return this[datasets$];
    }
    set datasets(value) {
      super.datasets = value;
    }
    get overlay() {
      return this[overlay$];
    }
    set overlay(value) {
      super.overlay = value;
    }
    get title() {
      return this[title$1];
    }
    set title(value) {
      super.title = value;
    }
    get bottom() {
      return this[bottom$1];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get left() {
      return this[left$1];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$1];
    }
    set right(value) {
      super.right = value;
    }
    get [_child$]() {
      let t39;
      return dart.test(this[__Chart__child_isSet]) ? (t39 = this[__Chart__child], t39) : dart.throw(new _internal.LateError.fieldNI("_child"));
    }
    set [_child$](t39) {
      if (t39 == null) dart.nullFailed(I[59], 60, 15, "null");
      this[__Chart__child_isSet] = true;
      this[__Chart__child] = t39;
    }
    static of(context) {
      if (context == null) dart.nullFailed(I[59], 62, 27, "context");
      return dart.nullCheck(context.dependsOn(chart.Chart));
    }
    [_computeSize](constraints) {
      if (constraints == null) dart.nullFailed(I[59], 64, 40, "constraints");
      if (dart.test(constraints.isTight)) {
        return constraints.smallest;
      }
      let width = constraints.maxWidth;
      let height = constraints.maxHeight;
      if (!width[$isFinite]) {
        width = dart.notNull(height) * 1;
      }
      if (!height[$isFinite]) {
        height = dart.notNull(width) * 1;
      }
      return constraints.constrain(new point$.PdfPoint.new(width, height));
    }
    [_build](context) {
      if (context == null) dart.nullFailed(I[59], 85, 25, "context");
      return new flex$.Column.new({children: (() => {
          let t40 = T$.JSArrayOfWidget().of([]);
          if (this.title != null) t40[$add](dart.nullCheck(this.title));
          t40[$add](new flex$.Expanded.new({child: new flex$.Row.new({children: (() => {
                let t41 = T$.JSArrayOfWidget().of([]);
                if (this.left != null) t41[$add](dart.nullCheck(this.left));
                t41[$add](new flex$.Expanded.new({child: new stack.Stack.new({overflow: stack.Overflow.visible, children: (() => {
                      let t42 = T$.JSArrayOfWidget().of([this.grid]);
                      if (this.overlay != null) t42[$add](dart.nullCheck(this.overlay));
                      return t42;
                    })()})}));
                if (this.right != null) t41[$add](dart.nullCheck(this.right));
                return t41;
              })()})}));
          if (this.bottom != null) t40[$add](dart.nullCheck(this.bottom));
          return t40;
        })()});
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[59], 112, 23, "context");
      if (constraints == null) dart.nullFailed(I[59], 112, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[59], 113, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, this[_computeSize](constraints));
      this[_context$2] = context.inheritFrom(this);
      this[_child$] = this[_build](dart.nullCheck(this[_context$2]));
      this[_child$].layout(dart.nullCheck(this[_context$2]), new geometry.BoxConstraints.tight(dart.nullCheck(this.box).size));
    }
    paint(context) {
      let t43;
      if (context == null) dart.nullFailed(I[59], 121, 22, "context");
      super.paint(dart.nullCheck(this[_context$2]));
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t43 = dart.nullCheck(this[_context$2]).canvas;
      (() => {
        t43.saveContext();
        t43.setTransform(mat);
        return t43;
      })();
      this[_child$].paint(dart.nullCheck(this[_context$2]));
      dart.nullCheck(this[_context$2]).canvas.restoreContext();
    }
  };
  (chart.Chart.new = function(opts) {
    let grid = opts && 'grid' in opts ? opts.grid : null;
    if (grid == null) dart.nullFailed(I[59], 32, 19, "grid");
    let datasets = opts && 'datasets' in opts ? opts.datasets : null;
    if (datasets == null) dart.nullFailed(I[59], 33, 19, "datasets");
    let overlay = opts && 'overlay' in opts ? opts.overlay : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    let left = opts && 'left' in opts ? opts.left : null;
    let right = opts && 'right' in opts ? opts.right : null;
    this[_context$2] = null;
    this[__Chart__child] = null;
    this[__Chart__child_isSet] = false;
    this[grid$] = grid;
    this[datasets$] = datasets;
    this[overlay$] = overlay;
    this[title$1] = title;
    this[bottom$1] = bottom;
    this[left$1] = left;
    this[right$1] = right;
    chart.Chart.__proto__.new.call(this);
    ;
  }).prototype = chart.Chart.prototype;
  dart.addTypeTests(chart.Chart);
  dart.addTypeCaches(chart.Chart);
  chart.Chart[dart.implements] = () => [widget$.Inherited];
  dart.setMethodSignature(chart.Chart, () => ({
    __proto__: dart.getMethods(chart.Chart.__proto__),
    [_computeSize]: dart.fnType(point$.PdfPoint, [geometry.BoxConstraints]),
    [_build]: dart.fnType(widget$.Widget, [widget$.Context]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setGetterSignature(chart.Chart, () => ({
    __proto__: dart.getGetters(chart.Chart.__proto__),
    [_child$]: widget$.Widget
  }));
  dart.setSetterSignature(chart.Chart, () => ({
    __proto__: dart.getSetters(chart.Chart.__proto__),
    [_child$]: widget$.Widget
  }));
  dart.setLibraryUri(chart.Chart, I[60]);
  dart.setFieldSignature(chart.Chart, () => ({
    __proto__: dart.getFields(chart.Chart.__proto__),
    grid: dart.finalFieldType(chart.ChartGrid),
    datasets: dart.finalFieldType(core.List$(chart.Dataset)),
    overlay: dart.finalFieldType(dart.nullable(widget$.Widget)),
    title: dart.finalFieldType(dart.nullable(widget$.Widget)),
    bottom: dart.finalFieldType(dart.nullable(widget$.Widget)),
    left: dart.finalFieldType(dart.nullable(widget$.Widget)),
    right: dart.finalFieldType(dart.nullable(widget$.Widget)),
    [_context$2]: dart.fieldType(dart.nullable(widget$.Context)),
    [__Chart__child]: dart.fieldType(dart.nullable(widget$.Widget)),
    [__Chart__child_isSet]: dart.fieldType(core.bool)
  }));
  var data$0 = dart.privateName(bar_chart, "BarDataSet.data");
  var drawBorder$0 = dart.privateName(bar_chart, "BarDataSet.drawBorder");
  var borderColor$0 = dart.privateName(bar_chart, "BarDataSet.borderColor");
  var borderWidth$0 = dart.privateName(bar_chart, "BarDataSet.borderWidth");
  var drawSurface$1 = dart.privateName(bar_chart, "BarDataSet.drawSurface");
  var surfaceOpacity$1 = dart.privateName(bar_chart, "BarDataSet.surfaceOpacity");
  var width$9 = dart.privateName(bar_chart, "BarDataSet.width");
  var offset$0 = dart.privateName(bar_chart, "BarDataSet.offset");
  var axis$ = dart.privateName(bar_chart, "BarDataSet.axis");
  var _drawSurface$ = dart.privateName(bar_chart, "_drawSurface");
  bar_chart.BarDataSet = class BarDataSet extends chart.Dataset {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    get drawBorder() {
      return this[drawBorder$0];
    }
    set drawBorder(value) {
      super.drawBorder = value;
    }
    get borderColor() {
      return this[borderColor$0];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get borderWidth() {
      return this[borderWidth$0];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get drawSurface() {
      return this[drawSurface$1];
    }
    set drawSurface(value) {
      super.drawSurface = value;
    }
    get surfaceOpacity() {
      return this[surfaceOpacity$1];
    }
    set surfaceOpacity(value) {
      super.surfaceOpacity = value;
    }
    get width() {
      return this[width$9];
    }
    set width(value) {
      super.width = value;
    }
    get offset() {
      return this[offset$0];
    }
    set offset(value) {
      super.offset = value;
    }
    get axis() {
      return this[axis$];
    }
    set axis(value) {
      super.axis = value;
    }
    [_drawSurface$](context, grid, value) {
      if (context == null) dart.nullFailed(I[76], 62, 29, "context");
      if (grid == null) dart.nullFailed(I[76], 62, 48, "grid");
      if (value == null) dart.nullFailed(I[76], 62, 69, "value");
      switch (this.axis) {
        case C[83] || CT.C83:
        {
          let y = grid_cartesian.CartesianGrid.is(grid) ? grid.xAxisOffset : 0.0;
          let p = grid.toChart(value.point);
          let x = dart.notNull(p.x) + dart.notNull(this.offset) - dart.notNull(this.width) / 2;
          let height = dart.notNull(p.y) - dart.notNull(y);
          context.canvas.drawRect(x, y, this.width, height);
          break;
        }
        case C[80] || CT.C80:
        {
          let x = grid_cartesian.CartesianGrid.is(grid) ? grid.yAxisOffset : 0.0;
          let p = grid.toChart(value.point);
          let y = dart.notNull(p.y) + dart.notNull(this.offset) - dart.notNull(this.width) / 2;
          let height = dart.notNull(p.x) - dart.notNull(x);
          context.canvas.drawRect(x, y, height, this.width);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[76], 84, 23, "context");
      if (constraints == null) dart.nullFailed(I[76], 84, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[76], 85, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      let t43, t43$, t44, t43$0;
      if (context == null) dart.nullFailed(I[76], 90, 22, "context");
      super.paint(context);
      if (dart.test(this.data[$isEmpty])) {
        return;
      }
      let grid = chart.Chart.of(context).grid;
      if (dart.test(this.drawSurface)) {
        for (let value of this.data) {
          this[_drawSurface$](context, grid, value);
        }
        if (this.surfaceOpacity !== 1) {
          t43 = context.canvas;
          (() => {
            t43.saveContext();
            t43.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.surfaceOpacity}));
            return t43;
          })();
        }
        t43$ = context.canvas;
        (() => {
          t43$.setFillColor(this.color);
          t43$.fillPath();
          return t43$;
        })();
        if (this.surfaceOpacity !== 1) {
          context.canvas.restoreContext();
        }
      }
      if (dart.test(this.drawBorder)) {
        for (let value of this.data) {
          this[_drawSurface$](context, grid, value);
        }
        t43$0 = context.canvas;
        (() => {
          t43$0.setStrokeColor((t44 = this.borderColor, t44 == null ? this.color : t44));
          t43$0.setLineWidth(this.borderWidth);
          t43$0.strokePath();
          return t43$0;
        })();
      }
    }
  };
  (bar_chart.BarDataSet.new = function(opts) {
    let t43, t43$;
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[76], 28, 19, "data");
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1.5;
    if (borderWidth == null) dart.nullFailed(I[76], 31, 10, "borderWidth");
    let color = opts && 'color' in opts ? opts.color : C[94] || CT.C94;
    if (color == null) dart.nullFailed(I[76], 32, 14, "color");
    let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : null;
    let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : true;
    if (drawSurface == null) dart.nullFailed(I[76], 34, 10, "drawSurface");
    let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 1;
    if (surfaceOpacity == null) dart.nullFailed(I[76], 35, 10, "surfaceOpacity");
    let width = opts && 'width' in opts ? opts.width : 10;
    if (width == null) dart.nullFailed(I[76], 36, 10, "width");
    let offset = opts && 'offset' in opts ? opts.offset : 0;
    if (offset == null) dart.nullFailed(I[76], 37, 10, "offset");
    let axis = opts && 'axis' in opts ? opts.axis : C[83] || CT.C83;
    if (axis == null) dart.nullFailed(I[76], 38, 10, "axis");
    this[data$0] = data;
    this[borderColor$0] = borderColor;
    this[borderWidth$0] = borderWidth;
    this[drawSurface$1] = drawSurface;
    this[surfaceOpacity$1] = surfaceOpacity;
    this[width$9] = width;
    this[offset$0] = offset;
    this[axis$] = axis;
    this[drawBorder$0] = (t43 = drawBorder, t43 == null ? borderColor != null && !dart.equals(color, borderColor) : t43);
    if (!(dart.test((t43$ = drawBorder, t43$ == null ? borderColor != null && !dart.equals(color, borderColor) : t43$)) || dart.test(drawSurface))) dart.assertFailed(null, I[76], 40, 16, "(drawBorder ?? borderColor != null && color != borderColor) ||\n            drawSurface");
    bar_chart.BarDataSet.__proto__.new.call(this, {legend: legend, color: color});
    ;
  }).prototype = bar_chart.BarDataSet.prototype;
  dart.addTypeTests(bar_chart.BarDataSet);
  dart.addTypeCaches(bar_chart.BarDataSet);
  dart.setMethodSignature(bar_chart.BarDataSet, () => ({
    __proto__: dart.getMethods(bar_chart.BarDataSet.__proto__),
    [_drawSurface$]: dart.fnType(dart.void, [widget$.Context, chart.ChartGrid, line_chart.LineChartValue]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(bar_chart.BarDataSet, I[77]);
  dart.setFieldSignature(bar_chart.BarDataSet, () => ({
    __proto__: dart.getFields(bar_chart.BarDataSet.__proto__),
    data: dart.finalFieldType(core.List$(line_chart.LineChartValue)),
    drawBorder: dart.finalFieldType(core.bool),
    borderColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    borderWidth: dart.finalFieldType(core.double),
    drawSurface: dart.finalFieldType(core.bool),
    surfaceOpacity: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    offset: dart.finalFieldType(core.double),
    axis: dart.finalFieldType(flex$.Axis)
  }));
  var _name$13 = dart.privateName(barcode_operations, "_name");
  barcode$._BarcodeWidget = class _BarcodeWidget extends widget$.Widget {
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[78], 56, 23, "context");
      if (constraints == null) dart.nullFailed(I[78], 56, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[78], 57, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      let t43, t43$;
      if (context == null) dart.nullFailed(I[78], 62, 22, "context");
      super.paint(context);
      let textList = T$.JSArrayOfBarcodeText().of([]);
      for (let element of dart.nullCheck(this.barcode).makeBytes(this.data, {width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height, drawText: dart.nullCheck(this.drawText), fontHeight: dart.nullCheck(dart.nullCheck(this.textStyle).fontSize), textPadding: dart.nullCheck(this.textPadding)})) {
        if (barcode_operations.BarcodeBar.is(element)) {
          if (dart.test(element.black)) {
            context.canvas.drawRect(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(element.left), dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(element.top) - dart.notNull(element.height), element.width, element.height);
          }
        } else if (barcode_operations.BarcodeText.is(element)) {
          textList[$add](element);
        }
      }
      t43 = context.canvas;
      (() => {
        t43.setFillColor(this.color);
        t43.fillPath();
        return t43;
      })();
      if (dart.nullCheck(this.drawText)) {
        let font = dart.nullCheck(dart.nullCheck(this.textStyle).font).getFont(context);
        for (let text of textList) {
          let metrics = dart.nullCheck(font).stringMetrics(text.text);
          let top = dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(text.top) - dart.notNull(metrics.descent) * dart.nullCheck(dart.nullCheck(this.textStyle).fontSize) - dart.notNull(text.height);
          let left = null;
          switch (text.align) {
            case C[148] || CT.C148:
            {
              left = dart.notNull(text.left) + dart.notNull(dart.nullCheck(this.box).left);
              break;
            }
            case C[149] || CT.C149:
            {
              left = dart.notNull(text.left) + dart.notNull(dart.nullCheck(this.box).left) + (dart.notNull(text.width) - dart.notNull(metrics.width) * dart.notNull(text.height)) / 2;
              break;
            }
            case C[150] || CT.C150:
            {
              left = dart.notNull(text.left) + dart.notNull(dart.nullCheck(this.box).left) + (dart.notNull(text.width) - dart.notNull(metrics.width) * dart.notNull(text.height));
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
          t43$ = context.canvas;
          (() => {
            t43$.setFillColor(dart.nullCheck(this.textStyle).color);
            t43$.drawString(font, text.height, text.text, left, top);
            return t43$;
          })();
        }
      }
    }
    debugPaint(context) {
      let t43;
      if (context == null) dart.nullFailed(I[78], 135, 27, "context");
      super.debugPaint(context);
      if (dart.nullCheck(this.drawText)) {
        for (let element of dart.nullCheck(this.barcode).makeBytes(this.data, {width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height, drawText: dart.nullCheck(this.drawText), fontHeight: dart.nullCheck(dart.nullCheck(this.textStyle).fontSize), textPadding: dart.nullCheck(this.textPadding)})) {
          if (barcode_operations.BarcodeText.is(element)) {
            context.canvas.drawRect(dart.notNull(dart.nullCheck(this.box).x) + dart.notNull(element.left), dart.notNull(dart.nullCheck(this.box).y) + dart.notNull(dart.nullCheck(this.box).height) - dart.notNull(element.top) - dart.notNull(element.height), element.width, element.height);
          }
        }
        t43 = context.canvas;
        (() => {
          t43.setStrokeColor(colors.PdfColors.blue);
          t43.setLineWidth(1.0);
          t43.strokePath();
          return t43;
        })();
      }
    }
  };
  (barcode$._BarcodeWidget.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[78], 34, 19, "data");
    let barcode = opts && 'barcode' in opts ? opts.barcode : null;
    let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
    if (color == null) dart.nullFailed(I[78], 36, 10, "color");
    let drawText = opts && 'drawText' in opts ? opts.drawText : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
    this.data = data;
    this.barcode = barcode;
    this.color = color;
    this.drawText = drawText;
    this.textStyle = textStyle;
    this.textPadding = textPadding;
    barcode$._BarcodeWidget.__proto__.new.call(this);
    ;
  }).prototype = barcode$._BarcodeWidget.prototype;
  dart.addTypeTests(barcode$._BarcodeWidget);
  dart.addTypeCaches(barcode$._BarcodeWidget);
  dart.setMethodSignature(barcode$._BarcodeWidget, () => ({
    __proto__: dart.getMethods(barcode$._BarcodeWidget.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(barcode$._BarcodeWidget, I[79]);
  dart.setFieldSignature(barcode$._BarcodeWidget, () => ({
    __proto__: dart.getFields(barcode$._BarcodeWidget.__proto__),
    data: dart.finalFieldType(typed_data.Uint8List),
    barcode: dart.finalFieldType(dart.nullable(barcode.Barcode)),
    color: dart.finalFieldType(color$.PdfColor),
    drawText: dart.finalFieldType(dart.nullable(core.bool)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    textPadding: dart.finalFieldType(dart.nullable(core.double))
  }));
  var data$1 = dart.privateName(barcode$, "BarcodeWidget.data");
  var barcode$0 = dart.privateName(barcode$, "BarcodeWidget.barcode");
  var color$9 = dart.privateName(barcode$, "BarcodeWidget.color");
  var backgroundColor$2 = dart.privateName(barcode$, "BarcodeWidget.backgroundColor");
  var padding$5 = dart.privateName(barcode$, "BarcodeWidget.padding");
  var margin$5 = dart.privateName(barcode$, "BarcodeWidget.margin");
  var width$10 = dart.privateName(barcode$, "BarcodeWidget.width");
  var height$6 = dart.privateName(barcode$, "BarcodeWidget.height");
  var drawText$ = dart.privateName(barcode$, "BarcodeWidget.drawText");
  var textStyle$3 = dart.privateName(barcode$, "BarcodeWidget.textStyle");
  var textPadding$ = dart.privateName(barcode$, "BarcodeWidget.textPadding");
  var decoration$4 = dart.privateName(barcode$, "BarcodeWidget.decoration");
  barcode$.BarcodeWidget = class BarcodeWidget extends widget$.StatelessWidget {
    get data() {
      return this[data$1];
    }
    set data(value) {
      super.data = value;
    }
    get barcode() {
      return this[barcode$0];
    }
    set barcode(value) {
      super.barcode = value;
    }
    get color() {
      return this[color$9];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$2];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get padding() {
      return this[padding$5];
    }
    set padding(value) {
      super.padding = value;
    }
    get margin() {
      return this[margin$5];
    }
    set margin(value) {
      super.margin = value;
    }
    get width() {
      return this[width$10];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$6];
    }
    set height(value) {
      super.height = value;
    }
    get drawText() {
      return this[drawText$];
    }
    set drawText(value) {
      super.drawText = value;
    }
    get textStyle() {
      return this[textStyle$3];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get textPadding() {
      return this[textPadding$];
    }
    set textPadding(value) {
      super.textPadding = value;
    }
    get decoration() {
      return this[decoration$4];
    }
    set decoration(value) {
      super.decoration = value;
    }
    static new(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      if (data == null) dart.nullFailed(I[78], 169, 21, "data");
      let barcode = opts && 'barcode' in opts ? opts.barcode : null;
      if (barcode == null) dart.nullFailed(I[78], 170, 22, "barcode");
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      if (color == null) dart.nullFailed(I[78], 171, 14, "color");
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : true;
      if (drawText == null) dart.nullFailed(I[78], 178, 10, "drawText");
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : 0;
      if (textPadding == null) dart.nullFailed(I[78], 180, 12, "textPadding");
      return new barcode$.BarcodeWidget.fromBytes({data: convert.utf8.encoder.convert(data), barcode: barcode, color: color, backgroundColor: backgroundColor, decoration: decoration, margin: margin, padding: padding, width: width, height: height, drawText: drawText, textStyle: textStyle, textPadding: textPadding});
    }
    build(context) {
      if (context == null) dart.nullFailed(I[78], 256, 24, "context");
      let defaultstyle = theme$.Theme.of(context).defaultTextStyle.copyWith({font: font$.Font.courier(), fontNormal: font$.Font.courier(), fontBold: font$.Font.courierBold(), fontItalic: font$.Font.courierOblique(), fontBoldItalic: font$.Font.courierBoldOblique(), lineSpacing: 1.0, fontSize: this.height != null ? dart.nullCheck(this.height) * 0.2 : null});
      let _textStyle = defaultstyle.merge(this.textStyle);
      let child = new barcode$._BarcodeWidget.new({data: this.data, color: this.color, barcode: this.barcode, drawText: this.drawText, textStyle: _textStyle, textPadding: this.textPadding});
      if (this.padding != null) {
        child = new basic.Padding.new({padding: dart.nullCheck(this.padding), child: child});
      }
      if (this.decoration != null) {
        child = new container$.DecoratedBox.new({decoration: dart.nullCheck(this.decoration), child: child});
      } else if (this.backgroundColor != null) {
        child = new container$.DecoratedBox.new({decoration: new decoration$.BoxDecoration.new({color: this.backgroundColor}), child: child});
      }
      if (this.width != null || this.height != null) {
        child = new basic.SizedBox.new({width: this.width, height: this.height, child: child});
      }
      if (this.margin != null) {
        child = new basic.Padding.new({padding: dart.nullCheck(this.margin), child: child});
      }
      return child;
    }
  };
  (barcode$.BarcodeWidget.fromBytes = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[78], 199, 19, "data");
    let barcode = opts && 'barcode' in opts ? opts.barcode : null;
    if (barcode == null) dart.nullFailed(I[78], 200, 19, "barcode");
    let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
    if (color == null) dart.nullFailed(I[78], 201, 10, "color");
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let drawText = opts && 'drawText' in opts ? opts.drawText : true;
    if (drawText == null) dart.nullFailed(I[78], 208, 10, "drawText");
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let textPadding = opts && 'textPadding' in opts ? opts.textPadding : 0;
    if (textPadding == null) dart.nullFailed(I[78], 210, 10, "textPadding");
    this[data$1] = data;
    this[barcode$0] = barcode;
    this[color$9] = color;
    this[backgroundColor$2] = backgroundColor;
    this[decoration$4] = decoration;
    this[margin$5] = margin;
    this[padding$5] = padding;
    this[width$10] = width;
    this[height$6] = height;
    this[drawText$] = drawText;
    this[textStyle$3] = textStyle;
    this[textPadding$] = textPadding;
    barcode$.BarcodeWidget.__proto__.new.call(this);
    ;
  }).prototype = barcode$.BarcodeWidget.prototype;
  dart.addTypeTests(barcode$.BarcodeWidget);
  dart.addTypeCaches(barcode$.BarcodeWidget);
  dart.setMethodSignature(barcode$.BarcodeWidget, () => ({
    __proto__: dart.getMethods(barcode$.BarcodeWidget.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(barcode$.BarcodeWidget, I[79]);
  dart.setFieldSignature(barcode$.BarcodeWidget, () => ({
    __proto__: dart.getFields(barcode$.BarcodeWidget.__proto__),
    data: dart.finalFieldType(typed_data.Uint8List),
    barcode: dart.finalFieldType(barcode.Barcode),
    color: dart.finalFieldType(color$.PdfColor),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    margin: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    drawText: dart.finalFieldType(core.bool),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    textPadding: dart.finalFieldType(core.double),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration))
  }));
  var fillColor$0 = dart.privateName(shape, "Circle.fillColor");
  var strokeColor$0 = dart.privateName(shape, "Circle.strokeColor");
  var strokeWidth$2 = dart.privateName(shape, "Circle.strokeWidth");
  shape.Circle = class Circle extends widget$.Widget {
    get fillColor() {
      return this[fillColor$0];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get strokeColor() {
      return this[strokeColor$0];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$2];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[80], 31, 23, "context");
      if (constraints == null) dart.nullFailed(I[80], 31, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[80], 32, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[80], 37, 22, "context");
      super.paint(context);
      let canvas = context.canvas;
      canvas.saveContext();
      if (this.fillColor != null) {
        canvas.setFillColor(dart.nullCheck(this.fillColor));
      }
      if (this.strokeColor != null) {
        canvas.setStrokeColor(this.strokeColor);
      }
      canvas.setLineWidth(this.strokeWidth);
      canvas.drawEllipse(dart.notNull(dart.nullCheck(this.box).width) / 2, dart.notNull(dart.nullCheck(this.box).height) / 2, dart.notNull(dart.nullCheck(this.box).width) / 2, dart.notNull(dart.nullCheck(this.box).height) / 2);
      if (this.strokeColor != null && this.fillColor != null) {
        canvas.fillAndStrokePath();
      } else if (this.strokeColor != null) {
        canvas.strokePath();
      } else {
        canvas.fillPath();
      }
      canvas.restoreContext();
    }
  };
  (shape.Circle.new = function(opts) {
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    if (strokeWidth == null) dart.nullFailed(I[80], 24, 50, "strokeWidth");
    this[fillColor$0] = fillColor;
    this[strokeColor$0] = strokeColor;
    this[strokeWidth$2] = strokeWidth;
    shape.Circle.__proto__.new.call(this);
    ;
  }).prototype = shape.Circle.prototype;
  dart.addTypeTests(shape.Circle);
  dart.addTypeCaches(shape.Circle);
  dart.setMethodSignature(shape.Circle, () => ({
    __proto__: dart.getMethods(shape.Circle.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(shape.Circle, I[81]);
  dart.setFieldSignature(shape.Circle, () => ({
    __proto__: dart.getFields(shape.Circle.__proto__),
    fillColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var fillColor$1 = dart.privateName(shape, "Rectangle.fillColor");
  var strokeColor$1 = dart.privateName(shape, "Rectangle.strokeColor");
  var strokeWidth$3 = dart.privateName(shape, "Rectangle.strokeWidth");
  shape.Rectangle = class Rectangle extends widget$.Widget {
    get fillColor() {
      return this[fillColor$1];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get strokeColor() {
      return this[strokeColor$1];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$3];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[80], 76, 23, "context");
      if (constraints == null) dart.nullFailed(I[80], 76, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[80], 77, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[80], 82, 22, "context");
      super.paint(context);
      let canvas = context.canvas;
      canvas.saveContext();
      if (this.fillColor != null) {
        canvas.setFillColor(dart.nullCheck(this.fillColor));
      }
      if (this.strokeColor != null) {
        canvas.setStrokeColor(this.strokeColor);
      }
      canvas.setLineWidth(this.strokeWidth);
      canvas.drawRect(0.0, 0.0, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height);
      if (this.strokeColor != null && this.fillColor != null) {
        canvas.fillAndStrokePath();
      } else if (this.strokeColor != null) {
        canvas.strokePath();
      } else {
        canvas.fillPath();
      }
      canvas.restoreContext();
    }
  };
  (shape.Rectangle.new = function(opts) {
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    if (strokeWidth == null) dart.nullFailed(I[80], 69, 53, "strokeWidth");
    this[fillColor$1] = fillColor;
    this[strokeColor$1] = strokeColor;
    this[strokeWidth$3] = strokeWidth;
    shape.Rectangle.__proto__.new.call(this);
    ;
  }).prototype = shape.Rectangle.prototype;
  dart.addTypeTests(shape.Rectangle);
  dart.addTypeCaches(shape.Rectangle);
  dart.setMethodSignature(shape.Rectangle, () => ({
    __proto__: dart.getMethods(shape.Rectangle.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(shape.Rectangle, I[81]);
  dart.setFieldSignature(shape.Rectangle, () => ({
    __proto__: dart.getFields(shape.Rectangle.__proto__),
    fillColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var points$ = dart.privateName(shape, "Polygon.points");
  var fillColor$2 = dart.privateName(shape, "Polygon.fillColor");
  var strokeColor$2 = dart.privateName(shape, "Polygon.strokeColor");
  var strokeWidth$4 = dart.privateName(shape, "Polygon.strokeWidth");
  var close$ = dart.privateName(shape, "Polygon.close");
  shape.Polygon = class Polygon extends widget$.Widget {
    get points() {
      return this[points$];
    }
    set points(value) {
      super.points = value;
    }
    get fillColor() {
      return this[fillColor$2];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get strokeColor() {
      return this[strokeColor$2];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$4];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get close() {
      return this[close$];
    }
    set close(value) {
      super.close = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[80], 127, 23, "context");
      if (constraints == null) dart.nullFailed(I[80], 127, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[80], 128, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[80], 133, 22, "context");
      super.paint(context);
      if (dart.notNull(this.points[$length]) < 3) {
        return;
      }
      let canvas = context.canvas;
      canvas.saveContext();
      if (this.fillColor != null) {
        canvas.setFillColor(dart.nullCheck(this.fillColor));
      }
      if (this.strokeColor != null) {
        canvas.setStrokeColor(this.strokeColor);
      }
      canvas.setLineWidth(this.strokeWidth);
      let flippedPoints = this.points[$map](point$.PdfPoint, dart.fn(e => {
        if (e == null) dart.nullFailed(I[80], 156, 21, "e");
        return new point$.PdfPoint.new(e.x, dart.notNull(dart.nullCheck(this.box).height) - dart.notNull(e.y));
      }, T$.PdfPointToPdfPoint()))[$toList]();
      canvas.moveTo(flippedPoints[$_get](0).x, flippedPoints[$_get](0).y);
      for (let i = 0; i < dart.notNull(flippedPoints[$length]); i = i + 1) {
        canvas.lineTo(flippedPoints[$_get](i).x, flippedPoints[$_get](i).y);
      }
      if (dart.test(this.close)) {
        canvas.closePath();
      }
      if (this.strokeColor != null && this.fillColor != null) {
        canvas.fillAndStrokePath();
      } else if (this.strokeColor != null) {
        canvas.strokePath();
      } else {
        canvas.fillPath();
      }
      canvas.restoreContext();
    }
  };
  (shape.Polygon.new = function(opts) {
    let points = opts && 'points' in opts ? opts.points : null;
    if (points == null) dart.nullFailed(I[80], 114, 22, "points");
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    if (strokeWidth == null) dart.nullFailed(I[80], 117, 12, "strokeWidth");
    let close = opts && 'close' in opts ? opts.close : true;
    if (close == null) dart.nullFailed(I[80], 118, 12, "close");
    this[points$] = points;
    this[fillColor$2] = fillColor;
    this[strokeColor$2] = strokeColor;
    this[strokeWidth$4] = strokeWidth;
    this[close$] = close;
    shape.Polygon.__proto__.new.call(this);
    ;
  }).prototype = shape.Polygon.prototype;
  dart.addTypeTests(shape.Polygon);
  dart.addTypeCaches(shape.Polygon);
  dart.setMethodSignature(shape.Polygon, () => ({
    __proto__: dart.getMethods(shape.Polygon.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(shape.Polygon, I[81]);
  dart.setFieldSignature(shape.Polygon, () => ({
    __proto__: dart.getFields(shape.Polygon.__proto__),
    points: dart.finalFieldType(core.List$(point$.PdfPoint)),
    fillColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double),
    close: dart.finalFieldType(core.bool)
  }));
  var points$0 = dart.privateName(shape, "InkList.points");
  var strokeColor$3 = dart.privateName(shape, "InkList.strokeColor");
  var strokeWidth$5 = dart.privateName(shape, "InkList.strokeWidth");
  shape.InkList = class InkList extends widget$.Widget {
    get points() {
      return this[points$0];
    }
    set points(value) {
      super.points = value;
    }
    get strokeColor() {
      return this[strokeColor$3];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$5];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[80], 187, 23, "context");
      if (constraints == null) dart.nullFailed(I[80], 187, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[80], 188, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[80], 193, 22, "context");
      super.paint(context);
      let canvas = context.canvas;
      canvas.saveContext();
      if (this.strokeColor != null) {
        canvas.setStrokeColor(this.strokeColor);
      }
      canvas.setLineWidth(this.strokeWidth);
      for (let subLineIndex = 0; subLineIndex < dart.notNull(this.points[$length]); subLineIndex = subLineIndex + 1) {
        let flippedPoints = this.points[$_get](subLineIndex)[$map](point$.PdfPoint, dart.fn(e => {
          if (e == null) dart.nullFailed(I[80], 210, 17, "e");
          return new point$.PdfPoint.new(e.x, dart.notNull(dart.nullCheck(this.box).height) - dart.notNull(e.y));
        }, T$.PdfPointToPdfPoint()))[$toList]();
        canvas.moveTo(flippedPoints[$_get](0).x, flippedPoints[$_get](0).y);
        for (let i = 0; i < dart.notNull(flippedPoints[$length]); i = i + 1) {
          canvas.lineTo(flippedPoints[$_get](i).x, flippedPoints[$_get](i).y);
        }
      }
      canvas.strokePath();
      canvas.restoreContext();
    }
  };
  (shape.InkList.new = function(opts) {
    let points = opts && 'points' in opts ? opts.points : null;
    if (points == null) dart.nullFailed(I[80], 180, 26, "points");
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    if (strokeWidth == null) dart.nullFailed(I[80], 180, 57, "strokeWidth");
    this[points$0] = points;
    this[strokeColor$3] = strokeColor;
    this[strokeWidth$5] = strokeWidth;
    shape.InkList.__proto__.new.call(this);
    ;
  }).prototype = shape.InkList.prototype;
  dart.addTypeTests(shape.InkList);
  dart.addTypeCaches(shape.InkList);
  dart.setMethodSignature(shape.InkList, () => ({
    __proto__: dart.getMethods(shape.InkList.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(shape.InkList, I[81]);
  dart.setFieldSignature(shape.InkList, () => ({
    __proto__: dart.getFields(shape.InkList.__proto__),
    points: dart.finalFieldType(core.List$(core.List$(point$.PdfPoint))),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var decoration$5 = dart.privateName(container$, "DecoratedBox.decoration");
  var position$0 = dart.privateName(container$, "DecoratedBox.position");
  container$.DecoratedBox = class DecoratedBox extends widget$.SingleChildWidget {
    get decoration() {
      return this[decoration$5];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get position() {
      return this[position$0];
    }
    set position(value) {
      super.position = value;
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[82], 39, 22, "context");
      super.paint(context);
      if (this.position == decoration$.DecorationPosition.background) {
        this.decoration.paint(context, dart.nullCheck(this.box));
      }
      this.paintChild(context);
      if (this.position == decoration$.DecorationPosition.foreground) {
        this.decoration.paint(context, dart.nullCheck(this.box));
      }
    }
  };
  (container$.DecoratedBox.new = function(opts) {
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    if (decoration == null) dart.nullFailed(I[82], 27, 22, "decoration");
    let position = opts && 'position' in opts ? opts.position : C[151] || CT.C151;
    if (position == null) dart.nullFailed(I[82], 28, 12, "position");
    let child = opts && 'child' in opts ? opts.child : null;
    this[decoration$5] = decoration;
    this[position$0] = position;
    container$.DecoratedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = container$.DecoratedBox.prototype;
  dart.addTypeTests(container$.DecoratedBox);
  dart.addTypeCaches(container$.DecoratedBox);
  dart.setLibraryUri(container$.DecoratedBox, I[83]);
  dart.setFieldSignature(container$.DecoratedBox, () => ({
    __proto__: dart.getFields(container$.DecoratedBox.__proto__),
    decoration: dart.finalFieldType(decoration$.BoxDecoration),
    position: dart.finalFieldType(decoration$.DecorationPosition)
  }));
  var child$4 = dart.privateName(container$, "Container.child");
  var alignment$4 = dart.privateName(container$, "Container.alignment");
  var padding$6 = dart.privateName(container$, "Container.padding");
  var decoration$6 = dart.privateName(container$, "Container.decoration");
  var foregroundDecoration$ = dart.privateName(container$, "Container.foregroundDecoration");
  var constraints$ = dart.privateName(container$, "Container.constraints");
  var margin$6 = dart.privateName(container$, "Container.margin");
  var transform$2 = dart.privateName(container$, "Container.transform");
  container$.Container = class Container extends widget$.StatelessWidget {
    get child() {
      return this[child$4];
    }
    set child(value) {
      super.child = value;
    }
    get alignment() {
      return this[alignment$4];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get padding() {
      return this[padding$6];
    }
    set padding(value) {
      super.padding = value;
    }
    get decoration() {
      return this[decoration$6];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get foregroundDecoration() {
      return this[foregroundDecoration$];
    }
    set foregroundDecoration(value) {
      super.foregroundDecoration = value;
    }
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get margin() {
      return this[margin$6];
    }
    set margin(value) {
      super.margin = value;
    }
    get transform() {
      return this[transform$2];
    }
    set transform(value) {
      super.transform = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[82], 98, 24, "context");
      let current = this.child;
      if (this.child == null && (this.constraints == null || !dart.test(dart.nullCheck(this.constraints).isTight))) {
        current = new basic.LimitedBox.new({maxWidth: 0.0, maxHeight: 0.0, child: new basic.ConstrainedBox.new({constraints: C[152] || CT.C152})});
      }
      if (this.alignment != null) {
        current = new basic.Align.new({alignment: dart.nullCheck(this.alignment), child: current});
      }
      if (this.padding != null) {
        current = new basic.Padding.new({padding: dart.nullCheck(this.padding), child: current});
      }
      if (this.decoration != null) {
        current = new container$.DecoratedBox.new({decoration: dart.nullCheck(this.decoration), child: current});
      }
      if (this.foregroundDecoration != null) {
        current = new container$.DecoratedBox.new({decoration: dart.nullCheck(this.foregroundDecoration), position: decoration$.DecorationPosition.foreground, child: current});
      }
      if (this.constraints != null) {
        current = new basic.ConstrainedBox.new({constraints: dart.nullCheck(this.constraints), child: current});
      }
      if (this.margin != null) {
        current = new basic.Padding.new({padding: dart.nullCheck(this.margin), child: current});
      }
      if (this.transform != null) {
        current = new basic.Transform.new({transform: dart.nullCheck(this.transform), child: current});
      }
      return dart.nullCheck(current);
    }
  };
  (container$.Container.new = function(opts) {
    let t43, t43$, t43$0;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let foregroundDecoration = opts && 'foregroundDecoration' in opts ? opts.foregroundDecoration : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[alignment$4] = alignment;
    this[padding$6] = padding;
    this[foregroundDecoration$] = foregroundDecoration;
    this[margin$6] = margin;
    this[transform$2] = transform;
    this[child$4] = child;
    if (!(color == null || decoration == null)) dart.assertFailed("Cannot provide both a color and a decoration\n" + "The color argument is just a shorthand for \"decoration: new BoxDecoration(color: color)\".", I[82], 65, 13, "color == null || decoration == null");
    this[decoration$6] = (t43 = decoration, t43 == null ? color != null ? new decoration$.BoxDecoration.new({color: color}) : null : t43);
    this[constraints$] = width != null || height != null ? (t43$0 = (t43$ = constraints, t43$ == null ? null : t43$.tighten({width: width, height: height})), t43$0 == null ? new geometry.BoxConstraints.tightFor({width: width, height: height}) : t43$0) : constraints;
    container$.Container.__proto__.new.call(this);
    ;
  }).prototype = container$.Container.prototype;
  dart.addTypeTests(container$.Container);
  dart.addTypeCaches(container$.Container);
  dart.setMethodSignature(container$.Container, () => ({
    __proto__: dart.getMethods(container$.Container.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(container$.Container, I[83]);
  dart.setFieldSignature(container$.Container, () => ({
    __proto__: dart.getFields(container$.Container.__proto__),
    child: dart.finalFieldType(dart.nullable(widget$.Widget)),
    alignment: dart.finalFieldType(dart.nullable(geometry.Alignment)),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    foregroundDecoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    constraints: dart.finalFieldType(dart.nullable(geometry.BoxConstraints)),
    margin: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    transform: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var codePoint$ = dart.privateName(icon$, "IconData.codePoint");
  var matchTextDirection$ = dart.privateName(icon$, "IconData.matchTextDirection");
  icon$.IconData = class IconData extends core.Object {
    get codePoint() {
      return this[codePoint$];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get matchTextDirection() {
      return this[matchTextDirection$];
    }
    set matchTextDirection(value) {
      super.matchTextDirection = value;
    }
  };
  (icon$.IconData.new = function(codePoint, opts) {
    if (codePoint == null) dart.nullFailed(I[84], 34, 10, "codePoint");
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    if (matchTextDirection == null) dart.nullFailed(I[84], 35, 10, "matchTextDirection");
    this[codePoint$] = codePoint;
    this[matchTextDirection$] = matchTextDirection;
    ;
  }).prototype = icon$.IconData.prototype;
  dart.addTypeTests(icon$.IconData);
  dart.addTypeCaches(icon$.IconData);
  dart.setLibraryUri(icon$.IconData, I[85]);
  dart.setFieldSignature(icon$.IconData, () => ({
    __proto__: dart.getFields(icon$.IconData.__proto__),
    codePoint: dart.finalFieldType(core.int),
    matchTextDirection: dart.finalFieldType(core.bool)
  }));
  var color$10 = dart.privateName(icon$, "IconThemeData.color");
  var opacity$1 = dart.privateName(icon$, "IconThemeData.opacity");
  var size$ = dart.privateName(icon$, "IconThemeData.size");
  var font$1 = dart.privateName(icon$, "IconThemeData.font");
  icon$.IconThemeData = class IconThemeData extends core.Object {
    get color() {
      return this[color$10];
    }
    set color(value) {
      super.color = value;
    }
    get opacity() {
      return this[opacity$1];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get font() {
      return this[font$1];
    }
    set font(value) {
      super.font = value;
    }
    copyWith(opts) {
      let t43, t43$, t43$0, t43$1;
      let color = opts && 'color' in opts ? opts.color : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let font = opts && 'font' in opts ? opts.font : null;
      return new icon$.IconThemeData.new({color: (t43 = color, t43 == null ? this.color : t43), opacity: (t43$ = opacity, t43$ == null ? this.opacity : t43$), size: (t43$0 = size, t43$0 == null ? this.size : t43$0), font: (t43$1 = font, t43$1 == null ? this.font : t43$1)});
    }
  };
  (icon$.IconThemeData.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let font = opts && 'font' in opts ? opts.font : null;
    this[color$10] = color;
    this[opacity$1] = opacity;
    this[size$] = size;
    this[font$1] = font;
    ;
  }).prototype = icon$.IconThemeData.prototype;
  (icon$.IconThemeData.fallback = function(font) {
    this[font$1] = font;
    this[color$10] = colors.PdfColors.black;
    this[opacity$1] = 1.0;
    this[size$] = 24.0;
    ;
  }).prototype = icon$.IconThemeData.prototype;
  dart.addTypeTests(icon$.IconThemeData);
  dart.addTypeCaches(icon$.IconThemeData);
  dart.setMethodSignature(icon$.IconThemeData, () => ({
    __proto__: dart.getMethods(icon$.IconThemeData.__proto__),
    copyWith: dart.fnType(icon$.IconThemeData, [], {color: dart.nullable(color$.PdfColor), font: dart.nullable(font$.Font), opacity: dart.nullable(core.double), size: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(icon$.IconThemeData, I[85]);
  dart.setFieldSignature(icon$.IconThemeData, () => ({
    __proto__: dart.getFields(icon$.IconThemeData.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    opacity: dart.finalFieldType(dart.nullable(core.double)),
    size: dart.finalFieldType(dart.nullable(core.double)),
    font: dart.finalFieldType(dart.nullable(font$.Font))
  }));
  var icon$0 = dart.privateName(icon$, "Icon.icon");
  var size$0 = dart.privateName(icon$, "Icon.size");
  var color$11 = dart.privateName(icon$, "Icon.color");
  var textDirection$ = dart.privateName(icon$, "Icon.textDirection");
  var font$2 = dart.privateName(icon$, "Icon.font");
  icon$.Icon = class Icon extends widget$.StatelessWidget {
    get icon() {
      return this[icon$0];
    }
    set icon(value) {
      super.icon = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    get color() {
      return this[color$11];
    }
    set color(value) {
      super.color = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get font() {
      return this[font$2];
    }
    set font(value) {
      super.font = value;
    }
    build(context) {
      let t43, t43$, t43$0, t43$1, t43$2;
      if (context == null) dart.nullFailed(I[84], 111, 24, "context");
      let textDirection = (t43 = this.textDirection, t43 == null ? text_style.Directionality.of(context) : t43);
      let iconTheme = theme$.Theme.of(context).iconTheme;
      let iconSize = (t43$ = this.size, t43$ == null ? iconTheme.size : t43$);
      let iconColor = (t43$0 = this.color, t43$0 == null ? dart.nullCheck(iconTheme.color) : t43$0);
      let iconOpacity = iconColor.alpha;
      let iconFont = (t43$1 = this.font, t43$1 == null ? iconTheme.font : t43$1);
      let iconWidget = new text$1.RichText.new({textDirection: textDirection, text: new text$1.TextSpan.new({text: core.String.fromCharCode(this.icon.codePoint), style: text_style.TextStyle.defaultStyle().copyWith({color: iconColor, fontSize: iconSize, fontNormal: iconFont})})});
      if (dart.test(this.icon.matchTextDirection)) {
        switch (textDirection) {
          case C[146] || CT.C146:
          {
            iconWidget = new basic.Transform.new({transform: (t43$2 = vector_math_64.Matrix4.identity(), (() => {
                t43$2.scale(-1.0, 1.0, 1.0);
                return t43$2;
              })()), alignment: geometry.Alignment.center, child: iconWidget});
            break;
          }
          case C[147] || CT.C147:
          {
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      if (dart.notNull(iconOpacity) < 1.0) {
        iconWidget = new basic.Opacity.new({opacity: iconOpacity, child: iconWidget});
      }
      return iconWidget;
    }
  };
  (icon$.Icon.new = function(icon, opts) {
    if (icon == null) dart.nullFailed(I[84], 88, 10, "icon");
    let size = opts && 'size' in opts ? opts.size : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let font = opts && 'font' in opts ? opts.font : null;
    this[icon$0] = icon;
    this[size$0] = size;
    this[color$11] = color;
    this[textDirection$] = textDirection;
    this[font$2] = font;
    icon$.Icon.__proto__.new.call(this);
    ;
  }).prototype = icon$.Icon.prototype;
  dart.addTypeTests(icon$.Icon);
  dart.addTypeCaches(icon$.Icon);
  dart.setMethodSignature(icon$.Icon, () => ({
    __proto__: dart.getMethods(icon$.Icon.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(icon$.Icon, I[85]);
  dart.setFieldSignature(icon$.Icon, () => ({
    __proto__: dart.getFields(icon$.Icon.__proto__),
    icon: dart.finalFieldType(icon$.IconData),
    size: dart.finalFieldType(dart.nullable(core.double)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    textDirection: dart.finalFieldType(dart.nullable(text$1.TextDirection)),
    font: dart.finalFieldType(dart.nullable(font$.Font))
  }));
  var defaultTextStyle$ = dart.privateName(theme$, "ThemeData.defaultTextStyle");
  var paragraphStyle$ = dart.privateName(theme$, "ThemeData.paragraphStyle");
  var header0$ = dart.privateName(theme$, "ThemeData.header0");
  var header1$ = dart.privateName(theme$, "ThemeData.header1");
  var header2$ = dart.privateName(theme$, "ThemeData.header2");
  var header3$ = dart.privateName(theme$, "ThemeData.header3");
  var header4$ = dart.privateName(theme$, "ThemeData.header4");
  var header5$ = dart.privateName(theme$, "ThemeData.header5");
  var bulletStyle$ = dart.privateName(theme$, "ThemeData.bulletStyle");
  var tableHeader$ = dart.privateName(theme$, "ThemeData.tableHeader");
  var tableCell$ = dart.privateName(theme$, "ThemeData.tableCell");
  var textAlign$2 = dart.privateName(theme$, "ThemeData.textAlign");
  var softWrap$0 = dart.privateName(theme$, "ThemeData.softWrap");
  var maxLines$0 = dart.privateName(theme$, "ThemeData.maxLines");
  var overflow$0 = dart.privateName(theme$, "ThemeData.overflow");
  var iconTheme$ = dart.privateName(theme$, "ThemeData.iconTheme");
  widget$.Inherited = class Inherited extends core.Object {};
  (widget$.Inherited.new = function() {
    ;
  }).prototype = widget$.Inherited.prototype;
  dart.addTypeTests(widget$.Inherited);
  dart.addTypeCaches(widget$.Inherited);
  dart.setLibraryUri(widget$.Inherited, I[6]);
  theme$.ThemeData = class ThemeData extends widget$.Inherited {
    get defaultTextStyle() {
      return this[defaultTextStyle$];
    }
    set defaultTextStyle(value) {
      super.defaultTextStyle = value;
    }
    get paragraphStyle() {
      return this[paragraphStyle$];
    }
    set paragraphStyle(value) {
      super.paragraphStyle = value;
    }
    get header0() {
      return this[header0$];
    }
    set header0(value) {
      super.header0 = value;
    }
    get header1() {
      return this[header1$];
    }
    set header1(value) {
      super.header1 = value;
    }
    get header2() {
      return this[header2$];
    }
    set header2(value) {
      super.header2 = value;
    }
    get header3() {
      return this[header3$];
    }
    set header3(value) {
      super.header3 = value;
    }
    get header4() {
      return this[header4$];
    }
    set header4(value) {
      super.header4 = value;
    }
    get header5() {
      return this[header5$];
    }
    set header5(value) {
      super.header5 = value;
    }
    get bulletStyle() {
      return this[bulletStyle$];
    }
    set bulletStyle(value) {
      super.bulletStyle = value;
    }
    get tableHeader() {
      return this[tableHeader$];
    }
    set tableHeader(value) {
      super.tableHeader = value;
    }
    get tableCell() {
      return this[tableCell$];
    }
    set tableCell(value) {
      super.tableCell = value;
    }
    get textAlign() {
      return this[textAlign$2];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[softWrap$0];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get maxLines() {
      return this[maxLines$0];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get overflow() {
      return this[overflow$0];
    }
    set overflow(value) {
      super.overflow = value;
    }
    get iconTheme() {
      return this[iconTheme$];
    }
    set iconTheme(value) {
      super.iconTheme = value;
    }
    static new(opts) {
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
      let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
      let header0 = opts && 'header0' in opts ? opts.header0 : null;
      let header1 = opts && 'header1' in opts ? opts.header1 : null;
      let header2 = opts && 'header2' in opts ? opts.header2 : null;
      let header3 = opts && 'header3' in opts ? opts.header3 : null;
      let header4 = opts && 'header4' in opts ? opts.header4 : null;
      let header5 = opts && 'header5' in opts ? opts.header5 : null;
      let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
      let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
      let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
      let base = theme$.ThemeData.base();
      return base.copyWith({defaultTextStyle: defaultTextStyle, paragraphStyle: paragraphStyle, bulletStyle: bulletStyle, header0: header0, header1: header1, header2: header2, header3: header3, header4: header4, header5: header5, tableHeader: tableHeader, tableCell: tableCell, softWrap: softWrap, overflow: overflow, textAlign: textAlign, maxLines: maxLines, iconTheme: iconTheme});
    }
    static withFont(opts) {
      let base = opts && 'base' in opts ? opts.base : null;
      let bold = opts && 'bold' in opts ? opts.bold : null;
      let italic = opts && 'italic' in opts ? opts.italic : null;
      let boldItalic = opts && 'boldItalic' in opts ? opts.boldItalic : null;
      let icons = opts && 'icons' in opts ? opts.icons : null;
      let defaultStyle = text_style.TextStyle.defaultStyle().copyWith({font: base, fontNormal: base, fontBold: bold, fontItalic: italic, fontBoldItalic: boldItalic});
      let fontSize = dart.nullCheck(defaultStyle.fontSize);
      return new theme$.ThemeData.__({defaultTextStyle: defaultStyle, paragraphStyle: defaultStyle.copyWith({lineSpacing: 5.0}), bulletStyle: defaultStyle.copyWith({lineSpacing: 5.0}), header0: defaultStyle.copyWith({fontSize: fontSize * 2.0}), header1: defaultStyle.copyWith({fontSize: fontSize * 1.5}), header2: defaultStyle.copyWith({fontSize: fontSize * 1.4}), header3: defaultStyle.copyWith({fontSize: fontSize * 1.3}), header4: defaultStyle.copyWith({fontSize: fontSize * 1.2}), header5: defaultStyle.copyWith({fontSize: fontSize * 1.1}), tableHeader: defaultStyle.copyWith({fontSize: fontSize * 0.8, fontWeight: text_style.FontWeight.bold}), tableCell: defaultStyle.copyWith({fontSize: fontSize * 0.8}), softWrap: true, overflow: text$1.TextOverflow.visible, textAlign: text$1.TextAlign.left, iconTheme: new icon$.IconThemeData.fallback(icons)});
    }
    static base() {
      return theme$.ThemeData.withFont();
    }
    copyWith(opts) {
      let t43, t43$, t43$0, t43$1, t43$2;
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
      let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
      let header0 = opts && 'header0' in opts ? opts.header0 : null;
      let header1 = opts && 'header1' in opts ? opts.header1 : null;
      let header2 = opts && 'header2' in opts ? opts.header2 : null;
      let header3 = opts && 'header3' in opts ? opts.header3 : null;
      let header4 = opts && 'header4' in opts ? opts.header4 : null;
      let header5 = opts && 'header5' in opts ? opts.header5 : null;
      let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
      let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
      let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
      return new theme$.ThemeData.__({defaultTextStyle: this.defaultTextStyle.merge(defaultTextStyle), paragraphStyle: this.paragraphStyle.merge(paragraphStyle), bulletStyle: this.bulletStyle.merge(bulletStyle), header0: this.header0.merge(header0), header1: this.header1.merge(header1), header2: this.header2.merge(header2), header3: this.header3.merge(header3), header4: this.header4.merge(header4), header5: this.header5.merge(header5), tableHeader: this.tableHeader.merge(tableHeader), tableCell: this.tableCell.merge(tableCell), softWrap: (t43 = softWrap, t43 == null ? this.softWrap : t43), overflow: (t43$ = overflow, t43$ == null ? this.overflow : t43$), textAlign: (t43$0 = textAlign, t43$0 == null ? this.textAlign : t43$0), maxLines: (t43$1 = maxLines, t43$1 == null ? this.maxLines : t43$1), iconTheme: (t43$2 = iconTheme, t43$2 == null ? this.iconTheme : t43$2)});
    }
  };
  (theme$.ThemeData.__ = function(opts) {
    let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
    if (defaultTextStyle == null) dart.nullFailed(I[86], 68, 19, "defaultTextStyle");
    let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
    if (paragraphStyle == null) dart.nullFailed(I[86], 69, 19, "paragraphStyle");
    let header0 = opts && 'header0' in opts ? opts.header0 : null;
    if (header0 == null) dart.nullFailed(I[86], 70, 19, "header0");
    let header1 = opts && 'header1' in opts ? opts.header1 : null;
    if (header1 == null) dart.nullFailed(I[86], 71, 19, "header1");
    let header2 = opts && 'header2' in opts ? opts.header2 : null;
    if (header2 == null) dart.nullFailed(I[86], 72, 19, "header2");
    let header3 = opts && 'header3' in opts ? opts.header3 : null;
    if (header3 == null) dart.nullFailed(I[86], 73, 19, "header3");
    let header4 = opts && 'header4' in opts ? opts.header4 : null;
    if (header4 == null) dart.nullFailed(I[86], 74, 19, "header4");
    let header5 = opts && 'header5' in opts ? opts.header5 : null;
    if (header5 == null) dart.nullFailed(I[86], 75, 19, "header5");
    let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
    if (bulletStyle == null) dart.nullFailed(I[86], 76, 19, "bulletStyle");
    let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
    if (tableHeader == null) dart.nullFailed(I[86], 77, 19, "tableHeader");
    let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
    if (tableCell == null) dart.nullFailed(I[86], 78, 19, "tableCell");
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    if (softWrap == null) dart.nullFailed(I[86], 79, 19, "softWrap");
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    if (overflow == null) dart.nullFailed(I[86], 80, 19, "overflow");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    if (textAlign == null) dart.nullFailed(I[86], 81, 19, "textAlign");
    let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
    if (iconTheme == null) dart.nullFailed(I[86], 82, 19, "iconTheme");
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[defaultTextStyle$] = defaultTextStyle;
    this[paragraphStyle$] = paragraphStyle;
    this[header0$] = header0;
    this[header1$] = header1;
    this[header2$] = header2;
    this[header3$] = header3;
    this[header4$] = header4;
    this[header5$] = header5;
    this[bulletStyle$] = bulletStyle;
    this[tableHeader$] = tableHeader;
    this[tableCell$] = tableCell;
    this[softWrap$0] = softWrap;
    this[overflow$0] = overflow;
    this[textAlign$2] = textAlign;
    this[iconTheme$] = iconTheme;
    this[maxLines$0] = maxLines;
    if (!(defaultTextStyle.inherit === false)) dart.assertFailed(null, I[86], 84, 16, "defaultTextStyle.inherit == false");
    if (!(paragraphStyle.inherit === false)) dart.assertFailed(null, I[86], 85, 16, "paragraphStyle.inherit == false");
    if (!(header0.inherit === false)) dart.assertFailed(null, I[86], 86, 16, "header0.inherit == false");
    if (!(header1.inherit === false)) dart.assertFailed(null, I[86], 87, 16, "header1.inherit == false");
    if (!(header2.inherit === false)) dart.assertFailed(null, I[86], 88, 16, "header2.inherit == false");
    if (!(header3.inherit === false)) dart.assertFailed(null, I[86], 89, 16, "header3.inherit == false");
    if (!(header4.inherit === false)) dart.assertFailed(null, I[86], 90, 16, "header4.inherit == false");
    if (!(header5.inherit === false)) dart.assertFailed(null, I[86], 91, 16, "header5.inherit == false");
    if (!(bulletStyle.inherit === false)) dart.assertFailed(null, I[86], 92, 16, "bulletStyle.inherit == false");
    if (!(tableHeader.inherit === false)) dart.assertFailed(null, I[86], 93, 16, "tableHeader.inherit == false");
    if (!(tableCell.inherit === false)) dart.assertFailed(null, I[86], 94, 16, "tableCell.inherit == false");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[86], 95, 16, "maxLines == null || maxLines > 0");
    theme$.ThemeData.__proto__.new.call(this);
    ;
  }).prototype = theme$.ThemeData.prototype;
  dart.addTypeTests(theme$.ThemeData);
  dart.addTypeCaches(theme$.ThemeData);
  dart.setMethodSignature(theme$.ThemeData, () => ({
    __proto__: dart.getMethods(theme$.ThemeData.__proto__),
    copyWith: dart.fnType(theme$.ThemeData, [], {bulletStyle: dart.nullable(text_style.TextStyle), defaultTextStyle: dart.nullable(text_style.TextStyle), header0: dart.nullable(text_style.TextStyle), header1: dart.nullable(text_style.TextStyle), header2: dart.nullable(text_style.TextStyle), header3: dart.nullable(text_style.TextStyle), header4: dart.nullable(text_style.TextStyle), header5: dart.nullable(text_style.TextStyle), iconTheme: dart.nullable(icon$.IconThemeData), maxLines: dart.nullable(core.int), overflow: dart.nullable(text$1.TextOverflow), paragraphStyle: dart.nullable(text_style.TextStyle), softWrap: dart.nullable(core.bool), tableCell: dart.nullable(text_style.TextStyle), tableHeader: dart.nullable(text_style.TextStyle), textAlign: dart.nullable(text$1.TextAlign)}, {})
  }));
  dart.setLibraryUri(theme$.ThemeData, I[87]);
  dart.setFieldSignature(theme$.ThemeData, () => ({
    __proto__: dart.getFields(theme$.ThemeData.__proto__),
    defaultTextStyle: dart.finalFieldType(text_style.TextStyle),
    paragraphStyle: dart.finalFieldType(text_style.TextStyle),
    header0: dart.finalFieldType(text_style.TextStyle),
    header1: dart.finalFieldType(text_style.TextStyle),
    header2: dart.finalFieldType(text_style.TextStyle),
    header3: dart.finalFieldType(text_style.TextStyle),
    header4: dart.finalFieldType(text_style.TextStyle),
    header5: dart.finalFieldType(text_style.TextStyle),
    bulletStyle: dart.finalFieldType(text_style.TextStyle),
    tableHeader: dart.finalFieldType(text_style.TextStyle),
    tableCell: dart.finalFieldType(text_style.TextStyle),
    textAlign: dart.finalFieldType(text$1.TextAlign),
    softWrap: dart.finalFieldType(core.bool),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    overflow: dart.finalFieldType(text$1.TextOverflow),
    iconTheme: dart.finalFieldType(icon$.IconThemeData)
  }));
  var data$2 = dart.privateName(theme$, "Theme.data");
  var child$5 = dart.privateName(theme$, "Theme.child");
  theme$.Theme = class Theme extends widget$.StatelessWidget {
    get data() {
      return this[data$2];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$5];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      if (context == null) dart.nullFailed(I[86], 207, 31, "context");
      return dart.nullCheck(context.dependsOn(theme$.ThemeData));
    }
    build(context) {
      if (context == null) dart.nullFailed(I[86], 212, 24, "context");
      return new widget$.InheritedWidget.new({inherited: this.data, build: dart.fn(context => {
          if (context == null) dart.nullFailed(I[86], 215, 23, "context");
          return this.child;
        }, T$.ContextToWidget())});
    }
  };
  (theme$.Theme.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[86], 199, 19, "data");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[86], 200, 19, "child");
    this[data$2] = data;
    this[child$5] = child;
    theme$.Theme.__proto__.new.call(this);
    ;
  }).prototype = theme$.Theme.prototype;
  dart.addTypeTests(theme$.Theme);
  dart.addTypeCaches(theme$.Theme);
  dart.setMethodSignature(theme$.Theme, () => ({
    __proto__: dart.getMethods(theme$.Theme.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(theme$.Theme, I[87]);
  dart.setFieldSignature(theme$.Theme, () => ({
    __proto__: dart.getFields(theme$.Theme.__proto__),
    data: dart.finalFieldType(theme$.ThemeData),
    child: dart.finalFieldType(widget$.Widget)
  }));
  var style$2 = dart.privateName(theme$, "DefaultTextStyle.style");
  var child$6 = dart.privateName(theme$, "DefaultTextStyle.child");
  var textAlign$3 = dart.privateName(theme$, "DefaultTextStyle.textAlign");
  var softWrap$1 = dart.privateName(theme$, "DefaultTextStyle.softWrap");
  var maxLines$1 = dart.privateName(theme$, "DefaultTextStyle.maxLines");
  var overflow$1 = dart.privateName(theme$, "DefaultTextStyle.overflow");
  theme$.DefaultTextStyle = class DefaultTextStyle extends widget$.StatelessWidget {
    get style() {
      return this[style$2];
    }
    set style(value) {
      super.style = value;
    }
    get child() {
      return this[child$6];
    }
    set child(value) {
      super.child = value;
    }
    get textAlign() {
      return this[textAlign$3];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[softWrap$1];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get maxLines() {
      return this[maxLines$1];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get overflow() {
      return this[overflow$1];
    }
    set overflow(value) {
      super.overflow = value;
    }
    static merge(opts) {
      let style = opts && 'style' in opts ? opts.style : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (child == null) dart.nullFailed(I[86], 236, 21, "child");
      return new basic.Builder.new({builder: dart.fn(context => {
          let t43, t43$, t43$0, t43$1;
          if (context == null) dart.nullFailed(I[86], 239, 25, "context");
          let parent = theme$.Theme.of(context);
          return new theme$.DefaultTextStyle.new({style: parent.defaultTextStyle.merge(style), textAlign: (t43 = textAlign, t43 == null ? parent.textAlign : t43), softWrap: (t43$ = softWrap, t43$ == null ? parent.softWrap : t43$), overflow: (t43$0 = overflow, t43$0 == null ? parent.overflow : t43$0), maxLines: (t43$1 = maxLines, t43$1 == null ? parent.maxLines : t43$1), child: child});
        }, T$.ContextToDefaultTextStyle())});
    }
    build(context) {
      if (context == null) dart.nullFailed(I[86], 267, 24, "context");
      let theme = theme$.Theme.of(context).copyWith({defaultTextStyle: this.style, textAlign: this.textAlign, softWrap: this.softWrap, overflow: this.overflow, maxLines: this.maxLines});
      return new widget$.InheritedWidget.new({inherited: theme, build: dart.fn(context => {
          if (context == null) dart.nullFailed(I[86], 278, 23, "context");
          return this.child;
        }, T$.ContextToWidget())});
    }
  };
  (theme$.DefaultTextStyle.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    if (style == null) dart.nullFailed(I[86], 222, 19, "style");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[86], 223, 19, "child");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
    if (softWrap == null) dart.nullFailed(I[86], 225, 10, "softWrap");
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[style$2] = style;
    this[child$6] = child;
    this[textAlign$3] = textAlign;
    this[softWrap$1] = softWrap;
    this[overflow$1] = overflow;
    this[maxLines$1] = maxLines;
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[86], 228, 15, "maxLines == null || maxLines > 0");
    theme$.DefaultTextStyle.__proto__.new.call(this);
    ;
  }).prototype = theme$.DefaultTextStyle.prototype;
  dart.addTypeTests(theme$.DefaultTextStyle);
  dart.addTypeCaches(theme$.DefaultTextStyle);
  theme$.DefaultTextStyle[dart.implements] = () => [widget$.Inherited];
  dart.setMethodSignature(theme$.DefaultTextStyle, () => ({
    __proto__: dart.getMethods(theme$.DefaultTextStyle.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(theme$.DefaultTextStyle, I[87]);
  dart.setFieldSignature(theme$.DefaultTextStyle, () => ({
    __proto__: dart.getFields(theme$.DefaultTextStyle.__proto__),
    style: dart.finalFieldType(text_style.TextStyle),
    child: dart.finalFieldType(widget$.Widget),
    textAlign: dart.finalFieldType(dart.nullable(text$1.TextAlign)),
    softWrap: dart.finalFieldType(core.bool),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    overflow: dart.finalFieldType(dart.nullable(text$1.TextOverflow))
  }));
  var _name$14 = dart.privateName(font$, "_name");
  font$.Type1Fonts = class Type1Fonts extends core.Object {
    toString() {
      return this[_name$14];
    }
  };
  (font$.Type1Fonts.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[88], 24, 6, "index");
    if (_name == null) dart.nullFailed(I[88], 24, 6, "_name");
    this.index = index;
    this[_name$14] = _name;
    ;
  }).prototype = font$.Type1Fonts.prototype;
  dart.addTypeTests(font$.Type1Fonts);
  dart.addTypeCaches(font$.Type1Fonts);
  dart.setLibraryUri(font$.Type1Fonts, I[89]);
  dart.setFieldSignature(font$.Type1Fonts, () => ({
    __proto__: dart.getFields(font$.Type1Fonts.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$14]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(font$.Type1Fonts, ['toString']);
  font$.Type1Fonts.courier = C[153] || CT.C153;
  font$.Type1Fonts.courierBold = C[154] || CT.C154;
  font$.Type1Fonts.courierBoldOblique = C[155] || CT.C155;
  font$.Type1Fonts.courierOblique = C[156] || CT.C156;
  font$.Type1Fonts.helvetica = C[157] || CT.C157;
  font$.Type1Fonts.helveticaBold = C[158] || CT.C158;
  font$.Type1Fonts.helveticaBoldOblique = C[159] || CT.C159;
  font$.Type1Fonts.helveticaOblique = C[160] || CT.C160;
  font$.Type1Fonts.times = C[161] || CT.C161;
  font$.Type1Fonts.timesBold = C[162] || CT.C162;
  font$.Type1Fonts.timesBoldItalic = C[163] || CT.C163;
  font$.Type1Fonts.timesItalic = C[164] || CT.C164;
  font$.Type1Fonts.symbol = C[165] || CT.C165;
  font$.Type1Fonts.zapfDingbats = C[166] || CT.C166;
  font$.Type1Fonts.values = C[167] || CT.C167;
  var font$3 = dart.privateName(font$, "Font.font");
  var _pdfFont = dart.privateName(font$, "_pdfFont");
  font$.Font = class Font extends core.Object {
    get font() {
      return this[font$3];
    }
    set font(value) {
      super.font = value;
    }
    static courier() {
      return new font$.Font.type1(font$.Type1Fonts.courier);
    }
    static courierBold() {
      return new font$.Font.type1(font$.Type1Fonts.courierBold);
    }
    static courierBoldOblique() {
      return new font$.Font.type1(font$.Type1Fonts.courierBoldOblique);
    }
    static courierOblique() {
      return new font$.Font.type1(font$.Type1Fonts.courierOblique);
    }
    static helvetica() {
      return new font$.Font.type1(font$.Type1Fonts.helvetica);
    }
    static helveticaBold() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaBold);
    }
    static helveticaBoldOblique() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaBoldOblique);
    }
    static helveticaOblique() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaOblique);
    }
    static times() {
      return new font$.Font.type1(font$.Type1Fonts.times);
    }
    static timesBold() {
      return new font$.Font.type1(font$.Type1Fonts.timesBold);
    }
    static timesBoldItalic() {
      return new font$.Font.type1(font$.Type1Fonts.timesBoldItalic);
    }
    static timesItalic() {
      return new font$.Font.type1(font$.Type1Fonts.timesItalic);
    }
    static symbol() {
      return new font$.Font.type1(font$.Type1Fonts.symbol);
    }
    static zapfDingbats() {
      return new font$.Font.type1(font$.Type1Fonts.zapfDingbats);
    }
    static ttf(data) {
      if (data == null) dart.nullFailed(I[88], 64, 29, "data");
      return new font$.TtfFont.new(data);
    }
    get fontName() {
      return dart.nullCheck(font$.Font._type1Map[$_get](this.font));
    }
    buildFont(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[88], 88, 33, "pdfDocument");
      return pdfDocument.fonts[$firstWhere](dart.fn(font => {
        if (font == null) dart.nullFailed(I[88], 90, 16, "font");
        return font.subtype === "/Type1" && font.fontName == this.fontName;
      }, T$.PdfFontTobool()), {orElse: dart.fn(() => {
          switch (this.font) {
            case C[153] || CT.C153:
            {
              return font.PdfFont.courier(pdfDocument);
            }
            case C[154] || CT.C154:
            {
              return font.PdfFont.courierBold(pdfDocument);
            }
            case C[155] || CT.C155:
            {
              return font.PdfFont.courierBoldOblique(pdfDocument);
            }
            case C[156] || CT.C156:
            {
              return font.PdfFont.courierOblique(pdfDocument);
            }
            case C[157] || CT.C157:
            {
              return font.PdfFont.helvetica(pdfDocument);
            }
            case C[158] || CT.C158:
            {
              return font.PdfFont.helveticaBold(pdfDocument);
            }
            case C[159] || CT.C159:
            {
              return font.PdfFont.helveticaBoldOblique(pdfDocument);
            }
            case C[160] || CT.C160:
            {
              return font.PdfFont.helveticaOblique(pdfDocument);
            }
            case C[161] || CT.C161:
            {
              return font.PdfFont.times(pdfDocument);
            }
            case C[162] || CT.C162:
            {
              return font.PdfFont.timesBold(pdfDocument);
            }
            case C[163] || CT.C163:
            {
              return font.PdfFont.timesBoldItalic(pdfDocument);
            }
            case C[164] || CT.C164:
            {
              return font.PdfFont.timesItalic(pdfDocument);
            }
            case C[165] || CT.C165:
            {
              return font.PdfFont.symbol(pdfDocument);
            }
            case C[166] || CT.C166:
            {
              return font.PdfFont.zapfDingbats(pdfDocument);
            }
            case null:
            {
              return font.PdfFont.helvetica(pdfDocument);
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
        }, T$.VoidToPdfFont())});
    }
    getFont(context) {
      if (context == null) dart.nullFailed(I[88], 130, 28, "context");
      if (this[_pdfFont] == null || !dart.equals(dart.nullCheck(this[_pdfFont]).pdfDocument, context.document)) {
        let pdfDocument = context.document;
        this[_pdfFont] = this.buildFont(pdfDocument);
      }
      return this[_pdfFont];
    }
    toString() {
      return "<Type1 Font \"" + dart.str(this.fontName) + "\">";
    }
  };
  (font$.Font.new = function() {
    this[_pdfFont] = null;
    this[font$3] = null;
    ;
  }).prototype = font$.Font.prototype;
  (font$.Font.type1 = function(font) {
    if (font == null) dart.nullFailed(I[88], 46, 30, "font");
    this[_pdfFont] = null;
    this[font$3] = font;
    ;
  }).prototype = font$.Font.prototype;
  dart.addTypeTests(font$.Font);
  dart.addTypeCaches(font$.Font);
  dart.setMethodSignature(font$.Font, () => ({
    __proto__: dart.getMethods(font$.Font.__proto__),
    buildFont: dart.fnType(font.PdfFont, [document.PdfDocument]),
    getFont: dart.fnType(dart.nullable(font.PdfFont), [widget$.Context])
  }));
  dart.setGetterSignature(font$.Font, () => ({
    __proto__: dart.getGetters(font$.Font.__proto__),
    fontName: core.String
  }));
  dart.setLibraryUri(font$.Font, I[89]);
  dart.setFieldSignature(font$.Font, () => ({
    __proto__: dart.getFields(font$.Font.__proto__),
    font: dart.finalFieldType(dart.nullable(font$.Type1Fonts)),
    [_pdfFont]: dart.fieldType(dart.nullable(font.PdfFont))
  }));
  dart.defineExtensionMethods(font$.Font, ['toString']);
  dart.defineLazy(font$.Font, {
    /*font$.Font._type1Map*/get _type1Map() {
      return C[168] || CT.C168;
    }
  }, false);
  var data$3 = dart.privateName(font$, "TtfFont.data");
  var protect$ = dart.privateName(font$, "TtfFont.protect");
  font$.TtfFont = class TtfFont extends font$.Font {
    get data() {
      return this[data$3];
    }
    set data(value) {
      super.data = value;
    }
    get protect() {
      return this[protect$];
    }
    set protect(value) {
      super.protect = value;
    }
    buildFont(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[88], 151, 33, "pdfDocument");
      return new ttffont.PdfTtfFont.new(pdfDocument, this.data, {protect: this.protect});
    }
    get fontName() {
      if (this[_pdfFont] != null) {
        return dart.nullCheck(this[_pdfFont]).fontName;
      }
      let font = new ttf_parser.TtfParser.new(this.data);
      return font.fontName;
    }
    fontNameID(nameID) {
      if (nameID == null) dart.nullFailed(I[88], 165, 36, "nameID");
      let pdfFont = this[_pdfFont];
      if (pdfFont != null) {
        if (ttffont.PdfTtfFont.is(pdfFont)) {
          return pdfFont.font.getNameID(nameID);
        }
      }
      let font = new ttf_parser.TtfParser.new(this.data);
      return font.getNameID(nameID);
    }
    toString() {
      let font = new ttf_parser.TtfParser.new(this.data);
      return "<TrueType Font \"" + dart.str(font.fontName) + "\">";
    }
  };
  (font$.TtfFont.new = function(data, opts) {
    if (data == null) dart.nullFailed(I[88], 144, 16, "data");
    let protect = opts && 'protect' in opts ? opts.protect : false;
    if (protect == null) dart.nullFailed(I[88], 144, 28, "protect");
    this[data$3] = data;
    this[protect$] = protect;
    font$.TtfFont.__proto__.new.call(this);
    ;
  }).prototype = font$.TtfFont.prototype;
  dart.addTypeTests(font$.TtfFont);
  dart.addTypeCaches(font$.TtfFont);
  dart.setMethodSignature(font$.TtfFont, () => ({
    __proto__: dart.getMethods(font$.TtfFont.__proto__),
    fontNameID: dart.fnType(dart.nullable(core.String), [ttf_parser.TtfParserName])
  }));
  dart.setLibraryUri(font$.TtfFont, I[89]);
  dart.setFieldSignature(font$.TtfFont, () => ({
    __proto__: dart.getFields(font$.TtfFont.__proto__),
    data: dart.finalFieldType(typed_data.ByteData),
    protect: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(font$.TtfFont, ['toString']);
  var dpi$0 = dart.privateName(image_provider, "ImageProvider.dpi");
  var orientation$ = dart.privateName(image_provider, "ImageProvider.orientation");
  var _cache = dart.privateName(image_provider, "_cache");
  var _width$ = dart.privateName(image_provider, "_width");
  var _height$ = dart.privateName(image_provider, "_height");
  image_provider.ImageProvider = class ImageProvider extends core.Object {
    get dpi() {
      return this[dpi$0];
    }
    set dpi(value) {
      super.dpi = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get width() {
      return dart.notNull(this.orientation.index) >= 4 ? this[_height$] : this[_width$];
    }
    get height() {
      return dart.notNull(this.orientation.index) < 4 ? this[_height$] : this[_width$];
    }
    resolve(context, size, opts) {
      let t43, t44, t43$, t43$0;
      if (context == null) dart.nullFailed(I[90], 54, 28, "context");
      if (size == null) dart.nullFailed(I[90], 54, 46, "size");
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      let effectiveDpi = (t43 = dpi, t43 == null ? this.dpi : t43);
      if (effectiveDpi == null || this[_cache][$_get](0) != null) {
        t43$ = this[_cache];
        t44 = 0;
        t43$[$_get](t44) == null ? t43$[$_set](t44, this.buildImage(context)) : null;
        if (!dart.equals(dart.nullCheck(this[_cache][$_get](0)).pdfDocument, context.document)) {
          this[_cache][$_set](0, this.buildImage(context));
        }
        return dart.nullCheck(this[_cache][$_get](0));
      }
      let width = (dart.notNull(size.x) / 72 * dart.notNull(effectiveDpi))[$toInt]();
      let height = (dart.notNull(size.y) / 72 * dart.notNull(effectiveDpi))[$toInt]();
      if (!dart.test(this[_cache][$containsKey](width))) {
        t43$0 = this[_cache];
        t43$0[$_get](width) == null ? t43$0[$_set](width, this.buildImage(context, {width: width, height: height})) : null;
      }
      if (!dart.equals(dart.nullCheck(this[_cache][$_get](width)).pdfDocument, context.document)) {
        this[_cache][$_set](width, this.buildImage(context, {width: width, height: height}));
      }
      return dart.nullCheck(this[_cache][$_get](width));
    }
  };
  (image_provider.ImageProvider.new = function(_width, _height, orientation, dpi) {
    if (_height == null) dart.nullFailed(I[90], 28, 10, "_height");
    if (orientation == null) dart.nullFailed(I[90], 29, 10, "orientation");
    this[_cache] = new (T$.IdentityMapOfint$PdfImage()).new();
    this[_width$] = _width;
    this[_height$] = _height;
    this[orientation$] = orientation;
    this[dpi$0] = dpi;
    ;
  }).prototype = image_provider.ImageProvider.prototype;
  dart.addTypeTests(image_provider.ImageProvider);
  dart.addTypeCaches(image_provider.ImageProvider);
  dart.setMethodSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getMethods(image_provider.ImageProvider.__proto__),
    resolve: dart.fnType(image$.PdfImage, [widget$.Context, point$.PdfPoint], {dpi: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getGetters(image_provider.ImageProvider.__proto__),
    width: dart.nullable(core.int),
    height: dart.nullable(core.int)
  }));
  dart.setLibraryUri(image_provider.ImageProvider, I[91]);
  dart.setFieldSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getFields(image_provider.ImageProvider.__proto__),
    dpi: dart.finalFieldType(dart.nullable(core.double)),
    [_width$]: dart.finalFieldType(dart.nullable(core.int)),
    [_height$]: dart.finalFieldType(core.int),
    orientation: dart.finalFieldType(image$.PdfImageOrientation),
    [_cache]: dart.finalFieldType(core.Map$(core.int, image$.PdfImage))
  }));
  var _image$ = dart.privateName(image_provider, "_image");
  image_provider.ImageProxy = class ImageProxy extends image_provider.ImageProvider {
    buildImage(context, opts) {
      if (context == null) dart.nullFailed(I[90], 92, 31, "context");
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return this[_image$];
    }
  };
  (image_provider.ImageProxy.new = function(_image, opts) {
    if (_image == null) dart.nullFailed(I[90], 84, 10, "_image");
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    this[_image$] = _image;
    image_provider.ImageProxy.__proto__.new.call(this, _image.width, _image.height, _image.orientation, dpi);
    ;
  }).prototype = image_provider.ImageProxy.prototype;
  dart.addTypeTests(image_provider.ImageProxy);
  dart.addTypeCaches(image_provider.ImageProxy);
  dart.setMethodSignature(image_provider.ImageProxy, () => ({
    __proto__: dart.getMethods(image_provider.ImageProxy.__proto__),
    buildImage: dart.fnType(image$.PdfImage, [widget$.Context], {height: dart.nullable(core.int), width: dart.nullable(core.int)}, {})
  }));
  dart.setLibraryUri(image_provider.ImageProxy, I[91]);
  dart.setFieldSignature(image_provider.ImageProxy, () => ({
    __proto__: dart.getFields(image_provider.ImageProxy.__proto__),
    [_image$]: dart.finalFieldType(image$.PdfImage)
  }));
  var bytes$ = dart.privateName(image_provider, "MemoryImage.bytes");
  image_provider.MemoryImage = class MemoryImage extends image_provider.ImageProvider {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    static new(bytes, opts) {
      let t43, t43$;
      if (bytes == null) dart.nullFailed(I[90], 97, 15, "bytes");
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      let decoder = formats.findDecoderForData(bytes);
      if (decoder == null) {
        dart.throw(core.Exception.new("Unable to guess the image type " + dart.str(bytes[$length]) + " bytes"));
      }
      if (jpeg_decoder.JpegDecoder.is(decoder)) {
        let info = exif.PdfJpegInfo.new(bytes);
        return new image_provider.MemoryImage.__(bytes, info.width, info.height, (t43 = orientation, t43 == null ? info.orientation : t43), dpi);
      }
      let info = decoder.startDecode(bytes);
      if (info == null) {
        dart.throw(core.Exception.new("Unable decode the image"));
      }
      return new image_provider.MemoryImage.__(bytes, info.width, info.height, (t43$ = orientation, t43$ == null ? image$.PdfImageOrientation.topLeft : t43$), dpi);
    }
    buildImage(context, opts) {
      if (context == null) dart.nullFailed(I[90], 145, 31, "context");
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      if (width == null) {
        return image$.PdfImage.file(context.document, {bytes: this.bytes});
      }
      let image = formats.decodeImage(this.bytes);
      if (image == null) {
        dart.throw(core.Exception.new("Unable decode the image"));
      }
      let resized = copy_resize.copyResize(image, {width: width});
      return image$.PdfImage.fromImage(context.document, {image: resized});
    }
  };
  (image_provider.MemoryImage.__ = function(bytes, width, height, orientation, dpi) {
    if (bytes == null) dart.nullFailed(I[90], 134, 10, "bytes");
    if (height == null) dart.nullFailed(I[90], 136, 9, "height");
    if (orientation == null) dart.nullFailed(I[90], 137, 25, "orientation");
    this[bytes$] = bytes;
    image_provider.MemoryImage.__proto__.new.call(this, width, height, orientation, dpi);
    ;
  }).prototype = image_provider.MemoryImage.prototype;
  dart.addTypeTests(image_provider.MemoryImage);
  dart.addTypeCaches(image_provider.MemoryImage);
  dart.setMethodSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getMethods(image_provider.MemoryImage.__proto__),
    buildImage: dart.fnType(image$.PdfImage, [widget$.Context], {height: dart.nullable(core.int), width: dart.nullable(core.int)}, {})
  }));
  dart.setLibraryUri(image_provider.MemoryImage, I[91]);
  dart.setFieldSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getFields(image_provider.MemoryImage.__proto__),
    bytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  image_provider.ImageImage = class ImageImage extends image_provider.ImageProvider {
    buildImage(context, opts) {
      if (context == null) dart.nullFailed(I[90], 173, 31, "context");
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      if (width == null) {
        return image$.PdfImage.fromImage(context.document, {image: this[_image$]});
      }
      let resized = copy_resize.copyResize(this[_image$], {width: width});
      return image$.PdfImage.fromImage(context.document, {image: resized});
    }
  };
  (image_provider.ImageImage.new = function(_image, opts) {
    let t43;
    if (_image == null) dart.nullFailed(I[90], 163, 10, "_image");
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    this[_image$] = _image;
    image_provider.ImageImage.__proto__.new.call(this, _image.width, _image.height, (t43 = orientation, t43 == null ? image$.PdfImageOrientation.topLeft : t43), dpi);
    ;
  }).prototype = image_provider.ImageImage.prototype;
  dart.addTypeTests(image_provider.ImageImage);
  dart.addTypeCaches(image_provider.ImageImage);
  dart.setMethodSignature(image_provider.ImageImage, () => ({
    __proto__: dart.getMethods(image_provider.ImageImage.__proto__),
    buildImage: dart.fnType(image$.PdfImage, [widget$.Context], {height: dart.nullable(core.int), width: dart.nullable(core.int)}, {})
  }));
  dart.setLibraryUri(image_provider.ImageImage, I[91]);
  dart.setFieldSignature(image_provider.ImageImage, () => ({
    __proto__: dart.getFields(image_provider.ImageImage.__proto__),
    [_image$]: dart.finalFieldType(image.Image)
  }));
  image_provider.RawImage = class RawImage extends image_provider.ImageImage {};
  (image_provider.RawImage.new = function(opts) {
    let bytes = opts && 'bytes' in opts ? opts.bytes : null;
    if (bytes == null) dart.nullFailed(I[90], 185, 24, "bytes");
    let width = opts && 'width' in opts ? opts.width : null;
    if (width == null) dart.nullFailed(I[90], 186, 18, "width");
    let height = opts && 'height' in opts ? opts.height : null;
    if (height == null) dart.nullFailed(I[90], 187, 18, "height");
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    image_provider.RawImage.__proto__.new.call(this, new image.Image.fromBytes(width, height, bytes), {orientation: orientation, dpi: dpi});
    ;
  }).prototype = image_provider.RawImage.prototype;
  dart.addTypeTests(image_provider.RawImage);
  dart.addTypeCaches(image_provider.RawImage);
  dart.setLibraryUri(image_provider.RawImage, I[91]);
  decoration$.DecorationPosition = class DecorationPosition extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (decoration$.DecorationPosition.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[92], 31, 6, "index");
    if (_name == null) dart.nullFailed(I[92], 31, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = decoration$.DecorationPosition.prototype;
  dart.addTypeTests(decoration$.DecorationPosition);
  dart.addTypeCaches(decoration$.DecorationPosition);
  dart.setLibraryUri(decoration$.DecorationPosition, I[41]);
  dart.setFieldSignature(decoration$.DecorationPosition, () => ({
    __proto__: dart.getFields(decoration$.DecorationPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(decoration$.DecorationPosition, ['toString']);
  decoration$.DecorationPosition.background = C[151] || CT.C151;
  decoration$.DecorationPosition.foreground = C[169] || CT.C169;
  decoration$.DecorationPosition.values = C[170] || CT.C170;
  var image$4 = dart.privateName(decoration$, "DecorationImage.image");
  var fit$7 = dart.privateName(decoration$, "DecorationImage.fit");
  var alignment$5 = dart.privateName(decoration$, "DecorationImage.alignment");
  var dpi$1 = dart.privateName(decoration$, "DecorationImage.dpi");
  decoration$.DecorationImage = class DecorationImage extends decoration$.DecorationGraphic {
    get image() {
      return this[image$4];
    }
    set image(value) {
      super.image = value;
    }
    get fit() {
      return this[fit$7];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$5];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get dpi() {
      return this[dpi$1];
    }
    set dpi(value) {
      super.dpi = value;
    }
    paint(context, box) {
      let t43, t43$;
      if (context == null) dart.nullFailed(I[92], 55, 22, "context");
      if (box == null) dart.nullFailed(I[92], 55, 39, "box");
      let _image = this.image.resolve(context, box.size, {dpi: this.dpi});
      let imageSize = new point$.PdfPoint.new(_image.width[$toDouble](), _image.height[$toDouble]());
      let sizes = geometry.applyBoxFit(this.fit, imageSize, box.size);
      let scaleX = dart.notNull(dart.nullCheck(sizes.destination).x) / dart.notNull(dart.nullCheck(sizes.source).x);
      let scaleY = dart.notNull(dart.nullCheck(sizes.destination).y) / dart.notNull(dart.nullCheck(sizes.source).y);
      let sourceRect = this.alignment.inscribe(dart.nullCheck(sizes.source), rect$.PdfRect.fromPoints(point$.PdfPoint.zero, imageSize));
      let destinationRect = this.alignment.inscribe(dart.nullCheck(sizes.destination), box);
      let mat = (t43 = vector_math_64.Matrix4.translationValues(destinationRect.x, destinationRect.y, 0.0), (() => {
        t43.scale(scaleX, scaleY, 1.0);
        t43.translate(-dart.notNull(sourceRect.x), -dart.notNull(sourceRect.y));
        return t43;
      })());
      t43$ = context.canvas;
      (() => {
        t43$.saveContext();
        t43$.drawBox(box);
        t43$.clipPath();
        t43$.setTransform(mat);
        t43$.drawImage(_image, 0.0, 0.0, imageSize.x, imageSize.y);
        t43$.restoreContext();
        return t43$;
      })();
    }
  };
  (decoration$.DecorationImage.new = function(opts) {
    let image = opts && 'image' in opts ? opts.image : null;
    if (image == null) dart.nullFailed(I[92], 43, 19, "image");
    let fit = opts && 'fit' in opts ? opts.fit : C[75] || CT.C75;
    if (fit == null) dart.nullFailed(I[92], 44, 10, "fit");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    if (alignment == null) dart.nullFailed(I[92], 45, 10, "alignment");
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    this[image$4] = image;
    this[fit$7] = fit;
    this[alignment$5] = alignment;
    this[dpi$1] = dpi;
    decoration$.DecorationImage.__proto__.new.call(this);
    ;
  }).prototype = decoration$.DecorationImage.prototype;
  dart.addTypeTests(decoration$.DecorationImage);
  dart.addTypeCaches(decoration$.DecorationImage);
  dart.setMethodSignature(decoration$.DecorationImage, () => ({
    __proto__: dart.getMethods(decoration$.DecorationImage.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(decoration$.DecorationImage, I[41]);
  dart.setFieldSignature(decoration$.DecorationImage, () => ({
    __proto__: dart.getFields(decoration$.DecorationImage.__proto__),
    image: dart.finalFieldType(image_provider.ImageProvider),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment),
    dpi: dart.finalFieldType(dart.nullable(core.double))
  }));
  decoration$.TileMode = class TileMode extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (decoration$.TileMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[92], 82, 6, "index");
    if (_name == null) dart.nullFailed(I[92], 82, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = decoration$.TileMode.prototype;
  dart.addTypeTests(decoration$.TileMode);
  dart.addTypeCaches(decoration$.TileMode);
  dart.setLibraryUri(decoration$.TileMode, I[41]);
  dart.setFieldSignature(decoration$.TileMode, () => ({
    __proto__: dart.getFields(decoration$.TileMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(decoration$.TileMode, ['toString']);
  decoration$.TileMode.clamp = C[171] || CT.C171;
  decoration$.TileMode.values = C[172] || CT.C172;
  var colors$1 = dart.privateName(decoration$, "Gradient.colors");
  var stops$0 = dart.privateName(decoration$, "Gradient.stops");
  decoration$.Gradient = class Gradient extends core.Object {
    get colors() {
      return this[colors$1];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$0];
    }
    set stops(value) {
      super.stops = value;
    }
  };
  (decoration$.Gradient.new = function(opts) {
    let colors = opts && 'colors' in opts ? opts.colors : null;
    if (colors == null) dart.nullFailed(I[92], 98, 19, "colors");
    let stops = opts && 'stops' in opts ? opts.stops : null;
    this[colors$1] = colors;
    this[stops$0] = stops;
    ;
  }).prototype = decoration$.Gradient.prototype;
  dart.addTypeTests(decoration$.Gradient);
  dart.addTypeCaches(decoration$.Gradient);
  dart.setLibraryUri(decoration$.Gradient, I[41]);
  dart.setFieldSignature(decoration$.Gradient, () => ({
    __proto__: dart.getFields(decoration$.Gradient.__proto__),
    colors: dart.finalFieldType(core.List$(color$.PdfColor)),
    stops: dart.finalFieldType(dart.nullable(core.List$(core.double)))
  }));
  var begin$ = dart.privateName(decoration$, "LinearGradient.begin");
  var end$ = dart.privateName(decoration$, "LinearGradient.end");
  var tileMode$ = dart.privateName(decoration$, "LinearGradient.tileMode");
  decoration$.LinearGradient = class LinearGradient extends decoration$.Gradient {
    get begin() {
      return this[begin$];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    paint(context, box) {
      let t43, t43$;
      if (context == null) dart.nullFailed(I[92], 131, 22, "context");
      if (box == null) dart.nullFailed(I[92], 131, 39, "box");
      if (dart.test(this.colors[$isEmpty])) {
        return;
      }
      if (this.colors[$length] === 1) {
        t43 = context.canvas;
        (() => {
          t43.setFillColor(this.colors[$first]);
          t43.fillPath();
          return t43;
        })();
      }
      if (!(this.stops == null || dart.nullCheck(this.stops)[$length] == this.colors[$length])) dart.assertFailed(null, I[92], 142, 12, "stops == null || stops!.length == colors.length");
      t43$ = context.canvas;
      (() => {
        t43$.saveContext();
        t43$.clipPath();
        t43$.applyShader(new shading.PdfShading.new(context.document, {shadingType: shading.PdfShadingType.axial, boundingBox: box, function: $function.PdfBaseFunction.colorsAndStops(context.document, this.colors, this.stops), start: this.begin.withinRect(box), end: this.end.withinRect(box), extendStart: true, extendEnd: true}));
        t43$.restoreContext();
        return t43$;
      })();
    }
  };
  (decoration$.LinearGradient.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : C[173] || CT.C173;
    if (begin == null) dart.nullFailed(I[92], 114, 10, "begin");
    let end = opts && 'end' in opts ? opts.end : C[174] || CT.C174;
    if (end == null) dart.nullFailed(I[92], 115, 10, "end");
    let colors = opts && 'colors' in opts ? opts.colors : null;
    if (colors == null) dart.nullFailed(I[92], 116, 29, "colors");
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[171] || CT.C171;
    if (tileMode == null) dart.nullFailed(I[92], 118, 10, "tileMode");
    this[begin$] = begin;
    this[end$] = end;
    this[tileMode$] = tileMode;
    decoration$.LinearGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = decoration$.LinearGradient.prototype;
  dart.addTypeTests(decoration$.LinearGradient);
  dart.addTypeCaches(decoration$.LinearGradient);
  dart.setMethodSignature(decoration$.LinearGradient, () => ({
    __proto__: dart.getMethods(decoration$.LinearGradient.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(decoration$.LinearGradient, I[41]);
  dart.setFieldSignature(decoration$.LinearGradient, () => ({
    __proto__: dart.getFields(decoration$.LinearGradient.__proto__),
    begin: dart.finalFieldType(geometry.Alignment),
    end: dart.finalFieldType(geometry.Alignment),
    tileMode: dart.finalFieldType(decoration$.TileMode)
  }));
  var center$ = dart.privateName(decoration$, "RadialGradient.center");
  var radius$ = dart.privateName(decoration$, "RadialGradient.radius");
  var tileMode$0 = dart.privateName(decoration$, "RadialGradient.tileMode");
  var focal$ = dart.privateName(decoration$, "RadialGradient.focal");
  var focalRadius$ = dart.privateName(decoration$, "RadialGradient.focalRadius");
  decoration$.RadialGradient = class RadialGradient extends decoration$.Gradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    paint(context, box) {
      let t43, t43$, t43$0;
      if (context == null) dart.nullFailed(I[92], 200, 22, "context");
      if (box == null) dart.nullFailed(I[92], 200, 39, "box");
      if (dart.test(this.colors[$isEmpty])) {
        return;
      }
      if (this.colors[$length] === 1) {
        t43 = context.canvas;
        (() => {
          t43.setFillColor(this.colors[$first]);
          t43.fillPath();
          return t43;
        })();
      }
      if (!(this.stops == null || dart.nullCheck(this.stops)[$length] == this.colors[$length])) dart.assertFailed(null, I[92], 211, 12, "stops == null || stops!.length == colors.length");
      let _focal = (t43$ = this.focal, t43$ == null ? this.center : t43$);
      let _radius = math.min(core.double, box.width, box.height);
      t43$0 = context.canvas;
      (() => {
        t43$0.saveContext();
        t43$0.clipPath();
        t43$0.applyShader(new shading.PdfShading.new(context.document, {shadingType: shading.PdfShadingType.radial, boundingBox: box, function: $function.PdfBaseFunction.colorsAndStops(context.document, this.colors, this.stops), start: _focal.withinRect(box), end: this.center.withinRect(box), radius0: dart.notNull(this.focalRadius) * _radius, radius1: dart.notNull(this.radius) * _radius, extendStart: true, extendEnd: true}));
        t43$0.restoreContext();
        return t43$0;
      })();
    }
  };
  (decoration$.RadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C[19] || CT.C19;
    if (center == null) dart.nullFailed(I[92], 174, 10, "center");
    let radius = opts && 'radius' in opts ? opts.radius : 0.5;
    if (radius == null) dart.nullFailed(I[92], 175, 10, "radius");
    let colors = opts && 'colors' in opts ? opts.colors : null;
    if (colors == null) dart.nullFailed(I[92], 176, 29, "colors");
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[171] || CT.C171;
    if (tileMode == null) dart.nullFailed(I[92], 178, 10, "tileMode");
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    if (focalRadius == null) dart.nullFailed(I[92], 180, 10, "focalRadius");
    this[center$] = center;
    this[radius$] = radius;
    this[tileMode$0] = tileMode;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    decoration$.RadialGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = decoration$.RadialGradient.prototype;
  dart.addTypeTests(decoration$.RadialGradient);
  dart.addTypeCaches(decoration$.RadialGradient);
  dart.setMethodSignature(decoration$.RadialGradient, () => ({
    __proto__: dart.getMethods(decoration$.RadialGradient.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(decoration$.RadialGradient, I[41]);
  dart.setFieldSignature(decoration$.RadialGradient, () => ({
    __proto__: dart.getFields(decoration$.RadialGradient.__proto__),
    center: dart.finalFieldType(geometry.Alignment),
    radius: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(decoration$.TileMode),
    focal: dart.finalFieldType(dart.nullable(geometry.Alignment)),
    focalRadius: dart.finalFieldType(core.double)
  }));
  var color$12 = dart.privateName(decoration$, "BoxShadow.color");
  var offset$1 = dart.privateName(decoration$, "BoxShadow.offset");
  var blurRadius$ = dart.privateName(decoration$, "BoxShadow.blurRadius");
  var spreadRadius$ = dart.privateName(decoration$, "BoxShadow.spreadRadius");
  var _rect = dart.privateName(decoration$, "_rect");
  var _ellipse = dart.privateName(decoration$, "_ellipse");
  decoration$.BoxShadow = class BoxShadow extends core.Object {
    get color() {
      return this[color$12];
    }
    set color(value) {
      super.color = value;
    }
    get offset() {
      return this[offset$1];
    }
    set offset(value) {
      super.offset = value;
    }
    get blurRadius() {
      return this[blurRadius$];
    }
    set blurRadius(value) {
      super.blurRadius = value;
    }
    get spreadRadius() {
      return this[spreadRadius$];
    }
    set spreadRadius(value) {
      super.spreadRadius = value;
    }
    [_rect](width, height) {
      if (width == null) dart.nullFailed(I[92], 255, 25, "width");
      if (height == null) dart.nullFailed(I[92], 255, 39, "height");
      let shadow = new image.Image.new((dart.notNull(width) + dart.notNull(this.spreadRadius) * 2)[$round](), (dart.notNull(height) + dart.notNull(this.spreadRadius) * 2)[$round]());
      fill_rect.fillRect(shadow, this.spreadRadius[$round](), this.spreadRadius[$round](), (dart.notNull(this.spreadRadius) + dart.notNull(width))[$round](), (dart.notNull(this.spreadRadius) + dart.notNull(height))[$round](), this.color.toInt());
      gaussian_blur.gaussianBlur(shadow, this.blurRadius[$round]());
      return shadow;
    }
    [_ellipse](width, height) {
      if (width == null) dart.nullFailed(I[92], 275, 28, "width");
      if (height == null) dart.nullFailed(I[92], 275, 42, "height");
      let shadow = new image.Image.new((dart.notNull(width) + dart.notNull(this.spreadRadius) * 2)[$round](), (dart.notNull(height) + dart.notNull(this.spreadRadius) * 2)[$round]());
      draw_circle.fillCircle(shadow, (dart.notNull(this.spreadRadius) + dart.notNull(width) / 2)[$round](), (dart.notNull(this.spreadRadius) + dart.notNull(height) / 2)[$round](), (dart.notNull(width) / 2)[$round](), this.color.toInt());
      gaussian_blur.gaussianBlur(shadow, this.blurRadius[$round]());
      return shadow;
    }
  };
  (decoration$.BoxShadow.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
    if (color == null) dart.nullFailed(I[92], 244, 10, "color");
    let offset = opts && 'offset' in opts ? opts.offset : C[26] || CT.C26;
    if (offset == null) dart.nullFailed(I[92], 245, 10, "offset");
    let blurRadius = opts && 'blurRadius' in opts ? opts.blurRadius : 0;
    if (blurRadius == null) dart.nullFailed(I[92], 246, 10, "blurRadius");
    let spreadRadius = opts && 'spreadRadius' in opts ? opts.spreadRadius : 0;
    if (spreadRadius == null) dart.nullFailed(I[92], 247, 10, "spreadRadius");
    this[color$12] = color;
    this[offset$1] = offset;
    this[blurRadius$] = blurRadius;
    this[spreadRadius$] = spreadRadius;
    ;
  }).prototype = decoration$.BoxShadow.prototype;
  dart.addTypeTests(decoration$.BoxShadow);
  dart.addTypeCaches(decoration$.BoxShadow);
  dart.setMethodSignature(decoration$.BoxShadow, () => ({
    __proto__: dart.getMethods(decoration$.BoxShadow.__proto__),
    [_rect]: dart.fnType(image.Image, [core.double, core.double]),
    [_ellipse]: dart.fnType(image.Image, [core.double, core.double])
  }));
  dart.setLibraryUri(decoration$.BoxShadow, I[41]);
  dart.setFieldSignature(decoration$.BoxShadow, () => ({
    __proto__: dart.getFields(decoration$.BoxShadow.__proto__),
    color: dart.finalFieldType(color$.PdfColor),
    offset: dart.finalFieldType(point$.PdfPoint),
    blurRadius: dart.finalFieldType(core.double),
    spreadRadius: dart.finalFieldType(core.double)
  }));
  decoration$.BoxShape = class BoxShape extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (decoration$.BoxShape.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[92], 295, 6, "index");
    if (_name == null) dart.nullFailed(I[92], 295, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = decoration$.BoxShape.prototype;
  dart.addTypeTests(decoration$.BoxShape);
  dart.addTypeCaches(decoration$.BoxShape);
  dart.setLibraryUri(decoration$.BoxShape, I[41]);
  dart.setFieldSignature(decoration$.BoxShape, () => ({
    __proto__: dart.getFields(decoration$.BoxShape.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(decoration$.BoxShape, ['toString']);
  decoration$.BoxShape.circle = C[13] || CT.C13;
  decoration$.BoxShape.rectangle = C[12] || CT.C12;
  decoration$.BoxShape.values = C[175] || CT.C175;
  decoration$.PaintPhase = class PaintPhase extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (decoration$.PaintPhase.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[92], 297, 6, "index");
    if (_name == null) dart.nullFailed(I[92], 297, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = decoration$.PaintPhase.prototype;
  dart.addTypeTests(decoration$.PaintPhase);
  dart.addTypeCaches(decoration$.PaintPhase);
  dart.setLibraryUri(decoration$.PaintPhase, I[41]);
  dart.setFieldSignature(decoration$.PaintPhase, () => ({
    __proto__: dart.getFields(decoration$.PaintPhase.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(decoration$.PaintPhase, ['toString']);
  decoration$.PaintPhase.all = C[176] || CT.C176;
  decoration$.PaintPhase.background = C[177] || CT.C177;
  decoration$.PaintPhase.foreground = C[178] || CT.C178;
  decoration$.PaintPhase.values = C[179] || CT.C179;
  const color$13 = BoxDecoration_color;
  const border$3 = BoxDecoration_border;
  const borderRadius$ = BoxDecoration_borderRadius;
  const shape$0 = BoxDecoration_shape;
  const image$5 = BoxDecoration_image;
  const gradient$0 = BoxDecoration_gradient;
  const boxShadow$ = BoxDecoration_boxShadow;
  decoration$.BoxDecoration = class BoxDecoration extends core.Object {
    get color() {
      return this[color$13];
    }
    set color(value) {
      super.color = value;
    }
    get border() {
      return this[border$3];
    }
    set border(value) {
      super.border = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get shape() {
      return this[shape$0];
    }
    set shape(value) {
      super.shape = value;
    }
    get image() {
      return this[image$5];
    }
    set image(value) {
      super.image = value;
    }
    get gradient() {
      return this[gradient$0];
    }
    set gradient(value) {
      super.gradient = value;
    }
    get boxShadow() {
      return this[boxShadow$];
    }
    set boxShadow(value) {
      super.boxShadow = value;
    }
    paint(context, box, phase = C[176] || CT.C176) {
      let t43, t43$;
      if (context == null) dart.nullFailed(I[92], 321, 13, "context");
      if (box == null) dart.nullFailed(I[92], 322, 13, "box");
      if (phase == null) dart.nullFailed(I[92], 323, 16, "phase");
      if (phase == decoration$.PaintPhase.all || phase == decoration$.PaintPhase.background) {
        if (this.color != null) {
          switch (this.shape) {
            case C[12] || CT.C12:
            {
              if (this.borderRadius == null) {
                if (this.boxShadow != null) {
                  for (let s of dart.nullCheck(this.boxShadow)) {
                    let i = s[_rect](box.width, box.height);
                    let m = image$.PdfImage.fromImage(context.document, {image: i});
                    context.canvas.drawImage(m, dart.notNull(box.x) + dart.notNull(s.offset.x) - dart.notNull(s.spreadRadius), dart.notNull(box.y) - dart.notNull(s.offset.y) - dart.notNull(s.spreadRadius));
                  }
                }
                context.canvas.drawBox(box);
              } else {
                if (this.boxShadow != null) {
                  for (let s of dart.nullCheck(this.boxShadow)) {
                    let i = s[_rect](box.width, box.height);
                    let m = image$.PdfImage.fromImage(context.document, {image: i});
                    context.canvas.drawImage(m, dart.notNull(box.x) + dart.notNull(s.offset.x) - dart.notNull(s.spreadRadius), dart.notNull(box.y) - dart.notNull(s.offset.y) - dart.notNull(s.spreadRadius));
                  }
                }
                dart.nullCheck(this.borderRadius).paint(context, box);
              }
              break;
            }
            case C[13] || CT.C13:
            {
              if (this.boxShadow != null && box.width == box.height) {
                for (let s of dart.nullCheck(this.boxShadow)) {
                  let i = s[_ellipse](box.width, box.height);
                  let m = image$.PdfImage.fromImage(context.document, {image: i});
                  context.canvas.drawImage(m, dart.notNull(box.x) + dart.notNull(s.offset.x) - dart.notNull(s.spreadRadius), dart.notNull(box.y) - dart.notNull(s.offset.y) - dart.notNull(s.spreadRadius));
                }
              }
              context.canvas.drawEllipse(dart.notNull(box.x) + dart.notNull(box.width) / 2.0, dart.notNull(box.y) + dart.notNull(box.height) / 2.0, dart.notNull(box.width) / 2.0, dart.notNull(box.height) / 2.0);
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
          t43 = context.canvas;
          (() => {
            t43.setFillColor(this.color);
            t43.fillPath();
            return t43;
          })();
        }
        if (this.gradient != null) {
          switch (this.shape) {
            case C[12] || CT.C12:
            {
              if (this.borderRadius == null) {
                context.canvas.drawBox(box);
              } else {
                dart.nullCheck(this.borderRadius).paint(context, box);
              }
              break;
            }
            case C[13] || CT.C13:
            {
              context.canvas.drawEllipse(dart.notNull(box.x) + dart.notNull(box.width) / 2.0, dart.notNull(box.y) + dart.notNull(box.height) / 2.0, dart.notNull(box.width) / 2.0, dart.notNull(box.height) / 2.0);
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
          dart.nullCheck(this.gradient).paint(context, box);
        }
        if (this.image != null) {
          context.canvas.saveContext();
          switch (this.shape) {
            case C[13] || CT.C13:
            {
              t43$ = context.canvas;
              (() => {
                t43$.drawEllipse(dart.notNull(box.x) + dart.notNull(box.width) / 2.0, dart.notNull(box.y) + dart.notNull(box.height) / 2.0, dart.notNull(box.width) / 2.0, dart.notNull(box.height) / 2.0);
                t43$.clipPath();
                return t43$;
              })();
              break;
            }
            case C[12] || CT.C12:
            {
              if (this.borderRadius != null) {
                dart.nullCheck(this.borderRadius).paint(context, box);
                context.canvas.clipPath();
              }
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
          dart.nullCheck(this.image).paint(context, box);
          context.canvas.restoreContext();
        }
      }
      if (phase == decoration$.PaintPhase.all || phase == decoration$.PaintPhase.foreground) {
        if (this.border != null) {
          dart.nullCheck(this.border).paint(context, box, {shape: this.shape, borderRadius: this.borderRadius});
        }
      }
    }
  };
  (decoration$.BoxDecoration.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let boxShadow = opts && 'boxShadow' in opts ? opts.boxShadow : null;
    let gradient = opts && 'gradient' in opts ? opts.gradient : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let shape = opts && 'shape' in opts ? opts.shape : C[12] || CT.C12;
    if (shape == null) dart.nullFailed(I[92], 308, 10, "shape");
    this[color$13] = color;
    this[border$3] = border;
    this[borderRadius$] = borderRadius;
    this[boxShadow$] = boxShadow;
    this[gradient$0] = gradient;
    this[image$5] = image;
    this[shape$0] = shape;
    ;
  }).prototype = decoration$.BoxDecoration.prototype;
  dart.addTypeTests(decoration$.BoxDecoration);
  dart.addTypeCaches(decoration$.BoxDecoration);
  dart.setMethodSignature(decoration$.BoxDecoration, () => ({
    __proto__: dart.getMethods(decoration$.BoxDecoration.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect], [decoration$.PaintPhase])
  }));
  dart.setLibraryUri(decoration$.BoxDecoration, I[41]);
  dart.setFieldSignature(decoration$.BoxDecoration, () => ({
    __proto__: dart.getFields(decoration$.BoxDecoration.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(box_border.BoxBorder)),
    borderRadius: dart.finalFieldType(dart.nullable(border_radius.BorderRadius)),
    shape: dart.finalFieldType(decoration$.BoxShape),
    image: dart.finalFieldType(dart.nullable(decoration$.DecorationGraphic)),
    gradient: dart.finalFieldType(dart.nullable(decoration$.Gradient)),
    boxShadow: dart.finalFieldType(dart.nullable(core.List$(decoration$.BoxShadow)))
  }));
  var _name$15 = dart.privateName(text_style, "_name");
  text_style.FontWeight = class FontWeight extends core.Object {
    toString() {
      return this[_name$15];
    }
  };
  (text_style.FontWeight.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[93], 25, 6, "index");
    if (_name == null) dart.nullFailed(I[93], 25, 6, "_name");
    this.index = index;
    this[_name$15] = _name;
    ;
  }).prototype = text_style.FontWeight.prototype;
  dart.addTypeTests(text_style.FontWeight);
  dart.addTypeCaches(text_style.FontWeight);
  dart.setLibraryUri(text_style.FontWeight, I[94]);
  dart.setFieldSignature(text_style.FontWeight, () => ({
    __proto__: dart.getFields(text_style.FontWeight.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$15]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_style.FontWeight, ['toString']);
  text_style.FontWeight.normal = C[180] || CT.C180;
  text_style.FontWeight.bold = C[181] || CT.C181;
  text_style.FontWeight.values = C[182] || CT.C182;
  text_style.FontStyle = class FontStyle extends core.Object {
    toString() {
      return this[_name$15];
    }
  };
  (text_style.FontStyle.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[93], 27, 6, "index");
    if (_name == null) dart.nullFailed(I[93], 27, 6, "_name");
    this.index = index;
    this[_name$15] = _name;
    ;
  }).prototype = text_style.FontStyle.prototype;
  dart.addTypeTests(text_style.FontStyle);
  dart.addTypeCaches(text_style.FontStyle);
  dart.setLibraryUri(text_style.FontStyle, I[94]);
  dart.setFieldSignature(text_style.FontStyle, () => ({
    __proto__: dart.getFields(text_style.FontStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$15]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_style.FontStyle, ['toString']);
  text_style.FontStyle.normal = C[183] || CT.C183;
  text_style.FontStyle.italic = C[184] || CT.C184;
  text_style.FontStyle.values = C[185] || CT.C185;
  text_style.TextDecorationStyle = class TextDecorationStyle extends core.Object {
    toString() {
      return this[_name$15];
    }
  };
  (text_style.TextDecorationStyle.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[93], 29, 6, "index");
    if (_name == null) dart.nullFailed(I[93], 29, 6, "_name");
    this.index = index;
    this[_name$15] = _name;
    ;
  }).prototype = text_style.TextDecorationStyle.prototype;
  dart.addTypeTests(text_style.TextDecorationStyle);
  dart.addTypeCaches(text_style.TextDecorationStyle);
  dart.setLibraryUri(text_style.TextDecorationStyle, I[94]);
  dart.setFieldSignature(text_style.TextDecorationStyle, () => ({
    __proto__: dart.getFields(text_style.TextDecorationStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$15]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_style.TextDecorationStyle, ['toString']);
  text_style.TextDecorationStyle.solid = C[186] || CT.C186;
  text_style.TextDecorationStyle.double = C[187] || CT.C187;
  text_style.TextDecorationStyle.values = C[188] || CT.C188;
  var _mask$ = dart.privateName(text_style, "TextDecoration._mask");
  var _mask = dart.privateName(text_style, "_mask");
  text_style.TextDecoration = class TextDecoration extends core.Object {
    get [_mask]() {
      return this[_mask$];
    }
    set [_mask](value) {
      super[_mask] = value;
    }
    static combine(decorations) {
      if (decorations == null) dart.nullFailed(I[93], 36, 55, "decorations");
      let mask = 0;
      for (let decoration of decorations) {
        mask = (mask | dart.notNull(decoration[_mask])) >>> 0;
      }
      return new text_style.TextDecoration.__(mask);
    }
    merge(other) {
      if (other == null) {
        return this;
      }
      return new text_style.TextDecoration.__((dart.notNull(this[_mask]) | dart.notNull(other[_mask])) >>> 0);
    }
    contains(other) {
      if (other == null) dart.nullFailed(I[93], 66, 32, "other");
      return (dart.notNull(this[_mask]) | dart.notNull(other[_mask])) >>> 0 === this[_mask];
    }
    _equals(other) {
      if (other == null) return false;
      if (!text_style.TextDecoration.is(other)) {
        return false;
      }
      let typedOther = other;
      return this[_mask] == typedOther[_mask];
    }
    get hashCode() {
      return dart.hashCode(this[_mask]);
    }
    toString() {
      if (this[_mask] === 0) {
        return "TextDecoration.none";
      }
      let values = T$.JSArrayOfString().of([]);
      if ((dart.notNull(this[_mask]) & dart.notNull(text_style.TextDecoration.underline[_mask])) !== 0) {
        values[$add]("underline");
      }
      if ((dart.notNull(this[_mask]) & dart.notNull(text_style.TextDecoration.overline[_mask])) !== 0) {
        values[$add]("overline");
      }
      if ((dart.notNull(this[_mask]) & dart.notNull(text_style.TextDecoration.lineThrough[_mask])) !== 0) {
        values[$add]("lineThrough");
      }
      if (values[$length] === 1) {
        return "TextDecoration." + dart.str(values[$_get](0));
      }
      return "TextDecoration.combine([" + dart.str(values[$join](", ")) + "])";
    }
  };
  (text_style.TextDecoration.__ = function(_mask) {
    if (_mask == null) dart.nullFailed(I[93], 33, 31, "_mask");
    this[_mask$] = _mask;
    ;
  }).prototype = text_style.TextDecoration.prototype;
  dart.addTypeTests(text_style.TextDecoration);
  dart.addTypeCaches(text_style.TextDecoration);
  dart.setMethodSignature(text_style.TextDecoration, () => ({
    __proto__: dart.getMethods(text_style.TextDecoration.__proto__),
    merge: dart.fnType(text_style.TextDecoration, [dart.nullable(text_style.TextDecoration)]),
    contains: dart.fnType(core.bool, [text_style.TextDecoration]),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(text_style.TextDecoration, I[94]);
  dart.setFieldSignature(text_style.TextDecoration, () => ({
    __proto__: dart.getFields(text_style.TextDecoration.__proto__),
    [_mask]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(text_style.TextDecoration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(text_style.TextDecoration, ['hashCode']);
  dart.defineLazy(text_style.TextDecoration, {
    /*text_style.TextDecoration.none*/get none() {
      return C[189] || CT.C189;
    },
    /*text_style.TextDecoration.underline*/get underline() {
      return C[190] || CT.C190;
    },
    /*text_style.TextDecoration.overline*/get overline() {
      return C[191] || CT.C191;
    },
    /*text_style.TextDecoration.lineThrough*/get lineThrough() {
      return C[192] || CT.C192;
    }
  }, false);
  var inherit$0 = dart.privateName(text_style, "TextStyle.inherit");
  var color$14 = dart.privateName(text_style, "TextStyle.color");
  var fontNormal$ = dart.privateName(text_style, "TextStyle.fontNormal");
  var fontBold$ = dart.privateName(text_style, "TextStyle.fontBold");
  var fontItalic$ = dart.privateName(text_style, "TextStyle.fontItalic");
  var fontBoldItalic$ = dart.privateName(text_style, "TextStyle.fontBoldItalic");
  var fontSize$0 = dart.privateName(text_style, "TextStyle.fontSize");
  var fontWeight$0 = dart.privateName(text_style, "TextStyle.fontWeight");
  var fontStyle$0 = dart.privateName(text_style, "TextStyle.fontStyle");
  var letterSpacing$ = dart.privateName(text_style, "TextStyle.letterSpacing");
  var lineSpacing$ = dart.privateName(text_style, "TextStyle.lineSpacing");
  var wordSpacing$ = dart.privateName(text_style, "TextStyle.wordSpacing");
  var height$7 = dart.privateName(text_style, "TextStyle.height");
  var background$ = dart.privateName(text_style, "TextStyle.background");
  var decoration$7 = dart.privateName(text_style, "TextStyle.decoration");
  var decorationColor$ = dart.privateName(text_style, "TextStyle.decorationColor");
  var decorationStyle$ = dart.privateName(text_style, "TextStyle.decorationStyle");
  var decorationThickness$ = dart.privateName(text_style, "TextStyle.decorationThickness");
  var renderingMode$ = dart.privateName(text_style, "TextStyle.renderingMode");
  text_style.TextStyle = class TextStyle extends core.Object {
    get inherit() {
      return this[inherit$0];
    }
    set inherit(value) {
      super.inherit = value;
    }
    get color() {
      return this[color$14];
    }
    set color(value) {
      super.color = value;
    }
    get fontNormal() {
      return this[fontNormal$];
    }
    set fontNormal(value) {
      super.fontNormal = value;
    }
    get fontBold() {
      return this[fontBold$];
    }
    set fontBold(value) {
      super.fontBold = value;
    }
    get fontItalic() {
      return this[fontItalic$];
    }
    set fontItalic(value) {
      super.fontItalic = value;
    }
    get fontBoldItalic() {
      return this[fontBoldItalic$];
    }
    set fontBoldItalic(value) {
      super.fontBoldItalic = value;
    }
    get fontSize() {
      return this[fontSize$0];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get fontWeight() {
      return this[fontWeight$0];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$0];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get lineSpacing() {
      return this[lineSpacing$];
    }
    set lineSpacing(value) {
      super.lineSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get height() {
      return this[height$7];
    }
    set height(value) {
      super.height = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get decoration() {
      return this[decoration$7];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get decorationColor() {
      return this[decorationColor$];
    }
    set decorationColor(value) {
      super.decorationColor = value;
    }
    get decorationStyle() {
      return this[decorationStyle$];
    }
    set decorationStyle(value) {
      super.decorationStyle = value;
    }
    get decorationThickness() {
      return this[decorationThickness$];
    }
    set decorationThickness(value) {
      super.decorationThickness = value;
    }
    get renderingMode() {
      return this[renderingMode$];
    }
    set renderingMode(value) {
      super.renderingMode = value;
    }
    static defaultStyle() {
      return new text_style.TextStyle.new({inherit: false, color: colors.PdfColors.black, fontNormal: font$.Font.helvetica(), fontBold: font$.Font.helveticaBold(), fontItalic: font$.Font.helveticaOblique(), fontBoldItalic: font$.Font.helveticaBoldOblique(), fontSize: 12, fontWeight: text_style.FontWeight.normal, fontStyle: text_style.FontStyle.normal, letterSpacing: 0.0, wordSpacing: 1.0, lineSpacing: 0.0, height: 1.0, decoration: text_style.TextDecoration.none, decorationColor: null, decorationStyle: text_style.TextDecorationStyle.solid, decorationThickness: 1.0, renderingMode: graphics.PdfTextRenderingMode.fill});
    }
    copyWith(opts) {
      let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4, t43$5, t43$6, t43$7, t43$8, t43$9, t43$10, t43$11, t43$12, t43$13, t43$14, t43$15, t43$16;
      let color = opts && 'color' in opts ? opts.color : null;
      let font = opts && 'font' in opts ? opts.font : null;
      let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
      let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
      let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
      let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let lineSpacing = opts && 'lineSpacing' in opts ? opts.lineSpacing : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let renderingMode = opts && 'renderingMode' in opts ? opts.renderingMode : null;
      return new text_style.TextStyle.new({inherit: this.inherit, color: (t43 = color, t43 == null ? this.color : t43), font: (t43$ = font, t43$ == null ? this.font : t43$), fontNormal: (t43$0 = fontNormal, t43$0 == null ? this.fontNormal : t43$0), fontBold: (t43$1 = fontBold, t43$1 == null ? this.fontBold : t43$1), fontItalic: (t43$2 = fontItalic, t43$2 == null ? this.fontItalic : t43$2), fontBoldItalic: (t43$3 = fontBoldItalic, t43$3 == null ? this.fontBoldItalic : t43$3), fontSize: (t43$4 = fontSize, t43$4 == null ? this.fontSize : t43$4), fontWeight: (t43$5 = fontWeight, t43$5 == null ? this.fontWeight : t43$5), fontStyle: (t43$6 = fontStyle, t43$6 == null ? this.fontStyle : t43$6), letterSpacing: (t43$7 = letterSpacing, t43$7 == null ? this.letterSpacing : t43$7), wordSpacing: (t43$8 = wordSpacing, t43$8 == null ? this.wordSpacing : t43$8), lineSpacing: (t43$9 = lineSpacing, t43$9 == null ? this.lineSpacing : t43$9), height: (t43$10 = height, t43$10 == null ? this.height : t43$10), background: (t43$11 = background, t43$11 == null ? this.background : t43$11), decoration: (t43$12 = decoration, t43$12 == null ? this.decoration : t43$12), decorationColor: (t43$13 = decorationColor, t43$13 == null ? this.decorationColor : t43$13), decorationStyle: (t43$14 = decorationStyle, t43$14 == null ? this.decorationStyle : t43$14), decorationThickness: (t43$15 = decorationThickness, t43$15 == null ? this.decorationThickness : t43$15), renderingMode: (t43$16 = renderingMode, t43$16 == null ? this.renderingMode : t43$16)});
    }
    apply(opts) {
      let t43, t43$, t43$0, t43$1, t43$2, t43$3;
      let color = opts && 'color' in opts ? opts.color : null;
      let font = opts && 'font' in opts ? opts.font : null;
      let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
      let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
      let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
      let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
      let fontSizeFactor = opts && 'fontSizeFactor' in opts ? opts.fontSizeFactor : 1;
      if (fontSizeFactor == null) dart.nullFailed(I[93], 283, 12, "fontSizeFactor");
      let fontSizeDelta = opts && 'fontSizeDelta' in opts ? opts.fontSizeDelta : 0;
      if (fontSizeDelta == null) dart.nullFailed(I[93], 284, 12, "fontSizeDelta");
      let letterSpacingFactor = opts && 'letterSpacingFactor' in opts ? opts.letterSpacingFactor : 1;
      if (letterSpacingFactor == null) dart.nullFailed(I[93], 285, 12, "letterSpacingFactor");
      let letterSpacingDelta = opts && 'letterSpacingDelta' in opts ? opts.letterSpacingDelta : 0;
      if (letterSpacingDelta == null) dart.nullFailed(I[93], 286, 12, "letterSpacingDelta");
      let wordSpacingFactor = opts && 'wordSpacingFactor' in opts ? opts.wordSpacingFactor : 1;
      if (wordSpacingFactor == null) dart.nullFailed(I[93], 287, 12, "wordSpacingFactor");
      let wordSpacingDelta = opts && 'wordSpacingDelta' in opts ? opts.wordSpacingDelta : 0;
      if (wordSpacingDelta == null) dart.nullFailed(I[93], 288, 12, "wordSpacingDelta");
      let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : 1;
      if (heightFactor == null) dart.nullFailed(I[93], 289, 12, "heightFactor");
      let heightDelta = opts && 'heightDelta' in opts ? opts.heightDelta : 0;
      if (heightDelta == null) dart.nullFailed(I[93], 290, 12, "heightDelta");
      let decoration = opts && 'decoration' in opts ? opts.decoration : C[189] || CT.C189;
      if (decoration == null) dart.nullFailed(I[93], 291, 20, "decoration");
      if (!(this.fontSize != null || fontSizeFactor === 1.0 && fontSizeDelta === 0.0)) dart.assertFailed(null, I[93], 293, 12, "fontSize != null || (fontSizeFactor == 1.0 && fontSizeDelta == 0.0)");
      if (!(this.letterSpacing != null || letterSpacingFactor === 1.0 && letterSpacingDelta === 0.0)) dart.assertFailed(null, I[93], 294, 12, "letterSpacing != null ||\n        (letterSpacingFactor == 1.0 && letterSpacingDelta == 0.0)");
      if (!(this.wordSpacing != null || wordSpacingFactor === 1.0 && wordSpacingDelta === 0.0)) dart.assertFailed(null, I[93], 296, 12, "wordSpacing != null ||\n        (wordSpacingFactor == 1.0 && wordSpacingDelta == 0.0)");
      if (!(heightFactor === 1.0 && heightDelta === 0.0)) dart.assertFailed(null, I[93], 298, 12, "heightFactor == 1.0 && heightDelta == 0.0");
      return new text_style.TextStyle.new({inherit: this.inherit, color: (t43 = color, t43 == null ? this.color : t43), font: (t43$ = font, t43$ == null ? this.font : t43$), fontNormal: (t43$0 = fontNormal, t43$0 == null ? this.fontNormal : t43$0), fontBold: (t43$1 = fontBold, t43$1 == null ? this.fontBold : t43$1), fontItalic: (t43$2 = fontItalic, t43$2 == null ? this.fontItalic : t43$2), fontBoldItalic: (t43$3 = fontBoldItalic, t43$3 == null ? this.fontBoldItalic : t43$3), fontSize: this.fontSize == null ? null : dart.nullCheck(this.fontSize) * dart.notNull(fontSizeFactor) + dart.notNull(fontSizeDelta), fontWeight: this.fontWeight, fontStyle: this.fontStyle, letterSpacing: this.letterSpacing == null ? null : dart.nullCheck(this.letterSpacing) * dart.notNull(letterSpacingFactor) + dart.notNull(letterSpacingDelta), wordSpacing: this.wordSpacing == null ? null : dart.nullCheck(this.wordSpacing) * dart.notNull(wordSpacingFactor) + dart.notNull(wordSpacingDelta), height: this.height == null ? null : dart.nullCheck(this.height) * dart.notNull(heightFactor) + dart.notNull(heightDelta), background: this.background, decoration: decoration});
    }
    merge(other) {
      let t43;
      if (other == null) {
        return this;
      }
      if (!dart.test(other.inherit)) {
        return other;
      }
      return this.copyWith({color: other.color, font: other.font, fontNormal: other.fontNormal, fontBold: other.fontBold, fontItalic: other.fontItalic, fontBoldItalic: other.fontBoldItalic, fontSize: other.fontSize, fontWeight: other.fontWeight, fontStyle: other.fontStyle, letterSpacing: other.letterSpacing, wordSpacing: other.wordSpacing, lineSpacing: other.lineSpacing, height: other.height, background: other.background, decoration: (t43 = this.decoration, t43 == null ? null : t43.merge(other.decoration)), decorationColor: other.decorationColor, decorationStyle: other.decorationStyle, decorationThickness: other.decorationThickness, renderingMode: other.renderingMode});
    }
    get font() {
      let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4, t43$5, t43$6, t43$7, t43$8, t43$9;
      if (this.fontWeight != text_style.FontWeight.bold) {
        if (this.fontStyle != text_style.FontStyle.italic) {
          t43$0 = (t43$ = (t43 = this.fontNormal, t43 == null ? this.fontBold : t43), t43$ == null ? this.fontItalic : t43$);
          return t43$0 == null ? this.fontBoldItalic : t43$0;
        } else {
          t43$3 = (t43$2 = (t43$1 = this.fontItalic, t43$1 == null ? this.fontNormal : t43$1), t43$2 == null ? this.fontBold : t43$2);
          return t43$3 == null ? this.fontBoldItalic : t43$3;
        }
      } else {
        if (this.fontStyle != text_style.FontStyle.italic) {
          t43$6 = (t43$5 = (t43$4 = this.fontBold, t43$4 == null ? this.fontNormal : t43$4), t43$5 == null ? this.fontItalic : t43$5);
          return t43$6 == null ? this.fontBoldItalic : t43$6;
        } else {
          t43$9 = (t43$8 = (t43$7 = this.fontBoldItalic, t43$7 == null ? this.fontBold : t43$7), t43$8 == null ? this.fontItalic : t43$8);
          return t43$9 == null ? this.fontNormal : t43$9;
        }
      }
    }
    toString() {
      return "TextStyle(color:" + dart.str(this.color) + " font:" + dart.str(this.font) + " size:" + dart.str(this.fontSize) + " weight:" + dart.str(this.fontWeight) + " style:" + dart.str(this.fontStyle) + " letterSpacing:" + dart.str(this.letterSpacing) + " wordSpacing:" + dart.str(this.wordSpacing) + " lineSpacing:" + dart.str(this.lineSpacing) + " height:" + dart.str(this.height) + " background:" + dart.str(this.background) + " decoration:" + dart.str(this.decoration) + " decorationColor:" + dart.str(this.decorationColor) + " decorationStyle:" + dart.str(this.decorationStyle) + " decorationThickness:" + dart.str(this.decorationThickness) + ", renderingMode:" + dart.str(this.renderingMode) + ")";
    }
  };
  (text_style.TextStyle.new = function(opts) {
    let t43, t43$, t43$0, t43$1;
    let inherit = opts && 'inherit' in opts ? opts.inherit : true;
    if (inherit == null) dart.nullFailed(I[93], 107, 10, "inherit");
    let color = opts && 'color' in opts ? opts.color : null;
    let font = opts && 'font' in opts ? opts.font : null;
    let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
    let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
    let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
    let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let lineSpacing = opts && 'lineSpacing' in opts ? opts.lineSpacing : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let renderingMode = opts && 'renderingMode' in opts ? opts.renderingMode : null;
    this[inherit$0] = inherit;
    this[color$14] = color;
    this[fontSize$0] = fontSize;
    this[fontWeight$0] = fontWeight;
    this[fontStyle$0] = fontStyle;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[lineSpacing$] = lineSpacing;
    this[height$7] = height;
    this[background$] = background;
    this[decoration$7] = decoration;
    this[decorationColor$] = decorationColor;
    this[decorationStyle$] = decorationStyle;
    this[decorationThickness$] = decorationThickness;
    this[renderingMode$] = renderingMode;
    if (!(dart.test(inherit) || color != null)) dart.assertFailed(null, I[93], 127, 16, "inherit || color != null");
    if (!(dart.test(inherit) || fontNormal != null)) dart.assertFailed(null, I[93], 128, 16, "inherit || fontNormal != null");
    if (!(dart.test(inherit) || fontBold != null)) dart.assertFailed(null, I[93], 129, 16, "inherit || fontBold != null");
    if (!(dart.test(inherit) || fontItalic != null)) dart.assertFailed(null, I[93], 130, 16, "inherit || fontItalic != null");
    if (!(dart.test(inherit) || fontBoldItalic != null)) dart.assertFailed(null, I[93], 131, 16, "inherit || fontBoldItalic != null");
    if (!(dart.test(inherit) || fontSize != null)) dart.assertFailed(null, I[93], 132, 16, "inherit || fontSize != null");
    if (!(dart.test(inherit) || fontWeight != null)) dart.assertFailed(null, I[93], 133, 16, "inherit || fontWeight != null");
    if (!(dart.test(inherit) || fontStyle != null)) dart.assertFailed(null, I[93], 134, 16, "inherit || fontStyle != null");
    if (!(dart.test(inherit) || letterSpacing != null)) dart.assertFailed(null, I[93], 135, 16, "inherit || letterSpacing != null");
    if (!(dart.test(inherit) || wordSpacing != null)) dart.assertFailed(null, I[93], 136, 16, "inherit || wordSpacing != null");
    if (!(dart.test(inherit) || lineSpacing != null)) dart.assertFailed(null, I[93], 137, 16, "inherit || lineSpacing != null");
    if (!(dart.test(inherit) || height != null)) dart.assertFailed(null, I[93], 138, 16, "inherit || height != null");
    if (!(dart.test(inherit) || decoration != null)) dart.assertFailed(null, I[93], 139, 16, "inherit || decoration != null");
    if (!(dart.test(inherit) || decorationStyle != null)) dart.assertFailed(null, I[93], 140, 16, "inherit || decorationStyle != null");
    if (!(dart.test(inherit) || decorationThickness != null)) dart.assertFailed(null, I[93], 141, 16, "inherit || decorationThickness != null");
    if (!(dart.test(inherit) || renderingMode != null)) dart.assertFailed(null, I[93], 142, 16, "inherit || renderingMode != null");
    this[fontNormal$] = (t43 = fontNormal, t43 == null ? fontStyle != text_style.FontStyle.italic && fontWeight != text_style.FontWeight.bold ? font : null : t43);
    this[fontBold$] = (t43$ = fontBold, t43$ == null ? fontStyle != text_style.FontStyle.italic && fontWeight == text_style.FontWeight.bold ? font : null : t43$);
    this[fontItalic$] = (t43$0 = fontItalic, t43$0 == null ? fontStyle == text_style.FontStyle.italic && fontWeight != text_style.FontWeight.bold ? font : null : t43$0);
    this[fontBoldItalic$] = (t43$1 = fontBoldItalic, t43$1 == null ? fontStyle == text_style.FontStyle.italic && fontWeight == text_style.FontWeight.bold ? font : null : t43$1);
    ;
  }).prototype = text_style.TextStyle.prototype;
  dart.addTypeTests(text_style.TextStyle);
  dart.addTypeCaches(text_style.TextStyle);
  dart.setMethodSignature(text_style.TextStyle, () => ({
    __proto__: dart.getMethods(text_style.TextStyle.__proto__),
    copyWith: dart.fnType(text_style.TextStyle, [], {background: dart.nullable(decoration$.BoxDecoration), color: dart.nullable(color$.PdfColor), decoration: dart.nullable(text_style.TextDecoration), decorationColor: dart.nullable(color$.PdfColor), decorationStyle: dart.nullable(text_style.TextDecorationStyle), decorationThickness: dart.nullable(core.double), font: dart.nullable(font$.Font), fontBold: dart.nullable(font$.Font), fontBoldItalic: dart.nullable(font$.Font), fontItalic: dart.nullable(font$.Font), fontNormal: dart.nullable(font$.Font), fontSize: dart.nullable(core.double), fontStyle: dart.nullable(text_style.FontStyle), fontWeight: dart.nullable(text_style.FontWeight), height: dart.nullable(core.double), letterSpacing: dart.nullable(core.double), lineSpacing: dart.nullable(core.double), renderingMode: dart.nullable(graphics.PdfTextRenderingMode), wordSpacing: dart.nullable(core.double)}, {}),
    apply: dart.fnType(text_style.TextStyle, [], {color: dart.nullable(color$.PdfColor), decoration: text_style.TextDecoration, font: dart.nullable(font$.Font), fontBold: dart.nullable(font$.Font), fontBoldItalic: dart.nullable(font$.Font), fontItalic: dart.nullable(font$.Font), fontNormal: dart.nullable(font$.Font), fontSizeDelta: core.double, fontSizeFactor: core.double, heightDelta: core.double, heightFactor: core.double, letterSpacingDelta: core.double, letterSpacingFactor: core.double, wordSpacingDelta: core.double, wordSpacingFactor: core.double}, {}),
    merge: dart.fnType(text_style.TextStyle, [dart.nullable(text_style.TextStyle)])
  }));
  dart.setGetterSignature(text_style.TextStyle, () => ({
    __proto__: dart.getGetters(text_style.TextStyle.__proto__),
    font: dart.nullable(font$.Font)
  }));
  dart.setLibraryUri(text_style.TextStyle, I[94]);
  dart.setFieldSignature(text_style.TextStyle, () => ({
    __proto__: dart.getFields(text_style.TextStyle.__proto__),
    inherit: dart.finalFieldType(core.bool),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    fontNormal: dart.finalFieldType(dart.nullable(font$.Font)),
    fontBold: dart.finalFieldType(dart.nullable(font$.Font)),
    fontItalic: dart.finalFieldType(dart.nullable(font$.Font)),
    fontBoldItalic: dart.finalFieldType(dart.nullable(font$.Font)),
    fontSize: dart.finalFieldType(dart.nullable(core.double)),
    fontWeight: dart.finalFieldType(dart.nullable(text_style.FontWeight)),
    fontStyle: dart.finalFieldType(dart.nullable(text_style.FontStyle)),
    letterSpacing: dart.finalFieldType(dart.nullable(core.double)),
    lineSpacing: dart.finalFieldType(dart.nullable(core.double)),
    wordSpacing: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    background: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    decoration: dart.finalFieldType(dart.nullable(text_style.TextDecoration)),
    decorationColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    decorationStyle: dart.finalFieldType(dart.nullable(text_style.TextDecorationStyle)),
    decorationThickness: dart.finalFieldType(dart.nullable(core.double)),
    renderingMode: dart.finalFieldType(dart.nullable(graphics.PdfTextRenderingMode))
  }));
  dart.defineExtensionMethods(text_style.TextStyle, ['toString']);
  dart.defineLazy(text_style.TextStyle, {
    /*text_style.TextStyle._defaultFontSize*/get _defaultFontSize() {
      return 12;
    }
  }, false);
  var textDirection$0 = dart.privateName(text_style, "InheritedDirectionality.textDirection");
  text_style.InheritedDirectionality = class InheritedDirectionality extends widget$.Inherited {
    get textDirection() {
      return this[textDirection$0];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
  };
  (text_style.InheritedDirectionality.new = function(textDirection) {
    this[textDirection$0] = textDirection;
    text_style.InheritedDirectionality.__proto__.new.call(this);
    ;
  }).prototype = text_style.InheritedDirectionality.prototype;
  dart.addTypeTests(text_style.InheritedDirectionality);
  dart.addTypeCaches(text_style.InheritedDirectionality);
  dart.setLibraryUri(text_style.InheritedDirectionality, I[94]);
  dart.setFieldSignature(text_style.InheritedDirectionality, () => ({
    __proto__: dart.getFields(text_style.InheritedDirectionality.__proto__),
    textDirection: dart.finalFieldType(dart.nullable(text$1.TextDirection))
  }));
  var child$7 = dart.privateName(text_style, "Directionality.child");
  var textDirection$1 = dart.privateName(text_style, "Directionality.textDirection");
  text_style.Directionality = class Directionality extends widget$.StatelessWidget {
    get child() {
      return this[child$7];
    }
    set child(value) {
      super.child = value;
    }
    get textDirection() {
      return this[textDirection$1];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    static of(context) {
      let t43, t43$;
      if (context == null) dart.nullFailed(I[93], 417, 35, "context");
      let inherited = context.dependsOn(text_style.InheritedDirectionality);
      t43$ = (t43 = inherited, t43 == null ? null : t43.textDirection);
      return t43$ == null ? text$1.TextDirection.ltr : t43$;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[93], 423, 24, "context");
      return new widget$.InheritedWidget.new({build: dart.fn(context => {
          if (context == null) dart.nullFailed(I[93], 425, 23, "context");
          return this.child;
        }, T$.ContextToWidget()), inherited: new text_style.InheritedDirectionality.new(this.textDirection)});
    }
  };
  (text_style.Directionality.new = function(opts) {
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (textDirection == null) dart.nullFailed(I[93], 396, 19, "textDirection");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[93], 397, 19, "child");
    this[textDirection$1] = textDirection;
    this[child$7] = child;
    text_style.Directionality.__proto__.new.call(this);
    ;
  }).prototype = text_style.Directionality.prototype;
  dart.addTypeTests(text_style.Directionality);
  dart.addTypeCaches(text_style.Directionality);
  dart.setMethodSignature(text_style.Directionality, () => ({
    __proto__: dart.getMethods(text_style.Directionality.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(text_style.Directionality, I[94]);
  dart.setFieldSignature(text_style.Directionality, () => ({
    __proto__: dart.getFields(text_style.Directionality.__proto__),
    child: dart.finalFieldType(widget$.Widget),
    textDirection: dart.finalFieldType(text$1.TextDirection)
  }));
  flex$.FlexFit = class FlexFit extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (flex$.FlexFit.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[95], 27, 6, "index");
    if (_name == null) dart.nullFailed(I[95], 27, 6, "_name");
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = flex$.FlexFit.prototype;
  dart.addTypeTests(flex$.FlexFit);
  dart.addTypeCaches(flex$.FlexFit);
  dart.setLibraryUri(flex$.FlexFit, I[96]);
  dart.setFieldSignature(flex$.FlexFit, () => ({
    __proto__: dart.getFields(flex$.FlexFit.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(flex$.FlexFit, ['toString']);
  flex$.FlexFit.tight = C[193] || CT.C193;
  flex$.FlexFit.loose = C[194] || CT.C194;
  flex$.FlexFit.values = C[195] || CT.C195;
  flex$.Axis = class Axis extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (flex$.Axis.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[95], 32, 6, "index");
    if (_name == null) dart.nullFailed(I[95], 32, 6, "_name");
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = flex$.Axis.prototype;
  dart.addTypeTests(flex$.Axis);
  dart.addTypeCaches(flex$.Axis);
  dart.setLibraryUri(flex$.Axis, I[96]);
  dart.setFieldSignature(flex$.Axis, () => ({
    __proto__: dart.getFields(flex$.Axis.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(flex$.Axis, ['toString']);
  flex$.Axis.horizontal = C[83] || CT.C83;
  flex$.Axis.vertical = C[80] || CT.C80;
  flex$.Axis.values = C[196] || CT.C196;
  flex$.MainAxisSize = class MainAxisSize extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (flex$.MainAxisSize.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[95], 37, 6, "index");
    if (_name == null) dart.nullFailed(I[95], 37, 6, "_name");
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = flex$.MainAxisSize.prototype;
  dart.addTypeTests(flex$.MainAxisSize);
  dart.addTypeCaches(flex$.MainAxisSize);
  dart.setLibraryUri(flex$.MainAxisSize, I[96]);
  dart.setFieldSignature(flex$.MainAxisSize, () => ({
    __proto__: dart.getFields(flex$.MainAxisSize.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(flex$.MainAxisSize, ['toString']);
  flex$.MainAxisSize.min = C[197] || CT.C197;
  flex$.MainAxisSize.max = C[79] || CT.C79;
  flex$.MainAxisSize.values = C[198] || CT.C198;
  flex$.MainAxisAlignment = class MainAxisAlignment extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (flex$.MainAxisAlignment.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[95], 42, 6, "index");
    if (_name == null) dart.nullFailed(I[95], 42, 6, "_name");
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = flex$.MainAxisAlignment.prototype;
  dart.addTypeTests(flex$.MainAxisAlignment);
  dart.addTypeCaches(flex$.MainAxisAlignment);
  dart.setLibraryUri(flex$.MainAxisAlignment, I[96]);
  dart.setFieldSignature(flex$.MainAxisAlignment, () => ({
    __proto__: dart.getFields(flex$.MainAxisAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(flex$.MainAxisAlignment, ['toString']);
  flex$.MainAxisAlignment.start = C[199] || CT.C199;
  flex$.MainAxisAlignment.end = C[200] || CT.C200;
  flex$.MainAxisAlignment.center = C[201] || CT.C201;
  flex$.MainAxisAlignment.spaceBetween = C[202] || CT.C202;
  flex$.MainAxisAlignment.spaceAround = C[203] || CT.C203;
  flex$.MainAxisAlignment.spaceEvenly = C[204] || CT.C204;
  flex$.MainAxisAlignment.values = C[205] || CT.C205;
  flex$.CrossAxisAlignment = class CrossAxisAlignment extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (flex$.CrossAxisAlignment.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[95], 51, 6, "index");
    if (_name == null) dart.nullFailed(I[95], 51, 6, "_name");
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = flex$.CrossAxisAlignment.prototype;
  dart.addTypeTests(flex$.CrossAxisAlignment);
  dart.addTypeCaches(flex$.CrossAxisAlignment);
  dart.setLibraryUri(flex$.CrossAxisAlignment, I[96]);
  dart.setFieldSignature(flex$.CrossAxisAlignment, () => ({
    __proto__: dart.getFields(flex$.CrossAxisAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(flex$.CrossAxisAlignment, ['toString']);
  flex$.CrossAxisAlignment.start = C[206] || CT.C206;
  flex$.CrossAxisAlignment.end = C[207] || CT.C207;
  flex$.CrossAxisAlignment.center = C[208] || CT.C208;
  flex$.CrossAxisAlignment.stretch = C[209] || CT.C209;
  flex$.CrossAxisAlignment.values = C[210] || CT.C210;
  flex$.VerticalDirection = class VerticalDirection extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (flex$.VerticalDirection.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[95], 58, 6, "index");
    if (_name == null) dart.nullFailed(I[95], 58, 6, "_name");
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = flex$.VerticalDirection.prototype;
  dart.addTypeTests(flex$.VerticalDirection);
  dart.addTypeCaches(flex$.VerticalDirection);
  dart.setLibraryUri(flex$.VerticalDirection, I[96]);
  dart.setFieldSignature(flex$.VerticalDirection, () => ({
    __proto__: dart.getFields(flex$.VerticalDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(flex$.VerticalDirection, ['toString']);
  flex$.VerticalDirection.up = C[211] || CT.C211;
  flex$.VerticalDirection.down = C[134] || CT.C134;
  flex$.VerticalDirection.values = C[212] || CT.C212;
  flex$._FlexContext = class _FlexContext extends multi_page.WidgetContext {
    apply(other) {
      flex$._FlexContext.as(other);
      if (other == null) dart.nullFailed(I[95], 70, 27, "other");
      this.firstChild = other.firstChild;
      this.lastChild = other.lastChild;
    }
    clone() {
      let t43;
      t43 = new flex$._FlexContext.new();
      return (() => {
        t43.apply(this);
        return t43;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " first:" + dart.str(this.firstChild) + " last:" + dart.str(this.lastChild);
    }
  };
  (flex$._FlexContext.new = function() {
    this.firstChild = 0;
    this.lastChild = 0;
    ;
  }).prototype = flex$._FlexContext.prototype;
  dart.addTypeTests(flex$._FlexContext);
  dart.addTypeCaches(flex$._FlexContext);
  dart.setMethodSignature(flex$._FlexContext, () => ({
    __proto__: dart.getMethods(flex$._FlexContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(flex$._FlexContext, I[96]);
  dart.setFieldSignature(flex$._FlexContext, () => ({
    __proto__: dart.getFields(flex$._FlexContext.__proto__),
    firstChild: dart.fieldType(core.int),
    lastChild: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(flex$._FlexContext, ['toString']);
  var direction$2 = dart.privateName(flex$, "Flex.direction");
  var mainAxisAlignment$ = dart.privateName(flex$, "Flex.mainAxisAlignment");
  var mainAxisSize$0 = dart.privateName(flex$, "Flex.mainAxisSize");
  var crossAxisAlignment$0 = dart.privateName(flex$, "Flex.crossAxisAlignment");
  var verticalDirection$0 = dart.privateName(flex$, "Flex.verticalDirection");
  var _context$3 = dart.privateName(flex$, "_context");
  var _getIntrinsicSize = dart.privateName(flex$, "_getIntrinsicSize");
  var _getCrossSize = dart.privateName(flex$, "_getCrossSize");
  var _getMainSize = dart.privateName(flex$, "_getMainSize");
  const MultiChildWidget_SpanningWidget$36$0 = class MultiChildWidget_SpanningWidget extends widget$.MultiChildWidget {};
  (MultiChildWidget_SpanningWidget$36$0.new = function(opts) {
    MultiChildWidget_SpanningWidget$36$0.__proto__.new.call(this, opts);
  }).prototype = MultiChildWidget_SpanningWidget$36$0.prototype;
  dart.applyMixin(MultiChildWidget_SpanningWidget$36$0, multi_page.SpanningWidget);
  flex$.Flex = class Flex extends MultiChildWidget_SpanningWidget$36$0 {
    get direction() {
      return this[direction$2];
    }
    set direction(value) {
      super.direction = value;
    }
    get mainAxisAlignment() {
      return this[mainAxisAlignment$];
    }
    set mainAxisAlignment(value) {
      super.mainAxisAlignment = value;
    }
    get mainAxisSize() {
      return this[mainAxisSize$0];
    }
    set mainAxisSize(value) {
      super.mainAxisSize = value;
    }
    get crossAxisAlignment() {
      return this[crossAxisAlignment$0];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get verticalDirection() {
      return this[verticalDirection$0];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    [_getIntrinsicSize](opts) {
      let sizingDirection = opts && 'sizingDirection' in opts ? opts.sizingDirection : null;
      let extent = opts && 'extent' in opts ? opts.extent : null;
      let childSize = opts && 'childSize' in opts ? opts.childSize : null;
      if (this.direction == sizingDirection) {
        let totalFlex = 0.0;
        let inflexibleSpace = 0.0;
        let maxFlexFractionSoFar = 0.0;
        for (let child of this.children) {
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          totalFlex = totalFlex + dart.notNull(flex);
          if (dart.notNull(flex) > 0) {
            let flexFraction = dart.nullCheck(dart.nullCheck(childSize)(child, extent)) / dart.notNull(flex);
            maxFlexFractionSoFar = math.max(core.double, maxFlexFractionSoFar, flexFraction);
          } else {
            inflexibleSpace = inflexibleSpace + dart.nullCheck(dart.nullCheck(childSize)(child, extent));
          }
        }
        return maxFlexFractionSoFar * totalFlex + inflexibleSpace;
      } else {
        let availableMainSpace = extent;
        let totalFlex = 0;
        let inflexibleSpace = 0.0;
        let maxCrossSize = 0.0;
        for (let child of this.children) {
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          totalFlex = totalFlex + dart.notNull(flex);
          let mainSize = null;
          let crossSize = null;
          if (flex === 0) {
            switch (this.direction) {
              case C[83] || CT.C83:
              {
                mainSize = dart.nullCheck(child.box).width;
                crossSize = dart.nullCheck(childSize)(child, mainSize);
                break;
              }
              case C[80] || CT.C80:
              {
                mainSize = dart.nullCheck(child.box).height;
                crossSize = dart.nullCheck(childSize)(child, mainSize);
                break;
              }
              default:
              {
                dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
              }
            }
            inflexibleSpace = inflexibleSpace + dart.notNull(mainSize);
            maxCrossSize = math.max(core.double, maxCrossSize, dart.nullCheck(crossSize));
          }
        }
        let spacePerFlex = math.max(core.double, 0.0, (dart.nullCheck(availableMainSpace) - inflexibleSpace) / totalFlex);
        for (let child of this.children) {
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          if (dart.notNull(flex) > 0) {
            maxCrossSize = math.max(core.double, maxCrossSize, dart.nullCheck(dart.nullCheck(childSize)(child, spacePerFlex * dart.notNull(flex))));
          }
        }
        return maxCrossSize;
      }
    }
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[95], 182, 42, "height");
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.horizontal, extent: height, childSize: dart.fn((child, extent) => {
          if (child == null) dart.nullFailed(I[95], 186, 28, "child");
          return dart.nullCheck(child.box).width;
        }, T$.WidgetAnddoubleNTodouble())});
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[95], 189, 42, "height");
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.horizontal, extent: height, childSize: dart.fn((child, extent) => {
          if (child == null) dart.nullFailed(I[95], 193, 28, "child");
          return dart.nullCheck(child.box).width;
        }, T$.WidgetAnddoubleNTodouble())});
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[95], 196, 43, "width");
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.vertical, extent: width, childSize: dart.fn((child, extent) => {
          if (child == null) dart.nullFailed(I[95], 200, 28, "child");
          return dart.nullCheck(child.box).height;
        }, T$.WidgetAnddoubleNTodouble())});
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[95], 203, 43, "width");
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.vertical, extent: width, childSize: dart.fn((child, extent) => {
          if (child == null) dart.nullFailed(I[95], 207, 28, "child");
          return dart.nullCheck(child.box).height;
        }, T$.WidgetAnddoubleNTodouble())});
    }
    [_getCrossSize](child) {
      if (child == null) dart.nullFailed(I[95], 210, 31, "child");
      switch (this.direction) {
        case C[83] || CT.C83:
        {
          return dart.nullCheck(child.box).height;
        }
        case C[80] || CT.C80:
        {
          return dart.nullCheck(child.box).width;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_getMainSize](child) {
      if (child == null) dart.nullFailed(I[95], 219, 30, "child");
      switch (this.direction) {
        case C[83] || CT.C83:
        {
          return dart.nullCheck(child.box).width;
        }
        case C[80] || CT.C80:
        {
          return dart.nullCheck(child.box).height;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[95], 229, 23, "context");
      if (constraints == null) dart.nullFailed(I[95], 229, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[95], 230, 13, "parentUsesSize");
      let totalFlex = 0;
      let lastFlexChild = null;
      let maxMainSize = this.direction == flex$.Axis.horizontal ? constraints.maxWidth : constraints.maxHeight;
      let canFlex = dart.notNull(maxMainSize) < 1 / 0;
      let crossSize = 0.0;
      let allocatedSize = 0.0;
      let index = this[_context$3].firstChild;
      for (let child of this.children[$sublist](this[_context$3].firstChild)) {
        let flex = flex$.Flexible.is(child) ? child.flex : 0;
        let fit = flex$.Flexible.is(child) ? child.fit : flex$.FlexFit.loose;
        if (dart.notNull(flex) > 0) {
          if (!dart.test(dart.fn(() => {
            let dimension = this.direction == flex$.Axis.horizontal ? "width" : "height";
            if (!canFlex && (this.mainAxisSize == flex$.MainAxisSize.max || fit == flex$.FlexFit.tight)) {
              dart.throw(core.Exception.new("Flex children have non-zero flex but incoming " + dimension + " constraints are unbounded."));
            } else {
              return true;
            }
          }, T$.VoidTobool())())) dart.assertFailed(null, I[95], 248, 16, "() {\n          final dimension = direction == Axis.horizontal ? 'width' : 'height';\n          if (!canFlex &&\n              (mainAxisSize == MainAxisSize.max || fit == FlexFit.tight)) {\n            throw Exception(\n                'Flex children have non-zero flex but incoming $dimension constraints are unbounded.');\n          } else {\n            return true;\n          }\n        }()");
          totalFlex = totalFlex + dart.notNull(flex);
        } else {
          let innerConstraints = null;
          if (this.crossAxisAlignment == flex$.CrossAxisAlignment.stretch) {
            switch (this.direction) {
              case C[83] || CT.C83:
              {
                innerConstraints = new geometry.BoxConstraints.new({minHeight: constraints.maxHeight, maxHeight: constraints.maxHeight});
                break;
              }
              case C[80] || CT.C80:
              {
                innerConstraints = new geometry.BoxConstraints.new({minWidth: constraints.maxWidth, maxWidth: constraints.maxWidth});
                break;
              }
              default:
              {
                dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
              }
            }
          } else {
            switch (this.direction) {
              case C[83] || CT.C83:
              {
                innerConstraints = new geometry.BoxConstraints.new({maxHeight: constraints.maxHeight});
                break;
              }
              case C[80] || CT.C80:
              {
                innerConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth});
                break;
              }
              default:
              {
                dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
              }
            }
          }
          child.layout(context, innerConstraints, {parentUsesSize: true});
          if (!(child.box != null)) dart.assertFailed(null, I[95], 286, 16, "child.box != null");
          allocatedSize = allocatedSize + dart.notNull(this[_getMainSize](child));
          crossSize = math.max(core.double, crossSize, this[_getCrossSize](child));
          if (this.direction == flex$.Axis.vertical && allocatedSize > dart.notNull(constraints.maxHeight)) {
            break;
          }
        }
        lastFlexChild = child;
        index = dart.notNull(index) + 1;
      }
      this[_context$3].lastChild = index;
      let totalChildren = dart.notNull(this[_context$3].lastChild) - dart.notNull(this[_context$3].firstChild);
      let freeSpace = math.max(core.double, 0.0, dart.notNull(canFlex ? maxMainSize : 0.0) - allocatedSize);
      let allocatedFlexSpace = 0.0;
      if (totalFlex > 0) {
        let spacePerFlex = canFlex && totalFlex > 0 ? freeSpace / totalFlex : 0 / 0;
        for (let child of this.children) {
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          let fit = flex$.Flexible.is(child) ? child.fit : flex$.FlexFit.loose;
          if (dart.notNull(flex) > 0) {
            let maxChildExtent = canFlex ? dart.equals(child, lastFlexChild) ? freeSpace - allocatedFlexSpace : spacePerFlex * dart.notNull(flex) : 1 / 0;
            let minChildExtent = null;
            switch (fit) {
              case C[193] || CT.C193:
              {
                if (!(maxChildExtent < 1 / 0)) dart.assertFailed(null, I[95], 320, 22, "maxChildExtent < double.infinity");
                minChildExtent = maxChildExtent;
                break;
              }
              case C[194] || CT.C194:
              {
                minChildExtent = 0.0;
                break;
              }
              default:
              {
                dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
              }
            }
            let innerConstraints = null;
            if (this.crossAxisAlignment == flex$.CrossAxisAlignment.stretch) {
              switch (this.direction) {
                case C[83] || CT.C83:
                {
                  innerConstraints = new geometry.BoxConstraints.new({minWidth: minChildExtent, maxWidth: maxChildExtent, minHeight: constraints.maxHeight, maxHeight: constraints.maxHeight});
                  break;
                }
                case C[80] || CT.C80:
                {
                  innerConstraints = new geometry.BoxConstraints.new({minWidth: constraints.maxWidth, maxWidth: constraints.maxWidth, minHeight: minChildExtent, maxHeight: maxChildExtent});
                  break;
                }
                default:
                {
                  dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
                }
              }
            } else {
              switch (this.direction) {
                case C[83] || CT.C83:
                {
                  innerConstraints = new geometry.BoxConstraints.new({minWidth: minChildExtent, maxWidth: maxChildExtent, maxHeight: constraints.maxHeight});
                  break;
                }
                case C[80] || CT.C80:
                {
                  innerConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth, minHeight: minChildExtent, maxHeight: maxChildExtent});
                  break;
                }
                default:
                {
                  dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
                }
              }
            }
            child.layout(context, innerConstraints, {parentUsesSize: true});
            if (!(child.box != null)) dart.assertFailed(null, I[95], 363, 18, "child.box != null");
            let childSize = this[_getMainSize](child);
            if (!(dart.notNull(childSize) <= maxChildExtent)) dart.assertFailed(null, I[95], 365, 18, "childSize <= maxChildExtent");
            allocatedSize = allocatedSize + dart.notNull(childSize);
            allocatedFlexSpace = allocatedFlexSpace + maxChildExtent;
            crossSize = math.max(core.double, crossSize, this[_getCrossSize](child));
          }
        }
      }
      let idealSize = canFlex && this.mainAxisSize == flex$.MainAxisSize.max ? maxMainSize : allocatedSize;
      let actualSize = null;
      let actualSizeDelta = null;
      let size = null;
      let size$35isSet = false;
      function size$35get() {
        return size$35isSet ? size : dart.throw(new _internal.LateError.localNI("size"));
      }
      dart.fn(size$35get, T$.VoidToPdfPoint());
      function size$35set(t46) {
        if (t46 == null) dart.nullFailed(I[95], 379, 19, "null");
        size$35isSet = true;
        return size = t46;
      }
      dart.fn(size$35set, T$.PdfPointTodynamic());
      switch (this.direction) {
        case C[83] || CT.C83:
        {
          size$35set(constraints.constrain(new point$.PdfPoint.new(idealSize, crossSize)));
          actualSize = size$35get().x;
          crossSize = size$35get().y;
          break;
        }
        case C[80] || CT.C80:
        {
          size$35set(constraints.constrain(new point$.PdfPoint.new(crossSize, idealSize)));
          actualSize = size$35get().y;
          crossSize = size$35get().x;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, size$35get());
      actualSizeDelta = dart.notNull(actualSize) - allocatedSize;
      let remainingSpace = math.max(core.double, 0.0, actualSizeDelta);
      let leadingSpace = null;
      let betweenSpace = null;
      let betweenSpace$35isSet = false;
      function betweenSpace$35get() {
        return betweenSpace$35isSet ? betweenSpace : dart.throw(new _internal.LateError.localNI("betweenSpace"));
      }
      dart.fn(betweenSpace$35get, T$.VoidTodouble());
      function betweenSpace$35set(t51) {
        if (t51 == null) dart.nullFailed(I[95], 398, 17, "null");
        betweenSpace$35isSet = true;
        return betweenSpace = t51;
      }
      dart.fn(betweenSpace$35set, T$.doubleTodynamic());
      let flipMainAxis = this.verticalDirection == flex$.VerticalDirection.down && this.direction == flex$.Axis.vertical || this.verticalDirection == flex$.VerticalDirection.up && this.direction == flex$.Axis.horizontal;
      switch (this.mainAxisAlignment) {
        case C[199] || CT.C199:
        {
          leadingSpace = 0.0;
          betweenSpace$35set(0.0);
          break;
        }
        case C[200] || CT.C200:
        {
          leadingSpace = remainingSpace;
          betweenSpace$35set(0.0);
          break;
        }
        case C[201] || CT.C201:
        {
          leadingSpace = remainingSpace / 2.0;
          betweenSpace$35set(0.0);
          break;
        }
        case C[202] || CT.C202:
        {
          leadingSpace = 0.0;
          betweenSpace$35set(totalChildren > 1 ? remainingSpace / (totalChildren - 1) : 0.0);
          break;
        }
        case C[203] || CT.C203:
        {
          betweenSpace$35set(totalChildren > 0 ? remainingSpace / totalChildren : 0.0);
          leadingSpace = dart.notNull(betweenSpace$35get()) / 2.0;
          break;
        }
        case C[204] || CT.C204:
        {
          betweenSpace$35set(totalChildren > 0 ? remainingSpace / (totalChildren + 1) : 0.0);
          leadingSpace = betweenSpace$35get();
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let flipCrossAxis = this.verticalDirection == flex$.VerticalDirection.down && this.direction == flex$.Axis.horizontal || this.verticalDirection == flex$.VerticalDirection.up && this.direction == flex$.Axis.vertical;
      let childMainPosition = flipMainAxis ? dart.notNull(actualSize) - dart.notNull(leadingSpace) : leadingSpace;
      for (let child of this.children[$sublist](this[_context$3].firstChild, this[_context$3].lastChild)) {
        let childCrossPosition = null;
        switch (this.crossAxisAlignment) {
          case C[206] || CT.C206:
          {
            childCrossPosition = flipCrossAxis ? dart.notNull(crossSize) - dart.notNull(this[_getCrossSize](child)) : 0.0;
            break;
          }
          case C[207] || CT.C207:
          {
            childCrossPosition = !flipCrossAxis ? dart.notNull(crossSize) - dart.notNull(this[_getCrossSize](child)) : 0.0;
            break;
          }
          case C[208] || CT.C208:
          {
            childCrossPosition = dart.notNull(crossSize) / 2.0 - dart.notNull(this[_getCrossSize](child)) / 2.0;
            break;
          }
          case C[209] || CT.C209:
          {
            childCrossPosition = 0.0;
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        if (flipMainAxis) {
          childMainPosition = dart.notNull(childMainPosition) - dart.notNull(this[_getMainSize](child));
        }
        switch (this.direction) {
          case C[83] || CT.C83:
          {
            child.box = new rect$.PdfRect.new(dart.notNull(dart.nullCheck(this.box).x) + dart.notNull(childMainPosition), dart.notNull(dart.nullCheck(this.box).y) + dart.notNull(childCrossPosition), dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
            break;
          }
          case C[80] || CT.C80:
          {
            child.box = new rect$.PdfRect.new(childCrossPosition, childMainPosition, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        if (flipMainAxis) {
          childMainPosition = dart.notNull(childMainPosition) - dart.notNull(betweenSpace$35get());
        } else {
          childMainPosition = dart.notNull(childMainPosition) + (dart.notNull(this[_getMainSize](child)) + dart.notNull(betweenSpace$35get()));
        }
      }
    }
    paint(context) {
      let t53;
      if (context == null) dart.nullFailed(I[95], 482, 22, "context");
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t53 = context.canvas;
      (() => {
        t53.saveContext();
        t53.setTransform(mat);
        return t53;
      })();
      for (let child of this.children[$sublist](this[_context$3].firstChild, this[_context$3].lastChild)) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    get canSpan() {
      return this.direction == flex$.Axis.vertical;
    }
    get hasMoreWidgets() {
      return true;
    }
    restoreContext(context) {
      flex$._FlexContext.as(context);
      if (context == null) dart.nullFailed(I[95], 505, 36, "context");
      this[_context$3].firstChild = context.lastChild;
    }
    saveContext() {
      return this[_context$3];
    }
  };
  (flex$.Flex.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : null;
    if (direction == null) dart.nullFailed(I[95], 86, 19, "direction");
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[199] || CT.C199;
    if (mainAxisAlignment == null) dart.nullFailed(I[95], 87, 10, "mainAxisAlignment");
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[79] || CT.C79;
    if (mainAxisSize == null) dart.nullFailed(I[95], 88, 10, "mainAxisSize");
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[208] || CT.C208;
    if (crossAxisAlignment == null) dart.nullFailed(I[95], 89, 10, "crossAxisAlignment");
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[134] || CT.C134;
    if (verticalDirection == null) dart.nullFailed(I[95], 90, 10, "verticalDirection");
    let children = opts && 'children' in opts ? opts.children : C[82] || CT.C82;
    if (children == null) dart.nullFailed(I[95], 91, 18, "children");
    this[_context$3] = new flex$._FlexContext.new();
    this[direction$2] = direction;
    this[mainAxisAlignment$] = mainAxisAlignment;
    this[mainAxisSize$0] = mainAxisSize;
    this[crossAxisAlignment$0] = crossAxisAlignment;
    this[verticalDirection$0] = verticalDirection;
    flex$.Flex.__proto__.new.call(this, {children: children});
    ;
  }).prototype = flex$.Flex.prototype;
  dart.addTypeTests(flex$.Flex);
  dart.addTypeCaches(flex$.Flex);
  dart.setMethodSignature(flex$.Flex, () => ({
    __proto__: dart.getMethods(flex$.Flex.__proto__),
    [_getIntrinsicSize]: dart.fnType(core.double, [], {childSize: dart.nullable(dart.fnType(dart.nullable(core.double), [widget$.Widget, dart.nullable(core.double)])), extent: dart.nullable(core.double), sizingDirection: dart.nullable(flex$.Axis)}, {}),
    computeMinIntrinsicWidth: dart.fnType(core.double, [core.double]),
    computeMaxIntrinsicWidth: dart.fnType(core.double, [core.double]),
    computeMinIntrinsicHeight: dart.fnType(core.double, [core.double]),
    computeMaxIntrinsicHeight: dart.fnType(core.double, [core.double]),
    [_getCrossSize]: dart.fnType(core.double, [widget$.Widget]),
    [_getMainSize]: dart.fnType(core.double, [widget$.Widget]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(flex$.Flex, () => ({
    __proto__: dart.getGetters(flex$.Flex.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(flex$.Flex, I[96]);
  dart.setFieldSignature(flex$.Flex, () => ({
    __proto__: dart.getFields(flex$.Flex.__proto__),
    direction: dart.finalFieldType(flex$.Axis),
    mainAxisAlignment: dart.finalFieldType(flex$.MainAxisAlignment),
    mainAxisSize: dart.finalFieldType(flex$.MainAxisSize),
    crossAxisAlignment: dart.finalFieldType(flex$.CrossAxisAlignment),
    verticalDirection: dart.finalFieldType(flex$.VerticalDirection),
    [_context$3]: dart.finalFieldType(flex$._FlexContext)
  }));
  flex$.Row = class Row extends flex$.Flex {};
  (flex$.Row.new = function(opts) {
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[199] || CT.C199;
    if (mainAxisAlignment == null) dart.nullFailed(I[95], 517, 23, "mainAxisAlignment");
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[79] || CT.C79;
    if (mainAxisSize == null) dart.nullFailed(I[95], 518, 18, "mainAxisSize");
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[208] || CT.C208;
    if (crossAxisAlignment == null) dart.nullFailed(I[95], 519, 24, "crossAxisAlignment");
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[134] || CT.C134;
    if (verticalDirection == null) dart.nullFailed(I[95], 520, 23, "verticalDirection");
    let children = opts && 'children' in opts ? opts.children : C[82] || CT.C82;
    if (children == null) dart.nullFailed(I[95], 521, 18, "children");
    flex$.Row.__proto__.new.call(this, {children: children, direction: flex$.Axis.horizontal, mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection});
    ;
  }).prototype = flex$.Row.prototype;
  dart.addTypeTests(flex$.Row);
  dart.addTypeCaches(flex$.Row);
  dart.setLibraryUri(flex$.Row, I[96]);
  flex$.Column = class Column extends flex$.Flex {};
  (flex$.Column.new = function(opts) {
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[199] || CT.C199;
    if (mainAxisAlignment == null) dart.nullFailed(I[95], 534, 23, "mainAxisAlignment");
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[79] || CT.C79;
    if (mainAxisSize == null) dart.nullFailed(I[95], 535, 18, "mainAxisSize");
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[208] || CT.C208;
    if (crossAxisAlignment == null) dart.nullFailed(I[95], 536, 24, "crossAxisAlignment");
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[134] || CT.C134;
    if (verticalDirection == null) dart.nullFailed(I[95], 537, 23, "verticalDirection");
    let children = opts && 'children' in opts ? opts.children : C[82] || CT.C82;
    if (children == null) dart.nullFailed(I[95], 538, 18, "children");
    flex$.Column.__proto__.new.call(this, {children: children, direction: flex$.Axis.vertical, mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection});
    ;
  }).prototype = flex$.Column.prototype;
  dart.addTypeTests(flex$.Column);
  dart.addTypeCaches(flex$.Column);
  dart.setLibraryUri(flex$.Column, I[96]);
  var flex$3 = dart.privateName(flex$, "Flexible.flex");
  var fit$8 = dart.privateName(flex$, "Flexible.fit");
  flex$.Flexible = class Flexible extends widget$.SingleChildWidget {
    get flex() {
      return this[flex$3];
    }
    set flex(value) {
      super.flex = value;
    }
    get fit() {
      return this[fit$8];
    }
    set fit(value) {
      super.fit = value;
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[95], 564, 22, "context");
      super.paint(context);
      this.paintChild(context);
    }
  };
  (flex$.Flexible.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    if (flex == null) dart.nullFailed(I[95], 552, 10, "flex");
    let fit = opts && 'fit' in opts ? opts.fit : C[194] || CT.C194;
    if (fit == null) dart.nullFailed(I[95], 553, 10, "fit");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[95], 554, 21, "child");
    this[flex$3] = flex;
    this[fit$8] = fit;
    flex$.Flexible.__proto__.new.call(this, {child: child});
    ;
  }).prototype = flex$.Flexible.prototype;
  dart.addTypeTests(flex$.Flexible);
  dart.addTypeCaches(flex$.Flexible);
  dart.setLibraryUri(flex$.Flexible, I[96]);
  dart.setFieldSignature(flex$.Flexible, () => ({
    __proto__: dart.getFields(flex$.Flexible.__proto__),
    flex: dart.finalFieldType(core.int),
    fit: dart.finalFieldType(flex$.FlexFit)
  }));
  flex$.Expanded = class Expanded extends flex$.Flexible {};
  (flex$.Expanded.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    if (flex == null) dart.nullFailed(I[95], 572, 9, "flex");
    let fit = opts && 'fit' in opts ? opts.fit : C[193] || CT.C193;
    if (fit == null) dart.nullFailed(I[95], 573, 13, "fit");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[95], 574, 21, "child");
    flex$.Expanded.__proto__.new.call(this, {child: child, flex: flex, fit: fit});
    ;
  }).prototype = flex$.Expanded.prototype;
  dart.addTypeTests(flex$.Expanded);
  dart.addTypeCaches(flex$.Expanded);
  dart.setLibraryUri(flex$.Expanded, I[96]);
  flex$.Spacer = class Spacer extends flex$.Flexible {};
  (flex$.Spacer.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    if (flex == null) dart.nullFailed(I[95], 581, 15, "flex");
    if (!(dart.notNull(flex) > 0)) dart.assertFailed(null, I[95], 582, 16, "flex > 0");
    flex$.Spacer.__proto__.new.call(this, {flex: flex, fit: flex$.FlexFit.tight, child: new basic.SizedBox.shrink()});
    ;
  }).prototype = flex$.Spacer.prototype;
  dart.addTypeTests(flex$.Spacer);
  dart.addTypeCaches(flex$.Spacer);
  dart.setLibraryUri(flex$.Spacer, I[96]);
  var direction$3 = dart.privateName(flex$, "ListView.direction");
  var padding$7 = dart.privateName(flex$, "ListView.padding");
  var spacing$0 = dart.privateName(flex$, "ListView.spacing");
  var reverse$ = dart.privateName(flex$, "ListView.reverse");
  var itemBuilder$ = dart.privateName(flex$, "ListView.itemBuilder");
  var separatorBuilder$ = dart.privateName(flex$, "ListView.separatorBuilder");
  var children$6 = dart.privateName(flex$, "ListView.children");
  var itemCount$ = dart.privateName(flex$, "ListView.itemCount");
  var _getItem = dart.privateName(flex$, "_getItem");
  var _getSeparator = dart.privateName(flex$, "_getSeparator");
  flex$.ListView = class ListView extends widget$.StatelessWidget {
    get direction() {
      return this[direction$3];
    }
    set direction(value) {
      super.direction = value;
    }
    get padding() {
      return this[padding$7];
    }
    set padding(value) {
      super.padding = value;
    }
    get spacing() {
      return this[spacing$0];
    }
    set spacing(value) {
      super.spacing = value;
    }
    get reverse() {
      return this[reverse$];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get itemBuilder() {
      return this[itemBuilder$];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get separatorBuilder() {
      return this[separatorBuilder$];
    }
    set separatorBuilder(value) {
      super.separatorBuilder = value;
    }
    get children() {
      return this[children$6];
    }
    set children(value) {
      super.children = value;
    }
    get itemCount() {
      return this[itemCount$];
    }
    set itemCount(value) {
      super.itemCount = value;
    }
    [_getItem](context, index) {
      if (context == null) dart.nullFailed(I[95], 635, 27, "context");
      if (index == null) dart.nullFailed(I[95], 635, 40, "index");
      return this.children == null ? dart.nullCheck(this.itemBuilder)(context, index) : dart.nullCheck(this.children)[$_get](index);
    }
    [_getSeparator](context, index) {
      if (context == null) dart.nullFailed(I[95], 639, 32, "context");
      if (index == null) dart.nullFailed(I[95], 639, 45, "index");
      return this.spacing == null ? dart.nullCheck(this.separatorBuilder)(context, index) : this.direction == flex$.Axis.vertical ? new basic.SizedBox.new({height: this.spacing}) : new basic.SizedBox.new({width: this.spacing});
    }
    build(context) {
      if (context == null) dart.nullFailed(I[95], 648, 24, "context");
      let _children = T$.JSArrayOfWidget().of([]);
      if (dart.test(this.reverse)) {
        for (let index = dart.notNull(this.itemCount) - 1; index >= 0; index = index - 1) {
          _children[$add](this[_getItem](context, index));
          if (this.spacing !== 0 && index > 0) {
            _children[$add](this[_getSeparator](context, index));
          }
        }
      } else {
        for (let index = 0; index < dart.notNull(this.itemCount); index = index + 1) {
          _children[$add](this[_getItem](context, index));
          if (this.spacing !== 0 && index < dart.notNull(this.itemCount) - 1) {
            _children[$add](this[_getSeparator](context, index));
          }
        }
      }
      let widget = new flex$.Flex.new({direction: this.direction, mainAxisAlignment: flex$.MainAxisAlignment.start, mainAxisSize: flex$.MainAxisSize.max, crossAxisAlignment: flex$.CrossAxisAlignment.center, verticalDirection: flex$.VerticalDirection.down, children: _children});
      if (this.padding != null) {
        return new basic.Padding.new({padding: dart.nullCheck(this.padding), child: widget});
      }
      return widget;
    }
  };
  (flex$.ListView.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[80] || CT.C80;
    if (direction == null) dart.nullFailed(I[95], 594, 10, "direction");
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    if (reverse == null) dart.nullFailed(I[95], 595, 10, "reverse");
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let children = opts && 'children' in opts ? opts.children : C[82] || CT.C82;
    if (children == null) dart.nullFailed(I[95], 598, 23, "children");
    this[direction$3] = direction;
    this[reverse$] = reverse;
    this[spacing$0] = spacing;
    this[padding$7] = padding;
    this[children$6] = children;
    this[itemBuilder$] = null;
    this[separatorBuilder$] = null;
    this[itemCount$] = children[$length];
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  (flex$.ListView.builder = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[80] || CT.C80;
    if (direction == null) dart.nullFailed(I[95], 605, 10, "direction");
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    if (reverse == null) dart.nullFailed(I[95], 606, 10, "reverse");
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    if (itemCount == null) dart.nullFailed(I[95], 610, 19, "itemCount");
    this[direction$3] = direction;
    this[reverse$] = reverse;
    this[spacing$0] = spacing;
    this[padding$7] = padding;
    this[itemBuilder$] = itemBuilder;
    this[itemCount$] = itemCount;
    this[children$6] = null;
    this[separatorBuilder$] = null;
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  (flex$.ListView.separated = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[80] || CT.C80;
    if (direction == null) dart.nullFailed(I[95], 616, 10, "direction");
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    if (reverse == null) dart.nullFailed(I[95], 617, 10, "reverse");
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let separatorBuilder = opts && 'separatorBuilder' in opts ? opts.separatorBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    if (itemCount == null) dart.nullFailed(I[95], 621, 19, "itemCount");
    this[direction$3] = direction;
    this[reverse$] = reverse;
    this[padding$7] = padding;
    this[itemBuilder$] = itemBuilder;
    this[separatorBuilder$] = separatorBuilder;
    this[itemCount$] = itemCount;
    this[children$6] = null;
    this[spacing$0] = null;
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  dart.addTypeTests(flex$.ListView);
  dart.addTypeCaches(flex$.ListView);
  dart.setMethodSignature(flex$.ListView, () => ({
    __proto__: dart.getMethods(flex$.ListView.__proto__),
    [_getItem]: dart.fnType(widget$.Widget, [widget$.Context, core.int]),
    [_getSeparator]: dart.fnType(widget$.Widget, [widget$.Context, core.int]),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(flex$.ListView, I[96]);
  dart.setFieldSignature(flex$.ListView, () => ({
    __proto__: dart.getFields(flex$.ListView.__proto__),
    direction: dart.finalFieldType(flex$.Axis),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    spacing: dart.finalFieldType(dart.nullable(core.double)),
    reverse: dart.finalFieldType(core.bool),
    itemBuilder: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context, core.int]))),
    separatorBuilder: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context, core.int]))),
    children: dart.finalFieldType(dart.nullable(core.List$(widget$.Widget))),
    itemCount: dart.finalFieldType(core.int)
  }));
  multi_page.NewPage = class NewPage extends widget$.Widget {
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[97], 56, 23, "context");
      if (constraints == null) dart.nullFailed(I[97], 56, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[97], 57, 13, "parentUsesSize");
      this.box = rect$.PdfRect.zero;
    }
  };
  (multi_page.NewPage.new = function() {
    multi_page.NewPage.__proto__.new.call(this);
    ;
  }).prototype = multi_page.NewPage.prototype;
  dart.addTypeTests(multi_page.NewPage);
  dart.addTypeCaches(multi_page.NewPage);
  dart.setMethodSignature(multi_page.NewPage, () => ({
    __proto__: dart.getMethods(multi_page.NewPage.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(multi_page.NewPage, I[4]);
  var child$8 = dart.privateName(multi_page, "_MultiPageWidget.child");
  var constraints$0 = dart.privateName(multi_page, "_MultiPageWidget.constraints");
  var widgetContext$ = dart.privateName(multi_page, "_MultiPageWidget.widgetContext");
  multi_page._MultiPageWidget = class _MultiPageWidget extends core.Object {
    get child() {
      return this[child$8];
    }
    set child(value) {
      super.child = value;
    }
    get constraints() {
      return this[constraints$0];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get widgetContext() {
      return this[widgetContext$];
    }
    set widgetContext(value) {
      super.widgetContext = value;
    }
  };
  (multi_page._MultiPageWidget.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[97], 65, 19, "child");
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    if (constraints == null) dart.nullFailed(I[97], 66, 19, "constraints");
    let widgetContext = opts && 'widgetContext' in opts ? opts.widgetContext : null;
    this[child$8] = child;
    this[constraints$0] = constraints;
    this[widgetContext$] = widgetContext;
    ;
  }).prototype = multi_page._MultiPageWidget.prototype;
  dart.addTypeTests(multi_page._MultiPageWidget);
  dart.addTypeCaches(multi_page._MultiPageWidget);
  dart.setLibraryUri(multi_page._MultiPageWidget, I[4]);
  dart.setFieldSignature(multi_page._MultiPageWidget, () => ({
    __proto__: dart.getFields(multi_page._MultiPageWidget.__proto__),
    child: dart.finalFieldType(widget$.Widget),
    constraints: dart.finalFieldType(geometry.BoxConstraints),
    widgetContext: dart.finalFieldType(dart.nullable(multi_page.WidgetContext))
  }));
  multi_page._MultiPageInstance = class _MultiPageInstance extends core.Object {};
  (multi_page._MultiPageInstance.new = function(opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[97], 78, 19, "context");
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    if (constraints == null) dart.nullFailed(I[97], 79, 19, "constraints");
    let fullConstraints = opts && 'fullConstraints' in opts ? opts.fullConstraints : null;
    if (fullConstraints == null) dart.nullFailed(I[97], 80, 19, "fullConstraints");
    let offsetStart = opts && 'offsetStart' in opts ? opts.offsetStart : null;
    this.widgets = T$.JSArrayOf_MultiPageWidget().of([]);
    this.context = context;
    this.constraints = constraints;
    this.fullConstraints = fullConstraints;
    this.offsetStart = offsetStart;
    ;
  }).prototype = multi_page._MultiPageInstance.prototype;
  dart.addTypeTests(multi_page._MultiPageInstance);
  dart.addTypeCaches(multi_page._MultiPageInstance);
  dart.setLibraryUri(multi_page._MultiPageInstance, I[4]);
  dart.setFieldSignature(multi_page._MultiPageInstance, () => ({
    __proto__: dart.getFields(multi_page._MultiPageInstance.__proto__),
    context: dart.finalFieldType(widget$.Context),
    constraints: dart.finalFieldType(geometry.BoxConstraints),
    fullConstraints: dart.finalFieldType(geometry.BoxConstraints),
    offsetStart: dart.finalFieldType(dart.nullable(core.double)),
    widgets: dart.finalFieldType(core.List$(multi_page._MultiPageWidget))
  }));
  var crossAxisAlignment$1 = dart.privateName(multi_page, "MultiPage.crossAxisAlignment");
  var header$ = dart.privateName(multi_page, "MultiPage.header");
  var footer$ = dart.privateName(multi_page, "MultiPage.footer");
  var mainAxisAlignment$0 = dart.privateName(multi_page, "MultiPage.mainAxisAlignment");
  var maxPages$ = dart.privateName(multi_page, "MultiPage.maxPages");
  var _pages = dart.privateName(multi_page, "_pages");
  var _buildList = dart.privateName(multi_page, "_buildList");
  var _paintChild = dart.privateName(multi_page, "_paintChild");
  var pageTheme$ = dart.privateName(page$, "Page.pageTheme");
  var _pdfPage = dart.privateName(page$, "_pdfPage");
  var _build$ = dart.privateName(page$, "_build");
  page$.Page = class Page extends core.Object {
    get pageTheme() {
      return this[pageTheme$];
    }
    set pageTheme(value) {
      super.pageTheme = value;
    }
    get pageFormat() {
      let t69, t69$;
      t69$ = (t69 = this[_pdfPage], t69 == null ? null : t69.pageFormat);
      return t69$ == null ? this.pageTheme.pageFormat : t69$;
    }
    get orientation() {
      return this.pageTheme.orientation;
    }
    get theme() {
      return this.pageTheme.theme;
    }
    get mustRotate() {
      return this.pageTheme.mustRotate;
    }
    get margin() {
      return this.pageTheme.margin;
    }
    debugPaint(context) {
      let t69;
      if (context == null) dart.nullFailed(I[98], 83, 27, "context");
      let _margin = dart.nullCheck(this.margin);
      t69 = context.canvas;
      (() => {
        t69.setFillColor(colors.PdfColors.lightGreen);
        t69.moveTo(0.0, 0.0);
        t69.lineTo(this.pageFormat.width, 0.0);
        t69.lineTo(this.pageFormat.width, this.pageFormat.height);
        t69.lineTo(0.0, this.pageFormat.height);
        t69.moveTo(_margin.left, _margin.bottom);
        t69.lineTo(_margin.left, dart.notNull(this.pageFormat.height) - dart.notNull(_margin.top));
        t69.lineTo(dart.notNull(this.pageFormat.width) - dart.notNull(_margin.right), dart.notNull(this.pageFormat.height) - dart.notNull(_margin.top));
        t69.lineTo(dart.notNull(this.pageFormat.width) - dart.notNull(_margin.right), _margin.bottom);
        t69.fillPath();
        return t69;
      })();
    }
    generate(document, opts) {
      if (document == null) dart.nullFailed(I[98], 99, 26, "document");
      let insert = opts && 'insert' in opts ? opts.insert : true;
      if (insert == null) dart.nullFailed(I[98], 99, 42, "insert");
      let index = opts && 'index' in opts ? opts.index : null;
      if (index != null) {
        if (dart.test(insert)) {
          this[_pdfPage] = new page.PdfPage.new(document.document, {pageFormat: this.pageFormat, index: index});
        } else {
          this[_pdfPage] = document.document.page(index);
        }
      } else {
        this[_pdfPage] = new page.PdfPage.new(document.document, {pageFormat: this.pageFormat});
      }
    }
    postProcess(document) {
      let t69, t69$, t70;
      if (document == null) dart.nullFailed(I[98], 112, 29, "document");
      let canvas = dart.nullCheck(this[_pdfPage]).getGraphics();
      canvas.reset();
      let _margin = this.margin;
      let constraints = dart.test(this.mustRotate) ? new geometry.BoxConstraints.new({maxWidth: dart.notNull(this.pageFormat.height) - dart.notNull(dart.nullCheck(_margin).vertical), maxHeight: dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal)}) : new geometry.BoxConstraints.new({maxWidth: dart.notNull(this.pageFormat.width) - dart.notNull(dart.nullCheck(_margin).horizontal), maxHeight: dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical)});
      let calculatedTheme = (t69$ = (t69 = this.theme, t69 == null ? document.theme : t69), t69$ == null ? theme$.ThemeData.base() : t69$);
      let context = widget$.Context.new({document: document.document, page: dart.nullCheck(this[_pdfPage]), canvas: canvas}).inheritFromAll((() => {
        let t69 = T$.JSArrayOfInherited().of([calculatedTheme]);
        if (this.pageTheme.textDirection != null) t69[$add](new text_style.InheritedDirectionality.new(this.pageTheme.textDirection));
        return t69;
      })());
      let background = null;
      let content = null;
      let foreground = null;
      content = (t70 = context, this[_build$](t70));
      let size = this.layout(content, context, constraints);
      if (dart.nullCheck(this[_pdfPage]).pageFormat.height === 1 / 0) {
        dart.nullCheck(this[_pdfPage]).pageFormat = dart.nullCheck(this[_pdfPage]).pageFormat.copyWith({width: size.x, height: size.y});
        constraints = dart.test(this.mustRotate) ? new geometry.BoxConstraints.new({maxWidth: dart.notNull(dart.nullCheck(this[_pdfPage]).pageFormat.height) - dart.notNull(_margin.vertical), maxHeight: dart.notNull(dart.nullCheck(this[_pdfPage]).pageFormat.width) - dart.notNull(_margin.horizontal)}) : new geometry.BoxConstraints.new({maxWidth: dart.notNull(dart.nullCheck(this[_pdfPage]).pageFormat.width) - dart.notNull(_margin.horizontal), maxHeight: dart.notNull(dart.nullCheck(this[_pdfPage]).pageFormat.height) - dart.notNull(_margin.vertical)});
      }
      if (this.pageTheme.buildBackground != null) {
        background = dart.nullCheck(this.pageTheme.buildBackground)(context);
        this.layout(background, context, constraints);
      }
      if (this.pageTheme.buildForeground != null) {
        foreground = dart.nullCheck(this.pageTheme.buildForeground)(context);
        this.layout(foreground, context, constraints);
      }
      if (!dart.test(dart.fn(() => {
        if (dart.test(document$0.Document.debug)) {
          this.debugPaint(context);
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[98], 165, 12, "() {\n      if (Document.debug) {\n        debugPaint(context);\n      }\n      return true;\n    }()");
      if (background != null) {
        this.paint(background, context);
      }
      this.paint(content, context);
      if (foreground != null) {
        this.paint(foreground, context);
      }
    }
    layout(child, context, constraints, opts) {
      if (child == null) dart.nullFailed(I[98], 184, 26, "child");
      if (context == null) dart.nullFailed(I[98], 184, 41, "context");
      if (constraints == null) dart.nullFailed(I[98], 184, 65, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[98], 185, 13, "parentUsesSize");
      let _margin = dart.nullCheck(this.margin);
      child.layout(context, constraints, {parentUsesSize: parentUsesSize});
      if (!(child.box != null)) dart.assertFailed(null, I[98], 188, 12, "child.box != null");
      let width = this.pageFormat.width === 1 / 0 ? dart.notNull(dart.nullCheck(child.box).width) + dart.notNull(_margin.left) + dart.notNull(_margin.right) : this.pageFormat.width;
      let height = this.pageFormat.height === 1 / 0 ? dart.notNull(dart.nullCheck(child.box).height) + dart.notNull(_margin.top) + dart.notNull(_margin.bottom) : this.pageFormat.height;
      child.box = new rect$.PdfRect.new(_margin.left, dart.notNull(height) - dart.notNull(dart.nullCheck(child.box).height) - dart.notNull(_margin.top), dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
      return new point$.PdfPoint.new(width, height);
    }
    paint(child, context) {
      let t70, t71, t70$;
      if (child == null) dart.nullFailed(I[98], 205, 21, "child");
      if (context == null) dart.nullFailed(I[98], 205, 36, "context");
      if (dart.test(this.pageTheme.clip)) {
        let _margin = dart.nullCheck(this.margin);
        t70 = context.canvas;
        (() => {
          t70.saveContext();
          t70.drawRect(_margin.left, _margin.bottom, dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal), dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical));
          t70.clipPath();
          return t70;
        })();
      }
      if (dart.test(this.mustRotate)) {
        let _margin = dart.nullCheck(this.margin);
        t70$ = context.canvas;
        (() => {
          t70$.saveContext();
          t70$.setTransform((t71 = vector_math_64.Matrix4.identity(), (() => {
            t71.rotateZ(-3.141592653589793 / 2);
            t71.translate(-dart.notNull(this.pageFormat.height) - dart.notNull(_margin.left) + dart.notNull(_margin.top), -dart.notNull(this.pageFormat.height) + dart.notNull(this.pageFormat.width) + dart.notNull(_margin.top) - dart.notNull(_margin.right));
            return t71;
          })()));
          return t70$;
        })();
        child.paint(context);
        context.canvas.restoreContext();
      } else {
        child.paint(context);
      }
      if (dart.test(this.pageTheme.clip)) {
        context.canvas.restoreContext();
      }
    }
  };
  (page$.Page.new = function(opts) {
    let t69;
    let pageTheme = opts && 'pageTheme' in opts ? opts.pageTheme : null;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let build = opts && 'build' in opts ? opts.build : null;
    if (build == null) dart.nullFailed(I[98], 40, 28, "build");
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let clip = opts && 'clip' in opts ? opts.clip : false;
    if (clip == null) dart.nullFailed(I[98], 44, 10, "clip");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[_pdfPage] = null;
    if (!(pageTheme == null || pageFormat == null && theme == null && orientation == null && margin == null && clip === false && textDirection == null)) dart.assertFailed("Don't set both pageTheme and other settings", I[98], 47, 13, "pageTheme == null ||\n                (pageFormat == null &&\n                    theme == null &&\n                    orientation == null &&\n                    margin == null &&\n                    clip == false &&\n                    textDirection == null)");
    this[pageTheme$] = (t69 = pageTheme, t69 == null ? new page_theme.PageTheme.new({pageFormat: pageFormat, orientation: orientation, margin: margin, theme: theme, clip: clip, textDirection: textDirection}) : t69);
    this[_build$] = build;
    ;
  }).prototype = page$.Page.prototype;
  dart.addTypeTests(page$.Page);
  dart.addTypeCaches(page$.Page);
  dart.setMethodSignature(page$.Page, () => ({
    __proto__: dart.getMethods(page$.Page.__proto__),
    debugPaint: dart.fnType(dart.void, [widget$.Context]),
    generate: dart.fnType(dart.void, [document$0.Document], {index: dart.nullable(core.int), insert: core.bool}, {}),
    postProcess: dart.fnType(dart.void, [document$0.Document]),
    layout: dart.fnType(point$.PdfPoint, [widget$.Widget, widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    paint: dart.fnType(dart.void, [widget$.Widget, widget$.Context])
  }));
  dart.setGetterSignature(page$.Page, () => ({
    __proto__: dart.getGetters(page$.Page.__proto__),
    pageFormat: page_format.PdfPageFormat,
    orientation: page$.PageOrientation,
    theme: dart.nullable(theme$.ThemeData),
    mustRotate: core.bool,
    margin: dart.nullable(geometry.EdgeInsets)
  }));
  dart.setLibraryUri(page$.Page, I[99]);
  dart.setFieldSignature(page$.Page, () => ({
    __proto__: dart.getFields(page$.Page.__proto__),
    pageTheme: dart.finalFieldType(page_theme.PageTheme),
    [_build$]: dart.finalFieldType(dart.fnType(widget$.Widget, [widget$.Context])),
    [_pdfPage]: dart.fieldType(dart.nullable(page.PdfPage))
  }));
  multi_page.MultiPage = class MultiPage extends page$.Page {
    get crossAxisAlignment() {
      return this[crossAxisAlignment$1];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get header() {
      return this[header$];
    }
    set header(value) {
      super.header = value;
    }
    get footer() {
      return this[footer$];
    }
    set footer(value) {
      super.footer = value;
    }
    get mainAxisAlignment() {
      return this[mainAxisAlignment$0];
    }
    set mainAxisAlignment(value) {
      super.mainAxisAlignment = value;
    }
    get maxPages() {
      return this[maxPages$];
    }
    set maxPages(value) {
      super.maxPages = value;
    }
    [_paintChild](context, child, x, y, pageHeight) {
      let t54, t53;
      if (context == null) dart.nullFailed(I[97], 175, 15, "context");
      if (child == null) dart.nullFailed(I[97], 175, 31, "child");
      if (x == null) dart.nullFailed(I[97], 175, 45, "x");
      if (y == null) dart.nullFailed(I[97], 175, 55, "y");
      if (pageHeight == null) dart.nullFailed(I[97], 175, 65, "pageHeight");
      if (dart.test(this.mustRotate)) {
        let _margin = dart.nullCheck(this.margin);
        t53 = context.canvas;
        (() => {
          t53.saveContext();
          t53.setTransform((t54 = vector_math_64.Matrix4.identity(), (() => {
            t54.rotateZ(-3.141592653589793 / 2);
            t54.translate(dart.notNull(x) - dart.notNull(pageHeight) + dart.notNull(_margin.top) - dart.notNull(_margin.left), dart.notNull(y) + dart.notNull(_margin.left) - dart.notNull(_margin.bottom));
            return t54;
          })()));
          return t53;
        })();
        child.paint(context);
        context.canvas.restoreContext();
      } else {
        child.box = new rect$.PdfRect.new(x, y, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
        child.paint(context);
      }
    }
    generate(document, opts) {
      let t53, t53$, t59, t59$;
      if (document == null) dart.nullFailed(I[97], 196, 26, "document");
      let insert = opts && 'insert' in opts ? opts.insert : true;
      if (insert == null) dart.nullFailed(I[97], 196, 42, "insert");
      let index = opts && 'index' in opts ? opts.index : null;
      if (!(dart.notNull(this.pageFormat.width) > 0 && dart.notNull(this.pageFormat.width) < 1 / 0)) dart.assertFailed(null, I[97], 197, 12, "pageFormat.width > 0 && pageFormat.width < double.infinity");
      if (!(dart.notNull(this.pageFormat.height) > 0 && dart.notNull(this.pageFormat.height) < 1 / 0)) dart.assertFailed(null, I[97], 198, 12, "pageFormat.height > 0 && pageFormat.height < double.infinity");
      let _margin = this.margin;
      let _mustRotate = this.mustRotate;
      let pageHeight = dart.test(_mustRotate) ? this.pageFormat.width : this.pageFormat.height;
      let pageHeightMargin = dart.test(_mustRotate) ? dart.nullCheck(_margin).horizontal : dart.nullCheck(_margin).vertical;
      let constraints = new geometry.BoxConstraints.new({maxWidth: dart.test(_mustRotate) ? dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical) : dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal)});
      let fullConstraints = dart.test(this.mustRotate) ? new geometry.BoxConstraints.new({maxWidth: dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical), maxHeight: dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal)}) : new geometry.BoxConstraints.new({maxWidth: dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal), maxHeight: dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical)});
      let calculatedTheme = (t53$ = (t53 = this.theme, t53 == null ? document.theme : t53), t53$ == null ? theme$.ThemeData.base() : t53$);
      let context = null;
      let offsetEnd = null;
      let offsetEnd$35isSet = false;
      function offsetEnd$35get() {
        return offsetEnd$35isSet ? offsetEnd : dart.throw(new _internal.LateError.localNI("offsetEnd"));
      }
      dart.fn(offsetEnd$35get, T$.VoidTodouble());
      function offsetEnd$35set(t56) {
        if (t56 == null) dart.nullFailed(I[97], 218, 17, "null");
        offsetEnd$35isSet = true;
        return offsetEnd = t56;
      }
      dart.fn(offsetEnd$35set, T$.doubleTodynamic());
      let offsetStart = null;
      let _index = 0;
      let sameCount = 0;
      let baseContext = widget$.Context.new({document: document.document}).inheritFromAll((() => {
        let t58 = T$.JSArrayOfInherited().of([calculatedTheme]);
        if (this.pageTheme.textDirection != null) t58[$add](new text_style.InheritedDirectionality.new(this.pageTheme.textDirection));
        return t58;
      })());
      let children = (t59 = baseContext, this[_buildList](t59));
      let widgetContext = null;
      while (_index < dart.notNull(children[$length])) {
        let child = children[$_get](_index);
        if (!dart.test(dart.fn(() => {
          let t59;
          if ((t59 = sameCount, sameCount = t59 + 1, t59) > dart.notNull(this.maxPages)) {
            dart.throw(core.Exception.new("This widget created more than " + dart.str(this.maxPages) + " pages. This may be an issue in the widget or the document. See https://pub.dev/documentation/pdf/latest/widgets/MultiPage-class.html"));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[97], 234, 14, "() {\n        // Detect too big widgets\n        if (sameCount++ > maxPages) {\n          throw Exception(\n              'This widget created more than $maxPages pages. This may be an issue in the widget or the document. See https://pub.dev/documentation/pdf/latest/widgets/MultiPage-class.html');\n        }\n        return true;\n      }()");
        if (context == null || multi_page.NewPage.is(child)) {
          let pdfPage = new page.PdfPage.new(document.document, {pageFormat: this.pageFormat, index: index == null ? null : (t59$ = index, index = dart.notNull(t59$) + 1, t59$)});
          let canvas = pdfPage.getGraphics();
          canvas.reset();
          context = baseContext.copyWith({page: pdfPage, canvas: canvas});
          if (!dart.test(dart.fn(() => {
            if (dart.test(document$0.Document.debug)) {
              this.debugPaint(dart.nullCheck(context));
            }
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[97], 254, 16, "() {\n          if (Document.debug) {\n            debugPaint(context!);\n          }\n          return true;\n        }()");
          offsetStart = dart.notNull(pageHeight) - dart.notNull(dart.test(_mustRotate) ? dart.notNull(pageHeightMargin) - dart.notNull(_margin.bottom) : _margin.top);
          offsetEnd$35set(dart.test(_mustRotate) ? dart.notNull(pageHeightMargin) - dart.notNull(_margin.left) : _margin.bottom);
          this[_pages][$add](new multi_page._MultiPageInstance.new({context: context, constraints: constraints, fullConstraints: fullConstraints, offsetStart: offsetStart}));
          if (this.header != null) {
            let headerWidget = dart.nullCheck(this.header)(context);
            headerWidget.layout(context, constraints, {parentUsesSize: false});
            if (!(headerWidget.box != null)) dart.assertFailed(null, I[97], 277, 18, "headerWidget.box != null");
            offsetStart = dart.notNull(offsetStart) - dart.notNull(dart.nullCheck(headerWidget.box).height);
          }
          if (this.footer != null) {
            let footerWidget = dart.nullCheck(this.footer)(context);
            footerWidget.layout(context, constraints, {parentUsesSize: false});
            if (!(footerWidget.box != null)) dart.assertFailed(null, I[97], 285, 18, "footerWidget.box != null");
            offsetEnd$35set(dart.notNull(offsetEnd$35get()) + dart.notNull(dart.nullCheck(footerWidget.box).height));
          }
        }
        if (widgetContext != null && multi_page.SpanningWidget.is(child)) {
          child.restoreContext(widgetContext);
          widgetContext = null;
        }
        child.layout(context, constraints, {parentUsesSize: false});
        if (!(child.box != null)) dart.assertFailed(null, I[97], 297, 14, "child.box != null");
        let canSpan = multi_page.SpanningWidget.is(child) && dart.test(child.canSpan);
        if (dart.nullCheck(offsetStart) - dart.notNull(dart.nullCheck(child.box).height) < dart.notNull(offsetEnd$35get())) {
          if (dart.notNull(dart.nullCheck(child.box).height) <= dart.notNull(pageHeight) - dart.notNull(pageHeightMargin) && !canSpan) {
            context = null;
            continue;
          }
          if (!canSpan) {
            dart.throw(core.Exception.new("Widget won't fit into the page as its height (" + dart.str(dart.nullCheck(child.box).height) + ") " + "exceed a page height (" + dart.str(dart.notNull(pageHeight) - dart.notNull(pageHeightMargin)) + "). " + "You probably need a SpanningWidget or use a single page layout"));
          }
          let span = multi_page.SpanningWidget.as(child);
          let localConstraints = constraints.copyWith({maxHeight: dart.notNull(offsetStart) - dart.notNull(offsetEnd$35get())});
          child.layout(context, localConstraints, {parentUsesSize: false});
          if (!(child.box != null)) dart.assertFailed(null, I[97], 323, 16, "child.box != null");
          widgetContext = span.saveContext();
          this[_pages][$last].widgets[$add](new multi_page._MultiPageWidget.new({child: child, constraints: localConstraints, widgetContext: widgetContext.clone()}));
          if (!dart.test(span.hasMoreWidgets)) {
            sameCount = 0;
            _index = _index + 1;
          }
          context = null;
          continue;
        }
        this[_pages][$last].widgets[$add](new multi_page._MultiPageWidget.new({child: child, constraints: constraints, widgetContext: multi_page.SpanningWidget.is(child) && canSpan ? child.saveContext().clone() : null}));
        offsetStart = dart.notNull(offsetStart) - dart.notNull(dart.nullCheck(child.box).height);
        sameCount = 0;
        _index = _index + 1;
      }
    }
    postProcess(document) {
      if (document == null) dart.nullFailed(I[97], 361, 29, "document");
      let _margin = this.margin;
      let _mustRotate = this.mustRotate;
      let pageHeight = dart.test(_mustRotate) ? this.pageFormat.width : this.pageFormat.height;
      let pageWidth = dart.test(_mustRotate) ? this.pageFormat.height : this.pageFormat.width;
      let pageHeightMargin = dart.test(_mustRotate) ? dart.nullCheck(_margin).horizontal : dart.nullCheck(_margin).vertical;
      let pageWidthMargin = dart.test(_mustRotate) ? _margin.vertical : _margin.horizontal;
      let availableWidth = dart.notNull(pageWidth) - dart.notNull(pageWidthMargin);
      for (let page of this[_pages]) {
        let offsetStart = dart.notNull(pageHeight) - dart.notNull(dart.test(_mustRotate) ? dart.notNull(pageHeightMargin) - dart.notNull(_margin.bottom) : _margin.top);
        let offsetEnd = dart.test(_mustRotate) ? dart.notNull(pageHeightMargin) - dart.notNull(_margin.left) : _margin.bottom;
        if (this.pageTheme.buildBackground != null) {
          let child = dart.nullCheck(this.pageTheme.buildBackground)(page.context);
          child.layout(page.context, page.fullConstraints, {parentUsesSize: false});
          if (!(child.box != null)) dart.assertFailed(null, I[97], 381, 16, "child.box != null");
          this[_paintChild](page.context, child, _margin.left, _margin.bottom, this.pageFormat.height);
        }
        let totalFlex = 0;
        let allocatedSize = 0.0;
        let lastFlexChild = null;
        for (let widget of page.widgets) {
          let child = widget.child;
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          if (dart.notNull(flex) > 0) {
            totalFlex = totalFlex + dart.notNull(flex);
            lastFlexChild = child;
          } else {
            if (multi_page.SpanningWidget.is(child) && dart.test(child.canSpan)) {
              let context = child.saveContext();
              context.apply(dart.nullCheck(widget.widgetContext));
            }
            child.layout(page.context, widget.constraints, {parentUsesSize: false});
            if (!(child.box != null)) dart.assertFailed(null, I[97], 402, 18, "child.box != null");
            allocatedSize = allocatedSize + dart.notNull(dart.nullCheck(child.box).height);
          }
        }
        if (this.header != null) {
          let headerWidget = dart.nullCheck(this.header)(page.context);
          headerWidget.layout(page.context, page.constraints, {parentUsesSize: false});
          if (!(headerWidget.box != null)) dart.assertFailed(null, I[97], 412, 16, "headerWidget.box != null");
          offsetStart = offsetStart - dart.notNull(dart.nullCheck(headerWidget.box).height);
          this[_paintChild](page.context, headerWidget, _margin.left, dart.nullCheck(page.offsetStart) - dart.notNull(dart.nullCheck(headerWidget.box).height), this.pageFormat.height);
        }
        if (this.footer != null) {
          let footerWidget = dart.nullCheck(this.footer)(page.context);
          footerWidget.layout(page.context, page.constraints, {parentUsesSize: false});
          if (!(footerWidget.box != null)) dart.assertFailed(null, I[97], 423, 16, "footerWidget.box != null");
          offsetEnd = dart.notNull(offsetEnd) + dart.notNull(dart.nullCheck(footerWidget.box).height);
          this[_paintChild](page.context, footerWidget, _margin.left, _margin.bottom, this.pageFormat.height);
        }
        let freeSpace = math.max(core.double, 0.0, offsetStart - dart.notNull(offsetEnd) - allocatedSize);
        let spacePerFlex = totalFlex > 0 ? freeSpace / totalFlex : 0 / 0;
        let allocatedFlexSpace = 0.0;
        let leadingSpace = 0.0;
        let betweenSpace = 0.0;
        if (totalFlex === 0) {
          let totalChildren = page.widgets[$length];
          switch (this.mainAxisAlignment) {
            case C[199] || CT.C199:
            {
              leadingSpace = 0.0;
              betweenSpace = 0.0;
              break;
            }
            case C[200] || CT.C200:
            {
              leadingSpace = freeSpace;
              betweenSpace = 0.0;
              break;
            }
            case C[201] || CT.C201:
            {
              leadingSpace = freeSpace / 2.0;
              betweenSpace = 0.0;
              break;
            }
            case C[202] || CT.C202:
            {
              leadingSpace = 0.0;
              betweenSpace = dart.notNull(totalChildren) > 1 ? freeSpace / (dart.notNull(totalChildren) - 1) : 0.0;
              break;
            }
            case C[203] || CT.C203:
            {
              betweenSpace = dart.notNull(totalChildren) > 0 ? freeSpace / dart.notNull(totalChildren) : 0.0;
              leadingSpace = betweenSpace / 2.0;
              break;
            }
            case C[204] || CT.C204:
            {
              betweenSpace = dart.notNull(totalChildren) > 0 ? freeSpace / (dart.notNull(totalChildren) + 1) : 0.0;
              leadingSpace = betweenSpace;
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
        }
        for (let widget of page.widgets) {
          let child = widget.child;
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          let fit = flex$.Flexible.is(child) ? child.fit : flex$.FlexFit.loose;
          if (dart.notNull(flex) > 0) {
            if (!(!multi_page.SpanningWidget.is(child) || child.canSpan === false)) dart.assertFailed("Cannot have a spanning widget flexible", I[97], 476, 18, "child is! SpanningWidget || child.canSpan == false");
            let maxChildExtent = dart.equals(child, lastFlexChild) ? freeSpace - allocatedFlexSpace : spacePerFlex * dart.notNull(flex);
            let minChildExtent = null;
            let minChildExtent$35isSet = false;
            function minChildExtent$35get() {
              return minChildExtent$35isSet ? minChildExtent : dart.throw(new _internal.LateError.localNI("minChildExtent"));
            }
            dart.fn(minChildExtent$35get, T$.VoidTodouble());
            function minChildExtent$35set(t62) {
              if (t62 == null) dart.nullFailed(I[97], 481, 23, "null");
              minChildExtent$35isSet = true;
              return minChildExtent = t62;
            }
            dart.fn(minChildExtent$35set, T$.doubleTodynamic());
            switch (fit) {
              case C[193] || CT.C193:
              {
                if (!(maxChildExtent < 1 / 0)) dart.assertFailed(null, I[97], 484, 22, "maxChildExtent < double.infinity");
                minChildExtent$35set(maxChildExtent);
                break;
              }
              case C[194] || CT.C194:
              {
                minChildExtent$35set(0.0);
                break;
              }
              default:
              {
                dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
              }
            }
            let innerConstraints = new geometry.BoxConstraints.new({minWidth: widget.constraints.maxWidth, maxWidth: widget.constraints.maxWidth, minHeight: minChildExtent$35get(), maxHeight: maxChildExtent});
            child.layout(page.context, innerConstraints, {parentUsesSize: false});
            if (!(child.box != null)) dart.assertFailed(null, I[97], 499, 18, "child.box != null");
            let childSize = dart.nullCheck(child.box).height;
            if (!(dart.notNull(childSize) <= maxChildExtent)) dart.assertFailed(null, I[97], 501, 18, "childSize <= maxChildExtent");
            allocatedSize = allocatedSize + dart.notNull(childSize);
            allocatedFlexSpace = allocatedFlexSpace + maxChildExtent;
          }
        }
        let pos = offsetStart - leadingSpace;
        for (let widget of page.widgets) {
          pos = pos - dart.notNull(dart.nullCheck(widget.child.box).height);
          let x = null;
          let x$35isSet = false;
          function x$35get() {
            return x$35isSet ? x : dart.throw(new _internal.LateError.localNI("x"));
          }
          dart.fn(x$35get, T$.VoidTodouble());
          function x$35set(t67) {
            if (t67 == null) dart.nullFailed(I[97], 510, 21, "null");
            x$35isSet = true;
            return x = t67;
          }
          dart.fn(x$35set, T$.doubleTodynamic());
          switch (this.crossAxisAlignment) {
            case C[206] || CT.C206:
            {
              x$35set(0.0);
              break;
            }
            case C[207] || CT.C207:
            {
              x$35set(availableWidth - dart.notNull(dart.nullCheck(widget.child.box).width));
              break;
            }
            case C[208] || CT.C208:
            {
              x$35set(availableWidth / 2 - dart.notNull(dart.nullCheck(widget.child.box).width) / 2);
              break;
            }
            case C[209] || CT.C209:
            {
              x$35set(0.0);
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
          this[_paintChild](page.context, widget.child, dart.notNull(_margin.left) + dart.notNull(x$35get()), pos, this.pageFormat.height);
          pos = pos - betweenSpace;
        }
        if (this.pageTheme.buildForeground != null) {
          let child = dart.nullCheck(this.pageTheme.buildForeground)(page.context);
          child.layout(page.context, page.fullConstraints, {parentUsesSize: false});
          if (!(child.box != null)) dart.assertFailed(null, I[97], 534, 16, "child.box != null");
          this[_paintChild](page.context, child, _margin.left, _margin.bottom, this.pageFormat.height);
        }
      }
    }
  };
  (multi_page.MultiPage.new = function(opts) {
    let pageTheme = opts && 'pageTheme' in opts ? opts.pageTheme : null;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let build = opts && 'build' in opts ? opts.build : null;
    if (build == null) dart.nullFailed(I[97], 132, 32, "build");
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[199] || CT.C199;
    if (mainAxisAlignment == null) dart.nullFailed(I[97], 133, 10, "mainAxisAlignment");
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[206] || CT.C206;
    if (crossAxisAlignment == null) dart.nullFailed(I[97], 134, 10, "crossAxisAlignment");
    let header = opts && 'header' in opts ? opts.header : null;
    let footer = opts && 'footer' in opts ? opts.footer : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let maxPages = opts && 'maxPages' in opts ? opts.maxPages : 20;
    if (maxPages == null) dart.nullFailed(I[97], 138, 10, "maxPages");
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[_pages] = T$.JSArrayOf_MultiPageInstance().of([]);
    this[mainAxisAlignment$0] = mainAxisAlignment;
    this[crossAxisAlignment$1] = crossAxisAlignment;
    this[header$] = header;
    this[footer$] = footer;
    this[maxPages$] = maxPages;
    this[_buildList] = build;
    if (!(dart.notNull(maxPages) > 0)) dart.assertFailed(null, I[97], 143, 16, "maxPages > 0");
    multi_page.MultiPage.__proto__.new.call(this, {pageTheme: pageTheme, pageFormat: pageFormat, build: dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[97], 147, 19, "_");
        return new basic.SizedBox.new();
      }, T$.ContextToSizedBox()), margin: margin, theme: theme, orientation: orientation, textDirection: textDirection});
    ;
  }).prototype = multi_page.MultiPage.prototype;
  dart.addTypeTests(multi_page.MultiPage);
  dart.addTypeCaches(multi_page.MultiPage);
  dart.setMethodSignature(multi_page.MultiPage, () => ({
    __proto__: dart.getMethods(multi_page.MultiPage.__proto__),
    [_paintChild]: dart.fnType(dart.void, [widget$.Context, widget$.Widget, core.double, core.double, core.double])
  }));
  dart.setLibraryUri(multi_page.MultiPage, I[4]);
  dart.setFieldSignature(multi_page.MultiPage, () => ({
    __proto__: dart.getFields(multi_page.MultiPage.__proto__),
    [_buildList]: dart.finalFieldType(dart.fnType(core.List$(widget$.Widget), [widget$.Context])),
    crossAxisAlignment: dart.finalFieldType(flex$.CrossAxisAlignment),
    header: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    footer: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    mainAxisAlignment: dart.finalFieldType(flex$.MainAxisAlignment),
    [_pages]: dart.finalFieldType(core.List$(multi_page._MultiPageInstance)),
    maxPages: dart.finalFieldType(core.int)
  }));
  text$1.TextAlign = class TextAlign extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (text$1.TextAlign.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[100], 31, 6, "index");
    if (_name == null) dart.nullFailed(I[100], 31, 6, "_name");
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = text$1.TextAlign.prototype;
  dart.addTypeTests(text$1.TextAlign);
  dart.addTypeCaches(text$1.TextAlign);
  dart.setLibraryUri(text$1.TextAlign, I[101]);
  dart.setFieldSignature(text$1.TextAlign, () => ({
    __proto__: dart.getFields(text$1.TextAlign.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text$1.TextAlign, ['toString']);
  text$1.TextAlign.left = C[78] || CT.C78;
  text$1.TextAlign.right = C[213] || CT.C213;
  text$1.TextAlign.center = C[214] || CT.C214;
  text$1.TextAlign.justify = C[115] || CT.C115;
  text$1.TextAlign.values = C[215] || CT.C215;
  text$1.TextDirection = class TextDirection extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (text$1.TextDirection.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[100], 33, 6, "index");
    if (_name == null) dart.nullFailed(I[100], 33, 6, "_name");
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = text$1.TextDirection.prototype;
  dart.addTypeTests(text$1.TextDirection);
  dart.addTypeCaches(text$1.TextDirection);
  dart.setLibraryUri(text$1.TextDirection, I[101]);
  dart.setFieldSignature(text$1.TextDirection, () => ({
    __proto__: dart.getFields(text$1.TextDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text$1.TextDirection, ['toString']);
  text$1.TextDirection.ltr = C[147] || CT.C147;
  text$1.TextDirection.rtl = C[146] || CT.C146;
  text$1.TextDirection.values = C[216] || CT.C216;
  text$1.TextOverflow = class TextOverflow extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (text$1.TextOverflow.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[100], 36, 6, "index");
    if (_name == null) dart.nullFailed(I[100], 36, 6, "_name");
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = text$1.TextOverflow.prototype;
  dart.addTypeTests(text$1.TextOverflow);
  dart.addTypeCaches(text$1.TextOverflow);
  dart.setLibraryUri(text$1.TextOverflow, I[101]);
  dart.setFieldSignature(text$1.TextOverflow, () => ({
    __proto__: dart.getFields(text$1.TextOverflow.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text$1.TextOverflow, ['toString']);
  text$1.TextOverflow.clip = C[217] || CT.C217;
  text$1.TextOverflow.visible = C[218] || CT.C218;
  text$1.TextOverflow.span = C[219] || CT.C219;
  text$1.TextOverflow.values = C[220] || CT.C220;
  var offset = dart.privateName(text$1, "_Span.offset");
  text$1._Span = class _Span extends core.Object {
    get offset() {
      return this[offset];
    }
    set offset(value) {
      this[offset] = value;
    }
    toString() {
      return "Span \"offset:" + dart.str(this.offset);
    }
    debugPaint(context, textScaleFactor, globalBox) {
      if (context == null) dart.nullFailed(I[100], 65, 13, "context");
      if (textScaleFactor == null) dart.nullFailed(I[100], 66, 12, "textScaleFactor");
    }
  };
  (text$1._Span.new = function(style) {
    if (style == null) dart.nullFailed(I[100], 48, 14, "style");
    this[offset] = point$.PdfPoint.zero;
    this.style = style;
    ;
  }).prototype = text$1._Span.prototype;
  dart.addTypeTests(text$1._Span);
  dart.addTypeCaches(text$1._Span);
  dart.setMethodSignature(text$1._Span, () => ({
    __proto__: dart.getMethods(text$1._Span.__proto__),
    debugPaint: dart.fnType(dart.void, [widget$.Context, core.double, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(text$1._Span, I[101]);
  dart.setFieldSignature(text$1._Span, () => ({
    __proto__: dart.getFields(text$1._Span.__proto__),
    style: dart.finalFieldType(text_style.TextStyle),
    offset: dart.fieldType(point$.PdfPoint)
  }));
  dart.defineExtensionMethods(text$1._Span, ['toString']);
  var _box = dart.privateName(text$1, "_box");
  var _getBox = dart.privateName(text$1, "_getBox");
  text$1._TextDecoration = class _TextDecoration extends core.Object {
    [_getBox](spans) {
      if (spans == null) dart.nullFailed(I[100], 94, 32, "spans");
      if (this[_box] != null) {
        return this[_box];
      }
      let x1 = dart.notNull(spans[$_get](this.startSpan).offset.x) + dart.notNull(spans[$_get](this.startSpan).left);
      let x2 = dart.notNull(spans[$_get](this.endSpan).offset.x) + dart.notNull(spans[$_get](this.endSpan).left) + dart.notNull(spans[$_get](this.endSpan).width);
      let y1 = dart.notNull(spans[$_get](this.startSpan).offset.y) + dart.notNull(spans[$_get](this.startSpan).top);
      let y2 = y1 + dart.notNull(spans[$_get](this.startSpan).height);
      for (let n = dart.notNull(this.startSpan) + 1; n <= dart.notNull(this.endSpan); n = n + 1) {
        let ny1 = dart.notNull(spans[$_get](n).offset.y) + dart.notNull(spans[$_get](n).top);
        let ny2 = ny1 + dart.notNull(spans[$_get](n).height);
        y1 = math.min(core.double, y1, ny1);
        y2 = math.max(core.double, y2, ny2);
      }
      this[_box] = rect$.PdfRect.fromLTRB(x1, y1, x2, y2);
      return this[_box];
    }
    copyWith(opts) {
      let t70;
      let endSpan = opts && 'endSpan' in opts ? opts.endSpan : null;
      return new text$1._TextDecoration.new(this.style, this.annotation, this.startSpan, (t70 = endSpan, t70 == null ? this.endSpan : t70));
    }
    backgroundPaint(context, textScaleFactor, globalBox, spans) {
      if (context == null) dart.nullFailed(I[100], 120, 13, "context");
      if (textScaleFactor == null) dart.nullFailed(I[100], 121, 12, "textScaleFactor");
      if (spans == null) dart.nullFailed(I[100], 123, 17, "spans");
      let box = this[_getBox](spans);
      if (this.annotation != null) {
        let spanBox = new rect$.PdfRect.new(dart.notNull(dart.nullCheck(globalBox).x) + dart.notNull(dart.nullCheck(box).left), dart.notNull(globalBox.top) + dart.notNull(box.bottom), box.width, box.height);
        dart.nullCheck(this.annotation).build(context, spanBox);
      }
      if (this.style.background != null) {
        let boundingBox = new rect$.PdfRect.new(dart.notNull(dart.nullCheck(globalBox).x) + dart.notNull(dart.nullCheck(box).left), dart.notNull(globalBox.top) + dart.notNull(box.bottom), box.width, box.height);
        dart.nullCheck(this.style.background).paint(context, boundingBox);
        context.canvas.setFillColor(this.style.color);
      }
    }
    foregroundPaint(context, textScaleFactor, globalBox, spans) {
      let t71, t70;
      if (context == null) dart.nullFailed(I[100], 150, 13, "context");
      if (textScaleFactor == null) dart.nullFailed(I[100], 151, 12, "textScaleFactor");
      if (spans == null) dart.nullFailed(I[100], 153, 17, "spans");
      if (this.style.decoration == null) {
        return;
      }
      let box = this[_getBox](spans);
      let font = dart.nullCheck(this.style.font).getFont(context);
      let space = -0.15 * dart.nullCheck(this.style.fontSize) * dart.notNull(textScaleFactor) * dart.nullCheck(this.style.decorationThickness);
      t70 = context.canvas;
      (() => {
        t70.setStrokeColor((t71 = this.style.decorationColor, t71 == null ? this.style.color : t71));
        t70.setLineWidth(dart.nullCheck(this.style.decorationThickness) * dart.nullCheck(this.style.fontSize) * dart.notNull(textScaleFactor) * 0.05);
        return t70;
      })();
      if (dart.test(dart.nullCheck(this.style.decoration).contains(text_style.TextDecoration.underline))) {
        let base = -dart.notNull(dart.nullCheck(font).descent) * dart.nullCheck(this.style.fontSize) * dart.notNull(textScaleFactor) / 2;
        context.canvas.drawLine(dart.notNull(dart.nullCheck(globalBox).x) + dart.notNull(dart.nullCheck(box).left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base);
        if (this.style.decorationStyle == text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base + space, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base + space);
        }
        context.canvas.strokePath();
      }
      if (dart.test(dart.nullCheck(this.style.decoration).contains(text_style.TextDecoration.overline))) {
        let base = dart.nullCheck(this.style.fontSize) * dart.notNull(textScaleFactor);
        context.canvas.drawLine(dart.notNull(dart.nullCheck(globalBox).x) + dart.notNull(dart.nullCheck(box).left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base);
        if (this.style.decorationStyle == text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base - space, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base - space);
        }
        context.canvas.strokePath();
      }
      if (dart.test(dart.nullCheck(this.style.decoration).contains(text_style.TextDecoration.lineThrough))) {
        let base = (1 - dart.notNull(dart.nullCheck(font).descent)) * dart.nullCheck(this.style.fontSize) * dart.notNull(textScaleFactor) / 2;
        context.canvas.drawLine(dart.notNull(dart.nullCheck(globalBox).x) + dart.notNull(dart.nullCheck(box).left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base);
        if (this.style.decorationStyle == text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base + space, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base + space);
        }
        context.canvas.strokePath();
      }
    }
    debugPaint(context, textScaleFactor, globalBox, spans) {
      let t70;
      if (context == null) dart.nullFailed(I[100], 232, 13, "context");
      if (textScaleFactor == null) dart.nullFailed(I[100], 233, 12, "textScaleFactor");
      if (globalBox == null) dart.nullFailed(I[100], 234, 13, "globalBox");
      if (spans == null) dart.nullFailed(I[100], 235, 17, "spans");
      let box = dart.nullCheck(this[_getBox](spans));
      t70 = context.canvas;
      (() => {
        t70.setLineWidth(0.5);
        t70.drawRect(dart.notNull(globalBox.x) + dart.notNull(box.x), dart.notNull(globalBox.top) + dart.notNull(box.y), box.width, box.height);
        t70.setStrokeColor(colors.PdfColors.yellow);
        t70.strokePath();
        return t70;
      })();
    }
  };
  (text$1._TextDecoration.new = function(style, annotation, startSpan, endSpan) {
    if (style == null) dart.nullFailed(I[100], 79, 24, "style");
    if (startSpan == null) dart.nullFailed(I[100], 79, 53, "startSpan");
    if (endSpan == null) dart.nullFailed(I[100], 79, 69, "endSpan");
    this[_box] = null;
    this.style = style;
    this.annotation = annotation;
    this.startSpan = startSpan;
    this.endSpan = endSpan;
    if (!(dart.notNull(startSpan) <= dart.notNull(endSpan))) dart.assertFailed(null, I[100], 80, 16, "startSpan <= endSpan");
    ;
  }).prototype = text$1._TextDecoration.prototype;
  dart.addTypeTests(text$1._TextDecoration);
  dart.addTypeCaches(text$1._TextDecoration);
  dart.setMethodSignature(text$1._TextDecoration, () => ({
    __proto__: dart.getMethods(text$1._TextDecoration.__proto__),
    [_getBox]: dart.fnType(dart.nullable(rect$.PdfRect), [core.List$(text$1._Span)]),
    copyWith: dart.fnType(text$1._TextDecoration, [], {endSpan: dart.nullable(core.int)}, {}),
    backgroundPaint: dart.fnType(dart.void, [widget$.Context, core.double, dart.nullable(rect$.PdfRect), core.List$(text$1._Span)]),
    foregroundPaint: dart.fnType(dart.void, [widget$.Context, core.double, dart.nullable(rect$.PdfRect), core.List$(text$1._Span)]),
    debugPaint: dart.fnType(dart.void, [widget$.Context, core.double, rect$.PdfRect, core.List$(text$1._Span)])
  }));
  dart.setLibraryUri(text$1._TextDecoration, I[101]);
  dart.setFieldSignature(text$1._TextDecoration, () => ({
    __proto__: dart.getFields(text$1._TextDecoration.__proto__),
    style: dart.finalFieldType(text_style.TextStyle),
    annotation: dart.finalFieldType(dart.nullable(annotations.AnnotationBuilder)),
    startSpan: dart.finalFieldType(core.int),
    endSpan: dart.finalFieldType(core.int),
    [_box]: dart.fieldType(dart.nullable(rect$.PdfRect))
  }));
  dart.defineLazy(text$1._TextDecoration, {
    /*text$1._TextDecoration._space*/get _space() {
      return -0.15;
    }
  }, false);
  text$1._Word = class _Word extends text$1._Span {
    get left() {
      return this.metrics.left;
    }
    get top() {
      return this.metrics.descent;
    }
    get width() {
      return this.metrics.width;
    }
    get height() {
      return this.metrics.maxHeight;
    }
    toString() {
      return "Word \"" + dart.str(this.text) + "\" offset:" + dart.str(this.offset) + " metrics:" + dart.str(this.metrics) + " style:" + dart.str(this.style);
    }
    paint(context, style, textScaleFactor, point) {
      let t70, t70$;
      if (context == null) dart.nullFailed(I[100], 278, 13, "context");
      if (style == null) dart.nullFailed(I[100], 279, 15, "style");
      if (textScaleFactor == null) dart.nullFailed(I[100], 280, 12, "textScaleFactor");
      if (point == null) dart.nullFailed(I[100], 281, 14, "point");
      context.canvas.drawString(dart.nullCheck(dart.nullCheck(style.font).getFont(context)), dart.nullCheck(style.fontSize) * dart.notNull(textScaleFactor), this.text, dart.notNull(point.x) + dart.notNull(this.offset.x), dart.notNull(point.y) + dart.notNull(this.offset.y), {mode: (t70 = style.renderingMode, t70 == null ? graphics.PdfTextRenderingMode.fill : t70), charSpace: (t70$ = style.letterSpacing, t70$ == null ? 0.0 : t70$)});
    }
    debugPaint(context, textScaleFactor, globalBox) {
      let t70;
      if (context == null) dart.nullFailed(I[100], 296, 13, "context");
      if (textScaleFactor == null) dart.nullFailed(I[100], 297, 12, "textScaleFactor");
      t70 = context.canvas;
      (() => {
        t70.setLineWidth(0.5);
        t70.drawRect(dart.notNull(dart.nullCheck(globalBox).x) + dart.notNull(this.offset.x) + dart.notNull(this.metrics.left), dart.notNull(globalBox.top) + dart.notNull(this.offset.y) + dart.notNull(this.metrics.top), this.metrics.width, this.metrics.height);
        t70.setStrokeColor(colors.PdfColors.orange);
        t70.strokePath();
        t70.drawLine(dart.notNull(globalBox.x) + dart.notNull(this.offset.x) - 5, dart.notNull(globalBox.top) + dart.notNull(this.offset.y), dart.notNull(globalBox.x) + dart.notNull(this.offset.x) + dart.notNull(this.metrics.right) + 5, dart.notNull(globalBox.top) + dart.notNull(this.offset.y));
        t70.setStrokeColor(colors.PdfColors.deepPurple);
        t70.strokePath();
        return t70;
      })();
    }
  };
  (text$1._Word.new = function(text, style, metrics) {
    if (text == null) dart.nullFailed(I[100], 250, 10, "text");
    if (style == null) dart.nullFailed(I[100], 251, 15, "style");
    if (metrics == null) dart.nullFailed(I[100], 252, 10, "metrics");
    this.text = text;
    this.metrics = metrics;
    text$1._Word.__proto__.new.call(this, style);
    ;
  }).prototype = text$1._Word.prototype;
  dart.addTypeTests(text$1._Word);
  dart.addTypeCaches(text$1._Word);
  dart.setMethodSignature(text$1._Word, () => ({
    __proto__: dart.getMethods(text$1._Word.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, text_style.TextStyle, core.double, point$.PdfPoint])
  }));
  dart.setGetterSignature(text$1._Word, () => ({
    __proto__: dart.getGetters(text$1._Word.__proto__),
    left: core.double,
    top: core.double,
    width: core.double,
    height: core.double
  }));
  dart.setLibraryUri(text$1._Word, I[101]);
  dart.setFieldSignature(text$1._Word, () => ({
    __proto__: dart.getFields(text$1._Word.__proto__),
    text: dart.finalFieldType(core.String),
    metrics: dart.finalFieldType(font_metrics.PdfFontMetrics)
  }));
  dart.defineExtensionMethods(text$1._Word, ['toString']);
  text$1._WidgetSpan = class _WidgetSpan extends text$1._Span {
    get left() {
      return 0.0;
    }
    get top() {
      return 0.0;
    }
    get width() {
      return dart.nullCheck(this.widget.box).width;
    }
    get height() {
      return dart.nullCheck(this.widget.box).height;
    }
    get offset() {
      return dart.nullCheck(this.widget.box).offset;
    }
    set offset(value) {
      if (value == null) dart.nullFailed(I[100], 339, 23, "value");
      this.widget.box = rect$.PdfRect.fromPoints(value, dart.nullCheck(this.widget.box).size);
    }
    toString() {
      return "Widget \"" + dart.str(this.widget) + "\" offset:" + dart.str(this.offset);
    }
    paint(context, style, textScaleFactor, point) {
      if (context == null) dart.nullFailed(I[100], 350, 13, "context");
      if (textScaleFactor == null) dart.nullFailed(I[100], 352, 12, "textScaleFactor");
      if (point == null) dart.nullFailed(I[100], 353, 14, "point");
      this.widget.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(dart.notNull(point.x) + dart.notNull(dart.nullCheck(this.widget.box).offset.x), dart.notNull(point.y) + dart.notNull(dart.nullCheck(this.widget.box).offset.y)), dart.nullCheck(this.widget.box).size);
      this.widget.paint(context);
    }
    debugPaint(context, textScaleFactor, globalBox) {
      let t70;
      if (context == null) dart.nullFailed(I[100], 364, 13, "context");
      if (textScaleFactor == null) dart.nullFailed(I[100], 365, 12, "textScaleFactor");
      t70 = context.canvas;
      (() => {
        t70.setLineWidth(0.5);
        t70.drawRect(dart.notNull(dart.nullCheck(globalBox).x) + dart.notNull(this.offset.x), dart.notNull(globalBox.top) + dart.notNull(this.offset.y), this.width, this.height);
        t70.setStrokeColor(colors.PdfColors.orange);
        t70.strokePath();
        return t70;
      })();
    }
  };
  (text$1._WidgetSpan.new = function(widget, style) {
    if (widget == null) dart.nullFailed(I[100], 319, 20, "widget");
    if (style == null) dart.nullFailed(I[100], 319, 38, "style");
    this.widget = widget;
    text$1._WidgetSpan.__proto__.new.call(this, style);
    ;
  }).prototype = text$1._WidgetSpan.prototype;
  dart.addTypeTests(text$1._WidgetSpan);
  dart.addTypeCaches(text$1._WidgetSpan);
  dart.setMethodSignature(text$1._WidgetSpan, () => ({
    __proto__: dart.getMethods(text$1._WidgetSpan.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, dart.nullable(text_style.TextStyle), core.double, point$.PdfPoint])
  }));
  dart.setGetterSignature(text$1._WidgetSpan, () => ({
    __proto__: dart.getGetters(text$1._WidgetSpan.__proto__),
    left: core.double,
    top: core.double,
    width: core.double,
    height: core.double,
    offset: point$.PdfPoint
  }));
  dart.setSetterSignature(text$1._WidgetSpan, () => ({
    __proto__: dart.getSetters(text$1._WidgetSpan.__proto__),
    offset: point$.PdfPoint
  }));
  dart.setLibraryUri(text$1._WidgetSpan, I[101]);
  dart.setFieldSignature(text$1._WidgetSpan, () => ({
    __proto__: dart.getFields(text$1._WidgetSpan.__proto__),
    widget: dart.finalFieldType(widget$.Widget)
  }));
  dart.defineExtensionMethods(text$1._WidgetSpan, ['toString']);
  var style$3 = dart.privateName(text$1, "InlineSpan.style");
  var baseline$ = dart.privateName(text$1, "InlineSpan.baseline");
  var annotation$ = dart.privateName(text$1, "InlineSpan.annotation");
  text$1.InlineSpan = class InlineSpan extends core.Object {
    get style() {
      return this[style$3];
    }
    set style(value) {
      super.style = value;
    }
    get baseline() {
      return this[baseline$];
    }
    set baseline(value) {
      super.baseline = value;
    }
    get annotation() {
      return this[annotation$];
    }
    set annotation(value) {
      super.annotation = value;
    }
    toPlainText() {
      let buffer = new core.StringBuffer.new();
      this.visitChildren(dart.fn((span, style, annotation) => {
        if (span == null) dart.nullFailed(I[100], 396, 18, "span");
        if (text$1.TextSpan.is(span)) {
          buffer.write(span.text);
        }
        return true;
      }, T$.InlineSpanAndTextStyleNAndAnnotationBuilderNTobool()), null, null);
      return buffer.toString();
    }
  };
  (text$1.InlineSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[style$3] = style;
    this[baseline$] = baseline;
    this[annotation$] = annotation;
    ;
  }).prototype = text$1.InlineSpan.prototype;
  dart.addTypeTests(text$1.InlineSpan);
  dart.addTypeCaches(text$1.InlineSpan);
  dart.setMethodSignature(text$1.InlineSpan, () => ({
    __proto__: dart.getMethods(text$1.InlineSpan.__proto__),
    toPlainText: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(text$1.InlineSpan, I[101]);
  dart.setFieldSignature(text$1.InlineSpan, () => ({
    __proto__: dart.getFields(text$1.InlineSpan.__proto__),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    baseline: dart.finalFieldType(dart.nullable(core.double)),
    annotation: dart.finalFieldType(dart.nullable(annotations.AnnotationBuilder))
  }));
  var child$9 = dart.privateName(text$1, "WidgetSpan.child");
  text$1.WidgetSpan = class WidgetSpan extends text$1.InlineSpan {
    get child() {
      return this[child$9];
    }
    set child(value) {
      super.child = value;
    }
    visitChildren(visitor, parentStyle, annotation) {
      let t70, t70$;
      if (visitor == null) dart.nullFailed(I[100], 430, 22, "visitor");
      let _style = (t70 = parentStyle, t70 == null ? null : t70.merge(this.style));
      let _a = (t70$ = this.annotation, t70$ == null ? annotation : t70$);
      return visitor(this, _style, _a);
    }
  };
  (text$1.WidgetSpan.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[100], 418, 19, "child");
    let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
    if (baseline == null) dart.nullFailed(I[100], 419, 12, "baseline");
    let style = opts && 'style' in opts ? opts.style : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[child$9] = child;
    text$1.WidgetSpan.__proto__.new.call(this, {style: style, baseline: baseline, annotation: annotation});
    ;
  }).prototype = text$1.WidgetSpan.prototype;
  dart.addTypeTests(text$1.WidgetSpan);
  dart.addTypeCaches(text$1.WidgetSpan);
  dart.setMethodSignature(text$1.WidgetSpan, () => ({
    __proto__: dart.getMethods(text$1.WidgetSpan.__proto__),
    visitChildren: dart.fnType(core.bool, [dart.fnType(core.bool, [text$1.InlineSpan, dart.nullable(text_style.TextStyle), dart.nullable(annotations.AnnotationBuilder)]), dart.nullable(text_style.TextStyle), dart.nullable(annotations.AnnotationBuilder)])
  }));
  dart.setLibraryUri(text$1.WidgetSpan, I[101]);
  dart.setFieldSignature(text$1.WidgetSpan, () => ({
    __proto__: dart.getFields(text$1.WidgetSpan.__proto__),
    child: dart.finalFieldType(widget$.Widget)
  }));
  var text$6 = dart.privateName(text$1, "TextSpan.text");
  var children$7 = dart.privateName(text$1, "TextSpan.children");
  text$1.TextSpan = class TextSpan extends text$1.InlineSpan {
    get text() {
      return this[text$6];
    }
    set text(value) {
      super.text = value;
    }
    get children() {
      return this[children$7];
    }
    set children(value) {
      super.children = value;
    }
    visitChildren(visitor, parentStyle, annotation) {
      let t70, t70$;
      if (visitor == null) dart.nullFailed(I[100], 456, 22, "visitor");
      let _style = (t70 = parentStyle, t70 == null ? null : t70.merge(this.style));
      let _a = (t70$ = this.annotation, t70$ == null ? annotation : t70$);
      if (this.text != null) {
        if (!dart.test(visitor(this, _style, _a))) {
          return false;
        }
      }
      if (this.children != null) {
        for (let child of dart.nullCheck(this.children)) {
          if (!dart.test(child.visitChildren(visitor, _style, _a))) {
            return false;
          }
        }
      }
      return true;
    }
  };
  (text$1.TextSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let text = opts && 'text' in opts ? opts.text : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
    if (baseline == null) dart.nullFailed(I[100], 445, 12, "baseline");
    let children = opts && 'children' in opts ? opts.children : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[text$6] = text;
    this[children$7] = children;
    text$1.TextSpan.__proto__.new.call(this, {style: style, baseline: baseline, annotation: annotation});
    ;
  }).prototype = text$1.TextSpan.prototype;
  dart.addTypeTests(text$1.TextSpan);
  dart.addTypeCaches(text$1.TextSpan);
  dart.setMethodSignature(text$1.TextSpan, () => ({
    __proto__: dart.getMethods(text$1.TextSpan.__proto__),
    visitChildren: dart.fnType(core.bool, [dart.fnType(core.bool, [text$1.InlineSpan, dart.nullable(text_style.TextStyle), dart.nullable(annotations.AnnotationBuilder)]), dart.nullable(text_style.TextStyle), dart.nullable(annotations.AnnotationBuilder)])
  }));
  dart.setLibraryUri(text$1.TextSpan, I[101]);
  dart.setFieldSignature(text$1.TextSpan, () => ({
    __proto__: dart.getFields(text$1.TextSpan.__proto__),
    text: dart.finalFieldType(dart.nullable(core.String)),
    children: dart.finalFieldType(dart.nullable(core.List$(text$1.InlineSpan)))
  }));
  var parent$ = dart.privateName(text$1, "_Line.parent");
  var firstSpan$ = dart.privateName(text$1, "_Line.firstSpan");
  var countSpan$ = dart.privateName(text$1, "_Line.countSpan");
  var baseline$0 = dart.privateName(text$1, "_Line.baseline");
  var wordsWidth$ = dart.privateName(text$1, "_Line.wordsWidth");
  var textDirection$2 = dart.privateName(text$1, "_Line.textDirection");
  var justify$ = dart.privateName(text$1, "_Line.justify");
  var _textAlign = dart.privateName(text$1, "_textAlign");
  var _spans = dart.privateName(text$1, "_spans");
  text$1._Line = class _Line extends core.Object {
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    get firstSpan() {
      return this[firstSpan$];
    }
    set firstSpan(value) {
      super.firstSpan = value;
    }
    get countSpan() {
      return this[countSpan$];
    }
    set countSpan(value) {
      super.countSpan = value;
    }
    get baseline() {
      return this[baseline$0];
    }
    set baseline(value) {
      super.baseline = value;
    }
    get wordsWidth() {
      return this[wordsWidth$];
    }
    set wordsWidth(value) {
      super.wordsWidth = value;
    }
    get textDirection() {
      return this[textDirection$2];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get justify() {
      return this[justify$];
    }
    set justify(value) {
      super.justify = value;
    }
    get lastSpan() {
      return dart.notNull(this.firstSpan) + dart.notNull(this.countSpan);
    }
    get textAlign() {
      return this.parent[_textAlign];
    }
    get height() {
      let list = this.parent[_spans][$sublist](this.firstSpan, this.lastSpan);
      return dart.test(list[$isEmpty]) ? 0.0 : list[$reduce](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[100], 510, 24, "a");
        if (b == null) dart.nullFailed(I[100], 510, 27, "b");
        return dart.notNull(a.height) > dart.notNull(b.height) ? a : b;
      }, T$._SpanAnd_SpanTo_Span())).height;
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.firstSpan) + "-" + dart.str(this.lastSpan) + " baseline: " + dart.str(this.baseline) + " width:" + dart.str(this.wordsWidth);
    }
    realign(totalWidth) {
      if (totalWidth == null) dart.nullFailed(I[100], 517, 23, "totalWidth");
      let spans = this.parent[_spans][$sublist](this.firstSpan, this.lastSpan);
      let delta = 0.0;
      switch (this.textAlign) {
        case C[78] || CT.C78:
        {
          break;
        }
        case C[213] || CT.C213:
        {
          delta = dart.notNull(totalWidth) - dart.notNull(this.wordsWidth);
          break;
        }
        case C[214] || CT.C214:
        {
          delta = (dart.notNull(totalWidth) - dart.notNull(this.wordsWidth)) / 2.0;
          break;
        }
        case C[115] || CT.C115:
        {
          if (!dart.test(this.justify)) {
            totalWidth = this.wordsWidth;
            break;
          }
          delta = (dart.notNull(totalWidth) - dart.notNull(this.wordsWidth)) / (dart.notNull(spans[$length]) - 1);
          let x = 0.0;
          for (let span of spans) {
            span.offset = span.offset.translate(x, -dart.notNull(this.baseline));
            x = x + delta;
          }
          return;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      if (this.textDirection == text$1.TextDirection.rtl) {
        for (let span of spans) {
          span.offset = new point$.PdfPoint.new(dart.notNull(totalWidth) - (dart.notNull(span.offset.x) + dart.notNull(span.width)) - delta, dart.notNull(span.offset.y) - dart.notNull(this.baseline));
        }
        return;
      }
      for (let span of spans) {
        span.offset = span.offset.translate(delta, -dart.notNull(this.baseline));
      }
      return;
    }
  };
  (text$1._Line.new = function(parent, firstSpan, countSpan, baseline, wordsWidth, textDirection, justify) {
    if (parent == null) dart.nullFailed(I[100], 481, 10, "parent");
    if (firstSpan == null) dart.nullFailed(I[100], 482, 10, "firstSpan");
    if (countSpan == null) dart.nullFailed(I[100], 483, 10, "countSpan");
    if (baseline == null) dart.nullFailed(I[100], 484, 10, "baseline");
    if (wordsWidth == null) dart.nullFailed(I[100], 485, 10, "wordsWidth");
    if (textDirection == null) dart.nullFailed(I[100], 486, 10, "textDirection");
    if (justify == null) dart.nullFailed(I[100], 487, 10, "justify");
    this[parent$] = parent;
    this[firstSpan$] = firstSpan;
    this[countSpan$] = countSpan;
    this[baseline$0] = baseline;
    this[wordsWidth$] = wordsWidth;
    this[textDirection$2] = textDirection;
    this[justify$] = justify;
    ;
  }).prototype = text$1._Line.prototype;
  dart.addTypeTests(text$1._Line);
  dart.addTypeCaches(text$1._Line);
  dart.setMethodSignature(text$1._Line, () => ({
    __proto__: dart.getMethods(text$1._Line.__proto__),
    realign: dart.fnType(dart.void, [core.double])
  }));
  dart.setGetterSignature(text$1._Line, () => ({
    __proto__: dart.getGetters(text$1._Line.__proto__),
    lastSpan: core.int,
    textAlign: text$1.TextAlign,
    height: core.double
  }));
  dart.setLibraryUri(text$1._Line, I[101]);
  dart.setFieldSignature(text$1._Line, () => ({
    __proto__: dart.getFields(text$1._Line.__proto__),
    parent: dart.finalFieldType(text$1.RichText),
    firstSpan: dart.finalFieldType(core.int),
    countSpan: dart.finalFieldType(core.int),
    baseline: dart.finalFieldType(core.double),
    wordsWidth: dart.finalFieldType(core.double),
    textDirection: dart.finalFieldType(text$1.TextDirection),
    justify: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(text$1._Line, ['toString']);
  text$1._RichTextContext = class _RichTextContext extends multi_page.WidgetContext {
    apply(other) {
      text$1._RichTextContext.as(other);
      if (other == null) dart.nullFailed(I[100], 570, 31, "other");
      this.startOffset = other.startOffset;
      this.endOffset = other.endOffset;
      this.spanStart = other.spanStart;
      this.spanEnd = other.spanEnd;
    }
    clone() {
      let t70;
      t70 = new text$1._RichTextContext.new();
      return (() => {
        t70.apply(this);
        return t70;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " Offset: " + dart.str(this.startOffset) + " -> " + dart.str(this.endOffset) + "  Span: " + dart.str(this.spanStart) + " -> " + dart.str(this.spanEnd);
    }
  };
  (text$1._RichTextContext.new = function() {
    this.startOffset = 0.0;
    this.endOffset = 0.0;
    this.spanStart = 0;
    this.spanEnd = 0;
    ;
  }).prototype = text$1._RichTextContext.prototype;
  dart.addTypeTests(text$1._RichTextContext);
  dart.addTypeCaches(text$1._RichTextContext);
  dart.setMethodSignature(text$1._RichTextContext, () => ({
    __proto__: dart.getMethods(text$1._RichTextContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(text$1._RichTextContext, I[101]);
  dart.setFieldSignature(text$1._RichTextContext, () => ({
    __proto__: dart.getFields(text$1._RichTextContext.__proto__),
    startOffset: dart.fieldType(core.double),
    endOffset: dart.fieldType(core.double),
    spanStart: dart.fieldType(core.int),
    spanEnd: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(text$1._RichTextContext, ['toString']);
  var text$7 = dart.privateName(text$1, "RichText.text");
  var textAlign$4 = dart.privateName(text$1, "RichText.textAlign");
  var textDirection$3 = dart.privateName(text$1, "RichText.textDirection");
  var textScaleFactor$0 = dart.privateName(text$1, "RichText.textScaleFactor");
  var softWrap$2 = dart.privateName(text$1, "RichText.softWrap");
  var tightBounds$ = dart.privateName(text$1, "RichText.tightBounds");
  var maxLines$2 = dart.privateName(text$1, "RichText.maxLines");
  var overflow$2 = dart.privateName(text$1, "RichText.overflow");
  var __RichText__textAlign = dart.privateName(text$1, "_#RichText#_textAlign");
  var __RichText__textAlign_isSet = dart.privateName(text$1, "_#RichText#_textAlign#isSet");
  var _decorations = dart.privateName(text$1, "_decorations");
  var _context$4 = dart.privateName(text$1, "_context");
  var _mustClip = dart.privateName(text$1, "_mustClip");
  var _appendDecoration = dart.privateName(text$1, "_appendDecoration");
  var _splitWord = dart.privateName(text$1, "_splitWord");
  const Widget_SpanningWidget$36$3 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$3.new = function() {
    Widget_SpanningWidget$36$3.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$3.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$3, multi_page.SpanningWidget);
  text$1.RichText = class RichText extends Widget_SpanningWidget$36$3 {
    get text() {
      return this[text$7];
    }
    set text(value) {
      super.text = value;
    }
    get textAlign() {
      return this[textAlign$4];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textDirection() {
      return this[textDirection$3];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$0];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get softWrap() {
      return this[softWrap$2];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get tightBounds() {
      return this[tightBounds$];
    }
    set tightBounds(value) {
      super.tightBounds = value;
    }
    get maxLines() {
      return this[maxLines$2];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get overflow() {
      return this[overflow$2];
    }
    set overflow(value) {
      super.overflow = value;
    }
    get [_textAlign]() {
      let t70;
      return dart.test(this[__RichText__textAlign_isSet]) ? (t70 = this[__RichText__textAlign], t70) : dart.throw(new _internal.LateError.fieldNI("_textAlign"));
    }
    set [_textAlign](t70) {
      if (t70 == null) dart.nullFailed(I[100], 605, 18, "null");
      this[__RichText__textAlign_isSet] = true;
      this[__RichText__textAlign] = t70;
    }
    [_appendDecoration](append, td) {
      if (append == null) dart.nullFailed(I[100], 627, 31, "append");
      if (td == null) dart.nullFailed(I[100], 627, 55, "td");
      if (dart.test(append) && dart.test(this[_decorations][$isNotEmpty])) {
        let last = this[_decorations][$last];
        if (dart.equals(last.style, td.style) && dart.equals(last.annotation, td.annotation)) {
          this[_decorations][$_set](dart.notNull(this[_decorations][$length]) - 1, last.copyWith({endSpan: td.endSpan}));
          return;
        }
      }
      this[_decorations][$add](td);
    }
    layout(context, constraints, opts) {
      let t71, t71$, t71$0, t71$1, t71$2, t71$3, t71$4, t71$5;
      if (context == null) dart.nullFailed(I[100], 641, 23, "context");
      if (constraints == null) dart.nullFailed(I[100], 641, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[100], 642, 13, "parentUsesSize");
      this[_spans][$clear]();
      this[_decorations][$clear]();
      let theme = theme$.Theme.of(context);
      let defaultstyle = theme.defaultTextStyle;
      let _softWrap = (t71 = this.softWrap, t71 == null ? theme.softWrap : t71);
      let _maxLines = (t71$ = this.maxLines, t71$ == null ? theme.maxLines : t71$);
      this[_textAlign] = (t71$0 = this.textAlign, t71$0 == null ? theme.textAlign : t71$0);
      let _textDirection = (t71$1 = this.textDirection, t71$1 == null ? text_style.Directionality.of(context) : t71$1);
      let _overflow = (t71$2 = this.overflow, t71$2 == null ? theme.overflow : t71$2);
      let constraintWidth = dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : constraints.constrainWidth();
      let constraintHeight = dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : constraints.constrainHeight();
      let offsetX = 0.0;
      let offsetY = this[_context$4].startOffset;
      let top = 0.0;
      let bottom = 0.0;
      let lines = T$.JSArrayOf_Line().of([]);
      let spanCount = 0;
      let spanStart = 0;
      let overflow = false;
      this.text.visitChildren(dart.fn((span, style, annotation) => {
        if (span == null) dart.nullFailed(I[100], 673, 18, "span");
        if (text$1.TextSpan.is(span)) {
          if (span.text == null) {
            return true;
          }
          let font = dart.nullCheck(dart.nullCheck(dart.nullCheck(style).font).getFont(context));
          let space = font.stringMetrics(" ")['*'](dart.nullCheck(style.fontSize) * dart.notNull(this.textScaleFactor));
          let spanLines = dart.nullCheck(_textDirection == text$1.TextDirection.rtl ? arabic.convert(dart.nullCheck(span.text)) : span.text)[$split]("\n");
          for (let line = 0; line < dart.notNull(spanLines[$length]); line = line + 1) {
            let words = spanLines[$_get](line)[$split](core.RegExp.new("\\s"));
            for (let index = 0; index < dart.notNull(words[$length]); index = index + 1) {
              let word = words[$_get](index);
              if (word[$isEmpty]) {
                offsetX = offsetX + (dart.notNull(space.advanceWidth) * dart.nullCheck(style.wordSpacing) + dart.nullCheck(style.letterSpacing));
                continue;
              }
              let metrics = font.stringMetrics(word, {letterSpacing: dart.nullCheck(style.letterSpacing) / (dart.nullCheck(style.fontSize) * dart.notNull(this.textScaleFactor))})['*'](dart.nullCheck(style.fontSize) * dart.notNull(this.textScaleFactor));
              if (dart.test(_softWrap) && offsetX + dart.notNull(metrics.width) > dart.notNull(constraintWidth) + 0.00001) {
                if (spanCount > 0 && dart.notNull(metrics.width) <= dart.notNull(constraintWidth)) {
                  overflow = true;
                  lines[$add](new text$1._Line.new(this, spanStart, spanCount, bottom, offsetX - dart.notNull(space.advanceWidth) * dart.nullCheck(style.wordSpacing) - dart.nullCheck(style.letterSpacing), _textDirection, true));
                  spanStart = spanStart + spanCount;
                  spanCount = 0;
                  offsetX = 0.0;
                  offsetY = dart.notNull(offsetY) + (bottom - top);
                  top = 0.0;
                  bottom = 0.0;
                  if (_maxLines != null && dart.notNull(lines[$length]) >= dart.notNull(_maxLines)) {
                    return false;
                  }
                  if (dart.notNull(offsetY) > dart.notNull(constraintHeight)) {
                    return false;
                  }
                  offsetY = dart.notNull(offsetY) + dart.nullCheck(style.lineSpacing) * dart.notNull(this.textScaleFactor);
                } else {
                  let pos = this[_splitWord](word, font, style, constraintWidth);
                  if (dart.notNull(pos) < word.length) {
                    words[$_set](index, word[$substring](0, pos));
                    words[$insert](index + 1, word[$substring](pos));
                    index = index - 1;
                    continue;
                  }
                }
              }
              let baseline = dart.nullCheck(span.baseline) * dart.notNull(this.textScaleFactor);
              let mt = dart.test(this.tightBounds) ? metrics.top : metrics.descent;
              let mb = dart.test(this.tightBounds) ? metrics.bottom : metrics.ascent;
              top = math.min(core.double, top, dart.notNull(mt) + baseline);
              bottom = math.max(core.double, bottom, dart.notNull(mb) + baseline);
              let wd = new text$1._Word.new(word, style, metrics);
              wd.offset = new point$.PdfPoint.new(offsetX, -dart.notNull(offsetY) + baseline);
              this[_spans][$add](wd);
              spanCount = spanCount + 1;
              this[_appendDecoration](spanCount > 1, new text$1._TextDecoration.new(style, annotation, dart.notNull(this[_spans][$length]) - 1, dart.notNull(this[_spans][$length]) - 1));
              offsetX = offsetX + (dart.notNull(metrics.advanceWidth) + dart.notNull(space.advanceWidth) * dart.nullCheck(style.wordSpacing) + dart.nullCheck(style.letterSpacing));
            }
            if (line < dart.notNull(spanLines[$length]) - 1) {
              lines[$add](new text$1._Line.new(this, spanStart, spanCount, bottom, offsetX - dart.notNull(space.advanceWidth) * dart.nullCheck(style.wordSpacing) - dart.nullCheck(style.letterSpacing), _textDirection, false));
              spanStart = spanStart + spanCount;
              offsetX = 0.0;
              if (spanCount > 0) {
                offsetY = dart.notNull(offsetY) + (bottom - top);
              } else {
                offsetY = dart.notNull(offsetY) + (dart.notNull(space.ascent) + dart.notNull(space.descent));
              }
              top = 0.0;
              bottom = 0.0;
              spanCount = 0;
              if (_maxLines != null && dart.notNull(lines[$length]) >= dart.notNull(_maxLines)) {
                return false;
              }
              if (dart.notNull(offsetY) > dart.notNull(constraintHeight)) {
                return false;
              }
              offsetY = dart.notNull(offsetY) + dart.nullCheck(style.lineSpacing) * dart.notNull(this.textScaleFactor);
            }
          }
          offsetX = offsetX - (dart.notNull(space.advanceWidth) * dart.nullCheck(style.wordSpacing) - dart.nullCheck(style.letterSpacing));
        } else if (text$1.WidgetSpan.is(span)) {
          span.child.layout(context, new geometry.BoxConstraints.new({maxWidth: constraintWidth, maxHeight: constraintHeight}));
          let ws = new text$1._WidgetSpan.new(span.child, dart.nullCheck(style));
          if (offsetX + dart.notNull(ws.width) > dart.notNull(constraintWidth) && spanCount > 0) {
            overflow = true;
            lines[$add](new text$1._Line.new(this, spanStart, spanCount, bottom, offsetX, _textDirection, true));
            spanStart = spanStart + spanCount;
            spanCount = 0;
            if (_maxLines != null && dart.notNull(lines[$length]) > dart.notNull(_maxLines)) {
              return false;
            }
            offsetX = 0.0;
            offsetY = dart.notNull(offsetY) + (bottom - top);
            top = 0.0;
            bottom = 0.0;
            if (dart.notNull(offsetY) > dart.notNull(constraintHeight)) {
              return false;
            }
            offsetY = dart.notNull(offsetY) + dart.nullCheck(style.lineSpacing) * dart.notNull(this.textScaleFactor);
          }
          let baseline = dart.nullCheck(span.baseline) * dart.notNull(this.textScaleFactor);
          top = math.min(core.double, top, baseline);
          bottom = math.max(core.double, bottom, dart.notNull(ws.height) + baseline);
          ws.offset = new point$.PdfPoint.new(offsetX, -dart.notNull(offsetY) + baseline);
          this[_spans][$add](ws);
          spanCount = spanCount + 1;
          this[_appendDecoration](spanCount > 1, new text$1._TextDecoration.new(style, annotation, dart.notNull(this[_spans][$length]) - 1, dart.notNull(this[_spans][$length]) - 1));
          offsetX = offsetX + (dart.notNull(ws.left) + dart.notNull(ws.width));
        }
        return true;
      }, T$.InlineSpanAndTextStyleNAndAnnotationBuilderNTobool()), defaultstyle, null);
      if (spanCount > 0) {
        lines[$add](new text$1._Line.new(this, spanStart, spanCount, bottom, offsetX, _textDirection, false));
        offsetY = dart.notNull(offsetY) + (bottom - top);
      }
      if (!(!overflow || constraintWidth[$isFinite])) dart.assertFailed(null, I[100], 908, 12, "!overflow || constraintWidth.isFinite");
      let width = overflow ? constraintWidth : constraints.minWidth;
      if (dart.test(lines[$isNotEmpty])) {
        if (!overflow) {
          for (let line of lines) {
            width = math.max(core.double, width, line.wordsWidth);
          }
        }
        for (let line of lines) {
          line.realign(width);
        }
      }
      this.box = new rect$.PdfRect.new(0.0, 0.0, constraints.constrainWidth(width), constraints.constrainHeight(offsetY));
      t71$3 = this[_context$4];
      (() => {
        t71$3.endOffset = dart.notNull(offsetY) - dart.notNull(this[_context$4].startOffset);
        t71$3.spanEnd = this[_spans][$length];
        return t71$3;
      })();
      if (_overflow != text$1.TextOverflow.span) {
        if (_overflow != text$1.TextOverflow.visible) {
          this[_mustClip] = true;
        }
        return;
      }
      if (dart.notNull(offsetY) > dart.notNull(constraintHeight) + 0.0001) {
        t71$4 = this[_context$4];
        t71$4.spanEnd = dart.notNull(t71$4.spanEnd) - dart.notNull(lines[$last].countSpan);
        t71$5 = this[_context$4];
        t71$5.endOffset = dart.notNull(t71$5.endOffset) - dart.notNull(lines[$last].height);
      }
      for (let index = 0; index < dart.notNull(this[_decorations][$length]); index = index + 1) {
        let decoration = this[_decorations][$_get](index);
        if (dart.notNull(decoration.startSpan) >= dart.notNull(this[_context$4].spanEnd) || dart.notNull(decoration.endSpan) < dart.notNull(this[_context$4].spanStart)) {
          this[_decorations][$removeAt](index);
          index = index - 1;
        }
      }
    }
    debugPaint(context) {
      let t71;
      if (context == null) dart.nullFailed(I[100], 955, 27, "context");
      t71 = context.canvas;
      (() => {
        t71.setStrokeColor(colors.PdfColors.blue);
        t71.setLineWidth(1.0);
        t71.drawRect(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y, dart.nullCheck(this.box).width === 1 / 0 ? 1000.0 : dart.nullCheck(this.box).width, dart.nullCheck(this.box).height === 1 / 0 ? 1000.0 : dart.nullCheck(this.box).height);
        t71.strokePath();
        return t71;
      })();
    }
    paint(context) {
      let t71;
      if (context == null) dart.nullFailed(I[100], 969, 22, "context");
      super.paint(context);
      let currentStyle = null;
      let currentColor = null;
      if (dart.test(this[_mustClip])) {
        t71 = context.canvas;
        (() => {
          t71.saveContext();
          t71.drawBox(dart.nullCheck(this.box));
          t71.clipPath();
          return t71;
        })();
      }
      for (let decoration of this[_decorations]) {
        if (!dart.test(dart.fn(() => {
          if (dart.test(document$0.Document.debug) && dart.test(text$1.RichText.debug)) {
            decoration.debugPaint(context, this.textScaleFactor, dart.nullCheck(this.box), this[_spans]);
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[100], 982, 14, "() {\n        if (Document.debug && RichText.debug) {\n          decoration.debugPaint(context, textScaleFactor, box!, _spans);\n        }\n        return true;\n      }()");
        decoration.backgroundPaint(context, this.textScaleFactor, this.box, this[_spans]);
      }
      for (let span of this[_spans][$sublist](this[_context$4].spanStart, this[_context$4].spanEnd)) {
        if (!dart.test(dart.fn(() => {
          if (dart.test(document$0.Document.debug) && dart.test(text$1.RichText.debug)) {
            span.debugPaint(context, this.textScaleFactor, this.box);
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[100], 998, 14, "() {\n        if (Document.debug && RichText.debug) {\n          span.debugPaint(context, textScaleFactor, box);\n        }\n        return true;\n      }()");
        if (!dart.equals(span.style, currentStyle)) {
          currentStyle = span.style;
          if (!dart.equals(currentStyle.color, currentColor)) {
            currentColor = currentStyle.color;
            context.canvas.setFillColor(currentColor);
          }
        }
        span.paint(context, dart.nullCheck(currentStyle), this.textScaleFactor, new point$.PdfPoint.new(dart.nullCheck(this.box).left, dart.nullCheck(this.box).top));
      }
      for (let decoration of this[_decorations]) {
        decoration.foregroundPaint(context, this.textScaleFactor, this.box, this[_spans]);
      }
      if (dart.test(this[_mustClip])) {
        context.canvas.restoreContext();
      }
    }
    [_splitWord](word, font, style, maxWidth) {
      if (word == null) dart.nullFailed(I[100], 1035, 25, "word");
      if (font == null) dart.nullFailed(I[100], 1035, 39, "font");
      if (style == null) dart.nullFailed(I[100], 1035, 55, "style");
      if (maxWidth == null) dart.nullFailed(I[100], 1035, 69, "maxWidth");
      let low = 0;
      let high = word.length;
      let pos = ((low + high) / 2)[$truncate]();
      while (low + 1 < high) {
        let metrics = font.stringMetrics(word[$substring](0, pos), {letterSpacing: dart.nullCheck(style.letterSpacing) / (dart.nullCheck(style.fontSize) * dart.notNull(this.textScaleFactor))})['*'](dart.nullCheck(style.fontSize) * dart.notNull(this.textScaleFactor));
        if (dart.notNull(metrics.width) > dart.notNull(maxWidth)) {
          high = pos;
        } else {
          low = pos;
        }
        pos = ((low + high) / 2)[$truncate]();
      }
      return math.max(core.int, 1, pos);
    }
    get canSpan() {
      return this.overflow == text$1.TextOverflow.span;
    }
    get hasMoreWidgets() {
      return this.overflow == text$1.TextOverflow.span;
    }
    restoreContext(context) {
      text$1._RichTextContext.as(context);
      if (context == null) dart.nullFailed(I[100], 1065, 40, "context");
      this[_context$4].spanStart = context.spanEnd;
      this[_context$4].startOffset = -dart.notNull(context.endOffset);
    }
    saveContext() {
      return this[_context$4];
    }
  };
  (text$1.RichText.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    if (text == null) dart.nullFailed(I[100], 589, 19, "text");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let tightBounds = opts && 'tightBounds' in opts ? opts.tightBounds : false;
    if (tightBounds == null) dart.nullFailed(I[100], 593, 10, "tightBounds");
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    if (textScaleFactor == null) dart.nullFailed(I[100], 594, 10, "textScaleFactor");
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let overflow = opts && 'overflow' in opts ? opts.overflow : C[218] || CT.C218;
    this[__RichText__textAlign] = null;
    this[__RichText__textAlign_isSet] = false;
    this[_spans] = T$.JSArrayOf_Span().of([]);
    this[_decorations] = T$.JSArrayOf_TextDecoration().of([]);
    this[_context$4] = new text$1._RichTextContext.new();
    this[_mustClip] = false;
    this[text$7] = text;
    this[textAlign$4] = textAlign;
    this[textDirection$3] = textDirection;
    this[softWrap$2] = softWrap;
    this[tightBounds$] = tightBounds;
    this[textScaleFactor$0] = textScaleFactor;
    this[maxLines$2] = maxLines;
    this[overflow$2] = overflow;
    text$1.RichText.__proto__.new.call(this);
    ;
  }).prototype = text$1.RichText.prototype;
  dart.addTypeTests(text$1.RichText);
  dart.addTypeCaches(text$1.RichText);
  dart.setMethodSignature(text$1.RichText, () => ({
    __proto__: dart.getMethods(text$1.RichText.__proto__),
    [_appendDecoration]: dart.fnType(dart.void, [core.bool, text$1._TextDecoration]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    [_splitWord]: dart.fnType(core.int, [core.String, font.PdfFont, text_style.TextStyle, core.double]),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(text$1.RichText, () => ({
    __proto__: dart.getGetters(text$1.RichText.__proto__),
    [_textAlign]: text$1.TextAlign,
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setSetterSignature(text$1.RichText, () => ({
    __proto__: dart.getSetters(text$1.RichText.__proto__),
    [_textAlign]: text$1.TextAlign
  }));
  dart.setLibraryUri(text$1.RichText, I[101]);
  dart.setFieldSignature(text$1.RichText, () => ({
    __proto__: dart.getFields(text$1.RichText.__proto__),
    text: dart.finalFieldType(text$1.InlineSpan),
    textAlign: dart.finalFieldType(dart.nullable(text$1.TextAlign)),
    [__RichText__textAlign]: dart.fieldType(dart.nullable(text$1.TextAlign)),
    [__RichText__textAlign_isSet]: dart.fieldType(core.bool),
    textDirection: dart.finalFieldType(dart.nullable(text$1.TextDirection)),
    textScaleFactor: dart.finalFieldType(core.double),
    softWrap: dart.finalFieldType(dart.nullable(core.bool)),
    tightBounds: dart.finalFieldType(core.bool),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    [_spans]: dart.finalFieldType(core.List$(text$1._Span)),
    [_decorations]: dart.finalFieldType(core.List$(text$1._TextDecoration)),
    [_context$4]: dart.finalFieldType(text$1._RichTextContext),
    overflow: dart.finalFieldType(dart.nullable(text$1.TextOverflow)),
    [_mustClip]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(text$1.RichText, {
    /*text$1.RichText.debug*/get debug() {
      return false;
    },
    set debug(_) {}
  }, false);
  text$1.Text = class Text extends text$1.RichText {};
  (text$1.Text.new = function(text, opts) {
    if (text == null) dart.nullFailed(I[100], 1078, 12, "text");
    let style = opts && 'style' in opts ? opts.style : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let tightBounds = opts && 'tightBounds' in opts ? opts.tightBounds : false;
    if (tightBounds == null) dart.nullFailed(I[100], 1083, 10, "tightBounds");
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    if (textScaleFactor == null) dart.nullFailed(I[100], 1084, 12, "textScaleFactor");
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    text$1.Text.__proto__.new.call(this, {text: new text$1.TextSpan.new({text: text, style: style}), textAlign: textAlign, softWrap: softWrap, tightBounds: tightBounds, textDirection: textDirection, textScaleFactor: textScaleFactor, maxLines: maxLines, overflow: overflow});
    ;
  }).prototype = text$1.Text.prototype;
  dart.addTypeTests(text$1.Text);
  dart.addTypeCaches(text$1.Text);
  dart.setLibraryUri(text$1.Text, I[101]);
  var pageFormat$ = dart.privateName(page_theme, "PageTheme.pageFormat");
  var orientation$0 = dart.privateName(page_theme, "PageTheme.orientation");
  var _margin = dart.privateName(page_theme, "PageTheme._margin");
  var buildBackground$ = dart.privateName(page_theme, "PageTheme.buildBackground");
  var buildForeground$ = dart.privateName(page_theme, "PageTheme.buildForeground");
  var theme$0 = dart.privateName(page_theme, "PageTheme.theme");
  var clip$1 = dart.privateName(page_theme, "PageTheme.clip");
  var textDirection$4 = dart.privateName(page_theme, "PageTheme.textDirection");
  var _margin$ = dart.privateName(page_theme, "_margin");
  page_theme.PageTheme = class PageTheme extends core.Object {
    get pageFormat() {
      return this[pageFormat$];
    }
    set pageFormat(value) {
      super.pageFormat = value;
    }
    get orientation() {
      return this[orientation$0];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get [_margin$]() {
      return this[_margin];
    }
    set [_margin$](value) {
      super[_margin$] = value;
    }
    get buildBackground() {
      return this[buildBackground$];
    }
    set buildBackground(value) {
      super.buildBackground = value;
    }
    get buildForeground() {
      return this[buildForeground$];
    }
    set buildForeground(value) {
      super.buildForeground = value;
    }
    get theme() {
      return this[theme$0];
    }
    set theme(value) {
      super.theme = value;
    }
    get clip() {
      return this[clip$1];
    }
    set clip(value) {
      super.clip = value;
    }
    get textDirection() {
      return this[textDirection$4];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get mustRotate() {
      return this.orientation == page$.PageOrientation.landscape && dart.notNull(this.pageFormat.height) > dart.notNull(this.pageFormat.width) || this.orientation == page$.PageOrientation.portrait && dart.notNull(this.pageFormat.width) > dart.notNull(this.pageFormat.height);
    }
    get margin() {
      if (this[_margin$] != null) {
        if (dart.test(this.mustRotate)) {
          return new geometry.EdgeInsets.fromLTRB(dart.nullCheck(this[_margin$]).bottom, dart.nullCheck(this[_margin$]).left, dart.nullCheck(this[_margin$]).top, dart.nullCheck(this[_margin$]).right);
        } else {
          return this[_margin$];
        }
      }
      if (dart.test(this.mustRotate)) {
        return new geometry.EdgeInsets.fromLTRB(this.pageFormat.marginBottom, this.pageFormat.marginLeft, this.pageFormat.marginTop, this.pageFormat.marginRight);
      } else {
        return new geometry.EdgeInsets.fromLTRB(this.pageFormat.marginLeft, this.pageFormat.marginTop, this.pageFormat.marginRight, this.pageFormat.marginBottom);
      }
    }
    copyWith(opts) {
      let t71, t71$, t71$0, t71$1, t71$2, t71$3, t71$4, t71$5;
      let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
      let buildBackground = opts && 'buildBackground' in opts ? opts.buildBackground : null;
      let buildForeground = opts && 'buildForeground' in opts ? opts.buildForeground : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let clip = opts && 'clip' in opts ? opts.clip : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return new page_theme.PageTheme.new({pageFormat: (t71 = pageFormat, t71 == null ? this.pageFormat : t71), buildBackground: (t71$ = buildBackground, t71$ == null ? this.buildBackground : t71$), buildForeground: (t71$0 = buildForeground, t71$0 == null ? this.buildForeground : t71$0), theme: (t71$1 = theme, t71$1 == null ? this.theme : t71$1), orientation: (t71$2 = orientation, t71$2 == null ? this.orientation : t71$2), margin: (t71$3 = margin, t71$3 == null ? this.margin : t71$3), clip: (t71$4 = clip, t71$4 == null ? this.clip : t71$4), textDirection: (t71$5 = textDirection, t71$5 == null ? this.textDirection : t71$5)});
    }
  };
  (page_theme.PageTheme.new = function(opts) {
    let t71, t71$;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let buildBackground = opts && 'buildBackground' in opts ? opts.buildBackground : null;
    let buildForeground = opts && 'buildForeground' in opts ? opts.buildForeground : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let clip = opts && 'clip' in opts ? opts.clip : false;
    if (clip == null) dart.nullFailed(I[102], 34, 10, "clip");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[buildBackground$] = buildBackground;
    this[buildForeground$] = buildForeground;
    this[theme$0] = theme;
    this[clip$1] = clip;
    this[textDirection$4] = textDirection;
    this[pageFormat$] = (t71 = pageFormat, t71 == null ? page_format.PdfPageFormat.standard : t71);
    this[orientation$0] = (t71$ = orientation, t71$ == null ? page$.PageOrientation.natural : t71$);
    this[_margin] = margin;
    ;
  }).prototype = page_theme.PageTheme.prototype;
  dart.addTypeTests(page_theme.PageTheme);
  dart.addTypeCaches(page_theme.PageTheme);
  dart.setMethodSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getMethods(page_theme.PageTheme.__proto__),
    copyWith: dart.fnType(page_theme.PageTheme, [], {buildBackground: dart.nullable(dart.fnType(widget$.Widget, [widget$.Context])), buildForeground: dart.nullable(dart.fnType(widget$.Widget, [widget$.Context])), clip: dart.nullable(core.bool), margin: dart.nullable(geometry.EdgeInsets), orientation: dart.nullable(page$.PageOrientation), pageFormat: dart.nullable(page_format.PdfPageFormat), textDirection: dart.nullable(text$1.TextDirection), theme: dart.nullable(theme$.ThemeData)}, {})
  }));
  dart.setGetterSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getGetters(page_theme.PageTheme.__proto__),
    mustRotate: core.bool,
    margin: dart.nullable(geometry.EdgeInsets)
  }));
  dart.setLibraryUri(page_theme.PageTheme, I[103]);
  dart.setFieldSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getFields(page_theme.PageTheme.__proto__),
    pageFormat: dart.finalFieldType(page_format.PdfPageFormat),
    orientation: dart.finalFieldType(page$.PageOrientation),
    [_margin$]: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    buildBackground: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    buildForeground: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    theme: dart.finalFieldType(dart.nullable(theme$.ThemeData)),
    clip: dart.finalFieldType(core.bool),
    textDirection: dart.finalFieldType(dart.nullable(text$1.TextDirection))
  }));
  var _name$16 = dart.privateName(page$, "_name");
  page$.PageOrientation = class PageOrientation extends core.Object {
    toString() {
      return this[_name$16];
    }
  };
  (page$.PageOrientation.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[98], 34, 6, "index");
    if (_name == null) dart.nullFailed(I[98], 34, 6, "_name");
    this.index = index;
    this[_name$16] = _name;
    ;
  }).prototype = page$.PageOrientation.prototype;
  dart.addTypeTests(page$.PageOrientation);
  dart.addTypeCaches(page$.PageOrientation);
  dart.setLibraryUri(page$.PageOrientation, I[99]);
  dart.setFieldSignature(page$.PageOrientation, () => ({
    __proto__: dart.getFields(page$.PageOrientation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$16]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(page$.PageOrientation, ['toString']);
  page$.PageOrientation.natural = C[221] || CT.C221;
  page$.PageOrientation.landscape = C[222] || CT.C222;
  page$.PageOrientation.portrait = C[223] || CT.C223;
  page$.PageOrientation.values = C[224] || CT.C224;
  var document$2 = dart.privateName(document$0, "Document.document");
  var theme$1 = dart.privateName(document$0, "Document.theme");
  var _name$17 = dart.privateName(document, "_name");
  var _pages$ = dart.privateName(document$0, "_pages");
  var _paint = dart.privateName(document$0, "_paint");
  document$0.Document = class Document extends core.Object {
    get document() {
      return this[document$2];
    }
    set document(value) {
      super.document = value;
    }
    get theme() {
      return this[theme$1];
    }
    set theme(value) {
      super.theme = value;
    }
    addPage(page, opts) {
      if (page == null) dart.nullFailed(I[104], 112, 21, "page");
      let index = opts && 'index' in opts ? opts.index : null;
      page.generate(this, {index: index});
      this[_pages$][$add](page);
    }
    editPage(index, page) {
      if (index == null) dart.nullFailed(I[104], 117, 21, "index");
      if (page == null) dart.nullFailed(I[104], 117, 33, "page");
      page.generate(this, {index: index, insert: false});
      this[_pages$][$add](page);
    }
    save() {
      return async.async(typed_data.Uint8List, (function* save() {
        if (!dart.test(this[_paint])) {
          for (let page of this[_pages$]) {
            page.postProcess(this);
          }
          this[_paint] = true;
        }
        return yield this.document.save();
      }).bind(this));
    }
  };
  (document$0.Document.new = function(opts) {
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[225] || CT.C225;
    if (pageMode == null) dart.nullFailed(I[104], 27, 17, "pageMode");
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    if (compress == null) dart.nullFailed(I[104], 29, 10, "compress");
    let version = opts && 'version' in opts ? opts.version : C[226] || CT.C226;
    if (version == null) dart.nullFailed(I[104], 30, 16, "version");
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    let metadata = opts && 'metadata' in opts ? opts.metadata : null;
    this[_pages$] = T$.JSArrayOfPage().of([]);
    this[_paint] = false;
    this[theme$1] = theme;
    this[document$2] = new document.PdfDocument.new({pageMode: pageMode, deflate: deflate, compress: compress, version: version});
    if (title != null || author != null || creator != null || subject != null || keywords != null || producer != null) {
      new info.PdfInfo.new(this.document, {title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer});
    }
    if (metadata != null) {
      new metadata$.PdfMetadata.new(this.document, metadata);
    }
  }).prototype = document$0.Document.prototype;
  (document$0.Document.load = function(parser, opts) {
    if (parser == null) dart.nullFailed(I[104], 67, 27, "parser");
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[225] || CT.C225;
    if (pageMode == null) dart.nullFailed(I[104], 68, 17, "pageMode");
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    if (compress == null) dart.nullFailed(I[104], 70, 10, "compress");
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    this[_pages$] = T$.JSArrayOfPage().of([]);
    this[_paint] = false;
    this[theme$1] = theme;
    this[document$2] = new document.PdfDocument.load(parser, {pageMode: pageMode, deflate: deflate, compress: compress});
    if (title != null || author != null || creator != null || subject != null || keywords != null || producer != null) {
      new info.PdfInfo.new(this.document, {title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer});
    }
  }).prototype = document$0.Document.prototype;
  dart.addTypeTests(document$0.Document);
  dart.addTypeCaches(document$0.Document);
  dart.setMethodSignature(document$0.Document, () => ({
    __proto__: dart.getMethods(document$0.Document.__proto__),
    addPage: dart.fnType(dart.void, [page$.Page], {index: dart.nullable(core.int)}, {}),
    editPage: dart.fnType(dart.void, [core.int, page$.Page]),
    save: dart.fnType(async.Future$(typed_data.Uint8List), [])
  }));
  dart.setLibraryUri(document$0.Document, I[105]);
  dart.setFieldSignature(document$0.Document, () => ({
    __proto__: dart.getFields(document$0.Document.__proto__),
    document: dart.finalFieldType(document.PdfDocument),
    theme: dart.finalFieldType(dart.nullable(theme$.ThemeData)),
    [_pages$]: dart.finalFieldType(core.List$(page$.Page)),
    [_paint]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(document$0.Document, {
    /*document$0.Document.debug*/get debug() {
      return false;
    },
    set debug(_) {}
  }, false);
  var _page = dart.privateName(widget$, "Context._page");
  var _canvas = dart.privateName(widget$, "Context._canvas");
  var _inherited = dart.privateName(widget$, "Context._inherited");
  var document$3 = dart.privateName(widget$, "Context.document");
  var _page$ = dart.privateName(widget$, "_page");
  var _canvas$0 = dart.privateName(widget$, "_canvas");
  var _inherited$ = dart.privateName(widget$, "_inherited");
  widget$.Context = class Context extends core.Object {
    get [_page$]() {
      return this[_page];
    }
    set [_page$](value) {
      super[_page$] = value;
    }
    get [_canvas$0]() {
      return this[_canvas];
    }
    set [_canvas$0](value) {
      super[_canvas$0] = value;
    }
    get [_inherited$]() {
      return this[_inherited];
    }
    set [_inherited$](value) {
      super[_inherited$] = value;
    }
    get document() {
      return this[document$3];
    }
    set document(value) {
      super.document = value;
    }
    static new(opts) {
      let document = opts && 'document' in opts ? opts.document : null;
      if (document == null) dart.nullFailed(I[5], 33, 26, "document");
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      return new widget$.Context.__({document: document, page: page, canvas: canvas, inherited: new (T$.LinkedMapOfType$Inherited()).new()});
    }
    get page() {
      return dart.nullCheck(this[_page$]);
    }
    get canvas() {
      return dart.nullCheck(this[_canvas$0]);
    }
    get pageNumber() {
      return dart.notNull(this.document.pdfPageList.pages[$indexOf](this.page)) + 1;
    }
    get pagesCount() {
      return this.document.pdfPageList.pages[$length];
    }
    copyWith(opts) {
      let t71, t71$, t71$0;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let ctm = opts && 'ctm' in opts ? opts.ctm : null;
      let inherited = opts && 'inherited' in opts ? opts.inherited : null;
      return new widget$.Context.__({document: this.document, page: (t71 = page, t71 == null ? this[_page$] : t71), canvas: (t71$ = canvas, t71$ == null ? this[_canvas$0] : t71$), inherited: (t71$0 = inherited, t71$0 == null ? this[_inherited$] : t71$0)});
    }
    dependsOn(T) {
      return dart.nullable(T).as(this[_inherited$][$_get](dart.wrapType(T)));
    }
    inheritFrom(object) {
      if (object == null) dart.nullFailed(I[5], 88, 33, "object");
      return this.inheritFromAll(T$.JSArrayOfInherited().of([object]));
    }
    inheritFromAll(objects) {
      if (objects == null) dart.nullFailed(I[5], 92, 46, "objects");
      let inherited = T$.HashMapOfType$Inherited().of(this[_inherited$]);
      for (let object of objects) {
        inherited[$_set](dart.runtimeType(object), object);
      }
      return this.copyWith({inherited: inherited});
    }
    localToGlobal(box) {
      if (box == null) dart.nullFailed(I[5], 100, 33, "box");
      let mat = this.canvas.getTransform();
      let lt = mat.transform3(vector_math_64.Vector3.new(box.left, box.bottom, 0.0));
      let lb = mat.transform3(vector_math_64.Vector3.new(box.left, box.top, 0.0));
      let rt = mat.transform3(vector_math_64.Vector3.new(box.right, box.bottom, 0.0));
      let rb = mat.transform3(vector_math_64.Vector3.new(box.right, box.top, 0.0));
      let x = T$.JSArrayOfdouble().of([lt.x, lb.x, rt.x, rb.x]);
      let y = T$.JSArrayOfdouble().of([lt.y, lb.y, rt.y, rb.y]);
      return rect$.PdfRect.fromLTRB(x[$reduce](dart.gbind(C[227] || CT.C227, core.double)), y[$reduce](dart.gbind(C[227] || CT.C227, core.double)), x[$reduce](dart.gbind(C[228] || CT.C228, core.double)), y[$reduce](dart.gbind(C[228] || CT.C228, core.double)));
    }
    localToGlobalPoint(point) {
      if (point == null) dart.nullFailed(I[5], 116, 40, "point");
      let mat = this.canvas.getTransform();
      let xy = mat.transform3(vector_math_64.Vector3.new(point.x, point.y, 0.0));
      return new point$.PdfPoint.new(xy.x, xy.y);
    }
  };
  (widget$.Context.__ = function(opts) {
    let document = opts && 'document' in opts ? opts.document : null;
    if (document == null) dart.nullFailed(I[5], 45, 19, "document");
    let page = opts && 'page' in opts ? opts.page : null;
    let canvas = opts && 'canvas' in opts ? opts.canvas : null;
    let inherited = opts && 'inherited' in opts ? opts.inherited : null;
    if (inherited == null) dart.nullFailed(I[5], 48, 39, "inherited");
    this[document$3] = document;
    this[_page] = page;
    this[_canvas] = canvas;
    this[_inherited] = inherited;
    ;
  }).prototype = widget$.Context.prototype;
  dart.addTypeTests(widget$.Context);
  dart.addTypeCaches(widget$.Context);
  dart.setMethodSignature(widget$.Context, () => ({
    __proto__: dart.getMethods(widget$.Context.__proto__),
    copyWith: dart.fnType(widget$.Context, [], {canvas: dart.nullable(graphics.PdfGraphics), ctm: dart.nullable(vector_math_64.Matrix4), inherited: dart.nullable(collection.HashMap$(core.Type, widget$.Inherited)), page: dart.nullable(page.PdfPage)}, {}),
    dependsOn: dart.gFnType(T => [dart.nullable(T), []], T => [dart.nullable(core.Object)]),
    inheritFrom: dart.fnType(widget$.Context, [widget$.Inherited]),
    inheritFromAll: dart.fnType(widget$.Context, [core.Iterable$(widget$.Inherited)]),
    localToGlobal: dart.fnType(rect$.PdfRect, [rect$.PdfRect]),
    localToGlobalPoint: dart.fnType(point$.PdfPoint, [point$.PdfPoint])
  }));
  dart.setGetterSignature(widget$.Context, () => ({
    __proto__: dart.getGetters(widget$.Context.__proto__),
    page: page.PdfPage,
    canvas: graphics.PdfGraphics,
    pageNumber: core.int,
    pagesCount: core.int
  }));
  dart.setLibraryUri(widget$.Context, I[6]);
  dart.setFieldSignature(widget$.Context, () => ({
    __proto__: dart.getFields(widget$.Context.__proto__),
    [_page$]: dart.finalFieldType(dart.nullable(page.PdfPage)),
    [_canvas$0]: dart.finalFieldType(dart.nullable(graphics.PdfGraphics)),
    [_inherited$]: dart.finalFieldType(collection.HashMap$(core.Type, widget$.Inherited)),
    document: dart.finalFieldType(document.PdfDocument)
  }));
  var build$ = dart.privateName(widget$, "InheritedWidget.build");
  var inherited$ = dart.privateName(widget$, "InheritedWidget.inherited");
  var _context$5 = dart.privateName(widget$, "_context");
  widget$.InheritedWidget = class InheritedWidget extends widget$.SingleChildWidget {
    get build() {
      return this[build$];
    }
    set build(value) {
      super.build = value;
    }
    get inherited() {
      return this[inherited$];
    }
    set inherited(value) {
      super.inherited = value;
    }
    get child() {
      return this[_child];
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[5], 358, 23, "context");
      if (constraints == null) dart.nullFailed(I[5], 358, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[5], 359, 13, "parentUsesSize");
      this[_context$5] = this.inherited != null ? context.inheritFrom(dart.nullCheck(this.inherited)) : context;
      this[_child] = dart.nullCheck(this.build)(dart.nullCheck(this[_context$5]));
      super.layout(dart.nullCheck(this[_context$5]), constraints);
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[5], 366, 22, "context");
      if (!(this[_context$5] != null)) dart.assertFailed(null, I[5], 367, 12, "_context != null");
      super.paint(dart.nullCheck(this[_context$5]));
      this.paintChild(dart.nullCheck(this[_context$5]));
    }
  };
  (widget$.InheritedWidget.new = function(opts) {
    let build = opts && 'build' in opts ? opts.build : null;
    let inherited = opts && 'inherited' in opts ? opts.inherited : null;
    this[_context$5] = null;
    this[_child] = null;
    this[build$] = build;
    this[inherited$] = inherited;
    widget$.InheritedWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.InheritedWidget.prototype;
  dart.addTypeTests(widget$.InheritedWidget);
  dart.addTypeCaches(widget$.InheritedWidget);
  dart.setGetterSignature(widget$.InheritedWidget, () => ({
    __proto__: dart.getGetters(widget$.InheritedWidget.__proto__),
    child: dart.nullable(widget$.Widget)
  }));
  dart.setLibraryUri(widget$.InheritedWidget, I[6]);
  dart.setFieldSignature(widget$.InheritedWidget, () => ({
    __proto__: dart.getFields(widget$.InheritedWidget.__proto__),
    build: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    inherited: dart.finalFieldType(dart.nullable(widget$.Inherited)),
    [_context$5]: dart.fieldType(dart.nullable(widget$.Context)),
    [_child]: dart.fieldType(dart.nullable(widget$.Widget))
  }));
  const x$3 = Radius_x;
  const y$3 = Radius_y;
  border_radius.Radius = class Radius extends core.Object {
    get x() {
      return this[x$3];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$3];
    }
    set y(value) {
      super.y = value;
    }
  };
  (border_radius.Radius.circular = function(radius) {
    if (radius == null) dart.nullFailed(I[106], 24, 32, "radius");
    border_radius.Radius.elliptical.call(this, radius, radius);
  }).prototype = border_radius.Radius.prototype;
  (border_radius.Radius.elliptical = function(x, y) {
    if (x == null) dart.nullFailed(I[106], 27, 32, "x");
    if (y == null) dart.nullFailed(I[106], 27, 40, "y");
    this[x$3] = x;
    this[y$3] = y;
    ;
  }).prototype = border_radius.Radius.prototype;
  dart.addTypeTests(border_radius.Radius);
  dart.addTypeCaches(border_radius.Radius);
  dart.setLibraryUri(border_radius.Radius, I[107]);
  dart.setFieldSignature(border_radius.Radius, () => ({
    __proto__: dart.getFields(border_radius.Radius.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineLazy(border_radius.Radius, {
    /*border_radius.Radius.zero*/get zero() {
      return C[229] || CT.C229;
    }
  }, false);
  const topLeft$ = BorderRadius_topLeft;
  const topRight$ = BorderRadius_topRight;
  const bottomLeft$ = BorderRadius_bottomLeft;
  const bottomRight$ = BorderRadius_bottomRight;
  border_radius.BorderRadius = class BorderRadius extends core.Object {
    get topLeft() {
      return this[topLeft$];
    }
    set topLeft(value) {
      super.topLeft = value;
    }
    get topRight() {
      return this[topRight$];
    }
    set topRight(value) {
      super.topRight = value;
    }
    get bottomLeft() {
      return this[bottomLeft$];
    }
    set bottomLeft(value) {
      super.bottomLeft = value;
    }
    get bottomRight() {
      return this[bottomRight$];
    }
    set bottomRight(value) {
      super.bottomRight = value;
    }
    paint(context, box) {
      let t71;
      if (context == null) dart.nullFailed(I[106], 104, 22, "context");
      if (box == null) dart.nullFailed(I[106], 104, 39, "box");
      t71 = context.canvas;
      (() => {
        t71.moveTo(box.x, dart.notNull(box.y) + dart.notNull(this.bottomLeft.y));
        t71.curveTo(box.x, dart.notNull(box.y) - 0.551784 * dart.notNull(this.bottomLeft.y) + dart.notNull(this.bottomLeft.y), dart.notNull(box.x) - 0.551784 * dart.notNull(this.bottomLeft.x) + dart.notNull(this.bottomLeft.x), box.y, dart.notNull(box.x) + dart.notNull(this.bottomLeft.x), box.y);
        t71.lineTo(dart.notNull(box.x) + dart.notNull(box.width) - dart.notNull(this.bottomRight.x), box.y);
        t71.curveTo(dart.notNull(box.x) + 0.551784 * dart.notNull(this.bottomRight.x) + dart.notNull(box.width) - dart.notNull(this.bottomRight.x), box.y, dart.notNull(box.x) + dart.notNull(box.width), dart.notNull(box.y) - 0.551784 * dart.notNull(this.bottomRight.y) + dart.notNull(this.bottomRight.y), dart.notNull(box.x) + dart.notNull(box.width), dart.notNull(box.y) + dart.notNull(this.bottomRight.y));
        t71.lineTo(dart.notNull(box.x) + dart.notNull(box.width), dart.notNull(box.y) + dart.notNull(box.height) - dart.notNull(this.topRight.y));
        t71.curveTo(dart.notNull(box.x) + dart.notNull(box.width), dart.notNull(box.y) + 0.551784 * dart.notNull(this.topRight.y) + dart.notNull(box.height) - dart.notNull(this.topRight.y), dart.notNull(box.x) + 0.551784 * dart.notNull(this.topRight.x) + dart.notNull(box.width) - dart.notNull(this.topRight.x), dart.notNull(box.y) + dart.notNull(box.height), dart.notNull(box.x) + dart.notNull(box.width) - dart.notNull(this.topRight.x), dart.notNull(box.y) + dart.notNull(box.height));
        t71.lineTo(dart.notNull(box.x) + dart.notNull(this.topLeft.x), dart.notNull(box.y) + dart.notNull(box.height));
        t71.curveTo(dart.notNull(box.x) - 0.551784 * dart.notNull(this.topLeft.x) + dart.notNull(this.topLeft.x), dart.notNull(box.y) + dart.notNull(box.height), box.x, dart.notNull(box.y) + 0.551784 * dart.notNull(this.topLeft.y) + dart.notNull(box.height) - dart.notNull(this.topLeft.y), box.x, dart.notNull(box.y) + dart.notNull(box.height) - dart.notNull(this.topLeft.y));
        t71.lineTo(box.x, dart.notNull(box.y) + dart.notNull(this.bottomLeft.y));
        return t71;
      })();
    }
  };
  (border_radius.BorderRadius.all = function(radius) {
    if (radius == null) dart.nullFailed(I[106], 42, 33, "radius");
    border_radius.BorderRadius.only.call(this, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.circular = function(radius) {
    if (radius == null) dart.nullFailed(I[106], 51, 32, "radius");
    border_radius.BorderRadius.all.call(this, new border_radius.Radius.circular(radius));
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C[229] || CT.C229;
    if (top == null) dart.nullFailed(I[106], 59, 12, "top");
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[229] || CT.C229;
    if (bottom == null) dart.nullFailed(I[106], 60, 12, "bottom");
    border_radius.BorderRadius.only.call(this, {topLeft: top, topRight: top, bottomLeft: bottom, bottomRight: bottom});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.horizontal = function(opts) {
    let left = opts && 'left' in opts ? opts.left : C[229] || CT.C229;
    if (left == null) dart.nullFailed(I[106], 71, 12, "left");
    let right = opts && 'right' in opts ? opts.right : C[229] || CT.C229;
    if (right == null) dart.nullFailed(I[106], 72, 12, "right");
    border_radius.BorderRadius.only.call(this, {topLeft: left, topRight: right, bottomLeft: left, bottomRight: right});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.only = function(opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C[229] || CT.C229;
    if (topLeft == null) dart.nullFailed(I[106], 83, 10, "topLeft");
    let topRight = opts && 'topRight' in opts ? opts.topRight : C[229] || CT.C229;
    if (topRight == null) dart.nullFailed(I[106], 84, 10, "topRight");
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C[229] || CT.C229;
    if (bottomLeft == null) dart.nullFailed(I[106], 85, 10, "bottomLeft");
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C[229] || CT.C229;
    if (bottomRight == null) dart.nullFailed(I[106], 86, 10, "bottomRight");
    this[topLeft$] = topLeft;
    this[topRight$] = topRight;
    this[bottomLeft$] = bottomLeft;
    this[bottomRight$] = bottomRight;
    ;
  }).prototype = border_radius.BorderRadius.prototype;
  dart.addTypeTests(border_radius.BorderRadius);
  dart.addTypeCaches(border_radius.BorderRadius);
  dart.setMethodSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getMethods(border_radius.BorderRadius.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(border_radius.BorderRadius, I[107]);
  dart.setFieldSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getFields(border_radius.BorderRadius.__proto__),
    topLeft: dart.finalFieldType(border_radius.Radius),
    topRight: dart.finalFieldType(border_radius.Radius),
    bottomLeft: dart.finalFieldType(border_radius.Radius),
    bottomRight: dart.finalFieldType(border_radius.Radius)
  }));
  dart.defineLazy(border_radius.BorderRadius, {
    /*border_radius.BorderRadius.zero*/get zero() {
      return C[230] || CT.C230;
    }
  }, false);
  const paint$ = BorderStyle_paint;
  const pattern$ = BorderStyle_pattern;
  const phase$ = BorderStyle_phase;
  box_border.BorderStyle = class BorderStyle extends core.Object {
    get paint() {
      return this[paint$];
    }
    set paint(value) {
      super.paint = value;
    }
    get pattern() {
      return this[pattern$];
    }
    set pattern(value) {
      super.pattern = value;
    }
    get phase() {
      return this[phase$];
    }
    set phase(value) {
      super.phase = value;
    }
    setStyle(context) {
      let t71;
      if (context == null) dart.nullFailed(I[2], 46, 25, "context");
      if (dart.test(this.paint) && this.pattern != null) {
        t71 = context.canvas;
        (() => {
          t71.saveContext();
          t71.setLineCap(graphics.PdfLineCap.butt);
          t71.setLineDashPattern(dart.nullCheck(this.pattern), this.phase);
          return t71;
        })();
      }
    }
    unsetStyle(context) {
      if (context == null) dart.nullFailed(I[2], 55, 27, "context");
      if (dart.test(this.paint) && this.pattern != null) {
        context.canvas.restoreContext();
      }
    }
  };
  (box_border.BorderStyle.new = function(opts) {
    let paint = opts && 'paint' in opts ? opts.paint : true;
    if (paint == null) dart.nullFailed(I[2], 26, 10, "paint");
    let pattern = opts && 'pattern' in opts ? opts.pattern : null;
    let phase = opts && 'phase' in opts ? opts.phase : 0;
    if (phase == null) dart.nullFailed(I[2], 28, 10, "phase");
    this[paint$] = paint;
    this[pattern$] = pattern;
    this[phase$] = phase;
    ;
  }).prototype = box_border.BorderStyle.prototype;
  dart.addTypeTests(box_border.BorderStyle);
  dart.addTypeCaches(box_border.BorderStyle);
  dart.setMethodSignature(box_border.BorderStyle, () => ({
    __proto__: dart.getMethods(box_border.BorderStyle.__proto__),
    setStyle: dart.fnType(dart.void, [widget$.Context]),
    unsetStyle: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setLibraryUri(box_border.BorderStyle, I[3]);
  dart.setFieldSignature(box_border.BorderStyle, () => ({
    __proto__: dart.getFields(box_border.BorderStyle.__proto__),
    paint: dart.finalFieldType(core.bool),
    pattern: dart.finalFieldType(dart.nullable(core.List$(core.num))),
    phase: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(box_border.BorderStyle, {
    /*box_border.BorderStyle.none*/get none() {
      return C[9] || CT.C9;
    },
    /*box_border.BorderStyle.solid*/get solid() {
      return C[11] || CT.C11;
    },
    /*box_border.BorderStyle.dashed*/get dashed() {
      return C[231] || CT.C231;
    },
    /*box_border.BorderStyle.dotted*/get dotted() {
      return C[233] || CT.C233;
    }
  }, false);
  const color$15 = BorderSide_color;
  const width$11 = BorderSide_width;
  const style$4 = BorderSide_style;
  box_border.BorderSide = class BorderSide extends core.Object {
    get color() {
      return this[color$15];
    }
    set color(value) {
      super.color = value;
    }
    get width() {
      return this[width$11];
    }
    set width(value) {
      super.width = value;
    }
    get style() {
      return this[style$4];
    }
    set style(value) {
      super.style = value;
    }
    copyWith(opts) {
      let t71, t71$, t71$0;
      let color = opts && 'color' in opts ? opts.color : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let style = opts && 'style' in opts ? opts.style : null;
      return new box_border.BorderSide.new({color: (t71 = color, t71 == null ? this.color : t71), width: (t71$ = width, t71$ == null ? this.width : t71$), style: (t71$0 = style, t71$0 == null ? this.style : t71$0)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      return box_border.BorderSide.is(other) && dart.equals(other.color, this.color) && other.width == this.width && dart.equals(other.style, this.style);
    }
    get hashCode() {
      return dart.notNull(dart.hashCode(this.color)) + dart.hashCode(this.width) + dart.notNull(dart.hashCode(this.style));
    }
  };
  (box_border.BorderSide.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
    if (color == null) dart.nullFailed(I[2], 123, 10, "color");
    let width = opts && 'width' in opts ? opts.width : 1;
    if (width == null) dart.nullFailed(I[2], 124, 10, "width");
    let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
    if (style == null) dart.nullFailed(I[2], 125, 10, "style");
    this[color$15] = color;
    this[width$11] = width;
    this[style$4] = style;
    ;
  }).prototype = box_border.BorderSide.prototype;
  dart.addTypeTests(box_border.BorderSide);
  dart.addTypeCaches(box_border.BorderSide);
  dart.setMethodSignature(box_border.BorderSide, () => ({
    __proto__: dart.getMethods(box_border.BorderSide.__proto__),
    copyWith: dart.fnType(box_border.BorderSide, [], {color: dart.nullable(color$.PdfColor), style: dart.nullable(box_border.BorderStyle), width: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(box_border.BorderSide, I[3]);
  dart.setFieldSignature(box_border.BorderSide, () => ({
    __proto__: dart.getFields(box_border.BorderSide.__proto__),
    color: dart.finalFieldType(color$.PdfColor),
    width: dart.finalFieldType(core.double),
    style: dart.finalFieldType(box_border.BorderStyle)
  }));
  dart.defineExtensionMethods(box_border.BorderSide, ['_equals']);
  dart.defineExtensionAccessors(box_border.BorderSide, ['hashCode']);
  dart.defineLazy(box_border.BorderSide, {
    /*box_border.BorderSide.none*/get none() {
      return C[8] || CT.C8;
    }
  }, false);
  basic.BoxFit = class BoxFit extends core.Object {
    toString() {
      return this[_name$5];
    }
  };
  (basic.BoxFit.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[108], 28, 6, "index");
    if (_name == null) dart.nullFailed(I[108], 28, 6, "_name");
    this.index = index;
    this[_name$5] = _name;
    ;
  }).prototype = basic.BoxFit.prototype;
  dart.addTypeTests(basic.BoxFit);
  dart.addTypeCaches(basic.BoxFit);
  dart.setLibraryUri(basic.BoxFit, I[109]);
  dart.setFieldSignature(basic.BoxFit, () => ({
    __proto__: dart.getFields(basic.BoxFit.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$5]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(basic.BoxFit, ['toString']);
  basic.BoxFit.fill = C[235] || CT.C235;
  basic.BoxFit.contain = C[74] || CT.C74;
  basic.BoxFit.cover = C[75] || CT.C75;
  basic.BoxFit.fitWidth = C[236] || CT.C236;
  basic.BoxFit.fitHeight = C[237] || CT.C237;
  basic.BoxFit.none = C[238] || CT.C238;
  basic.BoxFit.scaleDown = C[239] || CT.C239;
  basic.BoxFit.values = C[240] || CT.C240;
  var maxWidth$ = dart.privateName(basic, "LimitedBox.maxWidth");
  var maxHeight$ = dart.privateName(basic, "LimitedBox.maxHeight");
  var _limitConstraints = dart.privateName(basic, "_limitConstraints");
  basic.LimitedBox = class LimitedBox extends widget$.SingleChildWidget {
    get maxWidth() {
      return this[maxWidth$];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get maxHeight() {
      return this[maxHeight$];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    [_limitConstraints](constraints) {
      if (constraints == null) dart.nullFailed(I[108], 43, 51, "constraints");
      return new geometry.BoxConstraints.new({minWidth: constraints.minWidth, maxWidth: dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : constraints.constrainWidth(this.maxWidth), minHeight: constraints.minHeight, maxHeight: dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : constraints.constrainHeight(this.maxHeight)});
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 56, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 56, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 57, 13, "parentUsesSize");
      let size = null;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, this[_limitConstraints](constraints), {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 62, 14, "child!.box != null");
        size = constraints.constrain(dart.nullCheck(dart.nullCheck(this.child).box).size);
      } else {
        size = this[_limitConstraints](constraints).smallest;
      }
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, size);
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[108], 71, 22, "context");
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.LimitedBox.new = function(opts) {
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
    if (maxWidth == null) dart.nullFailed(I[108], 32, 10, "maxWidth");
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
    if (maxHeight == null) dart.nullFailed(I[108], 33, 10, "maxHeight");
    let child = opts && 'child' in opts ? opts.child : null;
    this[maxWidth$] = maxWidth;
    this[maxHeight$] = maxHeight;
    if (!(dart.notNull(maxWidth) >= 0.0)) dart.assertFailed(null, I[108], 35, 16, "maxWidth >= 0.0");
    if (!(dart.notNull(maxHeight) >= 0.0)) dart.assertFailed(null, I[108], 36, 16, "maxHeight >= 0.0");
    basic.LimitedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.LimitedBox.prototype;
  dart.addTypeTests(basic.LimitedBox);
  dart.addTypeCaches(basic.LimitedBox);
  dart.setMethodSignature(basic.LimitedBox, () => ({
    __proto__: dart.getMethods(basic.LimitedBox.__proto__),
    [_limitConstraints]: dart.fnType(geometry.BoxConstraints, [geometry.BoxConstraints])
  }));
  dart.setLibraryUri(basic.LimitedBox, I[109]);
  dart.setFieldSignature(basic.LimitedBox, () => ({
    __proto__: dart.getFields(basic.LimitedBox.__proto__),
    maxWidth: dart.finalFieldType(core.double),
    maxHeight: dart.finalFieldType(core.double)
  }));
  var padding$8 = dart.privateName(basic, "Padding.padding");
  basic.Padding = class Padding extends widget$.SingleChildWidget {
    get padding() {
      return this[padding$8];
    }
    set padding(value) {
      super.padding = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 86, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 86, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 87, 13, "parentUsesSize");
      if (this.child != null) {
        let childConstraints = constraints.deflate(this.padding);
        dart.nullCheck(this.child).layout(context, childConstraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 91, 14, "child!.box != null");
        this.box = constraints.constrainRect({width: dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).width) + dart.notNull(this.padding.horizontal), height: dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).height) + dart.notNull(this.padding.vertical)});
      } else {
        this.box = constraints.constrainRect({width: this.padding.horizontal, height: this.padding.vertical});
      }
    }
    debugPaint(context) {
      let t71;
      if (context == null) dart.nullFailed(I[108], 102, 27, "context");
      t71 = context.canvas;
      (() => {
        t71.setFillColor(colors.PdfColors.lime);
        t71.moveTo(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t71.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).y);
        t71.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).top);
        t71.lineTo(dart.nullCheck(this.box).x, dart.nullCheck(this.box).top);
        t71.moveTo(dart.notNull(dart.nullCheck(this.box).x) + dart.notNull(this.padding.left), dart.notNull(dart.nullCheck(this.box).y) + dart.notNull(this.padding.bottom));
        t71.lineTo(dart.notNull(dart.nullCheck(this.box).x) + dart.notNull(this.padding.left), dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(this.padding.top));
        t71.lineTo(dart.notNull(dart.nullCheck(this.box).right) - dart.notNull(this.padding.right), dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(this.padding.top));
        t71.lineTo(dart.notNull(dart.nullCheck(this.box).right) - dart.notNull(this.padding.right), dart.notNull(dart.nullCheck(this.box).y) + dart.notNull(this.padding.bottom));
        t71.fillPath();
        return t71;
      })();
    }
    paint(context) {
      let t71;
      if (context == null) dart.nullFailed(I[108], 117, 22, "context");
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.notNull(dart.nullCheck(this.box).x) + dart.notNull(this.padding.left), dart.notNull(dart.nullCheck(this.box).y) + dart.notNull(this.padding.bottom));
        t71 = context.canvas;
        (() => {
          t71.saveContext();
          t71.setTransform(mat);
          return t71;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Padding.new = function(opts) {
    let padding = opts && 'padding' in opts ? opts.padding : null;
    if (padding == null) dart.nullFailed(I[108], 79, 19, "padding");
    let child = opts && 'child' in opts ? opts.child : null;
    this[padding$8] = padding;
    basic.Padding.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Padding.prototype;
  dart.addTypeTests(basic.Padding);
  dart.addTypeCaches(basic.Padding);
  dart.setLibraryUri(basic.Padding, I[109]);
  dart.setFieldSignature(basic.Padding, () => ({
    __proto__: dart.getFields(basic.Padding.__proto__),
    padding: dart.finalFieldType(geometry.EdgeInsets)
  }));
  var transform$3 = dart.privateName(basic, "Transform.transform");
  var origin$ = dart.privateName(basic, "Transform.origin");
  var alignment$6 = dart.privateName(basic, "Transform.alignment");
  var adjustLayout$ = dart.privateName(basic, "Transform.adjustLayout");
  var _effectiveTransform = dart.privateName(basic, "_effectiveTransform");
  basic.Transform = class Transform extends widget$.SingleChildWidget {
    get transform() {
      return this[transform$3];
    }
    set transform(value) {
      super.transform = value;
    }
    get origin() {
      return this[origin$];
    }
    set origin(value) {
      super.origin = value;
    }
    get alignment() {
      return this[alignment$6];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get adjustLayout() {
      return this[adjustLayout$];
    }
    set adjustLayout(value) {
      super.adjustLayout = value;
    }
    get [_effectiveTransform]() {
      let result = vector_math_64.Matrix4.identity();
      if (this.origin != null) {
        result.translate(dart.nullCheck(this.origin).x, dart.nullCheck(this.origin).y);
      }
      result.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      let translation = null;
      let translation$35isSet = false;
      function translation$35get() {
        return translation$35isSet ? translation : dart.throw(new _internal.LateError.localNI("translation"));
      }
      dart.fn(translation$35get, T$.VoidToPdfPoint());
      function translation$35set(t74) {
        if (t74 == null) dart.nullFailed(I[108], 200, 19, "null");
        translation$35isSet = true;
        return translation = t74;
      }
      dart.fn(translation$35set, T$.PdfPointTodynamic());
      if (this.alignment != null) {
        translation$35set(dart.nullCheck(this.alignment).alongSize(dart.nullCheck(this.box).size));
        result.translate(translation$35get().x, translation$35get().y);
      }
      result.multiply(this.transform);
      if (this.alignment != null) {
        result.translate(-dart.notNull(translation$35get().x), -dart.notNull(translation$35get().y));
      }
      if (this.origin != null) {
        result.translate(-dart.notNull(dart.nullCheck(this.origin).x), -dart.notNull(dart.nullCheck(this.origin).y));
      }
      return result;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 216, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 216, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 217, 13, "parentUsesSize");
      if (!dart.test(this.adjustLayout)) {
        return super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      }
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 224, 14, "child!.box != null");
        let mat = this.transform;
        let values = mat.applyToVector3Array(T$.JSArrayOfdouble().of([dart.nullCheck(dart.nullCheck(this.child).box).left, dart.nullCheck(dart.nullCheck(this.child).box).top, 0.0, dart.nullCheck(dart.nullCheck(this.child).box).right, dart.nullCheck(dart.nullCheck(this.child).box).top, 0.0, dart.nullCheck(dart.nullCheck(this.child).box).right, dart.nullCheck(dart.nullCheck(this.child).box).bottom, 0.0, dart.nullCheck(dart.nullCheck(this.child).box).left, dart.nullCheck(dart.nullCheck(this.child).box).bottom, 0.0]));
        let dx = -math.min(core.double, math.min(core.double, math.min(core.double, values[$_get](0), values[$_get](3)), values[$_get](6)), values[$_get](9));
        let dy = -math.min(core.double, math.min(core.double, math.min(core.double, values[$_get](1), values[$_get](4)), values[$_get](7)), values[$_get](10));
        this.box = rect$.PdfRect.fromLTRB(0.0, 0.0, math.max(core.double, math.max(core.double, math.max(core.double, values[$_get](0), values[$_get](3)), values[$_get](6)), values[$_get](9)) + dx, math.max(core.double, math.max(core.double, math.max(core.double, values[$_get](1), values[$_get](4)), values[$_get](7)), values[$_get](10)) + dy);
        this.transform.leftTranslate(dx, dy);
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paint(context) {
      let t76;
      if (context == null) dart.nullFailed(I[108], 265, 22, "context");
      super.paint(context);
      if (this.child != null) {
        let mat = this[_effectiveTransform];
        t76 = context.canvas;
        (() => {
          t76.saveContext();
          t76.setTransform(mat);
          return t76;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Transform.new = function(opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    if (transform == null) dart.nullFailed(I[108], 134, 19, "transform");
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let adjustLayout = opts && 'adjustLayout' in opts ? opts.adjustLayout : false;
    if (adjustLayout == null) dart.nullFailed(I[108], 137, 10, "adjustLayout");
    let child = opts && 'child' in opts ? opts.child : null;
    this[transform$3] = transform;
    this[origin$] = origin;
    this[alignment$6] = alignment;
    this[adjustLayout$] = adjustLayout;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.rotate = function(opts) {
    let angle = opts && 'angle' in opts ? opts.angle : null;
    if (angle == null) dart.nullFailed(I[108], 144, 21, "angle");
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let child = opts && 'child' in opts ? opts.child : null;
    this[origin$] = origin;
    this[alignment$6] = alignment;
    this[transform$3] = vector_math_64.Matrix4.rotationZ(angle);
    this[adjustLayout$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.rotateBox = function(opts) {
    let angle = opts && 'angle' in opts ? opts.angle : null;
    if (angle == null) dart.nullFailed(I[108], 155, 21, "angle");
    let child = opts && 'child' in opts ? opts.child : null;
    this[transform$3] = vector_math_64.Matrix4.rotationZ(angle);
    this[adjustLayout$] = true;
    this[alignment$6] = null;
    this[origin$] = null;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.translate = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    if (offset == null) dart.nullFailed(I[108], 165, 23, "offset");
    let child = opts && 'child' in opts ? opts.child : null;
    this[transform$3] = vector_math_64.Matrix4.translationValues(offset.x, offset.y, 0.0);
    this[origin$] = null;
    this[alignment$6] = null;
    this[adjustLayout$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.scale = function(opts) {
    let scale = opts && 'scale' in opts ? opts.scale : null;
    if (scale == null) dart.nullFailed(I[108], 175, 21, "scale");
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let child = opts && 'child' in opts ? opts.child : null;
    this[origin$] = origin;
    this[alignment$6] = alignment;
    this[transform$3] = vector_math_64.Matrix4.diagonal3Values(scale, scale, 1.0);
    this[adjustLayout$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  dart.addTypeTests(basic.Transform);
  dart.addTypeCaches(basic.Transform);
  dart.setGetterSignature(basic.Transform, () => ({
    __proto__: dart.getGetters(basic.Transform.__proto__),
    [_effectiveTransform]: vector_math_64.Matrix4
  }));
  dart.setLibraryUri(basic.Transform, I[109]);
  dart.setFieldSignature(basic.Transform, () => ({
    __proto__: dart.getFields(basic.Transform.__proto__),
    transform: dart.finalFieldType(vector_math_64.Matrix4),
    origin: dart.finalFieldType(dart.nullable(point$.PdfPoint)),
    alignment: dart.finalFieldType(dart.nullable(geometry.Alignment)),
    adjustLayout: dart.finalFieldType(core.bool)
  }));
  var alignment$7 = dart.privateName(basic, "Align.alignment");
  var widthFactor$ = dart.privateName(basic, "Align.widthFactor");
  var heightFactor$ = dart.privateName(basic, "Align.heightFactor");
  basic.Align = class Align extends widget$.SingleChildWidget {
    get alignment() {
      return this[alignment$7];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get widthFactor() {
      return this[widthFactor$];
    }
    set widthFactor(value) {
      super.widthFactor = value;
    }
    get heightFactor() {
      return this[heightFactor$];
    }
    set heightFactor(value) {
      super.heightFactor = value;
    }
    layout(context, constraints, opts) {
      let t76, t76$;
      if (context == null) dart.nullFailed(I[108], 301, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 301, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 302, 13, "parentUsesSize");
      let shrinkWrapWidth = this.widthFactor != null || constraints.maxWidth === 1 / 0;
      let shrinkWrapHeight = this.heightFactor != null || constraints.maxHeight === 1 / 0;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, constraints.loosen(), {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 310, 14, "child!.box != null");
        this.box = constraints.constrainRect({width: shrinkWrapWidth ? dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).width) * dart.notNull((t76 = this.widthFactor, t76 == null ? 1.0 : t76)) : 1 / 0, height: shrinkWrapHeight ? dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).height) * dart.notNull((t76$ = this.heightFactor, t76$ == null ? 1.0 : t76$)) : 1 / 0});
        dart.nullCheck(this.child).box = this.alignment.inscribe(dart.nullCheck(dart.nullCheck(this.child).box).size, dart.nullCheck(this.box));
      } else {
        this.box = constraints.constrainRect({width: shrinkWrapWidth ? 0.0 : 1 / 0, height: shrinkWrapHeight ? 0.0 : 1 / 0});
      }
    }
    debugPaint(context) {
      let t76, t76$, t76$0, t76$1, t76$2;
      if (context == null) dart.nullFailed(I[108], 329, 27, "context");
      t76 = context.canvas;
      (() => {
        t76.setStrokeColor(colors.PdfColors.green);
        t76.setLineWidth(1.0);
        t76.drawBox(dart.nullCheck(this.box));
        return t76;
      })();
      if (this.child == null) {
        context.canvas.strokePath();
        return;
      }
      if (dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).bottom) > 0) {
        let headSize = math.min(core.num, dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).bottom) * 0.2, 10);
        t76$ = context.canvas;
        (() => {
          t76$.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter), dart.nullCheck(this.box).bottom);
          t76$.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).bottom));
          t76$.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter) - headSize, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).bottom) - headSize);
          t76$.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).bottom));
          t76$.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter) + headSize, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).bottom) - headSize);
          return t76$;
        })();
      }
      if (dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).top) < dart.notNull(dart.nullCheck(this.box).top)) {
        let headSize = math.min(core.num, (dart.notNull(dart.nullCheck(this.box).top) - dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).top) - dart.notNull(dart.nullCheck(this.box).bottom)) * 0.2, 10);
        t76$0 = context.canvas;
        (() => {
          t76$0.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter), dart.nullCheck(this.box).top);
          t76$0.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).top));
          t76$0.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter) - headSize, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).top) + headSize);
          t76$0.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).top));
          t76$0.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).horizondalCenter) + headSize, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).top) + headSize);
          return t76$0;
        })();
      }
      if (dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).left) > 0) {
        let headSize = math.min(core.num, dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).left) * 0.2, 10);
        t76$1 = context.canvas;
        (() => {
          t76$1.moveTo(dart.nullCheck(this.box).left, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter));
          t76$1.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).left), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter));
          t76$1.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).left) - headSize, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter) - headSize);
          t76$1.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).left), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter));
          t76$1.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).left) - headSize, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter) + headSize);
          return t76$1;
        })();
      }
      if (dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).right) < dart.notNull(dart.nullCheck(this.box).right)) {
        let headSize = math.min(core.num, (dart.notNull(dart.nullCheck(this.box).right) - dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).right) - dart.notNull(dart.nullCheck(this.box).left)) * 0.2, 10);
        t76$2 = context.canvas;
        (() => {
          t76$2.moveTo(dart.nullCheck(this.box).right, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter));
          t76$2.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).right), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter));
          t76$2.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).right) + headSize, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter) - headSize);
          t76$2.moveTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).right), dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter));
          t76$2.lineTo(dart.notNull(dart.nullCheck(this.box).left) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).right) + headSize, dart.notNull(dart.nullCheck(this.box).bottom) + dart.notNull(dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter) + headSize);
          return t76$2;
        })();
      }
      context.canvas.strokePath();
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[108], 405, 22, "context");
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.Align.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    if (alignment == null) dart.nullFailed(I[108], 283, 13, "alignment");
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[alignment$7] = alignment;
    this[widthFactor$] = widthFactor;
    this[heightFactor$] = heightFactor;
    if (!(widthFactor == null || dart.notNull(widthFactor) >= 0.0)) dart.assertFailed(null, I[108], 287, 16, "widthFactor == null || widthFactor >= 0.0");
    if (!(heightFactor == null || dart.notNull(heightFactor) >= 0.0)) dart.assertFailed(null, I[108], 288, 16, "heightFactor == null || heightFactor >= 0.0");
    basic.Align.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Align.prototype;
  dart.addTypeTests(basic.Align);
  dart.addTypeCaches(basic.Align);
  dart.setLibraryUri(basic.Align, I[109]);
  dart.setFieldSignature(basic.Align, () => ({
    __proto__: dart.getFields(basic.Align.__proto__),
    alignment: dart.finalFieldType(geometry.Alignment),
    widthFactor: dart.finalFieldType(dart.nullable(core.double)),
    heightFactor: dart.finalFieldType(dart.nullable(core.double))
  }));
  var constraints$1 = dart.privateName(basic, "ConstrainedBox.constraints");
  basic.ConstrainedBox = class ConstrainedBox extends widget$.SingleChildWidget {
    get constraints() {
      return this[constraints$1];
    }
    set constraints(value) {
      super.constraints = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 420, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 420, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 421, 13, "parentUsesSize");
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, this.constraints.enforce(constraints), {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 425, 14, "child!.box != null");
        this.box = dart.nullCheck(this.child).box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, this.constraints.enforce(constraints).smallest);
      }
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[108], 434, 22, "context");
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.ConstrainedBox.new = function(opts) {
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    if (constraints == null) dart.nullFailed(I[108], 413, 33, "constraints");
    let child = opts && 'child' in opts ? opts.child : null;
    this[constraints$1] = constraints;
    basic.ConstrainedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.ConstrainedBox.prototype;
  dart.addTypeTests(basic.ConstrainedBox);
  dart.addTypeCaches(basic.ConstrainedBox);
  dart.setLibraryUri(basic.ConstrainedBox, I[109]);
  dart.setFieldSignature(basic.ConstrainedBox, () => ({
    __proto__: dart.getFields(basic.ConstrainedBox.__proto__),
    constraints: dart.finalFieldType(geometry.BoxConstraints)
  }));
  basic.Center = class Center extends basic.Align {};
  (basic.Center.new = function(opts) {
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let child = opts && 'child' in opts ? opts.child : null;
    basic.Center.__proto__.new.call(this, {widthFactor: widthFactor, heightFactor: heightFactor, child: child});
    ;
  }).prototype = basic.Center.prototype;
  dart.addTypeTests(basic.Center);
  dart.addTypeCaches(basic.Center);
  dart.setLibraryUri(basic.Center, I[109]);
  var fit$9 = dart.privateName(basic, "FittedBox.fit");
  var alignment$8 = dart.privateName(basic, "FittedBox.alignment");
  basic.FittedBox = class FittedBox extends widget$.SingleChildWidget {
    get fit() {
      return this[fit$9];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$8];
    }
    set alignment(value) {
      super.alignment = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 461, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 461, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 462, 13, "parentUsesSize");
      let size = null;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, C[14] || CT.C14, {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 466, 14, "child!.box != null");
        size = constraints.constrainSizeAndAttemptToPreserveAspectRatio(dart.nullCheck(dart.nullCheck(this.child).box).size);
      } else {
        size = constraints.smallest;
      }
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, size);
    }
    paint(context) {
      let t76, t76$;
      if (context == null) dart.nullFailed(I[108], 476, 22, "context");
      super.paint(context);
      if (this.child != null) {
        let childSize = dart.nullCheck(dart.nullCheck(this.child).box).size;
        let sizes = geometry.applyBoxFit(this.fit, childSize, dart.nullCheck(this.box).size);
        let scaleX = dart.notNull(dart.nullCheck(sizes.destination).x) / dart.notNull(dart.nullCheck(sizes.source).x);
        let scaleY = dart.notNull(dart.nullCheck(sizes.destination).y) / dart.notNull(dart.nullCheck(sizes.source).y);
        let sourceRect = this.alignment.inscribe(dart.nullCheck(sizes.source), rect$.PdfRect.fromPoints(point$.PdfPoint.zero, childSize));
        let destinationRect = this.alignment.inscribe(dart.nullCheck(sizes.destination), dart.nullCheck(this.box));
        let mat = (t76 = vector_math_64.Matrix4.translationValues(destinationRect.x, destinationRect.y, 0.0), (() => {
          t76.scale(scaleX, scaleY, 1.0);
          t76.translate(-dart.notNull(sourceRect.x), -dart.notNull(sourceRect.y));
          return t76;
        })());
        t76$ = context.canvas;
        (() => {
          t76$.saveContext();
          t76$.drawBox(dart.nullCheck(this.box));
          t76$.clipPath();
          t76$.setTransform(mat);
          return t76$;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.FittedBox.new = function(opts) {
    let fit = opts && 'fit' in opts ? opts.fit : C[74] || CT.C74;
    if (fit == null) dart.nullFailed(I[108], 449, 10, "fit");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    if (alignment == null) dart.nullFailed(I[108], 450, 10, "alignment");
    let child = opts && 'child' in opts ? opts.child : null;
    this[fit$9] = fit;
    this[alignment$8] = alignment;
    basic.FittedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.FittedBox.prototype;
  dart.addTypeTests(basic.FittedBox);
  dart.addTypeCaches(basic.FittedBox);
  dart.setLibraryUri(basic.FittedBox, I[109]);
  dart.setFieldSignature(basic.FittedBox, () => ({
    __proto__: dart.getFields(basic.FittedBox.__proto__),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment)
  }));
  var aspectRatio$ = dart.privateName(basic, "AspectRatio.aspectRatio");
  var _applyAspectRatio = dart.privateName(basic, "_applyAspectRatio");
  basic.AspectRatio = class AspectRatio extends widget$.SingleChildWidget {
    get aspectRatio() {
      return this[aspectRatio$];
    }
    set aspectRatio(value) {
      super.aspectRatio = value;
    }
    [_applyAspectRatio](constraints) {
      if (constraints == null) dart.nullFailed(I[108], 510, 45, "constraints");
      if (dart.test(constraints.isTight)) {
        return constraints.smallest;
      }
      let width = constraints.maxWidth;
      let height = null;
      if (width[$isFinite]) {
        height = dart.notNull(width) / dart.notNull(this.aspectRatio);
      } else {
        height = constraints.maxHeight;
        width = dart.notNull(height) * dart.notNull(this.aspectRatio);
      }
      if (dart.notNull(width) > dart.notNull(constraints.maxWidth)) {
        width = constraints.maxWidth;
        height = dart.notNull(width) / dart.notNull(this.aspectRatio);
      }
      if (dart.notNull(height) > dart.notNull(constraints.maxHeight)) {
        height = constraints.maxHeight;
        width = dart.notNull(height) * dart.notNull(this.aspectRatio);
      }
      if (dart.notNull(width) < dart.notNull(constraints.minWidth)) {
        width = constraints.minWidth;
        height = dart.notNull(width) / dart.notNull(this.aspectRatio);
      }
      if (dart.notNull(height) < dart.notNull(constraints.minHeight)) {
        height = constraints.minHeight;
        width = dart.notNull(height) * dart.notNull(this.aspectRatio);
      }
      return constraints.constrain(new point$.PdfPoint.new(width, height));
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 549, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 549, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 550, 13, "parentUsesSize");
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, this[_applyAspectRatio](constraints));
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height}));
      }
      if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 556, 12, "child!.box != null");
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[108], 560, 22, "context");
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.AspectRatio.new = function(opts) {
    let aspectRatio = opts && 'aspectRatio' in opts ? opts.aspectRatio : null;
    if (aspectRatio == null) dart.nullFailed(I[108], 505, 30, "aspectRatio");
    let child = opts && 'child' in opts ? opts.child : null;
    this[aspectRatio$] = aspectRatio;
    basic.AspectRatio.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.AspectRatio.prototype;
  dart.addTypeTests(basic.AspectRatio);
  dart.addTypeCaches(basic.AspectRatio);
  dart.setMethodSignature(basic.AspectRatio, () => ({
    __proto__: dart.getMethods(basic.AspectRatio.__proto__),
    [_applyAspectRatio]: dart.fnType(point$.PdfPoint, [geometry.BoxConstraints])
  }));
  dart.setLibraryUri(basic.AspectRatio, I[109]);
  dart.setFieldSignature(basic.AspectRatio, () => ({
    __proto__: dart.getFields(basic.AspectRatio.__proto__),
    aspectRatio: dart.finalFieldType(core.double)
  }));
  var painter$3 = dart.privateName(basic, "CustomPaint.painter");
  var foregroundPainter$ = dart.privateName(basic, "CustomPaint.foregroundPainter");
  var size$1 = dart.privateName(basic, "CustomPaint.size");
  basic.CustomPaint = class CustomPaint extends widget$.SingleChildWidget {
    get painter() {
      return this[painter$3];
    }
    set painter(value) {
      super.painter = value;
    }
    get foregroundPainter() {
      return this[foregroundPainter$];
    }
    set foregroundPainter(value) {
      super.foregroundPainter = value;
    }
    get size() {
      return this[size$1];
    }
    set size(value) {
      super.size = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 581, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 581, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 582, 13, "parentUsesSize");
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 585, 14, "child!.box != null");
        this.box = dart.nullCheck(this.child).box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.constrain(this.size));
      }
    }
    paint(context) {
      let t76;
      if (context == null) dart.nullFailed(I[108], 593, 22, "context");
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t76 = context.canvas;
      (() => {
        t76.saveContext();
        t76.setTransform(mat);
        return t76;
      })();
      if (this.painter != null) {
        dart.nullCheck(this.painter)(context.canvas, dart.nullCheck(this.box).size);
      }
      if (this.child != null) {
        dart.nullCheck(this.child).paint(context);
      }
      if (this.foregroundPainter != null) {
        dart.nullCheck(this.foregroundPainter)(context.canvas, dart.nullCheck(this.box).size);
      }
      context.canvas.restoreContext();
    }
  };
  (basic.CustomPaint.new = function(opts) {
    let painter = opts && 'painter' in opts ? opts.painter : null;
    let foregroundPainter = opts && 'foregroundPainter' in opts ? opts.foregroundPainter : null;
    let size = opts && 'size' in opts ? opts.size : C[26] || CT.C26;
    if (size == null) dart.nullFailed(I[108], 572, 10, "size");
    let child = opts && 'child' in opts ? opts.child : null;
    this[painter$3] = painter;
    this[foregroundPainter$] = foregroundPainter;
    this[size$1] = size;
    basic.CustomPaint.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.CustomPaint.prototype;
  dart.addTypeTests(basic.CustomPaint);
  dart.addTypeCaches(basic.CustomPaint);
  dart.setLibraryUri(basic.CustomPaint, I[109]);
  dart.setFieldSignature(basic.CustomPaint, () => ({
    __proto__: dart.getFields(basic.CustomPaint.__proto__),
    painter: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [graphics.PdfGraphics, point$.PdfPoint]))),
    foregroundPainter: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [graphics.PdfGraphics, point$.PdfPoint]))),
    size: dart.finalFieldType(point$.PdfPoint)
  }));
  var width$12 = dart.privateName(basic, "SizedBox.width");
  var height$8 = dart.privateName(basic, "SizedBox.height");
  var child$10 = dart.privateName(basic, "SizedBox.child");
  basic.SizedBox = class SizedBox extends widget$.StatelessWidget {
    get width() {
      return this[width$12];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$8];
    }
    set height(value) {
      super.height = value;
    }
    get child() {
      return this[child$10];
    }
    set child(value) {
      super.child = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[108], 643, 24, "context");
      return new basic.ConstrainedBox.new({child: this.child, constraints: new geometry.BoxConstraints.tightFor({width: this.width, height: this.height})});
    }
  };
  (basic.SizedBox.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[width$12] = width;
    this[height$8] = height;
    this[child$10] = child;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.expand = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$10] = child;
    this[width$12] = 1 / 0;
    this[height$8] = 1 / 0;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.shrink = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$10] = child;
    this[width$12] = 0.0;
    this[height$8] = 0.0;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.fromSize = function(opts) {
    let t76, t76$;
    let child = opts && 'child' in opts ? opts.child : null;
    let size = opts && 'size' in opts ? opts.size : null;
    this[child$10] = child;
    this[width$12] = (t76 = size, t76 == null ? null : t76.x);
    this[height$8] = (t76$ = size, t76$ == null ? null : t76$.y);
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  dart.addTypeTests(basic.SizedBox);
  dart.addTypeCaches(basic.SizedBox);
  dart.setMethodSignature(basic.SizedBox, () => ({
    __proto__: dart.getMethods(basic.SizedBox.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.SizedBox, I[109]);
  dart.setFieldSignature(basic.SizedBox, () => ({
    __proto__: dart.getFields(basic.SizedBox.__proto__),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    child: dart.finalFieldType(dart.nullable(widget$.Widget))
  }));
  var builder$ = dart.privateName(basic, "Builder.builder");
  basic.Builder = class Builder extends widget$.StatelessWidget {
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    build(context) {
      let t76;
      if (context == null) dart.nullFailed(I[108], 665, 24, "context");
      t76 = context;
      return this.builder(t76);
    }
  };
  (basic.Builder.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    if (builder == null) dart.nullFailed(I[108], 658, 19, "builder");
    this[builder$] = builder;
    basic.Builder.__proto__.new.call(this);
    ;
  }).prototype = basic.Builder.prototype;
  dart.addTypeTests(basic.Builder);
  dart.addTypeCaches(basic.Builder);
  dart.setMethodSignature(basic.Builder, () => ({
    __proto__: dart.getMethods(basic.Builder.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.Builder, I[109]);
  dart.setFieldSignature(basic.Builder, () => ({
    __proto__: dart.getFields(basic.Builder.__proto__),
    builder: dart.finalFieldType(dart.fnType(widget$.Widget, [widget$.Context]))
  }));
  var builder$0 = dart.privateName(basic, "LayoutBuilder.builder");
  var _constraints = dart.privateName(basic, "_constraints");
  basic.LayoutBuilder = class LayoutBuilder extends widget$.StatelessWidget {
    get builder() {
      return this[builder$0];
    }
    set builder(value) {
      super.builder = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 685, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 685, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 686, 13, "parentUsesSize");
      this[_constraints] = constraints;
      super.layout(context, constraints);
    }
    build(context) {
      let t77, t76;
      if (context == null) dart.nullFailed(I[108], 692, 24, "context");
      t76 = context;
      t77 = this[_constraints];
      return this.builder(t76, t77);
    }
  };
  (basic.LayoutBuilder.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    if (builder == null) dart.nullFailed(I[108], 676, 19, "builder");
    this[_constraints] = null;
    this[builder$0] = builder;
    basic.LayoutBuilder.__proto__.new.call(this);
    ;
  }).prototype = basic.LayoutBuilder.prototype;
  dart.addTypeTests(basic.LayoutBuilder);
  dart.addTypeCaches(basic.LayoutBuilder);
  dart.setMethodSignature(basic.LayoutBuilder, () => ({
    __proto__: dart.getMethods(basic.LayoutBuilder.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.LayoutBuilder, I[109]);
  dart.setFieldSignature(basic.LayoutBuilder, () => ({
    __proto__: dart.getFields(basic.LayoutBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(widget$.Widget, [widget$.Context, dart.nullable(geometry.BoxConstraints)])),
    [_constraints]: dart.fieldType(dart.nullable(geometry.BoxConstraints))
  }));
  var ignoreMargins$ = dart.privateName(basic, "FullPage.ignoreMargins");
  var _getConstraints = dart.privateName(basic, "_getConstraints");
  var _getBox$ = dart.privateName(basic, "_getBox");
  basic.FullPage = class FullPage extends widget$.SingleChildWidget {
    get ignoreMargins() {
      return this[ignoreMargins$];
    }
    set ignoreMargins(value) {
      super.ignoreMargins = value;
    }
    [_getConstraints](context) {
      if (context == null) dart.nullFailed(I[108], 703, 42, "context");
      if (!(context.page.pageFormat.width !== 1 / 0)) dart.assertFailed(null, I[108], 704, 12, "context.page.pageFormat.width != double.infinity");
      if (!(context.page.pageFormat.height !== 1 / 0)) dart.assertFailed(null, I[108], 705, 12, "context.page.pageFormat.height != double.infinity");
      return dart.test(this.ignoreMargins) ? new geometry.BoxConstraints.tightFor({width: context.page.pageFormat.width, height: context.page.pageFormat.height}) : new geometry.BoxConstraints.tightFor({width: context.page.pageFormat.availableWidth, height: context.page.pageFormat.availableHeight});
    }
    [_getBox$](context) {
      if (context == null) dart.nullFailed(I[108], 718, 27, "context");
      let box = this[_getConstraints](context).constrainRect();
      if (dart.test(this.ignoreMargins)) {
        return box;
      }
      return rect$.PdfRect.fromPoints(new point$.PdfPoint.new(context.page.pageFormat.marginLeft, context.page.pageFormat.marginTop), box.size);
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[108], 733, 23, "context");
      if (constraints == null) dart.nullFailed(I[108], 733, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[108], 734, 13, "parentUsesSize");
      {
        let constraints = this[_getConstraints](context);
        if (this.child != null) {
          dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: false});
          if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[108], 739, 14, "child!.box != null");
        }
        this.box = this[_getBox$](context);
      }
    }
    debugPaint(context) {
      if (context == null) dart.nullFailed(I[108], 746, 27, "context");
    }
    paint(context) {
      let t76;
      if (context == null) dart.nullFailed(I[108], 749, 22, "context");
      super.paint(context);
      if (this.child == null) {
        return;
      }
      let box = this[_getBox$](context);
      let mat = dart.nullCheck(vector_math_64.Matrix4.tryInvert(context.canvas.getTransform()));
      mat.translate(box.x, box.y);
      t76 = context.canvas;
      (() => {
        t76.saveContext();
        t76.setTransform(mat);
        return t76;
      })();
      dart.nullCheck(this.child).paint(context);
      context.canvas.restoreContext();
    }
  };
  (basic.FullPage.new = function(opts) {
    let ignoreMargins = opts && 'ignoreMargins' in opts ? opts.ignoreMargins : null;
    if (ignoreMargins == null) dart.nullFailed(I[108], 697, 19, "ignoreMargins");
    let child = opts && 'child' in opts ? opts.child : null;
    this[ignoreMargins$] = ignoreMargins;
    basic.FullPage.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.FullPage.prototype;
  dart.addTypeTests(basic.FullPage);
  dart.addTypeCaches(basic.FullPage);
  dart.setMethodSignature(basic.FullPage, () => ({
    __proto__: dart.getMethods(basic.FullPage.__proto__),
    [_getConstraints]: dart.fnType(geometry.BoxConstraints, [widget$.Context]),
    [_getBox$]: dart.fnType(rect$.PdfRect, [widget$.Context])
  }));
  dart.setLibraryUri(basic.FullPage, I[109]);
  dart.setFieldSignature(basic.FullPage, () => ({
    __proto__: dart.getFields(basic.FullPage.__proto__),
    ignoreMargins: dart.finalFieldType(core.bool)
  }));
  var opacity$2 = dart.privateName(basic, "Opacity.opacity");
  basic.Opacity = class Opacity extends widget$.SingleChildWidget {
    get opacity() {
      return this[opacity$2];
    }
    set opacity(value) {
      super.opacity = value;
    }
    paint(context) {
      let t76;
      if (context == null) dart.nullFailed(I[108], 776, 22, "context");
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t76 = context.canvas;
        (() => {
          t76.saveContext();
          t76.setTransform(mat);
          t76.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.opacity}));
          return t76;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Opacity.new = function(opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    if (opacity == null) dart.nullFailed(I[108], 769, 19, "opacity");
    let child = opts && 'child' in opts ? opts.child : null;
    this[opacity$2] = opacity;
    basic.Opacity.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Opacity.prototype;
  dart.addTypeTests(basic.Opacity);
  dart.addTypeCaches(basic.Opacity);
  dart.setLibraryUri(basic.Opacity, I[109]);
  dart.setFieldSignature(basic.Opacity, () => ({
    __proto__: dart.getFields(basic.Opacity.__proto__),
    opacity: dart.finalFieldType(core.double)
  }));
  var color$16 = dart.privateName(basic, "Divider.color");
  var endIndent$ = dart.privateName(basic, "Divider.endIndent");
  var height$9 = dart.privateName(basic, "Divider.height");
  var indent$ = dart.privateName(basic, "Divider.indent");
  var thickness$ = dart.privateName(basic, "Divider.thickness");
  var borderStyle$ = dart.privateName(basic, "Divider.borderStyle");
  basic.Divider = class Divider extends widget$.StatelessWidget {
    get color() {
      return this[color$16];
    }
    set color(value) {
      super.color = value;
    }
    get endIndent() {
      return this[endIndent$];
    }
    set endIndent(value) {
      super.endIndent = value;
    }
    get height() {
      return this[height$9];
    }
    set height(value) {
      super.height = value;
    }
    get indent() {
      return this[indent$];
    }
    set indent(value) {
      super.indent = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
    get borderStyle() {
      return this[borderStyle$];
    }
    set borderStyle(value) {
      super.borderStyle = value;
    }
    build(context) {
      let t76, t76$, t76$0, t76$1, t76$2, t76$3;
      if (context == null) dart.nullFailed(I[108], 824, 24, "context");
      let height = (t76 = this.height, t76 == null ? 16.0 : t76);
      let thickness = (t76$ = this.thickness, t76$ == null ? 1.0 : t76$);
      let indent = (t76$0 = this.indent, t76$0 == null ? 0.0 : t76$0);
      let endIndent = (t76$1 = this.endIndent, t76$1 == null ? 0.0 : t76$1);
      let color = (t76$2 = this.color, t76$2 == null ? colors.PdfColors.black : t76$2);
      let borderStyle = (t76$3 = this.borderStyle, t76$3 == null ? box_border.BorderStyle.solid : t76$3);
      return new basic.SizedBox.new({height: height, child: new basic.Center.new({child: new container$.Container.new({height: thickness, margin: new geometry.EdgeInsets.only({left: indent, right: endIndent}), decoration: new decoration$.BoxDecoration.new({border: new box_border.Border.new({bottom: new box_border.BorderSide.new({color: color, width: thickness, style: borderStyle})})})})})});
    }
  };
  (basic.Divider.new = function(opts) {
    let height = opts && 'height' in opts ? opts.height : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let indent = opts && 'indent' in opts ? opts.indent : null;
    let endIndent = opts && 'endIndent' in opts ? opts.endIndent : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let borderStyle = opts && 'borderStyle' in opts ? opts.borderStyle : null;
    this[height$9] = height;
    this[thickness$] = thickness;
    this[indent$] = indent;
    this[endIndent$] = endIndent;
    this[color$16] = color;
    this[borderStyle$] = borderStyle;
    if (!(height == null || dart.notNull(height) >= 0.0)) dart.assertFailed(null, I[108], 800, 16, "height == null || height >= 0.0");
    if (!(thickness == null || dart.notNull(thickness) >= 0.0)) dart.assertFailed(null, I[108], 801, 16, "thickness == null || thickness >= 0.0");
    if (!(indent == null || dart.notNull(indent) >= 0.0)) dart.assertFailed(null, I[108], 802, 16, "indent == null || indent >= 0.0");
    if (!(endIndent == null || dart.notNull(endIndent) >= 0.0)) dart.assertFailed(null, I[108], 803, 16, "endIndent == null || endIndent >= 0.0");
    basic.Divider.__proto__.new.call(this);
    ;
  }).prototype = basic.Divider.prototype;
  dart.addTypeTests(basic.Divider);
  dart.addTypeCaches(basic.Divider);
  dart.setMethodSignature(basic.Divider, () => ({
    __proto__: dart.getMethods(basic.Divider.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.Divider, I[109]);
  dart.setFieldSignature(basic.Divider, () => ({
    __proto__: dart.getFields(basic.Divider.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    endIndent: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    indent: dart.finalFieldType(dart.nullable(core.double)),
    thickness: dart.finalFieldType(dart.nullable(core.double)),
    borderStyle: dart.finalFieldType(dart.nullable(box_border.BorderStyle))
  }));
  var color$17 = dart.privateName(basic, "VerticalDivider.color");
  var endIndent$0 = dart.privateName(basic, "VerticalDivider.endIndent");
  var width$13 = dart.privateName(basic, "VerticalDivider.width");
  var indent$0 = dart.privateName(basic, "VerticalDivider.indent");
  var thickness$0 = dart.privateName(basic, "VerticalDivider.thickness");
  var borderStyle$0 = dart.privateName(basic, "VerticalDivider.borderStyle");
  basic.VerticalDivider = class VerticalDivider extends widget$.StatelessWidget {
    get color() {
      return this[color$17];
    }
    set color(value) {
      super.color = value;
    }
    get endIndent() {
      return this[endIndent$0];
    }
    set endIndent(value) {
      super.endIndent = value;
    }
    get width() {
      return this[width$13];
    }
    set width(value) {
      super.width = value;
    }
    get indent() {
      return this[indent$0];
    }
    set indent(value) {
      super.indent = value;
    }
    get thickness() {
      return this[thickness$0];
    }
    set thickness(value) {
      super.thickness = value;
    }
    get borderStyle() {
      return this[borderStyle$0];
    }
    set borderStyle(value) {
      super.borderStyle = value;
    }
    build(context) {
      let t76, t76$, t76$0, t76$1, t76$2, t76$3;
      if (context == null) dart.nullFailed(I[108], 885, 24, "context");
      let width = (t76 = this.width, t76 == null ? 16.0 : t76);
      let thickness = (t76$ = this.thickness, t76$ == null ? 1.0 : t76$);
      let indent = (t76$0 = this.indent, t76$0 == null ? 0.0 : t76$0);
      let endIndent = (t76$1 = this.endIndent, t76$1 == null ? 0.0 : t76$1);
      let color = (t76$2 = this.color, t76$2 == null ? colors.PdfColors.black : t76$2);
      let borderStyle = (t76$3 = this.borderStyle, t76$3 == null ? box_border.BorderStyle.solid : t76$3);
      return new basic.SizedBox.new({width: width, child: new basic.Center.new({child: new container$.Container.new({width: thickness, margin: new geometry.EdgeInsets.only({top: indent, bottom: endIndent}), decoration: new decoration$.BoxDecoration.new({border: new box_border.Border.new({left: new box_border.BorderSide.new({color: color, width: thickness, style: borderStyle})})})})})});
    }
  };
  (basic.VerticalDivider.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let indent = opts && 'indent' in opts ? opts.indent : null;
    let endIndent = opts && 'endIndent' in opts ? opts.endIndent : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let borderStyle = opts && 'borderStyle' in opts ? opts.borderStyle : null;
    this[width$13] = width;
    this[thickness$0] = thickness;
    this[indent$0] = indent;
    this[endIndent$0] = endIndent;
    this[color$17] = color;
    this[borderStyle$0] = borderStyle;
    if (!(width == null || dart.notNull(width) >= 0.0)) dart.assertFailed(null, I[108], 861, 16, "width == null || width >= 0.0");
    if (!(thickness == null || dart.notNull(thickness) >= 0.0)) dart.assertFailed(null, I[108], 862, 16, "thickness == null || thickness >= 0.0");
    if (!(indent == null || dart.notNull(indent) >= 0.0)) dart.assertFailed(null, I[108], 863, 16, "indent == null || indent >= 0.0");
    if (!(endIndent == null || dart.notNull(endIndent) >= 0.0)) dart.assertFailed(null, I[108], 864, 16, "endIndent == null || endIndent >= 0.0");
    basic.VerticalDivider.__proto__.new.call(this);
    ;
  }).prototype = basic.VerticalDivider.prototype;
  dart.addTypeTests(basic.VerticalDivider);
  dart.addTypeCaches(basic.VerticalDivider);
  dart.setMethodSignature(basic.VerticalDivider, () => ({
    __proto__: dart.getMethods(basic.VerticalDivider.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.VerticalDivider, I[109]);
  dart.setFieldSignature(basic.VerticalDivider, () => ({
    __proto__: dart.getFields(basic.VerticalDivider.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    endIndent: dart.finalFieldType(dart.nullable(core.double)),
    width: dart.finalFieldType(dart.nullable(core.double)),
    indent: dart.finalFieldType(dart.nullable(core.double)),
    thickness: dart.finalFieldType(dart.nullable(core.double)),
    borderStyle: dart.finalFieldType(dart.nullable(box_border.BorderStyle))
  }));
  const minWidth$ = BoxConstraints_minWidth;
  const maxWidth$0 = BoxConstraints_maxWidth;
  const minHeight$0 = BoxConstraints_minHeight;
  const maxHeight$0 = BoxConstraints_maxHeight;
  geometry.BoxConstraints = class BoxConstraints extends core.Object {
    get minWidth() {
      return this[minWidth$];
    }
    set minWidth(value) {
      super.minWidth = value;
    }
    get maxWidth() {
      return this[maxWidth$0];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get minHeight() {
      return this[minHeight$0];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
    get maxHeight() {
      return this[maxHeight$0];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    get hasBoundedWidth() {
      return dart.notNull(this.maxWidth) < 1 / 0;
    }
    get hasBoundedHeight() {
      return dart.notNull(this.maxHeight) < 1 / 0;
    }
    get hasInfiniteWidth() {
      return dart.notNull(this.minWidth) >= 1 / 0;
    }
    get hasInfiniteHeight() {
      return dart.notNull(this.minHeight) >= 1 / 0;
    }
    get biggest() {
      return new point$.PdfPoint.new(this.constrainWidth(), this.constrainHeight());
    }
    get smallest() {
      return new point$.PdfPoint.new(this.constrainWidth(0.0), this.constrainHeight(0.0));
    }
    get hasTightWidth() {
      return dart.notNull(this.minWidth) >= dart.notNull(this.maxWidth);
    }
    get hasTightHeight() {
      return dart.notNull(this.minHeight) >= dart.notNull(this.maxHeight);
    }
    get isTight() {
      return dart.test(this.hasTightWidth) && dart.test(this.hasTightHeight);
    }
    constrain(size) {
      if (size == null) dart.nullFailed(I[110], 102, 31, "size");
      let result = new point$.PdfPoint.new(this.constrainWidth(size.x), this.constrainHeight(size.y));
      return result;
    }
    constrainRect(opts) {
      let width = opts && 'width' in opts ? opts.width : 1 / 0;
      if (width == null) dart.nullFailed(I[110], 108, 15, "width");
      let height = opts && 'height' in opts ? opts.height : 1 / 0;
      if (height == null) dart.nullFailed(I[110], 108, 47, "height");
      let result = new point$.PdfPoint.new(this.constrainWidth(width), this.constrainHeight(height));
      return rect$.PdfRect.fromPoints(point$.PdfPoint.zero, result);
    }
    constrainWidth(width = 1 / 0) {
      if (width == null) dart.nullFailed(I[110], 113, 33, "width");
      return width[$clamp](this.minWidth, this.maxWidth);
    }
    constrainHeight(height = 1 / 0) {
      if (height == null) dart.nullFailed(I[110], 117, 34, "height");
      return height[$clamp](this.minHeight, this.maxHeight);
    }
    constrainSizeAndAttemptToPreserveAspectRatio(size) {
      if (size == null) dart.nullFailed(I[110], 122, 66, "size");
      if (dart.test(this.isTight)) {
        let result = this.smallest;
        return result;
      }
      let width = size.x;
      let height = size.y;
      if (!(dart.notNull(width) > 0.0)) dart.assertFailed(null, I[110], 130, 12, "width > 0.0");
      if (!(dart.notNull(height) > 0.0)) dart.assertFailed(null, I[110], 131, 12, "height > 0.0");
      let aspectRatio = dart.notNull(width) / dart.notNull(height);
      if (dart.notNull(width) > dart.notNull(this.maxWidth)) {
        width = this.maxWidth;
        height = dart.notNull(width) / aspectRatio;
      }
      if (dart.notNull(height) > dart.notNull(this.maxHeight)) {
        height = this.maxHeight;
        width = dart.notNull(height) * aspectRatio;
      }
      if (dart.notNull(width) < dart.notNull(this.minWidth)) {
        width = this.minWidth;
        height = dart.notNull(width) / aspectRatio;
      }
      if (dart.notNull(height) < dart.notNull(this.minHeight)) {
        height = this.minHeight;
        width = dart.notNull(height) * aspectRatio;
      }
      let result = new point$.PdfPoint.new(this.constrainWidth(width), this.constrainHeight(height));
      return result;
    }
    tighten(opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return new geometry.BoxConstraints.new({minWidth: width == null ? this.minWidth : width[$clamp](this.minWidth, this.maxWidth), maxWidth: width == null ? this.maxWidth : width[$clamp](this.minWidth, this.maxWidth), minHeight: height == null ? this.minHeight : height[$clamp](this.minHeight, this.maxHeight), maxHeight: height == null ? this.maxHeight : height[$clamp](this.minHeight, this.maxHeight)});
    }
    deflate(edges) {
      if (edges == null) dart.nullFailed(I[110], 172, 37, "edges");
      let horizontal = edges.horizontal;
      let vertical = edges.vertical;
      let deflatedMinWidth = math.max(core.double, 0.0, dart.notNull(this.minWidth) - dart.notNull(horizontal));
      let deflatedMinHeight = math.max(core.double, 0.0, dart.notNull(this.minHeight) - dart.notNull(vertical));
      return new geometry.BoxConstraints.new({minWidth: deflatedMinWidth, maxWidth: math.max(core.double, deflatedMinWidth, dart.notNull(this.maxWidth) - dart.notNull(horizontal)), minHeight: deflatedMinHeight, maxHeight: math.max(core.double, deflatedMinHeight, dart.notNull(this.maxHeight) - dart.notNull(vertical))});
    }
    loosen() {
      return new geometry.BoxConstraints.new({minWidth: 0.0, maxWidth: this.maxWidth, minHeight: 0.0, maxHeight: this.maxHeight});
    }
    enforce(constraints) {
      if (constraints == null) dart.nullFailed(I[110], 196, 41, "constraints");
      return new geometry.BoxConstraints.new({minWidth: this.minWidth[$clamp](constraints.minWidth, constraints.maxWidth), maxWidth: this.maxWidth[$clamp](constraints.minWidth, constraints.maxWidth), minHeight: this.minHeight[$clamp](constraints.minHeight, constraints.maxHeight), maxHeight: this.maxHeight[$clamp](constraints.minHeight, constraints.maxHeight)});
    }
    copyWith(opts) {
      let t76, t76$, t76$0, t76$1;
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      return new geometry.BoxConstraints.new({minWidth: (t76 = minWidth, t76 == null ? this.minWidth : t76), maxWidth: (t76$ = maxWidth, t76$ == null ? this.maxWidth : t76$), minHeight: (t76$0 = minHeight, t76$0 == null ? this.minHeight : t76$0), maxHeight: (t76$1 = maxHeight, t76$1 == null ? this.maxHeight : t76$1)});
    }
    toString() {
      return "BoxConstraint <" + dart.str(this.minWidth) + ", " + dart.str(this.maxWidth) + "> <" + dart.str(this.minHeight) + ", " + dart.str(this.maxHeight) + ">";
    }
  };
  (geometry.BoxConstraints.new = function(opts) {
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
    if (minWidth == null) dart.nullFailed(I[110], 29, 13, "minWidth");
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
    if (maxWidth == null) dart.nullFailed(I[110], 30, 12, "maxWidth");
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : 0;
    if (minHeight == null) dart.nullFailed(I[110], 31, 12, "minHeight");
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
    if (maxHeight == null) dart.nullFailed(I[110], 32, 12, "maxHeight");
    this[minWidth$] = minWidth;
    this[maxWidth$0] = maxWidth;
    this[minHeight$0] = minHeight;
    this[maxHeight$0] = maxHeight;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tightFor = function(opts) {
    let t76, t76$, t76$0, t76$1;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[minWidth$] = (t76 = width, t76 == null ? 0.0 : t76);
    this[maxWidth$0] = (t76$ = width, t76$ == null ? 1 / 0 : t76$);
    this[minHeight$0] = (t76$0 = height, t76$0 == null ? 0.0 : t76$0);
    this[maxHeight$0] = (t76$1 = height, t76$1 == null ? 1 / 0 : t76$1);
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tight = function(size) {
    if (size == null) dart.nullFailed(I[110], 42, 33, "size");
    this[minWidth$] = size.x;
    this[maxWidth$0] = size.x;
    this[minHeight$0] = size.y;
    this[maxHeight$0] = size.y;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.expand = function(opts) {
    let t76, t76$, t76$0, t76$1;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[minWidth$] = (t76 = width, t76 == null ? 1 / 0 : t76);
    this[maxWidth$0] = (t76$ = width, t76$ == null ? 1 / 0 : t76$);
    this[minHeight$0] = (t76$0 = height, t76$0 == null ? 1 / 0 : t76$0);
    this[maxHeight$0] = (t76$1 = height, t76$1 == null ? 1 / 0 : t76$1);
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tightForFinite = function(opts) {
    let width = opts && 'width' in opts ? opts.width : 1 / 0;
    if (width == null) dart.nullFailed(I[110], 56, 12, "width");
    let height = opts && 'height' in opts ? opts.height : 1 / 0;
    if (height == null) dart.nullFailed(I[110], 57, 12, "height");
    this[minWidth$] = width !== 1 / 0 ? width : 0.0;
    this[maxWidth$0] = width !== 1 / 0 ? width : 1 / 0;
    this[minHeight$0] = height !== 1 / 0 ? height : 0.0;
    this[maxHeight$0] = height !== 1 / 0 ? height : 1 / 0;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  dart.addTypeTests(geometry.BoxConstraints);
  dart.addTypeCaches(geometry.BoxConstraints);
  dart.setMethodSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getMethods(geometry.BoxConstraints.__proto__),
    constrain: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    constrainRect: dart.fnType(rect$.PdfRect, [], {height: core.double, width: core.double}, {}),
    constrainWidth: dart.fnType(core.double, [], [core.double]),
    constrainHeight: dart.fnType(core.double, [], [core.double]),
    constrainSizeAndAttemptToPreserveAspectRatio: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    tighten: dart.fnType(geometry.BoxConstraints, [], {height: dart.nullable(core.double), width: dart.nullable(core.double)}, {}),
    deflate: dart.fnType(geometry.BoxConstraints, [geometry.EdgeInsets]),
    loosen: dart.fnType(geometry.BoxConstraints, []),
    enforce: dart.fnType(geometry.BoxConstraints, [geometry.BoxConstraints]),
    copyWith: dart.fnType(geometry.BoxConstraints, [], {maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), minHeight: dart.nullable(core.double), minWidth: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getGetters(geometry.BoxConstraints.__proto__),
    hasBoundedWidth: core.bool,
    hasBoundedHeight: core.bool,
    hasInfiniteWidth: core.bool,
    hasInfiniteHeight: core.bool,
    biggest: point$.PdfPoint,
    smallest: point$.PdfPoint,
    hasTightWidth: core.bool,
    hasTightHeight: core.bool,
    isTight: core.bool
  }));
  dart.setLibraryUri(geometry.BoxConstraints, I[111]);
  dart.setFieldSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getFields(geometry.BoxConstraints.__proto__),
    minWidth: dart.finalFieldType(core.double),
    maxWidth: dart.finalFieldType(core.double),
    minHeight: dart.finalFieldType(core.double),
    maxHeight: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(geometry.BoxConstraints, ['toString']);
  const left$2 = EdgeInsets_left;
  const top$1 = EdgeInsets_top;
  const right$2 = EdgeInsets_right;
  const bottom$2 = EdgeInsets_bottom;
  geometry.EdgeInsets = class EdgeInsets extends core.Object {
    get left() {
      return this[left$2];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$1];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$2];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$2];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get horizontal() {
      return dart.notNull(this.left) + dart.notNull(this.right);
    }
    get vertical() {
      return dart.notNull(this.top) + dart.notNull(this.bottom);
    }
    copyWith(opts) {
      let t76, t76$, t76$0, t76$1;
      let left = opts && 'left' in opts ? opts.left : null;
      let top = opts && 'top' in opts ? opts.top : null;
      let right = opts && 'right' in opts ? opts.right : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      return new geometry.EdgeInsets.only({left: (t76 = left, t76 == null ? this.left : t76), top: (t76$ = top, t76$ == null ? this.top : t76$), right: (t76$0 = right, t76$0 == null ? this.right : t76$0), bottom: (t76$1 = bottom, t76$1 == null ? this.bottom : t76$1)});
    }
    add(other) {
      if (other == null) dart.nullFailed(I[110], 274, 29, "other");
      return new geometry.EdgeInsets.fromLTRB(dart.notNull(this.left) + dart.notNull(other.left), dart.notNull(this.top) + dart.notNull(other.top), dart.notNull(this.right) + dart.notNull(other.right), dart.notNull(this.bottom) + dart.notNull(other.bottom));
    }
    toString() {
      return "EdgeInsets " + dart.str(this.left) + ", " + dart.str(this.top) + ", " + dart.str(this.right) + ", " + dart.str(this.bottom);
    }
  };
  (geometry.EdgeInsets.fromLTRB = function(left, top, right, bottom) {
    if (left == null) dart.nullFailed(I[110], 226, 34, "left");
    if (top == null) dart.nullFailed(I[110], 226, 45, "top");
    if (right == null) dart.nullFailed(I[110], 226, 55, "right");
    if (bottom == null) dart.nullFailed(I[110], 226, 67, "bottom");
    this[left$2] = left;
    this[top$1] = top;
    this[right$2] = right;
    this[bottom$2] = bottom;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.all = function(value) {
    if (value == null) dart.nullFailed(I[110], 228, 31, "value");
    this[left$2] = value;
    this[top$1] = value;
    this[right$2] = value;
    this[bottom$2] = value;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.only = function(opts) {
    let left = opts && 'left' in opts ? opts.left : 0;
    if (left == null) dart.nullFailed(I[110], 235, 13, "left");
    let top = opts && 'top' in opts ? opts.top : 0;
    if (top == null) dart.nullFailed(I[110], 235, 30, "top");
    let right = opts && 'right' in opts ? opts.right : 0;
    if (right == null) dart.nullFailed(I[110], 235, 46, "right");
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
    if (bottom == null) dart.nullFailed(I[110], 235, 64, "bottom");
    this[left$2] = left;
    this[top$1] = top;
    this[right$2] = right;
    this[bottom$2] = bottom;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.symmetric = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : 0;
    if (vertical == null) dart.nullFailed(I[110], 237, 38, "vertical");
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : 0;
    if (horizontal == null) dart.nullFailed(I[110], 237, 61, "horizontal");
    this[left$2] = horizontal;
    this[top$1] = vertical;
    this[right$2] = horizontal;
    this[bottom$2] = vertical;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  dart.addTypeTests(geometry.EdgeInsets);
  dart.addTypeCaches(geometry.EdgeInsets);
  dart.setMethodSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getMethods(geometry.EdgeInsets.__proto__),
    copyWith: dart.fnType(geometry.EdgeInsets, [], {bottom: dart.nullable(core.double), left: dart.nullable(core.double), right: dart.nullable(core.double), top: dart.nullable(core.double)}, {}),
    add: dart.fnType(geometry.EdgeInsets, [geometry.EdgeInsets])
  }));
  dart.setGetterSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getGetters(geometry.EdgeInsets.__proto__),
    horizontal: core.double,
    vertical: core.double
  }));
  dart.setLibraryUri(geometry.EdgeInsets, I[111]);
  dart.setFieldSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getFields(geometry.EdgeInsets.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(geometry.EdgeInsets, ['toString']);
  dart.defineLazy(geometry.EdgeInsets, {
    /*geometry.EdgeInsets.zero*/get zero() {
      return C[81] || CT.C81;
    }
  }, false);
  const x$4 = Alignment_x;
  const y$4 = Alignment_y;
  geometry.Alignment = class Alignment extends core.Object {
    get x() {
      return this[x$4];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$4];
    }
    set y(value) {
      super.y = value;
    }
    alongSize(other) {
      if (other == null) dart.nullFailed(I[110], 324, 31, "other");
      let centerX = dart.notNull(other.x) / 2.0;
      let centerY = dart.notNull(other.y) / 2.0;
      return new point$.PdfPoint.new(centerX + dart.notNull(this.x) * centerX, centerY + dart.notNull(this.y) * centerY);
    }
    withinRect(rect) {
      if (rect == null) dart.nullFailed(I[110], 331, 31, "rect");
      let halfWidth = dart.notNull(rect.width) / 2.0;
      let halfHeight = dart.notNull(rect.height) / 2.0;
      return new point$.PdfPoint.new(dart.notNull(rect.left) + halfWidth + dart.notNull(this.x) * halfWidth, dart.notNull(rect.bottom) + halfHeight + dart.notNull(this.y) * halfHeight);
    }
    inscribe(size, rect) {
      if (size == null) dart.nullFailed(I[110], 342, 29, "size");
      if (rect == null) dart.nullFailed(I[110], 342, 43, "rect");
      let halfWidthDelta = (dart.notNull(rect.width) - dart.notNull(size.x)) / 2.0;
      let halfHeightDelta = (dart.notNull(rect.height) - dart.notNull(size.y)) / 2.0;
      return new rect$.PdfRect.new(dart.notNull(rect.x) + halfWidthDelta + dart.notNull(this.x) * halfWidthDelta, dart.notNull(rect.y) + halfHeightDelta + dart.notNull(this.y) * halfHeightDelta, size.x, size.y);
    }
    toString() {
      return "(" + dart.str(this.x) + ", " + dart.str(this.y) + ")";
    }
  };
  (geometry.Alignment.new = function(x, y) {
    if (x == null) dart.nullFailed(I[110], 288, 24, "x");
    if (y == null) dart.nullFailed(I[110], 288, 32, "y");
    this[x$4] = x;
    this[y$4] = y;
    ;
  }).prototype = geometry.Alignment.prototype;
  dart.addTypeTests(geometry.Alignment);
  dart.addTypeCaches(geometry.Alignment);
  dart.setMethodSignature(geometry.Alignment, () => ({
    __proto__: dart.getMethods(geometry.Alignment.__proto__),
    alongSize: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    withinRect: dart.fnType(point$.PdfPoint, [rect$.PdfRect]),
    inscribe: dart.fnType(rect$.PdfRect, [point$.PdfPoint, rect$.PdfRect])
  }));
  dart.setLibraryUri(geometry.Alignment, I[111]);
  dart.setFieldSignature(geometry.Alignment, () => ({
    __proto__: dart.getFields(geometry.Alignment.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(geometry.Alignment, ['toString']);
  dart.defineLazy(geometry.Alignment, {
    /*geometry.Alignment.topLeft*/get topLeft() {
      return C[18] || CT.C18;
    },
    /*geometry.Alignment.topCenter*/get topCenter() {
      return C[241] || CT.C241;
    },
    /*geometry.Alignment.topRight*/get topRight() {
      return C[135] || CT.C135;
    },
    /*geometry.Alignment.centerLeft*/get centerLeft() {
      return C[173] || CT.C173;
    },
    /*geometry.Alignment.center*/get center() {
      return C[19] || CT.C19;
    },
    /*geometry.Alignment.centerRight*/get centerRight() {
      return C[174] || CT.C174;
    },
    /*geometry.Alignment.bottomLeft*/get bottomLeft() {
      return C[242] || CT.C242;
    },
    /*geometry.Alignment.bottomCenter*/get bottomCenter() {
      return C[243] || CT.C243;
    },
    /*geometry.Alignment.bottomRight*/get bottomRight() {
      return C[244] || CT.C244;
    }
  }, false);
  geometry.FractionalOffset = class FractionalOffset extends geometry.Alignment {};
  (geometry.FractionalOffset.new = function(dx, dy) {
    if (dx == null) dart.nullFailed(I[110], 361, 33, "dx");
    if (dy == null) dart.nullFailed(I[110], 361, 44, "dy");
    geometry.FractionalOffset.__proto__.new.call(this, dart.notNull(dx) * 2 - 1, 1 - dart.notNull(dy) * 2);
    ;
  }).prototype = geometry.FractionalOffset.prototype;
  dart.addTypeTests(geometry.FractionalOffset);
  dart.addTypeCaches(geometry.FractionalOffset);
  dart.setLibraryUri(geometry.FractionalOffset, I[111]);
  var source$ = dart.privateName(geometry, "FittedSizes.source");
  var destination$ = dart.privateName(geometry, "FittedSizes.destination");
  geometry.FittedSizes = class FittedSizes extends core.Object {
    get source() {
      return this[source$];
    }
    set source(value) {
      super.source = value;
    }
    get destination() {
      return this[destination$];
    }
    set destination(value) {
      super.destination = value;
    }
  };
  (geometry.FittedSizes.new = function(source, destination) {
    this[source$] = source;
    this[destination$] = destination;
    ;
  }).prototype = geometry.FittedSizes.prototype;
  dart.addTypeTests(geometry.FittedSizes);
  dart.addTypeCaches(geometry.FittedSizes);
  dart.setLibraryUri(geometry.FittedSizes, I[111]);
  dart.setFieldSignature(geometry.FittedSizes, () => ({
    __proto__: dart.getFields(geometry.FittedSizes.__proto__),
    source: dart.finalFieldType(dart.nullable(point$.PdfPoint)),
    destination: dart.finalFieldType(dart.nullable(point$.PdfPoint))
  }));
  geometry.applyBoxFit = function applyBoxFit(fit, inputSize, outputSize) {
    if (fit == null) dart.nullFailed(I[110], 376, 32, "fit");
    if (inputSize == null) dart.nullFailed(I[110], 376, 46, "inputSize");
    if (outputSize == null) dart.nullFailed(I[110], 376, 66, "outputSize");
    if (dart.notNull(inputSize.y) <= 0.0 || dart.notNull(inputSize.x) <= 0.0 || dart.notNull(outputSize.y) <= 0.0 || dart.notNull(outputSize.x) <= 0.0) {
      return C[245] || CT.C245;
    }
    let sourceSize = null;
    let destinationSize = null;
    switch (fit) {
      case C[235] || CT.C235:
      {
        sourceSize = inputSize;
        destinationSize = outputSize;
        break;
      }
      case C[74] || CT.C74:
      {
        sourceSize = inputSize;
        if (dart.notNull(outputSize.x) / dart.notNull(outputSize.y) > dart.notNull(sourceSize.x) / dart.notNull(sourceSize.y)) {
          destinationSize = new point$.PdfPoint.new(dart.notNull(sourceSize.x) * dart.notNull(outputSize.y) / dart.notNull(sourceSize.y), outputSize.y);
        } else {
          destinationSize = new point$.PdfPoint.new(outputSize.x, dart.notNull(sourceSize.y) * dart.notNull(outputSize.x) / dart.notNull(sourceSize.x));
        }
        break;
      }
      case C[75] || CT.C75:
      {
        if (dart.notNull(outputSize.x) / dart.notNull(outputSize.y) > dart.notNull(inputSize.x) / dart.notNull(inputSize.y)) {
          sourceSize = new point$.PdfPoint.new(inputSize.x, dart.notNull(inputSize.x) * dart.notNull(outputSize.y) / dart.notNull(outputSize.x));
        } else {
          sourceSize = new point$.PdfPoint.new(dart.notNull(inputSize.y) * dart.notNull(outputSize.x) / dart.notNull(outputSize.y), inputSize.y);
        }
        destinationSize = outputSize;
        break;
      }
      case C[236] || CT.C236:
      {
        sourceSize = new point$.PdfPoint.new(inputSize.x, dart.notNull(inputSize.x) * dart.notNull(outputSize.y) / dart.notNull(outputSize.x));
        destinationSize = new point$.PdfPoint.new(outputSize.x, dart.notNull(sourceSize.y) * dart.notNull(outputSize.x) / dart.notNull(sourceSize.x));
        break;
      }
      case C[237] || CT.C237:
      {
        sourceSize = new point$.PdfPoint.new(dart.notNull(inputSize.y) * dart.notNull(outputSize.x) / dart.notNull(outputSize.y), inputSize.y);
        destinationSize = new point$.PdfPoint.new(dart.notNull(sourceSize.x) * dart.notNull(outputSize.y) / dart.notNull(sourceSize.y), outputSize.y);
        break;
      }
      case C[238] || CT.C238:
      {
        sourceSize = new point$.PdfPoint.new(math.min(core.double, inputSize.x, outputSize.x), math.min(core.double, inputSize.y, outputSize.y));
        destinationSize = sourceSize;
        break;
      }
      case C[239] || CT.C239:
      {
        sourceSize = inputSize;
        destinationSize = inputSize;
        let aspectRatio = dart.notNull(inputSize.x) / dart.notNull(inputSize.y);
        if (dart.notNull(destinationSize.y) > dart.notNull(outputSize.y)) {
          destinationSize = new point$.PdfPoint.new(dart.notNull(outputSize.y) * aspectRatio, outputSize.y);
        }
        if (dart.notNull(destinationSize.x) > dart.notNull(outputSize.x)) {
          destinationSize = new point$.PdfPoint.new(outputSize.x, dart.notNull(outputSize.x) / aspectRatio);
        }
        break;
      }
      default:
      {
        dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
      }
    }
    return new geometry.FittedSizes.new(sourceSize, destinationSize);
  };
  geometry.transformPoint = function transformPoint(transform, point) {
    if (transform == null) dart.nullFailed(I[110], 442, 33, "transform");
    if (point == null) dart.nullFailed(I[110], 442, 53, "point");
    let position3 = vector_math_64.Vector3.new(point.x, point.y, 0.0);
    let transformed3 = transform.perspectiveTransform(position3);
    return new point$.PdfPoint.new(transformed3.x, transformed3.y);
  };
  geometry.transformRect = function transformRect(transform, rect) {
    if (transform == null) dart.nullFailed(I[110], 448, 31, "transform");
    if (rect == null) dart.nullFailed(I[110], 448, 50, "rect");
    let point1 = geometry.transformPoint(transform, rect.topLeft);
    let point2 = geometry.transformPoint(transform, rect.topRight);
    let point3 = geometry.transformPoint(transform, rect.bottomLeft);
    let point4 = geometry.transformPoint(transform, rect.bottomRight);
    return rect$.PdfRect.fromLTRB(math.min(core.double, point1.x, math.min(core.double, point2.x, math.min(core.double, point3.x, point4.x))), math.min(core.double, point1.y, math.min(core.double, point2.y, math.min(core.double, point3.y, point4.y))), math.max(core.double, point1.x, math.max(core.double, point2.x, math.max(core.double, point3.x, point4.x))), math.max(core.double, point1.y, math.max(core.double, point2.y, math.max(core.double, point3.y, point4.y))));
  };
  var name$3 = dart.privateName(annotations, "Anchor.name");
  var description$ = dart.privateName(annotations, "Anchor.description");
  var zoom$ = dart.privateName(annotations, "Anchor.zoom");
  var setX$ = dart.privateName(annotations, "Anchor.setX");
  annotations.Anchor = class Anchor extends widget$.SingleChildWidget {
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    get description() {
      return this[description$];
    }
    set description(value) {
      super.description = value;
    }
    get zoom() {
      return this[zoom$];
    }
    set zoom(value) {
      super.zoom = value;
    }
    get setX() {
      return this[setX$];
    }
    set setX(value) {
      super.setX = value;
    }
    paint(context) {
      if (context == null) dart.nullFailed(I[112], 46, 22, "context");
      super.paint(context);
      this.paintChild(context);
      let mat = context.canvas.getTransform();
      let lt = mat.transform3(vector_math_64.Vector3.new(dart.nullCheck(this.box).left, dart.nullCheck(this.box).top, 0.0));
      context.document.pdfNames.addDest(this.name, context.page, {posX: dart.test(this.setX) ? lt.x : null, posY: lt.y, posZ: this.zoom});
      if (this.description != null) {
        let rb = mat.transform3(vector_math_64.Vector3.new(dart.nullCheck(this.box).right, dart.nullCheck(this.box).top, 0.0));
        let ibox = rect$.PdfRect.fromLTRB(lt.x, lt.y, rb.x, rb.y);
        new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotText.new({rect: ibox, content: dart.nullCheck(this.description)}));
      }
    }
  };
  (annotations.Anchor.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[112], 31, 19, "name");
    let description = opts && 'description' in opts ? opts.description : null;
    let zoom = opts && 'zoom' in opts ? opts.zoom : null;
    let setX = opts && 'setX' in opts ? opts.setX : false;
    if (setX == null) dart.nullFailed(I[112], 34, 10, "setX");
    this[name$3] = name;
    this[description$] = description;
    this[zoom$] = zoom;
    this[setX$] = setX;
    annotations.Anchor.__proto__.new.call(this, {child: child});
    ;
  }).prototype = annotations.Anchor.prototype;
  dart.addTypeTests(annotations.Anchor);
  dart.addTypeCaches(annotations.Anchor);
  dart.setLibraryUri(annotations.Anchor, I[113]);
  dart.setFieldSignature(annotations.Anchor, () => ({
    __proto__: dart.getFields(annotations.Anchor.__proto__),
    name: dart.finalFieldType(core.String),
    description: dart.finalFieldType(dart.nullable(core.String)),
    zoom: dart.finalFieldType(dart.nullable(core.double)),
    setX: dart.finalFieldType(core.bool)
  }));
  annotations.AnnotationBuilder = class AnnotationBuilder extends core.Object {};
  (annotations.AnnotationBuilder.new = function() {
    ;
  }).prototype = annotations.AnnotationBuilder.prototype;
  dart.addTypeTests(annotations.AnnotationBuilder);
  dart.addTypeCaches(annotations.AnnotationBuilder);
  dart.setLibraryUri(annotations.AnnotationBuilder, I[113]);
  var destination$0 = dart.privateName(annotations, "AnnotationLink.destination");
  annotations.AnnotationLink = class AnnotationLink extends annotations.AnnotationBuilder {
    get destination() {
      return this[destination$0];
    }
    set destination(value) {
      super.destination = value;
    }
    build(context, box) {
      if (context == null) dart.nullFailed(I[112], 78, 26, "context");
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotNamedLink.new({rect: context.localToGlobal(dart.nullCheck(box)), dest: this.destination}));
    }
  };
  (annotations.AnnotationLink.new = function(destination) {
    if (destination == null) dart.nullFailed(I[112], 73, 23, "destination");
    this[destination$0] = destination;
    ;
  }).prototype = annotations.AnnotationLink.prototype;
  dart.addTypeTests(annotations.AnnotationLink);
  dart.addTypeCaches(annotations.AnnotationLink);
  dart.setMethodSignature(annotations.AnnotationLink, () => ({
    __proto__: dart.getMethods(annotations.AnnotationLink.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationLink, I[113]);
  dart.setFieldSignature(annotations.AnnotationLink, () => ({
    __proto__: dart.getFields(annotations.AnnotationLink.__proto__),
    destination: dart.finalFieldType(core.String)
  }));
  var destination$1 = dart.privateName(annotations, "AnnotationUrl.destination");
  var date$1 = dart.privateName(annotations, "AnnotationUrl.date");
  var author$ = dart.privateName(annotations, "AnnotationUrl.author");
  var subject$ = dart.privateName(annotations, "AnnotationUrl.subject");
  annotations.AnnotationUrl = class AnnotationUrl extends annotations.AnnotationBuilder {
    get destination() {
      return this[destination$1];
    }
    set destination(value) {
      super.destination = value;
    }
    get date() {
      return this[date$1];
    }
    set date(value) {
      super.date = value;
    }
    get author() {
      return this[author$];
    }
    set author(value) {
      super.author = value;
    }
    get subject() {
      return this[subject$];
    }
    set subject(value) {
      super.subject = value;
    }
    build(context, box) {
      if (context == null) dart.nullFailed(I[112], 106, 26, "context");
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotUrlLink.new({rect: context.localToGlobal(dart.nullCheck(box)), url: this.destination, date: this.date, author: this.author, subject: this.subject}));
    }
  };
  (annotations.AnnotationUrl.new = function(destination, opts) {
    if (destination == null) dart.nullFailed(I[112], 91, 10, "destination");
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[destination$1] = destination;
    this[date$1] = date;
    this[subject$] = subject;
    this[author$] = author;
    ;
  }).prototype = annotations.AnnotationUrl.prototype;
  dart.addTypeTests(annotations.AnnotationUrl);
  dart.addTypeCaches(annotations.AnnotationUrl);
  dart.setMethodSignature(annotations.AnnotationUrl, () => ({
    __proto__: dart.getMethods(annotations.AnnotationUrl.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationUrl, I[113]);
  dart.setFieldSignature(annotations.AnnotationUrl, () => ({
    __proto__: dart.getFields(annotations.AnnotationUrl.__proto__),
    destination: dart.finalFieldType(core.String),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    subject: dart.finalFieldType(dart.nullable(core.String))
  }));
  var color$18 = dart.privateName(annotations, "AnnotationSquare.color");
  var interiorColor$ = dart.privateName(annotations, "AnnotationSquare.interiorColor");
  var border$4 = dart.privateName(annotations, "AnnotationSquare.border");
  var author$0 = dart.privateName(annotations, "AnnotationSquare.author");
  var date$2 = dart.privateName(annotations, "AnnotationSquare.date");
  var subject$0 = dart.privateName(annotations, "AnnotationSquare.subject");
  var content$ = dart.privateName(annotations, "AnnotationSquare.content");
  annotations.AnnotationSquare = class AnnotationSquare extends annotations.AnnotationBuilder {
    get color() {
      return this[color$18];
    }
    set color(value) {
      super.color = value;
    }
    get interiorColor() {
      return this[interiorColor$];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    get border() {
      return this[border$4];
    }
    set border(value) {
      super.border = value;
    }
    get author() {
      return this[author$0];
    }
    set author(value) {
      super.author = value;
    }
    get date() {
      return this[date$2];
    }
    set date(value) {
      super.date = value;
    }
    get subject() {
      return this[subject$0];
    }
    set subject(value) {
      super.subject = value;
    }
    get content() {
      return this[content$];
    }
    set content(value) {
      super.content = value;
    }
    build(context, box) {
      if (context == null) dart.nullFailed(I[112], 146, 26, "context");
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotSquare.new({rect: context.localToGlobal(dart.nullCheck(box)), border: this.border, color: this.color, interiorColor: this.interiorColor, date: this.date, author: this.author, subject: this.subject}));
    }
  };
  (annotations.AnnotationSquare.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[color$18] = color;
    this[interiorColor$] = interiorColor;
    this[border$4] = border;
    this[author$0] = author;
    this[date$2] = date;
    this[subject$0] = subject;
    this[content$] = content;
    ;
  }).prototype = annotations.AnnotationSquare.prototype;
  dart.addTypeTests(annotations.AnnotationSquare);
  dart.addTypeCaches(annotations.AnnotationSquare);
  dart.setMethodSignature(annotations.AnnotationSquare, () => ({
    __proto__: dart.getMethods(annotations.AnnotationSquare.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationSquare, I[113]);
  dart.setFieldSignature(annotations.AnnotationSquare, () => ({
    __proto__: dart.getFields(annotations.AnnotationSquare.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    content: dart.finalFieldType(dart.nullable(core.String))
  }));
  var color$19 = dart.privateName(annotations, "AnnotationCircle.color");
  var interiorColor$0 = dart.privateName(annotations, "AnnotationCircle.interiorColor");
  var border$5 = dart.privateName(annotations, "AnnotationCircle.border");
  var author$1 = dart.privateName(annotations, "AnnotationCircle.author");
  var date$3 = dart.privateName(annotations, "AnnotationCircle.date");
  var subject$1 = dart.privateName(annotations, "AnnotationCircle.subject");
  var content$0 = dart.privateName(annotations, "AnnotationCircle.content");
  annotations.AnnotationCircle = class AnnotationCircle extends annotations.AnnotationBuilder {
    get color() {
      return this[color$19];
    }
    set color(value) {
      super.color = value;
    }
    get interiorColor() {
      return this[interiorColor$0];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    get border() {
      return this[border$5];
    }
    set border(value) {
      super.border = value;
    }
    get author() {
      return this[author$1];
    }
    set author(value) {
      super.author = value;
    }
    get date() {
      return this[date$3];
    }
    set date(value) {
      super.date = value;
    }
    get subject() {
      return this[subject$1];
    }
    set subject(value) {
      super.subject = value;
    }
    get content() {
      return this[content$0];
    }
    set content(value) {
      super.content = value;
    }
    build(context, box) {
      if (context == null) dart.nullFailed(I[112], 188, 26, "context");
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotCircle.new({rect: context.localToGlobal(dart.nullCheck(box)), border: this.border, color: this.color, interiorColor: this.interiorColor, date: this.date, author: this.author, subject: this.subject}));
    }
  };
  (annotations.AnnotationCircle.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[color$19] = color;
    this[interiorColor$0] = interiorColor;
    this[border$5] = border;
    this[author$1] = author;
    this[date$3] = date;
    this[subject$1] = subject;
    this[content$0] = content;
    ;
  }).prototype = annotations.AnnotationCircle.prototype;
  dart.addTypeTests(annotations.AnnotationCircle);
  dart.addTypeCaches(annotations.AnnotationCircle);
  dart.setMethodSignature(annotations.AnnotationCircle, () => ({
    __proto__: dart.getMethods(annotations.AnnotationCircle.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationCircle, I[113]);
  dart.setFieldSignature(annotations.AnnotationCircle, () => ({
    __proto__: dart.getFields(annotations.AnnotationCircle.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    content: dart.finalFieldType(dart.nullable(core.String))
  }));
  var points$1 = dart.privateName(annotations, "AnnotationPolygon.points");
  var color$20 = dart.privateName(annotations, "AnnotationPolygon.color");
  var interiorColor$1 = dart.privateName(annotations, "AnnotationPolygon.interiorColor");
  var border$6 = dart.privateName(annotations, "AnnotationPolygon.border");
  var author$2 = dart.privateName(annotations, "AnnotationPolygon.author");
  var date$4 = dart.privateName(annotations, "AnnotationPolygon.date");
  var subject$2 = dart.privateName(annotations, "AnnotationPolygon.subject");
  var content$1 = dart.privateName(annotations, "AnnotationPolygon.content");
  annotations.AnnotationPolygon = class AnnotationPolygon extends annotations.AnnotationBuilder {
    get points() {
      return this[points$1];
    }
    set points(value) {
      super.points = value;
    }
    get color() {
      return this[color$20];
    }
    set color(value) {
      super.color = value;
    }
    get interiorColor() {
      return this[interiorColor$1];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    get border() {
      return this[border$6];
    }
    set border(value) {
      super.border = value;
    }
    get author() {
      return this[author$2];
    }
    set author(value) {
      super.author = value;
    }
    get date() {
      return this[date$4];
    }
    set date(value) {
      super.date = value;
    }
    get subject() {
      return this[subject$2];
    }
    set subject(value) {
      super.subject = value;
    }
    get content() {
      return this[content$1];
    }
    set content(value) {
      super.content = value;
    }
    build(context, box) {
      if (context == null) dart.nullFailed(I[112], 233, 26, "context");
      let globalPoints = this.points[$map](point$.PdfPoint, dart.fn(e => {
        if (e == null) dart.nullFailed(I[112], 235, 21, "e");
        return context.localToGlobalPoint(e);
      }, T$.PdfPointToPdfPoint()))[$toList]();
      let rect = context.localToGlobal(new rect$.PdfRect.new(this.points[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 238, 21, "point");
        return point.x;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[227] || CT.C227, core.double)), this.points[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 239, 21, "point");
        return point.y;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[227] || CT.C227, core.double)), dart.notNull(this.points[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 240, 21, "point");
        return point.x;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[228] || CT.C228, core.double))) - dart.notNull(this.points[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 241, 25, "point");
        return point.x;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[227] || CT.C227, core.double))), dart.notNull(this.points[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 242, 21, "point");
        return point.y;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[228] || CT.C228, core.double))) - dart.notNull(this.points[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 243, 25, "point");
        return point.y;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[227] || CT.C227, core.double)))));
      let pdfAnnotPolygon = new annotation.PdfAnnotPolygon.new(context.document, globalPoints, {rect: rect, border: this.border, color: this.color, interiorColor: this.interiorColor, date: this.date, author: this.author, subject: this.subject});
      return new annotation.PdfAnnot.new(context.page, pdfAnnotPolygon);
    }
  };
  (annotations.AnnotationPolygon.new = function(points, opts) {
    if (points == null) dart.nullFailed(I[112], 206, 10, "points");
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[points$1] = points;
    this[color$20] = color;
    this[interiorColor$1] = interiorColor;
    this[border$6] = border;
    this[author$2] = author;
    this[date$4] = date;
    this[subject$2] = subject;
    this[content$1] = content;
    ;
  }).prototype = annotations.AnnotationPolygon.prototype;
  dart.addTypeTests(annotations.AnnotationPolygon);
  dart.addTypeCaches(annotations.AnnotationPolygon);
  dart.setMethodSignature(annotations.AnnotationPolygon, () => ({
    __proto__: dart.getMethods(annotations.AnnotationPolygon.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationPolygon, I[113]);
  dart.setFieldSignature(annotations.AnnotationPolygon, () => ({
    __proto__: dart.getFields(annotations.AnnotationPolygon.__proto__),
    points: dart.finalFieldType(core.List$(point$.PdfPoint)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    content: dart.finalFieldType(dart.nullable(core.String))
  }));
  var points$2 = dart.privateName(annotations, "AnnotationInk.points");
  var color$21 = dart.privateName(annotations, "AnnotationInk.color");
  var border$7 = dart.privateName(annotations, "AnnotationInk.border");
  var author$3 = dart.privateName(annotations, "AnnotationInk.author");
  var date$5 = dart.privateName(annotations, "AnnotationInk.date");
  var subject$3 = dart.privateName(annotations, "AnnotationInk.subject");
  var content$2 = dart.privateName(annotations, "AnnotationInk.content");
  annotations.AnnotationInk = class AnnotationInk extends annotations.AnnotationBuilder {
    get points() {
      return this[points$2];
    }
    set points(value) {
      super.points = value;
    }
    get color() {
      return this[color$21];
    }
    set color(value) {
      super.color = value;
    }
    get border() {
      return this[border$7];
    }
    set border(value) {
      super.border = value;
    }
    get author() {
      return this[author$3];
    }
    set author(value) {
      super.author = value;
    }
    get date() {
      return this[date$5];
    }
    set date(value) {
      super.date = value;
    }
    get subject() {
      return this[subject$3];
    }
    set subject(value) {
      super.subject = value;
    }
    get content() {
      return this[content$2];
    }
    set content(value) {
      super.content = value;
    }
    build(context, box) {
      if (context == null) dart.nullFailed(I[112], 287, 26, "context");
      let globalPoints = this.points[$map](T$.ListOfPdfPoint(), dart.fn(pList => {
        if (pList == null) dart.nullFailed(I[112], 289, 15, "pList");
        return pList[$map](point$.PdfPoint, dart.fn(e => {
          if (e == null) dart.nullFailed(I[112], 290, 19, "e");
          return context.localToGlobalPoint(e);
        }, T$.PdfPointToPdfPoint()))[$toList]({growable: false});
      }, T$.ListOfPdfPointToListOfPdfPoint()))[$toList]({growable: false});
      let allPoints = this.points[$expand](point$.PdfPoint, dart.fn(pointList => {
        if (pointList == null) dart.nullFailed(I[112], 295, 24, "pointList");
        return pointList;
      }, T$.ListOfPdfPointToListOfPdfPoint()))[$toList]({growable: false});
      let minX = allPoints[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 297, 33, "point");
        return point.x;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[227] || CT.C227, core.double));
      let minY = allPoints[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 298, 33, "point");
        return point.y;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[227] || CT.C227, core.double));
      let maxX = allPoints[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 299, 33, "point");
        return point.x;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[228] || CT.C228, core.double));
      let maxY = allPoints[$map](core.double, dart.fn(point => {
        if (point == null) dart.nullFailed(I[112], 300, 33, "point");
        return point.y;
      }, T$.PdfPointTodouble()))[$reduce](dart.gbind(C[228] || CT.C228, core.double));
      let rect = context.localToGlobal(new rect$.PdfRect.new(minX, minY, dart.notNull(maxX) - dart.notNull(minX), dart.notNull(maxY) - dart.notNull(minY)));
      let pdfAnnotInk = new annotation.PdfAnnotInk.new(context.document, globalPoints, {rect: rect, border: this.border, color: this.color, date: this.date, author: this.author, subject: this.subject, content: this.content});
      return new annotation.PdfAnnot.new(context.page, pdfAnnotInk);
    }
  };
  (annotations.AnnotationInk.new = function(points, opts) {
    if (points == null) dart.nullFailed(I[112], 263, 10, "points");
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[points$2] = points;
    this[color$21] = color;
    this[border$7] = border;
    this[author$3] = author;
    this[date$5] = date;
    this[subject$3] = subject;
    this[content$2] = content;
    ;
  }).prototype = annotations.AnnotationInk.prototype;
  dart.addTypeTests(annotations.AnnotationInk);
  dart.addTypeCaches(annotations.AnnotationInk);
  dart.setMethodSignature(annotations.AnnotationInk, () => ({
    __proto__: dart.getMethods(annotations.AnnotationInk.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationInk, I[113]);
  dart.setFieldSignature(annotations.AnnotationInk, () => ({
    __proto__: dart.getFields(annotations.AnnotationInk.__proto__),
    points: dart.finalFieldType(core.List$(core.List$(point$.PdfPoint))),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    content: dart.finalFieldType(dart.nullable(core.String))
  }));
  var name$4 = dart.privateName(annotations, "AnnotationTextField.name");
  var border$8 = dart.privateName(annotations, "AnnotationTextField.border");
  var flags$2 = dart.privateName(annotations, "AnnotationTextField.flags");
  var date$6 = dart.privateName(annotations, "AnnotationTextField.date");
  var color$22 = dart.privateName(annotations, "AnnotationTextField.color");
  var backgroundColor$3 = dart.privateName(annotations, "AnnotationTextField.backgroundColor");
  var highlighting$1 = dart.privateName(annotations, "AnnotationTextField.highlighting");
  var maxLength$0 = dart.privateName(annotations, "AnnotationTextField.maxLength");
  var value$7 = dart.privateName(annotations, "AnnotationTextField.value");
  var defaultValue$0 = dart.privateName(annotations, "AnnotationTextField.defaultValue");
  var textStyle$4 = dart.privateName(annotations, "AnnotationTextField.textStyle");
  var alternateName$0 = dart.privateName(annotations, "AnnotationTextField.alternateName");
  var mappingName$0 = dart.privateName(annotations, "AnnotationTextField.mappingName");
  var fieldFlags$0 = dart.privateName(annotations, "AnnotationTextField.fieldFlags");
  var author$4 = dart.privateName(annotations, "AnnotationTextField.author");
  var subject$4 = dart.privateName(annotations, "AnnotationTextField.subject");
  annotations.AnnotationTextField = class AnnotationTextField extends annotations.AnnotationBuilder {
    get name() {
      return this[name$4];
    }
    set name(value) {
      super.name = value;
    }
    get border() {
      return this[border$8];
    }
    set border(value) {
      super.border = value;
    }
    get flags() {
      return this[flags$2];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$6];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$22];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$3];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get highlighting() {
      return this[highlighting$1];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get maxLength() {
      return this[maxLength$0];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get value() {
      return this[value$7];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$0];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    get textStyle() {
      return this[textStyle$4];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get alternateName() {
      return this[alternateName$0];
    }
    set alternateName(value) {
      super.alternateName = value;
    }
    get mappingName() {
      return this[mappingName$0];
    }
    set mappingName(value) {
      super.mappingName = value;
    }
    get fieldFlags() {
      return this[fieldFlags$0];
    }
    set fieldFlags(value) {
      super.fieldFlags = value;
    }
    get author() {
      return this[author$4];
    }
    set author(value) {
      super.author = value;
    }
    get subject() {
      return this[subject$4];
    }
    set subject(value) {
      super.subject = value;
    }
    build(context, box) {
      if (context == null) dart.nullFailed(I[112], 373, 26, "context");
      let _textStyle = theme$.Theme.of(context).defaultTextStyle.merge(this.textStyle);
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfTextField.new({rect: context.localToGlobal(dart.nullCheck(box)), fieldName: this.name, border: this.border, flags: this.flags, date: this.date, author: this.author, subject: this.subject, color: this.color, backgroundColor: this.backgroundColor, highlighting: this.highlighting, maxLength: this.maxLength, alternateName: this.alternateName, mappingName: this.mappingName, fieldFlags: this.fieldFlags, value: this.value, defaultValue: this.defaultValue, font: dart.nullCheck(dart.nullCheck(_textStyle.font).getFont(context)), fontSize: dart.nullCheck(_textStyle.fontSize), textColor: dart.nullCheck(_textStyle.color)}));
    }
  };
  (annotations.AnnotationTextField.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    this[name$4] = name;
    this[border$8] = border;
    this[flags$2] = flags;
    this[date$6] = date;
    this[subject$4] = subject;
    this[author$4] = author;
    this[color$22] = color;
    this[backgroundColor$3] = backgroundColor;
    this[highlighting$1] = highlighting;
    this[maxLength$0] = maxLength;
    this[alternateName$0] = alternateName;
    this[mappingName$0] = mappingName;
    this[fieldFlags$0] = fieldFlags;
    this[value$7] = value;
    this[defaultValue$0] = defaultValue;
    this[textStyle$4] = textStyle;
    ;
  }).prototype = annotations.AnnotationTextField.prototype;
  dart.addTypeTests(annotations.AnnotationTextField);
  dart.addTypeCaches(annotations.AnnotationTextField);
  dart.setMethodSignature(annotations.AnnotationTextField, () => ({
    __proto__: dart.getMethods(annotations.AnnotationTextField.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationTextField, I[113]);
  dart.setFieldSignature(annotations.AnnotationTextField, () => ({
    __proto__: dart.getFields(annotations.AnnotationTextField.__proto__),
    name: dart.finalFieldType(dart.nullable(core.String)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags))),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    highlighting: dart.finalFieldType(dart.nullable(annotation.PdfAnnotHighlighting)),
    maxLength: dart.finalFieldType(dart.nullable(core.int)),
    value: dart.finalFieldType(dart.nullable(core.String)),
    defaultValue: dart.finalFieldType(dart.nullable(core.String)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    alternateName: dart.finalFieldType(dart.nullable(core.String)),
    mappingName: dart.finalFieldType(dart.nullable(core.String)),
    fieldFlags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfFieldFlags))),
    author: dart.finalFieldType(dart.nullable(core.String)),
    subject: dart.finalFieldType(dart.nullable(core.String))
  }));
  var builder$1 = dart.privateName(annotations, "Annotation.builder");
  annotations.Annotation = class Annotation extends widget$.SingleChildWidget {
    get builder() {
      return this[builder$1];
    }
    set builder(value) {
      super.builder = value;
    }
    debugPaint(context) {
      let t76;
      if (context == null) dart.nullFailed(I[112], 409, 27, "context");
      t76 = context.canvas;
      (() => {
        t76.setFillColor(colors.PdfColors.pink);
        t76.drawBox(dart.nullCheck(this.box));
        t76.fillPath();
        return t76;
      })();
    }
    paint(context) {
      let t76;
      if (context == null) dart.nullFailed(I[112], 417, 22, "context");
      super.paint(context);
      this.paintChild(context);
      t76 = this.builder;
      t76 == null ? null : t76.build(context, this.box);
    }
  };
  (annotations.Annotation.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[builder$1] = builder;
    annotations.Annotation.__proto__.new.call(this, {child: child});
    ;
  }).prototype = annotations.Annotation.prototype;
  dart.addTypeTests(annotations.Annotation);
  dart.addTypeCaches(annotations.Annotation);
  dart.setLibraryUri(annotations.Annotation, I[113]);
  dart.setFieldSignature(annotations.Annotation, () => ({
    __proto__: dart.getFields(annotations.Annotation.__proto__),
    builder: dart.finalFieldType(dart.nullable(annotations.AnnotationBuilder))
  }));
  annotations.Link = class Link extends annotations.Annotation {};
  (annotations.Link.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[112], 425, 25, "child");
    let destination = opts && 'destination' in opts ? opts.destination : null;
    if (destination == null) dart.nullFailed(I[112], 425, 48, "destination");
    annotations.Link.__proto__.new.call(this, {child: child, builder: new annotations.AnnotationLink.new(destination)});
    ;
  }).prototype = annotations.Link.prototype;
  dart.addTypeTests(annotations.Link);
  dart.addTypeCaches(annotations.Link);
  dart.setLibraryUri(annotations.Link, I[113]);
  annotations.UrlLink = class UrlLink extends annotations.Annotation {};
  (annotations.UrlLink.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[112], 431, 21, "child");
    let destination = opts && 'destination' in opts ? opts.destination : null;
    if (destination == null) dart.nullFailed(I[112], 432, 21, "destination");
    annotations.UrlLink.__proto__.new.call(this, {child: child, builder: new annotations.AnnotationUrl.new(destination)});
    ;
  }).prototype = annotations.UrlLink.prototype;
  dart.addTypeTests(annotations.UrlLink);
  dart.addTypeCaches(annotations.UrlLink);
  dart.setLibraryUri(annotations.UrlLink, I[113]);
  annotations.SquareAnnotation = class SquareAnnotation extends annotations.Annotation {};
  (annotations.SquareAnnotation.new = function(opts) {
    let t77, t77$, t76;
    let child = opts && 'child' in opts ? opts.child : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    annotations.SquareAnnotation.__proto__.new.call(this, {child: (t76 = child, t76 == null ? new shape.Rectangle.new({fillColor: interiorColor, strokeWidth: (t77$ = (t77 = border, t77 == null ? null : t77.width), t77$ == null ? 1.0 : t77$), strokeColor: color}) : t76), builder: new annotations.AnnotationSquare.new({color: color, interiorColor: interiorColor, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.SquareAnnotation.prototype;
  dart.addTypeTests(annotations.SquareAnnotation);
  dart.addTypeCaches(annotations.SquareAnnotation);
  dart.setLibraryUri(annotations.SquareAnnotation, I[113]);
  annotations.CircleAnnotation = class CircleAnnotation extends annotations.Annotation {};
  (annotations.CircleAnnotation.new = function(opts) {
    let t77, t77$, t76;
    let child = opts && 'child' in opts ? opts.child : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    annotations.CircleAnnotation.__proto__.new.call(this, {child: (t76 = child, t76 == null ? new shape.Circle.new({fillColor: interiorColor, strokeWidth: (t77$ = (t77 = border, t77 == null ? null : t77.width), t77$ == null ? 1.0 : t77$), strokeColor: color}) : t76), builder: new annotations.AnnotationCircle.new({color: color, interiorColor: interiorColor, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.CircleAnnotation.prototype;
  dart.addTypeTests(annotations.CircleAnnotation);
  dart.addTypeCaches(annotations.CircleAnnotation);
  dart.setLibraryUri(annotations.CircleAnnotation, I[113]);
  annotations.PolygonAnnotation = class PolygonAnnotation extends annotations.Annotation {};
  (annotations.PolygonAnnotation.new = function(opts) {
    let t77, t77$, t76;
    let points = opts && 'points' in opts ? opts.points : null;
    if (points == null) dart.nullFailed(I[112], 494, 29, "points");
    let child = opts && 'child' in opts ? opts.child : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    annotations.PolygonAnnotation.__proto__.new.call(this, {child: (t76 = child, t76 == null ? new shape.Polygon.new({points: points, strokeColor: color, fillColor: interiorColor, strokeWidth: (t77$ = (t77 = border, t77 == null ? null : t77.width), t77$ == null ? 1.0 : t77$)}) : t76), builder: new annotations.AnnotationPolygon.new(points, {color: color, interiorColor: interiorColor, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.PolygonAnnotation.prototype;
  dart.addTypeTests(annotations.PolygonAnnotation);
  dart.addTypeCaches(annotations.PolygonAnnotation);
  dart.setLibraryUri(annotations.PolygonAnnotation, I[113]);
  annotations.PolyLineAnnotation = class PolyLineAnnotation extends annotations.Annotation {};
  (annotations.PolyLineAnnotation.new = function(opts) {
    let t76, t76$;
    let points = opts && 'points' in opts ? opts.points : null;
    if (points == null) dart.nullFailed(I[112], 525, 29, "points");
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    annotations.PolyLineAnnotation.__proto__.new.call(this, {child: new shape.Polygon.new({points: points, strokeColor: color, close: false, strokeWidth: (t76$ = (t76 = border, t76 == null ? null : t76.width), t76$ == null ? 1.0 : t76$)}), builder: new annotations.AnnotationPolygon.new(points, {color: color, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.PolyLineAnnotation.prototype;
  dart.addTypeTests(annotations.PolyLineAnnotation);
  dart.addTypeCaches(annotations.PolyLineAnnotation);
  dart.setLibraryUri(annotations.PolyLineAnnotation, I[113]);
  annotations.InkAnnotation = class InkAnnotation extends annotations.Annotation {};
  (annotations.InkAnnotation.new = function(opts) {
    let t77, t77$, t76;
    let points = opts && 'points' in opts ? opts.points : null;
    if (points == null) dart.nullFailed(I[112], 552, 35, "points");
    let child = opts && 'child' in opts ? opts.child : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    annotations.InkAnnotation.__proto__.new.call(this, {child: (t76 = child, t76 == null ? new shape.InkList.new({points: points, strokeColor: color, strokeWidth: (t77$ = (t77 = border, t77 == null ? null : t77.width), t77$ == null ? 1.0 : t77$)}) : t76), builder: new annotations.AnnotationInk.new(points, {color: color, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.InkAnnotation.prototype;
  dart.addTypeTests(annotations.InkAnnotation);
  dart.addTypeCaches(annotations.InkAnnotation);
  dart.setLibraryUri(annotations.InkAnnotation, I[113]);
  var title$2 = dart.privateName(annotations, "Outline.title");
  var level$0 = dart.privateName(annotations, "Outline.level");
  var color$23 = dart.privateName(annotations, "Outline.color");
  var style$5 = dart.privateName(annotations, "Outline.style");
  var _outline = dart.privateName(annotations, "_outline");
  var _buildOutline = dart.privateName(annotations, "_buildOutline");
  annotations.Outline = class Outline extends annotations.Anchor {
    get title() {
      return this[title$2];
    }
    set title(value) {
      super.title = value;
    }
    get level() {
      return this[level$0];
    }
    set level(value) {
      super.level = value;
    }
    get color() {
      return this[color$23];
    }
    set color(value) {
      super.color = value;
    }
    get style() {
      return this[style$5];
    }
    set style(value) {
      super.style = value;
    }
    layout(context, constraints, opts) {
      if (context == null) dart.nullFailed(I[112], 600, 23, "context");
      if (constraints == null) dart.nullFailed(I[112], 600, 47, "constraints");
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (parentUsesSize == null) dart.nullFailed(I[112], 601, 13, "parentUsesSize");
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      this[_buildOutline](context);
    }
    debugPaint(context) {
      let t76;
      if (context == null) dart.nullFailed(I[112], 607, 27, "context");
      t76 = context.canvas;
      (() => {
        t76.setFillColor(colors.PdfColors.pink100);
        t76.drawBox(dart.nullCheck(this.box));
        t76.fillPath();
        return t76;
      })();
    }
    [_buildOutline](context) {
      if (context == null) dart.nullFailed(I[112], 614, 30, "context");
      if (this[_outline] != null) {
        return;
      }
      this[_outline] = new outline.PdfOutline.new(context.document, {title: this.title, anchor: this.name, color: this.color, style: this.style, page: context.pageNumber});
      let parent = context.document.outline;
      let l = this.level;
      while (dart.notNull(l) > 0) {
        if (parent.effectiveLevel == l) {
          break;
        }
        if (dart.test(parent.outlines[$isEmpty])) {
          parent.effectiveLevel = this.level;
          break;
        }
        parent = parent.outlines[$last];
        l = dart.notNull(l) - 1;
      }
      parent.add(dart.nullCheck(this[_outline]));
    }
  };
  (annotations.Outline.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[112], 581, 21, "name");
    let title = opts && 'title' in opts ? opts.title : null;
    if (title == null) dart.nullFailed(I[112], 582, 19, "title");
    let level = opts && 'level' in opts ? opts.level : 0;
    if (level == null) dart.nullFailed(I[112], 583, 10, "level");
    let color = opts && 'color' in opts ? opts.color : null;
    let style = opts && 'style' in opts ? opts.style : C[104] || CT.C104;
    if (style == null) dart.nullFailed(I[112], 585, 10, "style");
    this[_outline] = null;
    this[title$2] = title;
    this[level$0] = level;
    this[color$23] = color;
    this[style$5] = style;
    if (!(dart.notNull(level) >= 0)) dart.assertFailed(null, I[112], 586, 16, "level >= 0");
    annotations.Outline.__proto__.new.call(this, {child: child, name: name, setX: true});
    ;
  }).prototype = annotations.Outline.prototype;
  dart.addTypeTests(annotations.Outline);
  dart.addTypeCaches(annotations.Outline);
  dart.setMethodSignature(annotations.Outline, () => ({
    __proto__: dart.getMethods(annotations.Outline.__proto__),
    [_buildOutline]: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setLibraryUri(annotations.Outline, I[113]);
  dart.setFieldSignature(annotations.Outline, () => ({
    __proto__: dart.getFields(annotations.Outline.__proto__),
    title: dart.finalFieldType(core.String),
    level: dart.finalFieldType(core.int),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    style: dart.finalFieldType(outline.PdfOutlineStyle),
    [_outline]: dart.fieldType(dart.nullable(outline.PdfOutline))
  }));
  dart.trackLibraries("packages/pdf/src/widgets/table.dart", {
    "package:pdf/src/widgets/table.dart": table,
    "package:pdf/src/widgets/progress.dart": progress,
    "package:pdf/src/svg/use.dart": use,
    "package:pdf/src/svg/text.dart": text$0,
    "package:pdf/src/svg/symbol.dart": symbol,
    "package:pdf/src/svg/path.dart": path,
    "package:pdf/src/svg/image.dart": image$0,
    "package:pdf/src/svg/transform.dart": transform$,
    "package:pdf/src/svg/group.dart": group,
    "package:pdf/src/svg/clip_path.dart": clip_path,
    "package:pdf/src/svg/parser.dart": parser$,
    "package:pdf/src/svg/mask_path.dart": mask_path,
    "package:pdf/src/svg/brush.dart": brush$,
    "package:pdf/src/svg/operation.dart": operation,
    "package:pdf/src/svg/gradient.dart": gradient$,
    "package:pdf/src/svg/color.dart": color$0,
    "package:pdf/src/svg/painter.dart": painter$,
    "package:pdf/src/widgets/svg.dart": svg$,
    "package:pdf/src/widgets/placeholders.dart": placeholders,
    "package:pdf/src/widgets/partitions.dart": partitions,
    "package:pdf/src/widgets/image.dart": image$1,
    "package:pdf/src/widgets/grid_view.dart": grid_view,
    "package:pdf/src/widgets/grid_paper.dart": grid_paper,
    "package:pdf/src/widgets/forms.dart": forms,
    "package:pdf/src/widgets/content.dart": content,
    "package:pdf/src/widgets/clip.dart": clip,
    "package:pdf/src/widgets/chart/pie_chart.dart": pie_chart,
    "package:pdf/src/widgets/wrap.dart": wrap$,
    "package:pdf/src/widgets/chart/legend.dart": legend,
    "package:pdf/src/widgets/chart/grid_radial.dart": grid_radial,
    "package:pdf/src/widgets/chart/line_chart.dart": line_chart,
    "package:pdf/src/widgets/chart/grid_axis.dart": grid_axis,
    "package:pdf/src/widgets/chart/grid_cartesian.dart": grid_cartesian,
    "package:pdf/src/widgets/stack.dart": stack,
    "package:pdf/src/widgets/chart/chart.dart": chart,
    "package:pdf/src/widgets/chart/bar_chart.dart": bar_chart,
    "package:pdf/src/widgets/barcode.dart": barcode$,
    "package:pdf/src/widgets/shape.dart": shape,
    "package:pdf/src/widgets/container.dart": container$,
    "package:pdf/src/widgets/icon.dart": icon$,
    "package:pdf/src/widgets/theme.dart": theme$,
    "package:pdf/src/widgets/font.dart": font$,
    "package:pdf/src/widgets/image_provider.dart": image_provider,
    "package:pdf/src/widgets/decoration.dart": decoration$,
    "package:pdf/src/widgets/text_style.dart": text_style,
    "package:pdf/src/widgets/flex.dart": flex$,
    "package:pdf/src/widgets/multi_page.dart": multi_page,
    "package:pdf/src/widgets/text.dart": text$1,
    "package:pdf/src/widgets/page_theme.dart": page_theme,
    "package:pdf/src/widgets/page.dart": page$,
    "package:pdf/src/widgets/document.dart": document$0,
    "package:pdf/src/widgets/widget.dart": widget$,
    "package:pdf/src/widgets/border_radius.dart": border_radius,
    "package:pdf/src/widgets/box_border.dart": box_border,
    "package:pdf/src/widgets/basic.dart": basic,
    "package:pdf/src/widgets/geometry.dart": geometry,
    "package:pdf/src/widgets/annotations.dart": annotations,
    "package:pdf/widgets.dart": widgets
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["table.dart","box_border.dart","multi_page.dart","widget.dart","progress.dart","../svg/operation.dart","../svg/use.dart","../svg/text.dart","../svg/group.dart","../svg/symbol.dart","../svg/path.dart","../svg/image.dart","../svg/transform.dart","../svg/clip_path.dart","../svg/parser.dart","../svg/mask_path.dart","../svg/brush.dart","../svg/gradient.dart","../svg/color.dart","../svg/painter.dart","svg.dart","decoration.dart","placeholders.dart","partitions.dart","image.dart","grid_view.dart","grid_paper.dart","forms.dart","content.dart","clip.dart","chart/chart.dart","chart/pie_chart.dart","wrap.dart","chart/legend.dart","chart/grid_radial.dart","chart/line_chart.dart","chart/grid_axis.dart","chart/grid_cartesian.dart","stack.dart","chart/bar_chart.dart","barcode.dart","shape.dart","container.dart","icon.dart","theme.dart","font.dart","image_provider.dart","text_style.dart","flex.dart","page.dart","text.dart","page_theme.dart","document.dart","border_radius.dart","basic.dart","geometry.dart","annotations.dart"],"names":[],"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","file":"../../../../../../../../../E:/packages/pdf/src/widgets/table.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__table: table,
    src__widgets__progress: progress,
    src__svg__use: use,
    src__svg__text: text$0,
    src__svg__symbol: symbol,
    src__svg__path: path,
    src__svg__image: image$0,
    src__svg__transform: transform$,
    src__svg__group: group,
    src__svg__clip_path: clip_path,
    src__svg__parser: parser$,
    src__svg__mask_path: mask_path,
    src__svg__brush: brush$,
    src__svg__operation: operation,
    src__svg__gradient: gradient$,
    src__svg__color: color$0,
    src__svg__painter: painter$,
    src__widgets__svg: svg$,
    src__widgets__placeholders: placeholders,
    src__widgets__partitions: partitions,
    src__widgets__image: image$1,
    src__widgets__grid_view: grid_view,
    src__widgets__grid_paper: grid_paper,
    src__widgets__forms: forms,
    src__widgets__content: content,
    src__widgets__clip: clip,
    src__widgets__chart__pie_chart: pie_chart,
    src__widgets__wrap: wrap$,
    src__widgets__chart__legend: legend,
    src__widgets__chart__grid_radial: grid_radial,
    src__widgets__chart__line_chart: line_chart,
    src__widgets__chart__grid_axis: grid_axis,
    src__widgets__chart__grid_cartesian: grid_cartesian,
    src__widgets__stack: stack,
    src__widgets__chart__chart: chart,
    src__widgets__chart__bar_chart: bar_chart,
    src__widgets__barcode: barcode$,
    src__widgets__shape: shape,
    src__widgets__container: container$,
    src__widgets__icon: icon$,
    src__widgets__theme: theme$,
    src__widgets__font: font$,
    src__widgets__image_provider: image_provider,
    src__widgets__decoration: decoration$,
    src__widgets__text_style: text_style,
    src__widgets__flex: flex$,
    src__widgets__multi_page: multi_page,
    src__widgets__text: text$1,
    src__widgets__page_theme: page_theme,
    src__widgets__page: page$,
    src__widgets__document: document$0,
    src__widgets__widget: widget$,
    src__widgets__border_radius: border_radius,
    src__widgets__box_border: box_border,
    src__widgets__basic: basic,
    src__widgets__geometry: geometry,
    src__widgets__annotations: annotations,
    widgets: widgets
  };
}));

//# sourceMappingURL=table.dart.lib.js.map
