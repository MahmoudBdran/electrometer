define(['dart_sdk', 'packages/pdf/src/pdf/stream.dart', 'packages/archive/src/zlib_encoder.dart', 'packages/pdf/src/pdf/rect.dart', 'packages/pdf/src/pdf/color.dart', 'packages/pdf/src/pdf/point.dart', 'packages/vector_math/vector_math_64.dart', 'packages/image/src/image.dart', 'packages/image/src/formats/jpeg_decoder.dart', 'packages/image/src/transform/copy_crop.dart', 'packages/path_parsing/src/path_parsing.dart', 'packages/pdf/src/pdf/ttf_parser.dart', 'packages/pdf/src/pdf/font_metrics.dart', 'packages/pdf/src/pdf/arabic.dart', 'packages/pdf/src/pdf/ttf_writer.dart', 'packages/pdf/src/pdf/type1_fonts.dart', 'packages/pdf/src/pdf/page_format.dart', 'packages/pdf/src/pdf/ascii85.dart', 'packages/xml/src/xml/utils/node_list.dart', 'packages/crypto/src/sha256.dart'], (function load__packages__pdf__src__pdf__xref_dart(dart_sdk, packages__pdf__src__pdf__stream$46dart, packages__archive__src__zlib_encoder$46dart, packages__pdf__src__pdf__rect$46dart, packages__pdf__src__pdf__color$46dart, packages__pdf__src__pdf__point$46dart, packages__vector_math__vector_math_64$46dart, packages__image__src__image$46dart, packages__image__src__formats__jpeg_decoder$46dart, packages__image__src__transform__copy_crop$46dart, packages__path_parsing__src__path_parsing$46dart, packages__pdf__src__pdf__ttf_parser$46dart, packages__pdf__src__pdf__font_metrics$46dart, packages__pdf__src__pdf__arabic$46dart, packages__pdf__src__pdf__ttf_writer$46dart, packages__pdf__src__pdf__type1_fonts$46dart, packages__pdf__src__pdf__page_format$46dart, packages__pdf__src__pdf__ascii85$46dart, packages__xml__src__xml__utils__node_list$46dart, packages__crypto__src__sha256$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const _native_typed_data = dart_sdk._native_typed_data;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const convert = dart_sdk.convert;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const stream = packages__pdf__src__pdf__stream$46dart.src__pdf__stream;
  const zlib_encoder = packages__archive__src__zlib_encoder$46dart.src__zlib_encoder;
  const rect = packages__pdf__src__pdf__rect$46dart.src__pdf__rect;
  const color$ = packages__pdf__src__pdf__color$46dart.src__pdf__color;
  const point = packages__pdf__src__pdf__point$46dart.src__pdf__point;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const image$ = packages__image__src__image$46dart.src__image;
  const jpeg_decoder = packages__image__src__formats__jpeg_decoder$46dart.src__formats__jpeg_decoder;
  const formats = packages__image__src__transform__copy_crop$46dart.src__formats__formats;
  const path_parsing = packages__path_parsing__src__path_parsing$46dart.src__path_parsing;
  const ttf_parser = packages__pdf__src__pdf__ttf_parser$46dart.src__pdf__ttf_parser;
  const font_metrics = packages__pdf__src__pdf__font_metrics$46dart.src__pdf__font_metrics;
  const arabic = packages__pdf__src__pdf__arabic$46dart.src__pdf__arabic;
  const ttf_writer = packages__pdf__src__pdf__ttf_writer$46dart.src__pdf__ttf_writer;
  const type1_fonts = packages__pdf__src__pdf__type1_fonts$46dart.src__pdf__type1_fonts;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  const ascii85 = packages__pdf__src__pdf__ascii85$46dart.src__pdf__ascii85;
  const document = packages__xml__src__xml__utils__node_list$46dart.src__xml__nodes__document;
  const sha256 = packages__crypto__src__sha256$46dart.src__sha256;
  var xref = Object.create(dart.library);
  var signature = Object.create(dart.library);
  var output = Object.create(dart.library);
  var js = Object.create(dart.library);
  var info = Object.create(dart.library);
  var encryption = Object.create(dart.library);
  var document_parser = Object.create(dart.library);
  var page_list = Object.create(dart.library);
  var outline = Object.create(dart.library);
  var shading = Object.create(dart.library);
  var pattern = Object.create(dart.library);
  var xobject = Object.create(dart.library);
  var exif = Object.create(dart.library);
  var image$0 = Object.create(dart.library);
  var graphics = Object.create(dart.library);
  var smask = Object.create(dart.library);
  var $function = Object.create(dart.library);
  var graphic_state = Object.create(dart.library);
  var unicode_cmap = Object.create(dart.library);
  var object_stream = Object.create(dart.library);
  var font_descriptor = Object.create(dart.library);
  var array$ = Object.create(dart.library);
  var ttffont = Object.create(dart.library);
  var type1_font = Object.create(dart.library);
  var font = Object.create(dart.library);
  var graphic_stream = Object.create(dart.library);
  var page = Object.create(dart.library);
  var object_dict = Object.create(dart.library);
  var names = Object.create(dart.library);
  var metadata$ = Object.create(dart.library);
  var catalog = Object.create(dart.library);
  var document$ = Object.create(dart.library);
  var object = Object.create(dart.library);
  var data_types = Object.create(dart.library);
  var border = Object.create(dart.library);
  var annotation = Object.create(dart.library);
  var pdf = Object.create(dart.library);
  var $toString = dartx.toString;
  var $padLeft = dartx.padLeft;
  var $length = dartx.length;
  var $rightShift = dartx['>>'];
  var $setUint8 = dartx.setUint8;
  var $_get = dartx._get;
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $clear = dartx.clear;
  var $last = dartx.last;
  var $leftShift = dartx['<<'];
  var $reduce = dartx.reduce;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $isEmpty = dartx.isEmpty;
  var $map = dartx.map;
  var $addAll = dartx.addAll;
  var $isNotEmpty = dartx.isNotEmpty;
  var $_set = dartx._set;
  var $forEach = dartx.forEach;
  var $containsKey = dartx.containsKey;
  var $keys = dartx.keys;
  var $hashCode = dartx.hashCode;
  var $indexOf = dartx.indexOf;
  var $offsetInBytes = dartx.offsetInBytes;
  var $lengthInBytes = dartx.lengthInBytes;
  var $asByteData = dartx.asByteData;
  var $getUint8 = dartx.getUint8;
  var $getUint16 = dartx.getUint16;
  var $getUint32 = dartx.getUint32;
  var $getInt32 = dartx.getInt32;
  var $getFloat32 = dartx.getFloat32;
  var $getFloat64 = dartx.getFloat64;
  var $toDouble = dartx.toDouble;
  var $sign = dartx.sign;
  var $abs = dartx.abs;
  var $modulo = dartx['%'];
  var $ceil = dartx.ceil;
  var $toInt = dartx.toInt;
  var $first = dartx.first;
  var $insert = dartx.insert;
  var $sublist = dartx.sublist;
  var $round = dartx.round;
  var $truncate = dartx.truncate;
  var $substring = dartx.substring;
  var $toUpperCase = dartx.toUpperCase;
  var $_equals = dartx._equals;
  var $fillRange = dartx.fillRange;
  var $toRadixString = dartx.toRadixString;
  var $toList = dartx.toList;
  var $runes = dartx.runes;
  var $elementAt = dartx.elementAt;
  var $whereType = dartx.whereType;
  var $insertAll = dartx.insertAll;
  var $plus = dartx['+'];
  var $codeUnits = dartx.codeUnits;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $contains = dartx.contains;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    PdfCrossRefEntryTypeL: () => (T$.PdfCrossRefEntryTypeL = dart.constFn(dart.legacy(xref.PdfCrossRefEntryType)))(),
    intAndintTovoid: () => (T$.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    JSArrayOfPdfXref: () => (T$.JSArrayOfPdfXref = dart.constFn(_interceptors.JSArray$(xref.PdfXref)))(),
    PdfXrefAndPdfXrefToint: () => (T$.PdfXrefAndPdfXrefToint = dart.constFn(dart.fnType(core.int, [xref.PdfXref, xref.PdfXref])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    intAndintToint: () => (T$.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    PdfSigFlagsL: () => (T$.PdfSigFlagsL = dart.constFn(dart.legacy(signature.PdfSigFlags)))(),
    JSArrayOfPdfObjectStream: () => (T$.JSArrayOfPdfObjectStream = dart.constFn(_interceptors.JSArray$(object_stream.PdfObjectStream)))(),
    PdfSigFlagsToint: () => (T$.PdfSigFlagsToint = dart.constFn(dart.fnType(core.int, [signature.PdfSigFlags])))(),
    PdfDictOfPdfDataType: () => (T$.PdfDictOfPdfDataType = dart.constFn(data_types.PdfDict$(data_types.PdfDataType)))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    PdfDictOfPdfIndirect: () => (T$.PdfDictOfPdfIndirect = dart.constFn(data_types.PdfDict$(data_types.PdfIndirect)))(),
    MapEntryOfString$PdfIndirect: () => (T$.MapEntryOfString$PdfIndirect = dart.constFn(core.MapEntry$(core.String, data_types.PdfIndirect)))(),
    PdfObjectOfPdfDataType: () => (T$.PdfObjectOfPdfDataType = dart.constFn(object.PdfObject$(data_types.PdfDataType)))(),
    StringAndPdfObjectOfPdfDataTypeToMapEntryOfString$PdfIndirect: () => (T$.StringAndPdfObjectOfPdfDataTypeToMapEntryOfString$PdfIndirect = dart.constFn(dart.fnType(T$.MapEntryOfString$PdfIndirect(), [core.String, T$.PdfObjectOfPdfDataType()])))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    PdfArrayOfPdfDataType: () => (T$.PdfArrayOfPdfDataType = dart.constFn(data_types.PdfArray$(data_types.PdfDataType)))(),
    PdfArrayOfPdfString: () => (T$.PdfArrayOfPdfString = dart.constFn(data_types.PdfArray$(data_types.PdfString)))(),
    JSArrayOfPdfString: () => (T$.JSArrayOfPdfString = dart.constFn(_interceptors.JSArray$(data_types.PdfString)))(),
    JSArrayOfPdfPage: () => (T$.JSArrayOfPdfPage = dart.constFn(_interceptors.JSArray$(page.PdfPage)))(),
    PdfOutlineModeL: () => (T$.PdfOutlineModeL = dart.constFn(dart.legacy(outline.PdfOutlineMode)))(),
    PdfOutlineStyleL: () => (T$.PdfOutlineStyleL = dart.constFn(dart.legacy(outline.PdfOutlineStyle)))(),
    JSArrayOfPdfOutline: () => (T$.JSArrayOfPdfOutline = dart.constFn(_interceptors.JSArray$(outline.PdfOutline)))(),
    PdfShadingTypeL: () => (T$.PdfShadingTypeL = dart.constFn(dart.legacy(shading.PdfShadingType)))(),
    JSArrayOfnum: () => (T$.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    PdfArrayOfPdfBool: () => (T$.PdfArrayOfPdfBool = dart.constFn(data_types.PdfArray$(data_types.PdfBool)))(),
    JSArrayOfPdfBool: () => (T$.JSArrayOfPdfBool = dart.constFn(_interceptors.JSArray$(data_types.PdfBool)))(),
    JSArrayOfdouble: () => (T$.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    LinkedMapOfPdfExifTag$dynamic: () => (T$.LinkedMapOfPdfExifTag$dynamic = dart.constFn(_js_helper.LinkedMap$(exif.PdfExifTag, dart.dynamic)))(),
    JSArrayOfListOfint: () => (T$.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$.ListOfint())))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    PdfExifTagL: () => (T$.PdfExifTagL = dart.constFn(dart.legacy(exif.PdfExifTag)))(),
    PdfImageOrientationL: () => (T$.PdfImageOrientationL = dart.constFn(dart.legacy(image$0.PdfImageOrientation)))(),
    PdfLineJoinL: () => (T$.PdfLineJoinL = dart.constFn(dart.legacy(graphics.PdfLineJoin)))(),
    PdfLineCapL: () => (T$.PdfLineCapL = dart.constFn(dart.legacy(graphics.PdfLineCap)))(),
    PdfTextRenderingModeL: () => (T$.PdfTextRenderingModeL = dart.constFn(dart.legacy(graphics.PdfTextRenderingMode)))(),
    ListQueueOf_PdfGraphicsContext: () => (T$.ListQueueOf_PdfGraphicsContext = dart.constFn(collection.ListQueue$(graphics._PdfGraphicsContext)))(),
    numL: () => (T$.numL = dart.constFn(dart.legacy(core.num)))(),
    IdentityMapOfString$PdfDataType: () => (T$.IdentityMapOfString$PdfDataType = dart.constFn(_js_helper.IdentityMap$(core.String, data_types.PdfDataType)))(),
    ListOfPdfColor: () => (T$.ListOfPdfColor = dart.constFn(core.List$(color$.PdfColor)))(),
    ListOfdouble: () => (T$.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    JSArrayOfPdfFunction: () => (T$.JSArrayOfPdfFunction = dart.constFn(_interceptors.JSArray$($function.PdfFunction)))(),
    JSArrayOfPdfColor: () => (T$.JSArrayOfPdfColor = dart.constFn(_interceptors.JSArray$(color$.PdfColor)))(),
    PdfBlendModeL: () => (T$.PdfBlendModeL = dart.constFn(dart.legacy(graphic_state.PdfBlendMode)))(),
    JSArrayOfPdfGraphicState: () => (T$.JSArrayOfPdfGraphicState = dart.constFn(_interceptors.JSArray$(graphic_state.PdfGraphicState)))(),
    PdfArrayOfPdfIndirect: () => (T$.PdfArrayOfPdfIndirect = dart.constFn(data_types.PdfArray$(data_types.PdfIndirect)))(),
    PdfObjectOfPdfDataTypeToPdfIndirect: () => (T$.PdfObjectOfPdfDataTypeToPdfIndirect = dart.constFn(dart.fnType(data_types.PdfIndirect, [T$.PdfObjectOfPdfDataType()])))(),
    PdfArrayOfPdfNum: () => (T$.PdfArrayOfPdfNum = dart.constFn(data_types.PdfArray$(data_types.PdfNum)))(),
    numToPdfNum: () => (T$.numToPdfNum = dart.constFn(dart.fnType(data_types.PdfNum, [core.num])))(),
    JSArrayOfPdfDataType: () => (T$.JSArrayOfPdfDataType = dart.constFn(_interceptors.JSArray$(data_types.PdfDataType)))(),
    PdfArrayOfPdfDictOfPdfDataType: () => (T$.PdfArrayOfPdfDictOfPdfDataType = dart.constFn(data_types.PdfArray$(T$.PdfDictOfPdfDataType())))(),
    JSArrayOfPdfDictOfPdfDataType: () => (T$.JSArrayOfPdfDictOfPdfDataType = dart.constFn(_interceptors.JSArray$(T$.PdfDictOfPdfDataType())))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    IdentityMapOfString$PdfFont: () => (T$.IdentityMapOfString$PdfFont = dart.constFn(_js_helper.IdentityMap$(core.String, font.PdfFont)))(),
    IdentityMapOfString$PdfShading: () => (T$.IdentityMapOfString$PdfShading = dart.constFn(_js_helper.IdentityMap$(core.String, shading.PdfShading)))(),
    IdentityMapOfString$PdfPattern: () => (T$.IdentityMapOfString$PdfPattern = dart.constFn(_js_helper.IdentityMap$(core.String, pattern.PdfPattern)))(),
    IdentityMapOfString$PdfXObject: () => (T$.IdentityMapOfString$PdfXObject = dart.constFn(_js_helper.IdentityMap$(core.String, xobject.PdfXObject)))(),
    PdfArrayOfPdfName: () => (T$.PdfArrayOfPdfName = dart.constFn(data_types.PdfArray$(data_types.PdfName)))(),
    PdfNameL: () => (T$.PdfNameL = dart.constFn(dart.legacy(data_types.PdfName)))(),
    PdfPageRotationL: () => (T$.PdfPageRotationL = dart.constFn(dart.legacy(page.PdfPageRotation)))(),
    JSArrayOfPdfAnnot: () => (T$.JSArrayOfPdfAnnot = dart.constFn(_interceptors.JSArray$(annotation.PdfAnnot)))(),
    PdfDictOfPdfArrayOfPdfDataType: () => (T$.PdfDictOfPdfArrayOfPdfDataType = dart.constFn(data_types.PdfDict$(T$.PdfArrayOfPdfDataType())))(),
    IdentityMapOfString$PdfArrayOfPdfDataType: () => (T$.IdentityMapOfString$PdfArrayOfPdfDataType = dart.constFn(_js_helper.IdentityMap$(core.String, T$.PdfArrayOfPdfDataType())))(),
    PdfArrayOfPdfSecString: () => (T$.PdfArrayOfPdfSecString = dart.constFn(data_types.PdfArray$(data_types.PdfSecString)))(),
    JSArrayOfPdfSecString: () => (T$.JSArrayOfPdfSecString = dart.constFn(_interceptors.JSArray$(data_types.PdfSecString)))(),
    IdentityMapOfString$PdfIndirect: () => (T$.IdentityMapOfString$PdfIndirect = dart.constFn(_js_helper.IdentityMap$(core.String, data_types.PdfIndirect)))(),
    PdfVersionL: () => (T$.PdfVersionL = dart.constFn(dart.legacy(document$.PdfVersion)))(),
    PdfPageModeL: () => (T$.PdfPageModeL = dart.constFn(dart.legacy(document$.PdfPageMode)))(),
    LinkedHashSetOfPdfObjectOfPdfDataType: () => (T$.LinkedHashSetOfPdfObjectOfPdfDataType = dart.constFn(collection.LinkedHashSet$(T$.PdfObjectOfPdfDataType())))(),
    LinkedHashSetOfPdfFont: () => (T$.LinkedHashSetOfPdfFont = dart.constFn(collection.LinkedHashSet$(font.PdfFont)))(),
    PdfStringFormatL: () => (T$.PdfStringFormatL = dart.constFn(dart.legacy(data_types.PdfStringFormat)))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    PdfBorderStyleL: () => (T$.PdfBorderStyleL = dart.constFn(dart.legacy(border.PdfBorderStyle)))(),
    PdfAnnotFlagsL: () => (T$.PdfAnnotFlagsL = dart.constFn(dart.legacy(annotation.PdfAnnotFlags)))(),
    PdfAnnotAppearanceL: () => (T$.PdfAnnotAppearanceL = dart.constFn(dart.legacy(annotation.PdfAnnotAppearance)))(),
    PdfAnnotFlagsToint: () => (T$.PdfAnnotFlagsToint = dart.constFn(dart.fnType(core.int, [annotation.PdfAnnotFlags])))(),
    PdfPointToPdfPoint: () => (T$.PdfPointToPdfPoint = dart.constFn(dart.fnType(point.PdfPoint, [point.PdfPoint])))(),
    ListOfnum: () => (T$.ListOfnum = dart.constFn(core.List$(core.num)))(),
    ListOfListOfnum: () => (T$.ListOfListOfnum = dart.constFn(core.List$(T$.ListOfnum())))(),
    PdfArrayOfPdfArrayOfPdfNum: () => (T$.PdfArrayOfPdfArrayOfPdfNum = dart.constFn(data_types.PdfArray$(T$.PdfArrayOfPdfNum())))(),
    ListOfnumToPdfArrayOfPdfNum: () => (T$.ListOfnumToPdfArrayOfPdfNum = dart.constFn(dart.fnType(T$.PdfArrayOfPdfNum(), [T$.ListOfnum()])))(),
    PdfAnnotHighlightingL: () => (T$.PdfAnnotHighlightingL = dart.constFn(dart.legacy(annotation.PdfAnnotHighlighting)))(),
    PdfFieldFlagsL: () => (T$.PdfFieldFlagsL = dart.constFn(dart.legacy(annotation.PdfFieldFlags)))(),
    PdfFieldFlagsToint: () => (T$.PdfFieldFlagsToint = dart.constFn(dart.fnType(core.int, [annotation.PdfFieldFlags])))(),
    PdfTextFieldAlignL: () => (T$.PdfTextFieldAlignL = dart.constFn(dart.legacy(annotation.PdfTextFieldAlign)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: xref.PdfCrossRefEntryType.prototype,
        [_name$]: "PdfCrossRefEntryType.free",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: xref.PdfCrossRefEntryType.prototype,
        [_name$]: "PdfCrossRefEntryType.inUse",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], T$.PdfCrossRefEntryTypeL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: xref.PdfXref.prototype,
        [type$]: C[0] || CT.C0,
        [generation$]: 65535,
        [offset$]: 0,
        [id$]: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/XRef"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: signature.PdfSigFlags.prototype,
        [_name$0]: "PdfSigFlags.signaturesExist",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: signature.PdfSigFlags.prototype,
        [_name$0]: "PdfSigFlags.appendOnly",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.constList([C[5] || CT.C5, C[6] || CT.C6], T$.PdfSigFlagsL());
    },
    get C8() {
      return C[8] = dart.constMap(T$.StringL(), dart.legacy(dart.Never), []);
    },
    get C9() {
      return C[9] = dart.constList([60, 60], T$.intL());
    },
    get C10() {
      return C[10] = dart.constList([62, 62], T$.intL());
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: document$.PdfVersion.prototype,
        [_name$1]: "PdfVersion.pdf_1_4",
        index: 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: document$.PdfVersion.prototype,
        [_name$1]: "PdfVersion.pdf_1_5",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.constList([37, 194, 165, 194, 177, 195, 171, 10], T$.intL());
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: zlib_encoder.ZLibEncoder.prototype
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: outline.PdfOutlineMode.prototype,
        [_name$2]: "PdfOutlineMode.fitPage",
        index: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: outline.PdfOutlineMode.prototype,
        [_name$2]: "PdfOutlineMode.fitRect",
        index: 1
      });
    },
    get C17() {
      return C[17] = dart.constList([C[15] || CT.C15, C[16] || CT.C16], T$.PdfOutlineModeL());
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$2]: "PdfOutlineStyle.normal",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$2]: "PdfOutlineStyle.italic",
        index: 1
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$2]: "PdfOutlineStyle.bold",
        index: 2
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$2]: "PdfOutlineStyle.italicBold",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21], T$.PdfOutlineStyleL());
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Fit"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/FitR"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: shading.PdfShadingType.prototype,
        [_name$3]: "PdfShadingType.axial",
        index: 0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: shading.PdfShadingType.prototype,
        [_name$3]: "PdfShadingType.radial",
        index: 1
      });
    },
    get C27() {
      return C[27] = dart.constList([C[25] || CT.C25, C[26] || CT.C26], T$.PdfShadingTypeL());
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: data_types.PdfBool.prototype,
        [PdfBool_value]: true
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DeviceRGB"
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ExifVersion",
        index: 0
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FlashpixVersion",
        index: 1
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ColorSpace",
        index: 2
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.PixelXDimension",
        index: 3
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.PixelYDimension",
        index: 4
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ComponentsConfiguration",
        index: 5
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.CompressedBitsPerPixel",
        index: 6
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.MakerNote",
        index: 7
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.UserComment",
        index: 8
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.RelatedSoundFile",
        index: 9
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.DateTimeOriginal",
        index: 10
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.DateTimeDigitized",
        index: 11
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SubsecTime",
        index: 12
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SubsecTimeOriginal",
        index: 13
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SubsecTimeDigitized",
        index: 14
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ExposureTime",
        index: 15
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FNumber",
        index: 16
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ExposureProgram",
        index: 17
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SpectralSensitivity",
        index: 18
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ISOSpeedRatings",
        index: 19
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.OECF",
        index: 20
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ShutterSpeedValue",
        index: 21
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ApertureValue",
        index: 22
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.BrightnessValue",
        index: 23
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ExposureBias",
        index: 24
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.MaxApertureValue",
        index: 25
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SubjectDistance",
        index: 26
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.MeteringMode",
        index: 27
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.LightSource",
        index: 28
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Flash",
        index: 29
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SubjectArea",
        index: 30
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FocalLength",
        index: 31
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FlashEnergy",
        index: 32
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SpatialFrequencyResponse",
        index: 33
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FocalPlaneXResolution",
        index: 34
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FocalPlaneYResolution",
        index: 35
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FocalPlaneResolutionUnit",
        index: 36
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SubjectLocation",
        index: 37
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ExposureIndex",
        index: 38
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SensingMethod",
        index: 39
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FileSource",
        index: 40
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SceneType",
        index: 41
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.CFAPattern",
        index: 42
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.CustomRendered",
        index: 43
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ExposureMode",
        index: 44
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.WhiteBalance",
        index: 45
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.DigitalZoomRation",
        index: 46
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.FocalLengthIn35mmFilm",
        index: 47
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SceneCaptureType",
        index: 48
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.GainControl",
        index: 49
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Contrast",
        index: 50
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Saturation",
        index: 51
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Sharpness",
        index: 52
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.DeviceSettingDescription",
        index: 53
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SubjectDistanceRange",
        index: 54
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.InteroperabilityIFDPointer",
        index: 55
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ImageUniqueID",
        index: 56
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ImageWidth",
        index: 57
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ImageHeight",
        index: 58
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ExifIFDPointer",
        index: 59
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.GPSInfoIFDPointer",
        index: 60
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.BitsPerSample",
        index: 61
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Compression",
        index: 62
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.PhotometricInterpretation",
        index: 63
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Orientation",
        index: 64
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.SamplesPerPixel",
        index: 65
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.PlanarConfiguration",
        index: 66
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.YCbCrSubSampling",
        index: 67
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.YCbCrPositioning",
        index: 68
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.XResolution",
        index: 69
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.YResolution",
        index: 70
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ResolutionUnit",
        index: 71
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.StripOffsets",
        index: 72
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.RowsPerStrip",
        index: 73
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.StripByteCounts",
        index: 74
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.JPEGInterchangeFormat",
        index: 75
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.JPEGInterchangeFormatLength",
        index: 76
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.TransferFunction",
        index: 77
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.WhitePoint",
        index: 78
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.PrimaryChromaticities",
        index: 79
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.YCbCrCoefficients",
        index: 80
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ReferenceBlackWhite",
        index: 81
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.DateTime",
        index: 82
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.ImageDescription",
        index: 83
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Make",
        index: 84
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Model",
        index: 85
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Software",
        index: 86
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Artist",
        index: 87
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$4]: "PdfExifTag.Copyright",
        index: 88
      });
    },
    get C30() {
      return C[30] = dart.constMap(T$.intL(), T$.PdfExifTagL(), [36864, C[31] || CT.C31, 40960, C[32] || CT.C32, 40961, C[33] || CT.C33, 40962, C[34] || CT.C34, 40963, C[35] || CT.C35, 37121, C[36] || CT.C36, 37122, C[37] || CT.C37, 37500, C[38] || CT.C38, 37510, C[39] || CT.C39, 40964, C[40] || CT.C40, 36867, C[41] || CT.C41, 36868, C[42] || CT.C42, 37520, C[43] || CT.C43, 37521, C[44] || CT.C44, 37522, C[45] || CT.C45, 33434, C[46] || CT.C46, 33437, C[47] || CT.C47, 34850, C[48] || CT.C48, 34852, C[49] || CT.C49, 34855, C[50] || CT.C50, 34856, C[51] || CT.C51, 37377, C[52] || CT.C52, 37378, C[53] || CT.C53, 37379, C[54] || CT.C54, 37380, C[55] || CT.C55, 37381, C[56] || CT.C56, 37382, C[57] || CT.C57, 37383, C[58] || CT.C58, 37384, C[59] || CT.C59, 37385, C[60] || CT.C60, 37396, C[61] || CT.C61, 37386, C[62] || CT.C62, 41483, C[63] || CT.C63, 41484, C[64] || CT.C64, 41486, C[65] || CT.C65, 41487, C[66] || CT.C66, 41488, C[67] || CT.C67, 41492, C[68] || CT.C68, 41493, C[69] || CT.C69, 41495, C[70] || CT.C70, 41728, C[71] || CT.C71, 41729, C[72] || CT.C72, 41730, C[73] || CT.C73, 41985, C[74] || CT.C74, 41986, C[75] || CT.C75, 41987, C[76] || CT.C76, 41988, C[77] || CT.C77, 41989, C[78] || CT.C78, 41990, C[79] || CT.C79, 41991, C[80] || CT.C80, 41992, C[81] || CT.C81, 41993, C[82] || CT.C82, 41994, C[83] || CT.C83, 41995, C[84] || CT.C84, 41996, C[85] || CT.C85, 40965, C[86] || CT.C86, 42016, C[87] || CT.C87, 256, C[88] || CT.C88, 257, C[89] || CT.C89, 34665, C[90] || CT.C90, 34853, C[91] || CT.C91, 258, C[92] || CT.C92, 259, C[93] || CT.C93, 262, C[94] || CT.C94, 274, C[95] || CT.C95, 277, C[96] || CT.C96, 284, C[97] || CT.C97, 530, C[98] || CT.C98, 531, C[99] || CT.C99, 282, C[100] || CT.C100, 283, C[101] || CT.C101, 296, C[102] || CT.C102, 273, C[103] || CT.C103, 278, C[104] || CT.C104, 279, C[105] || CT.C105, 513, C[106] || CT.C106, 514, C[107] || CT.C107, 301, C[108] || CT.C108, 318, C[109] || CT.C109, 319, C[110] || CT.C110, 529, C[111] || CT.C111, 532, C[112] || CT.C112, 306, C[113] || CT.C113, 270, C[114] || CT.C114, 271, C[115] || CT.C115, 272, C[116] || CT.C116, 305, C[117] || CT.C117, 315, C[118] || CT.C118, 33432, C[119] || CT.C119]);
    },
    get C120() {
      return C[120] = dart.constList([C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59, C[60] || CT.C60, C[61] || CT.C61, C[62] || CT.C62, C[63] || CT.C63, C[64] || CT.C64, C[65] || CT.C65, C[66] || CT.C66, C[67] || CT.C67, C[68] || CT.C68, C[69] || CT.C69, C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76, C[77] || CT.C77, C[78] || CT.C78, C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82, C[83] || CT.C83, C[84] || CT.C84, C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90, C[91] || CT.C91, C[92] || CT.C92, C[93] || CT.C93, C[94] || CT.C94, C[95] || CT.C95, C[96] || CT.C96, C[97] || CT.C97, C[98] || CT.C98, C[99] || CT.C99, C[100] || CT.C100, C[101] || CT.C101, C[102] || CT.C102, C[103] || CT.C103, C[104] || CT.C104, C[105] || CT.C105, C[106] || CT.C106, C[107] || CT.C107, C[108] || CT.C108, C[109] || CT.C109, C[110] || CT.C110, C[111] || CT.C111, C[112] || CT.C112, C[113] || CT.C113, C[114] || CT.C114, C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117, C[118] || CT.C118, C[119] || CT.C119], T$.PdfExifTagL());
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$5]: "PdfImageOrientation.topLeft",
        index: 0
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$5]: "PdfImageOrientation.topRight",
        index: 1
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$5]: "PdfImageOrientation.bottomRight",
        index: 2
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$5]: "PdfImageOrientation.bottomLeft",
        index: 3
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$5]: "PdfImageOrientation.leftTop",
        index: 4
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$5]: "PdfImageOrientation.rightTop",
        index: 5
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$5]: "PdfImageOrientation.rightBottom",
        index: 6
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$5]: "PdfImageOrientation.leftBottom",
        index: 7
      });
    },
    get C129() {
      return C[129] = dart.constList([C[121] || CT.C121, C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125, C[126] || CT.C126, C[127] || CT.C127, C[128] || CT.C128], T$.PdfImageOrientationL());
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 8
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/RelativeColorimetric"
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DCTDecode"
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DeviceGray"
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name$6]: "PdfLineJoin.miter",
        index: 0
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name$6]: "PdfLineJoin.round",
        index: 1
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name$6]: "PdfLineJoin.bevel",
        index: 2
      });
    },
    get C137() {
      return C[137] = dart.constList([C[134] || CT.C134, C[135] || CT.C135, C[136] || CT.C136], T$.PdfLineJoinL());
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name$6]: "PdfLineCap.butt",
        index: 0
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name$6]: "PdfLineCap.round",
        index: 1
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name$6]: "PdfLineCap.square",
        index: 2
      });
    },
    get C141() {
      return C[141] = dart.constList([C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140], T$.PdfLineCapL());
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$6]: "PdfTextRenderingMode.fill",
        index: 0
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$6]: "PdfTextRenderingMode.stroke",
        index: 1
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$6]: "PdfTextRenderingMode.fillAndStroke",
        index: 2
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$6]: "PdfTextRenderingMode.invisible",
        index: 3
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$6]: "PdfTextRenderingMode.fillAndClip",
        index: 4
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$6]: "PdfTextRenderingMode.strokeAndClip",
        index: 5
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$6]: "PdfTextRenderingMode.fillStrokeAndClip",
        index: 6
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$6]: "PdfTextRenderingMode.clip",
        index: 7
      });
    },
    get C150() {
      return C[150] = dart.constList([C[142] || CT.C142, C[143] || CT.C143, C[144] || CT.C144, C[145] || CT.C145, C[146] || CT.C146, C[147] || CT.C147, C[148] || CT.C148, C[149] || CT.C149], T$.PdfTextRenderingModeL());
    },
    get C151() {
      return C[151] = dart.constList([], T$.numL());
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Luminosity"
      });
    },
    get C153() {
      return C[153] = dart.constList([0, 1], T$.numL());
    },
    get C154() {
      return C[154] = dart.constList([0, 1, 0, 1, 0, 1], T$.numL());
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 0
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 3
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.normal",
        index: 0
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.multiply",
        index: 1
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.screen",
        index: 2
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.overlay",
        index: 3
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.darken",
        index: 4
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.lighten",
        index: 5
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.colorDodge",
        index: 6
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.colorBurn",
        index: 7
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.hardLight",
        index: 8
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.softLight",
        index: 9
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.difference",
        index: 10
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.exclusion",
        index: 11
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.hue",
        index: 12
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.saturation",
        index: 13
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.color",
        index: 14
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$7]: "PdfBlendMode.luminosity",
        index: 15
      });
    },
    get C173() {
      return C[173] = dart.constList([C[157] || CT.C157, C[158] || CT.C158, C[159] || CT.C159, C[160] || CT.C160, C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163, C[164] || CT.C164, C[165] || CT.C165, C[166] || CT.C166, C[167] || CT.C167, C[168] || CT.C168, C[169] || CT.C169, C[170] || CT.C170, C[171] || CT.C171, C[172] || CT.C172], T$.PdfBlendModeL());
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 10
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 79
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Font"
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Identity"
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 1000
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/CIDFontType2"
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Identity-H"
      });
    },
    get C181() {
      return C[181] = dart.constList([], T$.doubleL());
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/WinAnsiEncoding"
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/PDF"
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Text"
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ImageB"
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ImageC"
      });
    },
    get C183() {
      return C[183] = dart.constList([C[184] || CT.C184, C[185] || CT.C185, C[186] || CT.C186, C[187] || CT.C187], T$.PdfNameL());
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Group"
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Transparency"
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: page.PdfPageRotation.prototype,
        [_name$8]: "PdfPageRotation.none",
        index: 0
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: page.PdfPageRotation.prototype,
        [_name$8]: "PdfPageRotation.rotate90",
        index: 1
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: page.PdfPageRotation.prototype,
        [_name$8]: "PdfPageRotation.rotate180",
        index: 2
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: page.PdfPageRotation.prototype,
        [_name$8]: "PdfPageRotation.rotate270",
        index: 3
      });
    },
    get C194() {
      return C[194] = dart.constList([C[190] || CT.C190, C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193], T$.PdfPageRotationL());
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: page_format.PdfPageFormat.prototype,
        [PdfPageFormat_marginRight]: 56.69291338582677,
        [PdfPageFormat_marginLeft]: 56.69291338582677,
        [PdfPageFormat_marginBottom]: 56.69291338582677,
        [PdfPageFormat_marginTop]: 56.69291338582677,
        [PdfPageFormat_height]: 841.8897637795275,
        [PdfPageFormat_width]: 595.275590551181
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/XYZ"
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: data_types.PdfNull.prototype
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/XML"
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/FlateDecode"
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ASCII85Decode"
      });
    },
    get C201() {
      return C[201] = dart.constList(["/UseNone", "/UseOutlines", "/UseThumbs", "/FullScreen"], T$.StringL());
    },
    get C202() {
      return C[202] = dart.constList([C[11] || CT.C11, C[12] || CT.C12], T$.PdfVersionL());
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: document$.PdfPageMode.prototype,
        [_name$1]: "PdfPageMode.none",
        index: 0
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: document$.PdfPageMode.prototype,
        [_name$1]: "PdfPageMode.outlines",
        index: 1
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: document$.PdfPageMode.prototype,
        [_name$1]: "PdfPageMode.thumbs",
        index: 2
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: document$.PdfPageMode.prototype,
        [_name$1]: "PdfPageMode.fullscreen",
        index: 3
      });
    },
    get C207() {
      return C[207] = dart.constList([C[203] || CT.C203, C[204] || CT.C204, C[205] || CT.C205, C[206] || CT.C206], T$.PdfPageModeL());
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: data_types.PdfStringFormat.prototype,
        [_name$9]: "PdfStringFormat.binary",
        index: 0
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: data_types.PdfStringFormat.prototype,
        [_name$9]: "PdfStringFormat.litteral",
        index: 1
      });
    },
    get C210() {
      return C[210] = dart.constList([C[208] || CT.C208, C[209] || CT.C209], T$.PdfStringFormatL());
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$10]: "PdfBorderStyle.solid",
        index: 0
      });
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$10]: "PdfBorderStyle.dashed",
        index: 1
      });
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$10]: "PdfBorderStyle.beveled",
        index: 2
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$10]: "PdfBorderStyle.inset",
        index: 3
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$10]: "PdfBorderStyle.underlined",
        index: 4
      });
    },
    get C216() {
      return C[216] = dart.constList([C[211] || CT.C211, C[212] || CT.C212, C[213] || CT.C213, C[214] || CT.C214, C[215] || CT.C215], T$.PdfBorderStyleL());
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.invisible",
        index: 0
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.hidden",
        index: 1
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.print",
        index: 2
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.noZoom",
        index: 3
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.noRotate",
        index: 4
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.noView",
        index: 5
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.readOnly",
        index: 6
      });
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.locked",
        index: 7
      });
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.toggleNoView",
        index: 8
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$11]: "PdfAnnotFlags.lockedContent",
        index: 9
      });
    },
    get C227() {
      return C[227] = dart.constList([C[217] || CT.C217, C[218] || CT.C218, C[219] || CT.C219, C[220] || CT.C220, C[221] || CT.C221, C[222] || CT.C222, C[223] || CT.C223, C[224] || CT.C224, C[225] || CT.C225, C[226] || CT.C226], T$.PdfAnnotFlagsL());
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: annotation.PdfAnnotAppearance.prototype,
        [_name$11]: "PdfAnnotAppearance.normal",
        index: 0
      });
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: annotation.PdfAnnotAppearance.prototype,
        [_name$11]: "PdfAnnotAppearance.rollover",
        index: 1
      });
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: annotation.PdfAnnotAppearance.prototype,
        [_name$11]: "PdfAnnotAppearance.down",
        index: 2
      });
    },
    get C231() {
      return C[231] = dart.constList([C[228] || CT.C228, C[229] || CT.C229, C[230] || CT.C230], T$.PdfAnnotAppearanceL());
    },
    get C232() {
      return C[232] = dart.constList([0, 0, 0], T$.numL());
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/GoTo"
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/URI"
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$11]: "PdfAnnotHighlighting.none",
        index: 0
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$11]: "PdfAnnotHighlighting.invert",
        index: 1
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$11]: "PdfAnnotHighlighting.outline",
        index: 2
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$11]: "PdfAnnotHighlighting.push",
        index: 3
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$11]: "PdfAnnotHighlighting.toggle",
        index: 4
      });
    },
    get C240() {
      return C[240] = dart.constList([C[235] || CT.C235, C[236] || CT.C236, C[237] || CT.C237, C[238] || CT.C238, C[239] || CT.C239], T$.PdfAnnotHighlightingL());
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/N"
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/I"
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/O"
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/P"
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/T"
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.readOnly",
        index: 0
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.mandatory",
        index: 1
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.noExport",
        index: 2
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved4",
        index: 3
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved5",
        index: 4
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved6",
        index: 5
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved7",
        index: 6
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved8",
        index: 7
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved9",
        index: 8
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved10",
        index: 9
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved11",
        index: 10
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.reserved12",
        index: 11
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.multiline",
        index: 12
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.password",
        index: 13
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.noToggleToOff",
        index: 14
      });
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.radio",
        index: 15
      });
    },
    get C262() {
      return C[262] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.pushButton",
        index: 16
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.combo",
        index: 17
      });
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.edit",
        index: 18
      });
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.sort",
        index: 19
      });
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.fileSelect",
        index: 20
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.multiSelect",
        index: 21
      });
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.doNotSpellCheck",
        index: 22
      });
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.doNotScroll",
        index: 23
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.comb",
        index: 24
      });
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.radiosInUnison",
        index: 25
      });
    },
    get C272() {
      return C[272] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$11]: "PdfFieldFlags.commitOnSelChange",
        index: 26
      });
    },
    get C273() {
      return C[273] = dart.constList([C[246] || CT.C246, C[247] || CT.C247, C[248] || CT.C248, C[249] || CT.C249, C[250] || CT.C250, C[251] || CT.C251, C[252] || CT.C252, C[253] || CT.C253, C[254] || CT.C254, C[255] || CT.C255, C[256] || CT.C256, C[257] || CT.C257, C[258] || CT.C258, C[259] || CT.C259, C[260] || CT.C260, C[261] || CT.C261, C[262] || CT.C262, C[263] || CT.C263, C[264] || CT.C264, C[265] || CT.C265, C[266] || CT.C266, C[267] || CT.C267, C[268] || CT.C268, C[269] || CT.C269, C[270] || CT.C270, C[271] || CT.C271, C[272] || CT.C272], T$.PdfFieldFlagsL());
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_name$11]: "PdfTextFieldAlign.left",
        index: 0
      });
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_name$11]: "PdfTextFieldAlign.center",
        index: 1
      });
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_name$11]: "PdfTextFieldAlign.right",
        index: 2
      });
    },
    get C277() {
      return C[277] = dart.constList([C[274] || CT.C274, C[275] || CT.C275, C[276] || CT.C276], T$.PdfTextFieldAlignL());
    }
  }, false);
  var C = Array(278).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/xref.dart",
    "package:pdf/src/pdf/xref.dart",
    "package:pdf/src/pdf/data_types.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/signature.dart",
    "package:pdf/src/pdf/signature.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/object_dict.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/object.dart",
    "package:pdf/src/pdf/object.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/data_types.dart",
    "package:pdf/src/pdf/object_dict.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/output.dart",
    "package:pdf/src/pdf/output.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/info.dart",
    "package:pdf/src/pdf/info.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/encryption.dart",
    "package:pdf/src/pdf/encryption.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/document_parser.dart",
    "package:pdf/src/pdf/document_parser.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/page_list.dart",
    "package:pdf/src/pdf/page_list.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/outline.dart",
    "package:pdf/src/pdf/outline.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/shading.dart",
    "package:pdf/src/pdf/shading.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/pattern.dart",
    "package:pdf/src/pdf/pattern.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/xobject.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/object_stream.dart",
    "package:pdf/src/pdf/object_stream.dart",
    "package:pdf/src/pdf/xobject.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/exif.dart",
    "package:pdf/src/pdf/exif.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/image.dart",
    "package:pdf/src/pdf/image.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/graphics.dart",
    "package:pdf/src/pdf/graphics.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/smask.dart",
    "package:pdf/src/pdf/smask.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/function.dart",
    "package:pdf/src/pdf/function.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/graphic_state.dart",
    "package:pdf/src/pdf/graphic_state.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/unicode_cmap.dart",
    "package:pdf/src/pdf/unicode_cmap.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/font_descriptor.dart",
    "package:pdf/src/pdf/font_descriptor.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/array.dart",
    "package:pdf/src/pdf/array.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/ttffont.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/font.dart",
    "package:pdf/src/pdf/font.dart",
    "package:pdf/src/pdf/ttffont.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/type1_font.dart",
    "package:pdf/src/pdf/type1_font.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/graphic_stream.dart",
    "package:pdf/src/pdf/graphic_stream.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/page.dart",
    "package:pdf/src/pdf/page.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/names.dart",
    "package:pdf/src/pdf/names.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/metadata.dart",
    "package:pdf/src/pdf/metadata.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/catalog.dart",
    "package:pdf/src/pdf/catalog.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/document.dart",
    "package:pdf/src/pdf/document.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/border.dart",
    "package:pdf/src/pdf/border.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-3.6.1/lib/src/pdf/annotation.dart",
    "package:pdf/src/pdf/annotation.dart"
  ];
  var _name$ = dart.privateName(xref, "_name");
  xref.PdfCrossRefEntryType = class PdfCrossRefEntryType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (xref.PdfCrossRefEntryType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 24, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 24, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = xref.PdfCrossRefEntryType.prototype;
  dart.addTypeTests(xref.PdfCrossRefEntryType);
  dart.addTypeCaches(xref.PdfCrossRefEntryType);
  dart.setLibraryUri(xref.PdfCrossRefEntryType, I[1]);
  dart.setFieldSignature(xref.PdfCrossRefEntryType, () => ({
    __proto__: dart.getFields(xref.PdfCrossRefEntryType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(xref.PdfCrossRefEntryType, ['toString']);
  xref.PdfCrossRefEntryType.free = C[0] || CT.C0;
  xref.PdfCrossRefEntryType.inUse = C[1] || CT.C1;
  xref.PdfCrossRefEntryType.values = C[2] || CT.C2;
  var id$ = dart.privateName(xref, "PdfXref.id");
  var offset$ = dart.privateName(xref, "PdfXref.offset");
  var generation$ = dart.privateName(xref, "PdfXref.generation");
  var type$ = dart.privateName(xref, "PdfXref.type");
  xref.PdfXref = class PdfXref extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get generation() {
      return this[generation$];
    }
    set generation(value) {
      super.generation = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    ref() {
      return dart.toString(this.offset)[$padLeft](10, "0") + " " + dart.toString(this.generation)[$padLeft](5, "0") + (this.type == xref.PdfCrossRefEntryType.inUse ? " n " : " f ");
    }
    cref(o, ofs, w) {
      if (o == null) dart.nullFailed(I[0], 56, 21, "o");
      if (ofs == null) dart.nullFailed(I[0], 56, 28, "ofs");
      if (w == null) dart.nullFailed(I[0], 56, 43, "w");
      if (!(dart.notNull(w[$length]) >= 3)) dart.assertFailed(null, I[0], 57, 12, "w.length >= 3");
      function setVal(l, v) {
        if (l == null) dart.nullFailed(I[0], 59, 21, "l");
        if (v == null) dart.nullFailed(I[0], 59, 28, "v");
        for (let n = 0; n < dart.notNull(l); n = n + 1) {
          o[$setUint8](ofs, v[$rightShift]((dart.notNull(l) - n - 1) * 8) & 255);
          ofs = dart.notNull(ofs) + 1;
        }
      }
      dart.fn(setVal, T$.intAndintTovoid());
      setVal(w[$_get](0), this.type == xref.PdfCrossRefEntryType.inUse ? 1 : 0);
      setVal(w[$_get](1), this.offset);
      setVal(w[$_get](2), this.generation);
      return ofs;
    }
    _equals(other) {
      if (other == null) return false;
      if (xref.PdfXref.is(other)) {
        return this.offset == other.offset;
      }
      return false;
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.id) + " " + dart.str(this.generation) + " " + dart.str(this.offset) + " " + dart.str(this.type);
    }
    get hashCode() {
      return this.offset;
    }
  };
  (xref.PdfXref.new = function(id, offset, opts) {
    if (id == null) dart.nullFailed(I[0], 30, 10, "id");
    if (offset == null) dart.nullFailed(I[0], 31, 10, "offset");
    let generation = opts && 'generation' in opts ? opts.generation : 0;
    if (generation == null) dart.nullFailed(I[0], 32, 10, "generation");
    let type = opts && 'type' in opts ? opts.type : C[1] || CT.C1;
    if (type == null) dart.nullFailed(I[0], 33, 10, "type");
    this[id$] = id;
    this[offset$] = offset;
    this[generation$] = generation;
    this[type$] = type;
    ;
  }).prototype = xref.PdfXref.prototype;
  dart.addTypeTests(xref.PdfXref);
  dart.addTypeCaches(xref.PdfXref);
  dart.setMethodSignature(xref.PdfXref, () => ({
    __proto__: dart.getMethods(xref.PdfXref.__proto__),
    ref: dart.fnType(core.String, []),
    cref: dart.fnType(core.int, [typed_data.ByteData, core.int, core.List$(core.int)])
  }));
  dart.setLibraryUri(xref.PdfXref, I[1]);
  dart.setFieldSignature(xref.PdfXref, () => ({
    __proto__: dart.getFields(xref.PdfXref.__proto__),
    id: dart.finalFieldType(core.int),
    offset: dart.finalFieldType(core.int),
    generation: dart.finalFieldType(core.int),
    type: dart.finalFieldType(xref.PdfCrossRefEntryType)
  }));
  dart.defineExtensionMethods(xref.PdfXref, ['_equals', 'toString']);
  dart.defineExtensionAccessors(xref.PdfXref, ['hashCode']);
  var offsets = dart.privateName(xref, "PdfXrefTable.offsets");
  var _writeblock = dart.privateName(xref, "_writeblock");
  var PdfName_value = dart.privateName(data_types, "PdfName.value");
  var _toStream = dart.privateName(data_types, "_toStream");
  data_types.PdfDataType = class PdfDataType extends core.Object {
    [_toStream]() {
      let s = new stream.PdfStream.new();
      this.output(s);
      return s;
    }
    toString() {
      return core.String.fromCharCodes(this[_toStream]().output());
    }
    toList() {
      return this[_toStream]().output();
    }
  };
  (data_types.PdfDataType.new = function() {
    ;
  }).prototype = data_types.PdfDataType.prototype;
  dart.addTypeTests(data_types.PdfDataType);
  dart.addTypeCaches(data_types.PdfDataType);
  dart.setMethodSignature(data_types.PdfDataType, () => ({
    __proto__: dart.getMethods(data_types.PdfDataType.__proto__),
    [_toStream]: dart.fnType(stream.PdfStream, []),
    toList: dart.fnType(typed_data.Uint8List, [])
  }));
  dart.setLibraryUri(data_types.PdfDataType, I[2]);
  dart.defineExtensionMethods(data_types.PdfDataType, ['toString']);
  xref.PdfXrefTable = class PdfXrefTable extends data_types.PdfDataType {
    get offsets() {
      return this[offsets];
    }
    set offsets(value) {
      super.offsets = value;
    }
    add(xref) {
      if (xref == null) dart.nullFailed(I[0], 96, 20, "xref");
      this.offsets[$add](xref);
    }
    [_writeblock](s, firstid, block) {
      if (s == null) dart.nullFailed(I[0], 101, 30, "s");
      if (firstid == null) dart.nullFailed(I[0], 101, 37, "firstid");
      if (block == null) dart.nullFailed(I[0], 101, 60, "block");
      s.putString(dart.str(firstid) + " " + dart.str(block[$length]) + "\n");
      for (let x of block) {
        s.putString(x.ref());
        s.putByte(10);
      }
    }
    output(s) {
      if (s == null) dart.nullFailed(I[0], 111, 25, "s");
      s.putString("xref\n");
      this.offsets[$sort](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[0], 115, 19, "a");
        if (b == null) dart.nullFailed(I[0], 115, 22, "b");
        return a.id[$compareTo](b.id);
      }, T$.PdfXrefAndPdfXrefToint()));
      let firstid = 0;
      let lastid = 0;
      let block = T$.JSArrayOfPdfXref().of([]);
      block[$add](C[3] || CT.C3);
      for (let x of this.offsets) {
        if (x.id !== dart.notNull(lastid) + 1) {
          this[_writeblock](s, firstid, block);
          block[$clear]();
          firstid = x.id;
        }
        block[$add](x);
        lastid = x.id;
      }
      this[_writeblock](s, firstid, block);
    }
    outputCompressed(object, s, params) {
      if (object == null) dart.nullFailed(I[0], 148, 35, "object");
      if (s == null) dart.nullFailed(I[0], 148, 53, "s");
      if (params == null) dart.nullFailed(I[0], 148, 64, "params");
      let id = dart.notNull(this.offsets[$last].id) + 1;
      let offset = s.offset;
      this.offsets[$add](new xref.PdfXref.new(id, offset));
      this.offsets[$sort](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[0], 155, 19, "a");
        if (b == null) dart.nullFailed(I[0], 155, 22, "b");
        return a.id[$compareTo](b.id);
      }, T$.PdfXrefAndPdfXrefToint()));
      s.putString(dart.str(id) + " 0 obj\n");
      params._set("/Type", C[4] || CT.C4);
      params._set("/Size", new data_types.PdfNum.new(id + 1));
      let firstid = 0;
      let lastid = 0;
      let blocks = T$.JSArrayOfint().of([]);
      blocks[$add](firstid);
      for (let x of this.offsets) {
        if (x.id !== dart.notNull(lastid) + 1) {
          blocks[$add](dart.notNull(lastid) - dart.notNull(firstid) + 1);
          firstid = x.id;
          blocks[$add](firstid);
        }
        lastid = x.id;
      }
      blocks[$add](dart.notNull(lastid) - dart.notNull(firstid) + 1);
      if (!(blocks[$length] === 2 && blocks[$_get](0) === 0 && blocks[$_get](1) === id + 1)) {
        params._set("/Index", data_types.PdfArray.fromNum(blocks));
      }
      let bytes = 2;
      while ((1)[$leftShift](bytes * 8) < dart.notNull(offset)) {
        bytes = bytes + 1;
      }
      let w = T$.JSArrayOfint().of([1, bytes, 1]);
      params._set("/W", data_types.PdfArray.fromNum(w));
      let wl = w[$reduce](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[0], 192, 26, "a");
        if (b == null) dart.nullFailed(I[0], 192, 29, "b");
        return dart.notNull(a) + dart.notNull(b);
      }, T$.intAndintToint()));
      let o = _native_typed_data.NativeByteData.new((dart.notNull(this.offsets[$length]) + 1) * dart.notNull(wl));
      let ofs = 0;
      ofs = dart.notNull(ofs) + dart.notNull(wl);
      for (let x of this.offsets) {
        ofs = x.cref(o, ofs, w);
      }
      data_types.PdfDictStream.new({object: object, data: o[$buffer][$asUint8List](), isBinary: false, encrypt: false, values: params.values}).output(s);
    }
  };
  (xref.PdfXrefTable.new = function() {
    this[offsets] = T$.JSArrayOfPdfXref().of([]);
    xref.PdfXrefTable.__proto__.new.call(this);
    ;
  }).prototype = xref.PdfXrefTable.prototype;
  dart.addTypeTests(xref.PdfXrefTable);
  dart.addTypeCaches(xref.PdfXrefTable);
  dart.setMethodSignature(xref.PdfXrefTable, () => ({
    __proto__: dart.getMethods(xref.PdfXrefTable.__proto__),
    add: dart.fnType(dart.void, [xref.PdfXref]),
    [_writeblock]: dart.fnType(dart.void, [stream.PdfStream, core.int, core.List$(xref.PdfXref)]),
    output: dart.fnType(dart.void, [stream.PdfStream]),
    outputCompressed: dart.fnType(dart.void, [object.PdfObject$(data_types.PdfDataType), stream.PdfStream, data_types.PdfDict$(data_types.PdfDataType)])
  }));
  dart.setLibraryUri(xref.PdfXrefTable, I[1]);
  dart.setFieldSignature(xref.PdfXrefTable, () => ({
    __proto__: dart.getFields(xref.PdfXrefTable.__proto__),
    offsets: dart.finalFieldType(core.List$(xref.PdfXref))
  }));
  var _name$0 = dart.privateName(signature, "_name");
  signature.PdfSigFlags = class PdfSigFlags extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (signature.PdfSigFlags.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[3], 28, 6, "index");
    if (_name == null) dart.nullFailed(I[3], 28, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = signature.PdfSigFlags.prototype;
  dart.addTypeTests(signature.PdfSigFlags);
  dart.addTypeCaches(signature.PdfSigFlags);
  dart.setLibraryUri(signature.PdfSigFlags, I[4]);
  dart.setFieldSignature(signature.PdfSigFlags, () => ({
    __proto__: dart.getFields(signature.PdfSigFlags.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(signature.PdfSigFlags, ['toString']);
  signature.PdfSigFlags.signaturesExist = C[5] || CT.C5;
  signature.PdfSigFlags.appendOnly = C[6] || CT.C6;
  signature.PdfSigFlags.values = C[7] || CT.C7;
  var flags$ = dart.privateName(signature, "PdfSignature.flags");
  var value$ = dart.privateName(signature, "PdfSignature.value");
  var crl$ = dart.privateName(signature, "PdfSignature.crl");
  var cert$ = dart.privateName(signature, "PdfSignature.cert");
  var ocsp$ = dart.privateName(signature, "PdfSignature.ocsp");
  var _offsetStart = dart.privateName(signature, "_offsetStart");
  var _offsetEnd = dart.privateName(signature, "_offsetEnd");
  var params$ = dart.privateName(object, "PdfObject.params");
  var objser$ = dart.privateName(object, "PdfObject.objser");
  var objgen$ = dart.privateName(object, "PdfObject.objgen");
  var pdfDocument$ = dart.privateName(object, "PdfObject.pdfDocument");
  var _writeStart = dart.privateName(object, "_writeStart");
  var _writeEnd = dart.privateName(object, "_writeEnd");
  const _is_PdfObject_default = Symbol('_is_PdfObject_default');
  object.PdfObject$ = dart.generic(T => {
    class PdfObject extends core.Object {
      get params() {
        return this[params$];
      }
      set params(value) {
        super.params = value;
      }
      get objser() {
        return this[objser$];
      }
      set objser(value) {
        super.objser = value;
      }
      get objgen() {
        return this[objgen$];
      }
      set objgen(value) {
        super.objgen = value;
      }
      get pdfDocument() {
        return this[pdfDocument$];
      }
      set pdfDocument(value) {
        super.pdfDocument = value;
      }
      write(os) {
        if (os == null) dart.nullFailed(I[6], 49, 24, "os");
        this.prepare();
        this[_writeStart](os);
        this.writeContent(os);
        this[_writeEnd](os);
      }
      prepare() {
      }
      [_writeStart](os) {
        if (os == null) dart.nullFailed(I[6], 62, 30, "os");
        os.putString(dart.str(this.objser) + " " + dart.str(this.objgen) + " obj\n");
      }
      writeContent(os) {
        if (os == null) dart.nullFailed(I[6], 66, 31, "os");
        this.params.output(os);
        os.putByte(10);
      }
      [_writeEnd](os) {
        if (os == null) dart.nullFailed(I[6], 73, 28, "os");
        os.putString("endobj\n");
      }
      ref() {
        return new data_types.PdfIndirect.new(this.objser, this.objgen);
      }
      toString() {
        return dart.str(this[$runtimeType]) + " " + dart.str(this.params);
      }
    }
    (PdfObject.new = function(pdfDocument, opts) {
      let t0;
      if (pdfDocument == null) dart.nullFailed(I[6], 28, 10, "pdfDocument");
      let params = opts && 'params' in opts ? opts.params : null;
      if (params == null) dart.nullFailed(I[6], 29, 19, "params");
      let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
      if (objgen == null) dart.nullFailed(I[6], 30, 10, "objgen");
      let objser = opts && 'objser' in opts ? opts.objser : null;
      this[pdfDocument$] = pdfDocument;
      this[params$] = params;
      this[objgen$] = objgen;
      this[objser$] = (t0 = objser, t0 == null ? pdfDocument.genSerial() : t0);
      this.pdfDocument.objects.add(this);
    }).prototype = PdfObject.prototype;
    dart.addTypeTests(PdfObject);
    PdfObject.prototype[_is_PdfObject_default] = true;
    dart.addTypeCaches(PdfObject);
    dart.setMethodSignature(PdfObject, () => ({
      __proto__: dart.getMethods(PdfObject.__proto__),
      write: dart.fnType(dart.void, [stream.PdfStream]),
      prepare: dart.fnType(dart.void, []),
      [_writeStart]: dart.fnType(dart.void, [stream.PdfStream]),
      writeContent: dart.fnType(dart.void, [stream.PdfStream]),
      [_writeEnd]: dart.fnType(dart.void, [stream.PdfStream]),
      ref: dart.fnType(data_types.PdfIndirect, [])
    }));
    dart.setLibraryUri(PdfObject, I[7]);
    dart.setFieldSignature(PdfObject, () => ({
      __proto__: dart.getFields(PdfObject.__proto__),
      params: dart.finalFieldType(T),
      objser: dart.finalFieldType(core.int),
      objgen: dart.finalFieldType(core.int),
      pdfDocument: dart.finalFieldType(document$.PdfDocument)
    }));
    dart.defineExtensionMethods(PdfObject, ['toString']);
    return PdfObject;
  });
  object.PdfObject = object.PdfObject$();
  dart.addTypeTests(object.PdfObject, _is_PdfObject_default);
  var values$ = dart.privateName(data_types, "PdfDict.values");
  const _is_PdfDict_default = Symbol('_is_PdfDict_default');
  data_types.PdfDict$ = dart.generic(T => {
    var StringAndTTovoid = () => (StringAndTTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T])))();
    var PdfDictOfT = () => (PdfDictOfT = dart.constFn(data_types.PdfDict$(T)))();
    class PdfDict extends data_types.PdfDataType {
      get values() {
        return this[values$];
      }
      set values(value) {
        super.values = value;
      }
      static new(values = null) {
        let _values = new (_js_helper.IdentityMap$(core.String, T)).new();
        if (values != null) {
          _values[$addAll](values);
        }
        return new (data_types.PdfDict$(T)).values(_values);
      }
      static fromObjectMap(objects) {
        if (objects == null) dart.nullFailed(I[8], 525, 68, "objects");
        return T$.PdfDictOfPdfIndirect().new(objects[$map](core.String, data_types.PdfIndirect, dart.fn((key, value) => {
          if (key == null) dart.nullFailed(I[8], 528, 17, "key");
          if (value == null) dart.nullFailed(I[8], 528, 32, "value");
          return new (T$.MapEntryOfString$PdfIndirect()).__(key, value.ref());
        }, T$.StringAndPdfObjectOfPdfDataTypeToMapEntryOfString$PdfIndirect())));
      }
      get isNotEmpty() {
        return this.values[$isNotEmpty];
      }
      _set(k, v$) {
        let v = v$;
        if (k == null) dart.nullFailed(I[8], 538, 23, "k");
        T.as(v);
        if (v == null) dart.nullFailed(I[8], 538, 28, "v");
        this.values[$_set](k, v);
        return v$;
      }
      _get(k) {
        if (k == null) dart.nullFailed(I[8], 542, 25, "k");
        return this.values[$_get](k);
      }
      output(s) {
        if (s == null) dart.nullFailed(I[8], 547, 25, "s");
        s.putBytes(C[9] || CT.C9);
        this.values[$forEach](dart.fn((k, v) => {
          if (k == null) dart.nullFailed(I[8], 549, 28, "k");
          if (v == null) dart.nullFailed(I[8], 549, 33, "v");
          s.putString(k);
          if (data_types.PdfNum.is(v) || data_types.PdfBool.is(v) || data_types.PdfNull.is(v) || data_types.PdfIndirect.is(v)) {
            s.putByte(32);
          }
          v.output(s);
        }, StringAndTTovoid()));
        s.putBytes(C[10] || CT.C10);
      }
      containsKey(key) {
        if (key == null) dart.nullFailed(I[8], 559, 27, "key");
        return this.values[$containsKey](key);
      }
      merge(other) {
        PdfDictOfT().as(other);
        if (other == null) dart.nullFailed(I[8], 563, 25, "other");
        for (let key of other.values[$keys]) {
          let value = dart.nullCheck(other._get(key));
          let current = this.values[$_get](key);
          if (current == null) {
            this.values[$_set](key, value);
          } else if (T$.PdfArrayOfPdfDataType().is(value) && T$.PdfArrayOfPdfDataType().is(current)) {
            current.values[$addAll](value.values);
            current.uniq();
          } else if (T$.PdfDictOfPdfDataType().is(value) && T$.PdfDictOfPdfDataType().is(current)) {
            current.merge(value);
          } else {
            this.values[$_set](key, value);
          }
        }
      }
      addAll(other) {
        PdfDictOfT().as(other);
        if (other == null) dart.nullFailed(I[8], 580, 26, "other");
        this.values[$addAll](other.values);
      }
      _equals(other) {
        if (other == null) return false;
        if (T$.PdfDictOfPdfDataType().is(other)) {
          return dart.equals(this.values, other.values);
        }
        return false;
      }
      get hashCode() {
        return dart.hashCode(this.values);
      }
    }
    (PdfDict.values = function(values = C[8] || CT.C8) {
      if (values == null) dart.nullFailed(I[8], 523, 30, "values");
      this[values$] = values;
      PdfDict.__proto__.new.call(this);
      ;
    }).prototype = PdfDict.prototype;
    dart.addTypeTests(PdfDict);
    PdfDict.prototype[_is_PdfDict_default] = true;
    dart.addTypeCaches(PdfDict);
    dart.setMethodSignature(PdfDict, () => ({
      __proto__: dart.getMethods(PdfDict.__proto__),
      _set: dart.fnType(dart.void, [core.String, dart.nullable(core.Object)]),
      _get: dart.fnType(dart.nullable(T), [core.String]),
      output: dart.fnType(dart.void, [stream.PdfStream]),
      containsKey: dart.fnType(core.bool, [core.String]),
      merge: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(PdfDict, () => ({
      __proto__: dart.getGetters(PdfDict.__proto__),
      isNotEmpty: core.bool
    }));
    dart.setLibraryUri(PdfDict, I[2]);
    dart.setFieldSignature(PdfDict, () => ({
      __proto__: dart.getFields(PdfDict.__proto__),
      values: dart.finalFieldType(core.Map$(core.String, T))
    }));
    dart.defineExtensionMethods(PdfDict, ['_equals']);
    dart.defineExtensionAccessors(PdfDict, ['hashCode']);
    return PdfDict;
  });
  data_types.PdfDict = data_types.PdfDict$();
  dart.addTypeTests(data_types.PdfDict, _is_PdfDict_default);
  object_dict.PdfObjectDict = class PdfObjectDict extends object.PdfObject$(data_types.PdfDict$(data_types.PdfDataType)) {
    writeContent(os) {
      if (os == null) dart.nullFailed(I[5], 38, 31, "os");
      if (dart.test(this.params.isNotEmpty)) {
        this.params.output(os);
        os.putByte(10);
      }
    }
  };
  (object_dict.PdfObjectDict.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[5], 27, 17, "pdfDocument");
    let type = opts && 'type' in opts ? opts.type : null;
    let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
    if (objgen == null) dart.nullFailed(I[5], 29, 9, "objgen");
    let objser = opts && 'objser' in opts ? opts.objser : null;
    object_dict.PdfObjectDict.__proto__.new.call(this, pdfDocument, {params: T$.PdfDictOfPdfDataType().new(), objgen: objgen, objser: objser});
    if (type != null) {
      this.params._set("/Type", new data_types.PdfName.new(type));
    }
  }).prototype = object_dict.PdfObjectDict.prototype;
  dart.addTypeTests(object_dict.PdfObjectDict);
  dart.addTypeCaches(object_dict.PdfObjectDict);
  dart.setLibraryUri(object_dict.PdfObjectDict, I[9]);
  signature.PdfSignature = class PdfSignature extends object_dict.PdfObjectDict {
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get crl() {
      return this[crl$];
    }
    set crl(value) {
      super.crl = value;
    }
    get cert() {
      return this[cert$];
    }
    set cert(value) {
      super.cert = value;
    }
    get ocsp() {
      return this[ocsp$];
    }
    set ocsp(value) {
      super.ocsp = value;
    }
    get flagsValue() {
      return dart.test(this.flags[$isEmpty]) ? 0 : this.flags[$map](core.int, dart.fn(e => {
        if (e == null) dart.nullFailed(I[3], 72, 34, "e");
        return (1)[$leftShift](e.index);
      }, T$.PdfSigFlagsToint()))[$reduce](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[3], 73, 24, "a");
        if (b == null) dart.nullFailed(I[3], 73, 31, "b");
        return (dart.notNull(a) | dart.notNull(b)) >>> 0;
      }, T$.intAndintToint()));
    }
    write(os) {
      if (os == null) dart.nullFailed(I[3], 86, 24, "os");
      this.value.preSign(this, this.params);
      this[_offsetStart] = dart.notNull(os.offset) + (dart.str(this.objser) + " " + dart.str(this.objgen) + " obj\n").length;
      super.write(os);
      this[_offsetEnd] = os.offset;
    }
    writeSignature(os) {
      if (os == null) dart.nullFailed(I[3], 94, 41, "os");
      return async.async(dart.void, (function* writeSignature() {
        if (!(this[_offsetStart] != null && this[_offsetEnd] != null)) dart.assertFailed("Must reserve the object space before signing the document", I[3], 95, 12, "_offsetStart != null && _offsetEnd != null");
        yield this.value.sign(this, os, this.params, this[_offsetStart], this[_offsetEnd]);
      }).bind(this));
    }
  };
  (signature.PdfSignature.new = function(pdfDocument, opts) {
    let t0, t0$, t0$0;
    if (pdfDocument == null) dart.nullFailed(I[3], 41, 17, "pdfDocument");
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[3], 42, 19, "value");
    let flags = opts && 'flags' in opts ? opts.flags : null;
    if (flags == null) dart.nullFailed(I[3], 43, 19, "flags");
    let crl = opts && 'crl' in opts ? opts.crl : null;
    let cert = opts && 'cert' in opts ? opts.cert : null;
    let ocsp = opts && 'ocsp' in opts ? opts.ocsp : null;
    this[crl$] = T$.JSArrayOfPdfObjectStream().of([]);
    this[cert$] = T$.JSArrayOfPdfObjectStream().of([]);
    this[ocsp$] = T$.JSArrayOfPdfObjectStream().of([]);
    this[_offsetStart] = null;
    this[_offsetEnd] = null;
    this[value$] = value;
    this[flags$] = flags;
    signature.PdfSignature.__proto__.new.call(this, pdfDocument, {type: "/Sig"});
    if (crl != null) {
      for (let o of crl) {
        this.crl[$add]((t0 = new object_stream.PdfObjectStream.new(pdfDocument), (() => {
          t0.buf.putBytes(o);
          return t0;
        })()));
      }
    }
    if (cert != null) {
      for (let o of cert) {
        this.cert[$add]((t0$ = new object_stream.PdfObjectStream.new(pdfDocument), (() => {
          t0$.buf.putBytes(o);
          return t0$;
        })()));
      }
    }
    if (ocsp != null) {
      for (let o of ocsp) {
        this.ocsp[$add]((t0$0 = new object_stream.PdfObjectStream.new(pdfDocument), (() => {
          t0$0.buf.putBytes(o);
          return t0$0;
        })()));
      }
    }
  }).prototype = signature.PdfSignature.prototype;
  dart.addTypeTests(signature.PdfSignature);
  dart.addTypeCaches(signature.PdfSignature);
  dart.setMethodSignature(signature.PdfSignature, () => ({
    __proto__: dart.getMethods(signature.PdfSignature.__proto__),
    writeSignature: dart.fnType(async.Future$(dart.void), [stream.PdfStream])
  }));
  dart.setGetterSignature(signature.PdfSignature, () => ({
    __proto__: dart.getGetters(signature.PdfSignature.__proto__),
    flagsValue: core.int
  }));
  dart.setLibraryUri(signature.PdfSignature, I[4]);
  dart.setFieldSignature(signature.PdfSignature, () => ({
    __proto__: dart.getFields(signature.PdfSignature.__proto__),
    flags: dart.finalFieldType(core.Set$(signature.PdfSigFlags)),
    value: dart.finalFieldType(signature.PdfSignatureBase),
    crl: dart.finalFieldType(core.List$(object_stream.PdfObjectStream)),
    cert: dart.finalFieldType(core.List$(object_stream.PdfObjectStream)),
    ocsp: dart.finalFieldType(core.List$(object_stream.PdfObjectStream)),
    [_offsetStart]: dart.fieldType(dart.nullable(core.int)),
    [_offsetEnd]: dart.fieldType(dart.nullable(core.int))
  }));
  signature.PdfSignatureBase = class PdfSignatureBase extends core.Object {
    get hasMDP() {
      return false;
    }
  };
  (signature.PdfSignatureBase.new = function() {
    ;
  }).prototype = signature.PdfSignatureBase.prototype;
  dart.addTypeTests(signature.PdfSignatureBase);
  dart.addTypeCaches(signature.PdfSignatureBase);
  dart.setGetterSignature(signature.PdfSignatureBase, () => ({
    __proto__: dart.getGetters(signature.PdfSignatureBase.__proto__),
    hasMDP: core.bool
  }));
  dart.setLibraryUri(signature.PdfSignatureBase, I[4]);
  var version$ = dart.privateName(output, "PdfOutput.version");
  var os$ = dart.privateName(output, "PdfOutput.os");
  var xref$ = dart.privateName(output, "PdfOutput.xref");
  var rootID = dart.privateName(output, "PdfOutput.rootID");
  var infoID = dart.privateName(output, "PdfOutput.infoID");
  var encryptID = dart.privateName(output, "PdfOutput.encryptID");
  var signatureID = dart.privateName(output, "PdfOutput.signatureID");
  var _name$1 = dart.privateName(document$, "_name");
  output.PdfOutput = class PdfOutput extends core.Object {
    get version() {
      return this[version$];
    }
    set version(value) {
      super.version = value;
    }
    get os() {
      return this[os$];
    }
    set os(value) {
      super.os = value;
    }
    get xref() {
      return this[xref$];
    }
    set xref(value) {
      super.xref = value;
    }
    get rootID() {
      return this[rootID];
    }
    set rootID(value) {
      this[rootID] = value;
    }
    get infoID() {
      return this[infoID];
    }
    set infoID(value) {
      this[infoID] = value;
    }
    get encryptID() {
      return this[encryptID];
    }
    set encryptID(value) {
      this[encryptID] = value;
    }
    get signatureID() {
      return this[signatureID];
    }
    set signatureID(value) {
      this[signatureID] = value;
    }
    get isCompressed() {
      return dart.notNull(this.version.index) > dart.notNull(document$.PdfVersion.pdf_1_4.index);
    }
    write(ob) {
      if (ob == null) dart.nullFailed(I[10], 70, 24, "ob");
      if (catalog.PdfCatalog.is(ob)) {
        this.rootID = ob;
      } else if (info.PdfInfo.is(ob)) {
        this.infoID = ob;
      } else if (encryption.PdfEncryption.is(ob)) {
        this.encryptID = ob;
      } else if (signature.PdfSignature.is(ob)) {
        if (!(this.signatureID == null)) dart.assertFailed("Only one document signature is allowed", I[10], 79, 14, "signatureID == null");
        this.signatureID = ob;
      }
      this.xref.add(new xref.PdfXref.new(ob.objser, this.os.offset));
      ob.write(this.os);
    }
    close() {
      return async.async(dart.void, (function* close() {
        if (this.rootID == null) {
          dart.throw(core.Exception.new("Root object is not present in document"));
        }
        let params = T$.PdfDictOfPdfDataType().new();
        params._set("/Size", new data_types.PdfNum.new(dart.nullCheck(this.rootID).pdfDocument.objser));
        params._set("/Root", dart.nullCheck(this.rootID).ref());
        let id = new data_types.PdfString.new(dart.nullCheck(this.rootID).pdfDocument.documentID, data_types.PdfStringFormat.binary);
        params._set("/ID", new (T$.PdfArrayOfPdfString()).new(T$.JSArrayOfPdfString().of([id, id])));
        if (this.infoID != null) {
          params._set("/Info", dart.nullCheck(this.infoID).ref());
        }
        if (this.encryptID != null) {
          params._set("/Encrypt", dart.nullCheck(this.encryptID).ref());
        }
        if (dart.nullCheck(this.rootID).pdfDocument.prev != null) {
          params._set("/Prev", new data_types.PdfNum.new(dart.nullCheck(dart.nullCheck(this.rootID).pdfDocument.prev).xrefOffset));
        }
        let _xref = this.os.offset;
        if (dart.test(this.isCompressed)) {
          this.xref.outputCompressed(dart.nullCheck(this.rootID), this.os, params);
        } else {
          this.xref.output(this.os);
        }
        if (!dart.test(this.isCompressed)) {
          this.os.putString("trailer\n");
          params.output(this.os);
          this.os.putByte(10);
        }
        this.os.putString("startxref\n" + dart.str(_xref) + "\n%%EOF\n");
        if (this.signatureID != null) {
          yield dart.nullCheck(this.signatureID).writeSignature(this.os);
        }
      }).bind(this));
    }
  };
  (output.PdfOutput.new = function(os, version) {
    if (os == null) dart.nullFailed(I[10], 30, 18, "os");
    if (version == null) dart.nullFailed(I[10], 30, 27, "version");
    this[xref$] = new xref.PdfXrefTable.new();
    this[rootID] = null;
    this[infoID] = null;
    this[encryptID] = null;
    this[signatureID] = null;
    this[os$] = os;
    this[version$] = version;
    let v = null;
    switch (this.version) {
      case C[11] || CT.C11:
      {
        v = "1.4";
        break;
      }
      case C[12] || CT.C12:
      {
        v = "1.5";
        break;
      }
      default:
      {
        dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
      }
    }
    this.os.putString("%PDF-" + dart.str(v) + "\n");
    this.os.putBytes(C[13] || CT.C13);
  }).prototype = output.PdfOutput.prototype;
  dart.addTypeTests(output.PdfOutput);
  dart.addTypeCaches(output.PdfOutput);
  dart.setMethodSignature(output.PdfOutput, () => ({
    __proto__: dart.getMethods(output.PdfOutput.__proto__),
    write: dart.fnType(dart.void, [object.PdfObject$(data_types.PdfDataType)]),
    close: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(output.PdfOutput, () => ({
    __proto__: dart.getGetters(output.PdfOutput.__proto__),
    isCompressed: core.bool
  }));
  dart.setLibraryUri(output.PdfOutput, I[11]);
  dart.setFieldSignature(output.PdfOutput, () => ({
    __proto__: dart.getFields(output.PdfOutput.__proto__),
    version: dart.finalFieldType(document$.PdfVersion),
    os: dart.finalFieldType(stream.PdfStream),
    xref: dart.finalFieldType(xref.PdfXrefTable),
    rootID: dart.fieldType(dart.nullable(catalog.PdfCatalog)),
    infoID: dart.fieldType(dart.nullable(info.PdfInfo)),
    encryptID: dart.fieldType(dart.nullable(encryption.PdfEncryption)),
    signatureID: dart.fieldType(dart.nullable(signature.PdfSignature))
  }));
  dart.defineLazy(js, {
    /*js.defaultDeflate*/get defaultDeflate() {
      return dart.bind(C[14] || CT.C14, 'encode');
    },
    set defaultDeflate(_) {}
  }, false);
  var author$ = dart.privateName(info, "PdfInfo.author");
  var creator$ = dart.privateName(info, "PdfInfo.creator");
  var title$ = dart.privateName(info, "PdfInfo.title");
  var subject$ = dart.privateName(info, "PdfInfo.subject");
  var keywords$ = dart.privateName(info, "PdfInfo.keywords");
  var producer$ = dart.privateName(info, "PdfInfo.producer");
  info.PdfInfo = class PdfInfo extends object_dict.PdfObjectDict {
    get author() {
      return this[author$];
    }
    set author(value) {
      super.author = value;
    }
    get creator() {
      return this[creator$];
    }
    set creator(value) {
      super.creator = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get subject() {
      return this[subject$];
    }
    set subject(value) {
      super.subject = value;
    }
    get keywords() {
      return this[keywords$];
    }
    set keywords(value) {
      super.keywords = value;
    }
    get producer() {
      return this[producer$];
    }
    set producer(value) {
      super.producer = value;
    }
  };
  (info.PdfInfo.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[12], 24, 23, "pdfDocument");
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    this[title$] = title;
    this[author$] = author;
    this[creator$] = creator;
    this[subject$] = subject;
    this[keywords$] = keywords;
    this[producer$] = producer;
    info.PdfInfo.__proto__.new.call(this, pdfDocument);
    if (this.author != null) {
      this.params._set("/Author", data_types.PdfSecString.fromString(this, dart.nullCheck(this.author)));
    }
    if (this.creator != null) {
      this.params._set("/Creator", data_types.PdfSecString.fromString(this, dart.nullCheck(this.creator)));
    }
    if (this.title != null) {
      this.params._set("/Title", data_types.PdfSecString.fromString(this, dart.nullCheck(this.title)));
    }
    if (this.subject != null) {
      this.params._set("/Subject", data_types.PdfSecString.fromString(this, dart.nullCheck(this.subject)));
    }
    if (this.keywords != null) {
      this.params._set("/Keywords", data_types.PdfSecString.fromString(this, dart.nullCheck(this.keywords)));
    }
    if (this.producer != null) {
      this.params._set("/Producer", data_types.PdfSecString.fromString(this, dart.str(this.producer) + " (" + dart.str(info.PdfInfo._libraryName) + ")"));
    } else {
      this.params._set("/Producer", data_types.PdfSecString.fromString(this, info.PdfInfo._libraryName));
    }
    this.params._set("/CreationDate", data_types.PdfSecString.fromDate(this, new core.DateTime.now()));
  }).prototype = info.PdfInfo.prototype;
  dart.addTypeTests(info.PdfInfo);
  dart.addTypeCaches(info.PdfInfo);
  dart.setLibraryUri(info.PdfInfo, I[13]);
  dart.setFieldSignature(info.PdfInfo, () => ({
    __proto__: dart.getFields(info.PdfInfo.__proto__),
    author: dart.finalFieldType(dart.nullable(core.String)),
    creator: dart.finalFieldType(dart.nullable(core.String)),
    title: dart.finalFieldType(dart.nullable(core.String)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    keywords: dart.finalFieldType(dart.nullable(core.String)),
    producer: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(info.PdfInfo, {
    /*info.PdfInfo._libraryName*/get _libraryName() {
      return "https://github.com/DavBfr/dart_pdf";
    }
  }, false);
  encryption.PdfEncryption = class PdfEncryption extends object_dict.PdfObjectDict {};
  (encryption.PdfEncryption.new = function(pdfDocument) {
    if (pdfDocument == null) dart.nullFailed(I[14], 26, 29, "pdfDocument");
    encryption.PdfEncryption.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = encryption.PdfEncryption.prototype;
  dart.addTypeTests(encryption.PdfEncryption);
  dart.addTypeCaches(encryption.PdfEncryption);
  dart.setLibraryUri(encryption.PdfEncryption, I[15]);
  var bytes$ = dart.privateName(document_parser, "PdfDocumentParserBase.bytes");
  document_parser.PdfDocumentParserBase = class PdfDocumentParserBase extends core.Object {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    get version() {
      return document$.PdfVersion.pdf_1_4;
    }
  };
  (document_parser.PdfDocumentParserBase.new = function(bytes) {
    if (bytes == null) dart.nullFailed(I[16], 24, 30, "bytes");
    this[bytes$] = bytes;
    ;
  }).prototype = document_parser.PdfDocumentParserBase.prototype;
  dart.addTypeTests(document_parser.PdfDocumentParserBase);
  dart.addTypeCaches(document_parser.PdfDocumentParserBase);
  dart.setGetterSignature(document_parser.PdfDocumentParserBase, () => ({
    __proto__: dart.getGetters(document_parser.PdfDocumentParserBase.__proto__),
    version: document$.PdfVersion
  }));
  dart.setLibraryUri(document_parser.PdfDocumentParserBase, I[17]);
  dart.setFieldSignature(document_parser.PdfDocumentParserBase, () => ({
    __proto__: dart.getFields(document_parser.PdfDocumentParserBase.__proto__),
    bytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  var pages = dart.privateName(page_list, "PdfPageList.pages");
  page_list.PdfPageList = class PdfPageList extends object_dict.PdfObjectDict {
    get pages() {
      return this[pages];
    }
    set pages(value) {
      super.pages = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/Kids", data_types.PdfArray.fromObjects(this.pages));
      this.params._set("/Count", new data_types.PdfNum.new(this.pages[$length]));
    }
  };
  (page_list.PdfPageList.new = function(pdfDocument) {
    if (pdfDocument == null) dart.nullFailed(I[18], 25, 27, "pdfDocument");
    this[pages] = T$.JSArrayOfPdfPage().of([]);
    page_list.PdfPageList.__proto__.new.call(this, pdfDocument, {type: "/Pages"});
    ;
  }).prototype = page_list.PdfPageList.prototype;
  dart.addTypeTests(page_list.PdfPageList);
  dart.addTypeCaches(page_list.PdfPageList);
  dart.setLibraryUri(page_list.PdfPageList, I[19]);
  dart.setFieldSignature(page_list.PdfPageList, () => ({
    __proto__: dart.getFields(page_list.PdfPageList.__proto__),
    pages: dart.finalFieldType(core.List$(page.PdfPage))
  }));
  var _name$2 = dart.privateName(outline, "_name");
  outline.PdfOutlineMode = class PdfOutlineMode extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (outline.PdfOutlineMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[20], 25, 6, "index");
    if (_name == null) dart.nullFailed(I[20], 25, 6, "_name");
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = outline.PdfOutlineMode.prototype;
  dart.addTypeTests(outline.PdfOutlineMode);
  dart.addTypeCaches(outline.PdfOutlineMode);
  dart.setLibraryUri(outline.PdfOutlineMode, I[21]);
  dart.setFieldSignature(outline.PdfOutlineMode, () => ({
    __proto__: dart.getFields(outline.PdfOutlineMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$2]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(outline.PdfOutlineMode, ['toString']);
  outline.PdfOutlineMode.fitPage = C[15] || CT.C15;
  outline.PdfOutlineMode.fitRect = C[16] || CT.C16;
  outline.PdfOutlineMode.values = C[17] || CT.C17;
  outline.PdfOutlineStyle = class PdfOutlineStyle extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (outline.PdfOutlineStyle.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[20], 34, 6, "index");
    if (_name == null) dart.nullFailed(I[20], 34, 6, "_name");
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = outline.PdfOutlineStyle.prototype;
  dart.addTypeTests(outline.PdfOutlineStyle);
  dart.addTypeCaches(outline.PdfOutlineStyle);
  dart.setLibraryUri(outline.PdfOutlineStyle, I[21]);
  dart.setFieldSignature(outline.PdfOutlineStyle, () => ({
    __proto__: dart.getFields(outline.PdfOutlineStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$2]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(outline.PdfOutlineStyle, ['toString']);
  outline.PdfOutlineStyle.normal = C[18] || CT.C18;
  outline.PdfOutlineStyle.italic = C[19] || CT.C19;
  outline.PdfOutlineStyle.bold = C[20] || CT.C20;
  outline.PdfOutlineStyle.italicBold = C[21] || CT.C21;
  outline.PdfOutlineStyle.values = C[22] || CT.C22;
  var outlines = dart.privateName(outline, "PdfOutline.outlines");
  var parent = dart.privateName(outline, "PdfOutline.parent");
  var title$0 = dart.privateName(outline, "PdfOutline.title");
  var dest$ = dart.privateName(outline, "PdfOutline.dest");
  var rect$ = dart.privateName(outline, "PdfOutline.rect");
  var anchor$ = dart.privateName(outline, "PdfOutline.anchor");
  var color$0 = dart.privateName(outline, "PdfOutline.color");
  var destMode$ = dart.privateName(outline, "PdfOutline.destMode");
  var style$ = dart.privateName(outline, "PdfOutline.style");
  var effectiveLevel = dart.privateName(outline, "PdfOutline.effectiveLevel");
  var _page = dart.privateName(outline, "_page");
  outline.PdfOutline = class PdfOutline extends object_dict.PdfObjectDict {
    get outlines() {
      return this[outlines];
    }
    set outlines(value) {
      this[outlines] = value;
    }
    get parent() {
      return this[parent];
    }
    set parent(value) {
      this[parent] = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      super.title = value;
    }
    get dest() {
      return this[dest$];
    }
    set dest(value) {
      this[dest$] = value;
    }
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get destMode() {
      return this[destMode$];
    }
    set destMode(value) {
      super.destMode = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get effectiveLevel() {
      return this[effectiveLevel];
    }
    set effectiveLevel(value) {
      this[effectiveLevel] = value;
    }
    get page() {
      let t0;
      t0 = this[_page];
      return t0 == null ? this.dest != null ? dart.notNull(this.pdfDocument.pdfPageList.pages[$indexOf](dart.nullCheck(this.dest))) + 1 : null : t0;
    }
    add(outline) {
      if (outline == null) dart.nullFailed(I[20], 104, 23, "outline");
      outline.parent = this;
      this.outlines[$add](outline);
    }
    prepare() {
      super.prepare();
      if (this.parent != null) {
        this.params._set("/Title", data_types.PdfSecString.fromString(this, dart.nullCheck(this.title)));
        if (this.color != null) {
          this.params._set("/C", new data_types.PdfColorType.new(dart.nullCheck(this.color)));
        }
        if (this.style != outline.PdfOutlineStyle.normal) {
          this.params._set("/F", new data_types.PdfNum.new(this.style.index));
        }
        if (this.anchor != null) {
          this.params._set("/Dest", data_types.PdfSecString.fromString(this, dart.nullCheck(this.anchor)));
        } else {
          let dests = new (T$.PdfArrayOfPdfDataType()).new();
          dests.add(dart.nullCheck(this.dest).ref());
          if (this.destMode == outline.PdfOutlineMode.fitPage) {
            dests.add(C[23] || CT.C23);
          } else {
            dests.add(C[24] || CT.C24);
            dests.add(new data_types.PdfNum.new(dart.nullCheck(this.rect).left));
            dests.add(new data_types.PdfNum.new(dart.nullCheck(this.rect).bottom));
            dests.add(new data_types.PdfNum.new(dart.nullCheck(this.rect).right));
            dests.add(new data_types.PdfNum.new(dart.nullCheck(this.rect).top));
          }
          this.params._set("/Dest", dests);
        }
        this.params._set("/Parent", dart.nullCheck(this.parent).ref());
        let c = this.descendants();
        if (dart.notNull(c) > 0) {
          this.params._set("/Count", new data_types.PdfNum.new(-dart.notNull(c)));
        }
        let index = dart.nullCheck(this.parent).getIndex(this);
        if (dart.notNull(index) > 0) {
          this.params._set("/Prev", dart.nullCheck(this.parent).getNode(dart.notNull(index) - 1).ref());
        }
        if (dart.notNull(index) < dart.notNull(dart.nullCheck(this.parent).getLast())) {
          this.params._set("/Next", dart.nullCheck(this.parent).getNode(dart.notNull(index) + 1).ref());
        }
      } else {
        this.params._set("/Count", new data_types.PdfNum.new(this.outlines[$length]));
      }
      if (dart.test(this.outlines[$isNotEmpty])) {
        this.params._set("/First", this.outlines[$_get](0).ref());
        this.params._set("/Last", this.outlines[$_get](dart.notNull(this.outlines[$length]) - 1).ref());
      }
    }
    getIndex(outline) {
      if (outline == null) dart.nullFailed(I[20], 179, 27, "outline");
      return this.outlines[$indexOf](outline);
    }
    getLast() {
      return dart.notNull(this.outlines[$length]) - 1;
    }
    getNode(i) {
      if (i == null) dart.nullFailed(I[20], 185, 26, "i");
      return this.outlines[$_get](i);
    }
    descendants() {
      let c = this.outlines[$length];
      for (let o of this.outlines) {
        c = dart.notNull(c) + dart.notNull(o.descendants());
      }
      return c;
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.anchor) + " " + dart.str(this.title);
    }
  };
  (outline.PdfOutline.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[20], 53, 17, "pdfDocument");
    let title = opts && 'title' in opts ? opts.title : null;
    let dest = opts && 'dest' in opts ? opts.dest : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let destMode = opts && 'destMode' in opts ? opts.destMode : C[15] || CT.C15;
    if (destMode == null) dart.nullFailed(I[20], 59, 10, "destMode");
    let style = opts && 'style' in opts ? opts.style : C[18] || CT.C18;
    if (style == null) dart.nullFailed(I[20], 60, 10, "style");
    let page = opts && 'page' in opts ? opts.page : null;
    this[outlines] = T$.JSArrayOfPdfOutline().of([]);
    this[parent] = null;
    this[effectiveLevel] = null;
    this[title$0] = title;
    this[dest$] = dest;
    this[rect$] = rect;
    this[anchor$] = anchor;
    this[color$0] = color;
    this[destMode$] = destMode;
    this[style$] = style;
    if (!(anchor == null || dest == null && rect == null)) dart.assertFailed(null, I[20], 62, 16, "anchor == null || (dest == null && rect == null)");
    this[_page] = page;
    outline.PdfOutline.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = outline.PdfOutline.prototype;
  dart.addTypeTests(outline.PdfOutline);
  dart.addTypeCaches(outline.PdfOutline);
  dart.setMethodSignature(outline.PdfOutline, () => ({
    __proto__: dart.getMethods(outline.PdfOutline.__proto__),
    add: dart.fnType(dart.void, [outline.PdfOutline]),
    getIndex: dart.fnType(core.int, [outline.PdfOutline]),
    getLast: dart.fnType(core.int, []),
    getNode: dart.fnType(outline.PdfOutline, [core.int]),
    descendants: dart.fnType(core.int, [])
  }));
  dart.setGetterSignature(outline.PdfOutline, () => ({
    __proto__: dart.getGetters(outline.PdfOutline.__proto__),
    page: dart.nullable(core.int)
  }));
  dart.setLibraryUri(outline.PdfOutline, I[21]);
  dart.setFieldSignature(outline.PdfOutline, () => ({
    __proto__: dart.getFields(outline.PdfOutline.__proto__),
    outlines: dart.fieldType(core.List$(outline.PdfOutline)),
    parent: dart.fieldType(dart.nullable(outline.PdfOutline)),
    title: dart.finalFieldType(dart.nullable(core.String)),
    dest: dart.fieldType(dart.nullable(page.PdfPage)),
    [_page]: dart.finalFieldType(dart.nullable(core.int)),
    rect: dart.finalFieldType(dart.nullable(rect.PdfRect)),
    anchor: dart.finalFieldType(dart.nullable(core.String)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    destMode: dart.finalFieldType(outline.PdfOutlineMode),
    style: dart.finalFieldType(outline.PdfOutlineStyle),
    effectiveLevel: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(outline.PdfOutline, ['toString']);
  var _name$3 = dart.privateName(shading, "_name");
  shading.PdfShadingType = class PdfShadingType extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (shading.PdfShadingType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[22], 24, 6, "index");
    if (_name == null) dart.nullFailed(I[22], 24, 6, "_name");
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = shading.PdfShadingType.prototype;
  dart.addTypeTests(shading.PdfShadingType);
  dart.addTypeCaches(shading.PdfShadingType);
  dart.setLibraryUri(shading.PdfShadingType, I[23]);
  dart.setFieldSignature(shading.PdfShadingType, () => ({
    __proto__: dart.getFields(shading.PdfShadingType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$3]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(shading.PdfShadingType, ['toString']);
  shading.PdfShadingType.axial = C[25] || CT.C25;
  shading.PdfShadingType.radial = C[26] || CT.C26;
  shading.PdfShadingType.values = C[27] || CT.C27;
  var shadingType$ = dart.privateName(shading, "PdfShading.shadingType");
  var $function$ = dart.privateName(shading, "PdfShading.function");
  var start$ = dart.privateName(shading, "PdfShading.start");
  var end$ = dart.privateName(shading, "PdfShading.end");
  var boundingBox$ = dart.privateName(shading, "PdfShading.boundingBox");
  var extendStart$ = dart.privateName(shading, "PdfShading.extendStart");
  var extendEnd$ = dart.privateName(shading, "PdfShading.extendEnd");
  var radius0$ = dart.privateName(shading, "PdfShading.radius0");
  var radius1$ = dart.privateName(shading, "PdfShading.radius1");
  var PdfBool_value = dart.privateName(data_types, "PdfBool.value");
  shading.PdfShading = class PdfShading extends object_dict.PdfObjectDict {
    get shadingType() {
      return this[shadingType$];
    }
    set shadingType(value) {
      super.shadingType = value;
    }
    get function() {
      return this[$function$];
    }
    set function(value) {
      super.function = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get boundingBox() {
      return this[boundingBox$];
    }
    set boundingBox(value) {
      super.boundingBox = value;
    }
    get extendStart() {
      return this[extendStart$];
    }
    set extendStart(value) {
      super.extendStart = value;
    }
    get extendEnd() {
      return this[extendEnd$];
    }
    set extendEnd(value) {
      super.extendEnd = value;
    }
    get radius0() {
      return this[radius0$];
    }
    set radius0(value) {
      super.radius0 = value;
    }
    get radius1() {
      return this[radius1$];
    }
    set radius1(value) {
      super.radius1 = value;
    }
    get name() {
      return "/S" + dart.str(this.objser);
    }
    prepare() {
      super.prepare();
      this.params._set("/ShadingType", new data_types.PdfNum.new(dart.notNull(this.shadingType.index) + 2));
      if (this.boundingBox != null) {
        this.params._set("/BBox", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([dart.nullCheck(this.boundingBox).left, dart.nullCheck(this.boundingBox).bottom, dart.nullCheck(this.boundingBox).right, dart.nullCheck(this.boundingBox).top])));
      }
      this.params._set("/AntiAlias", C[28] || CT.C28);
      this.params._set("/ColorSpace", C[29] || CT.C29);
      if (this.shadingType == shading.PdfShadingType.axial) {
        this.params._set("/Coords", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([this.start.x, this.start.y, this.end.x, this.end.y])));
      } else if (this.shadingType == shading.PdfShadingType.radial) {
        if (!(this.radius0 != null)) dart.assertFailed(null, I[22], 80, 14, "radius0 != null");
        if (!(this.radius1 != null)) dart.assertFailed(null, I[22], 81, 14, "radius1 != null");
        this.params._set("/Coords", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([this.start.x, this.start.y, dart.nullCheck(this.radius0), this.end.x, this.end.y, dart.nullCheck(this.radius1)])));
      }
      if (dart.test(this.extendStart) || dart.test(this.extendEnd)) {
        this.params._set("/Extend", new (T$.PdfArrayOfPdfBool()).new(T$.JSArrayOfPdfBool().of([new data_types.PdfBool.new(this.extendStart), new data_types.PdfBool.new(this.extendEnd)])));
      }
      this.params._set("/Function", this.function.ref());
    }
  };
  (shading.PdfShading.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[22], 28, 17, "pdfDocument");
    let shadingType = opts && 'shadingType' in opts ? opts.shadingType : null;
    if (shadingType == null) dart.nullFailed(I[22], 29, 19, "shadingType");
    let $function = opts && 'function' in opts ? opts.function : null;
    if ($function == null) dart.nullFailed(I[22], 30, 19, "function");
    let start = opts && 'start' in opts ? opts.start : null;
    if (start == null) dart.nullFailed(I[22], 31, 19, "start");
    let end = opts && 'end' in opts ? opts.end : null;
    if (end == null) dart.nullFailed(I[22], 32, 19, "end");
    let radius0 = opts && 'radius0' in opts ? opts.radius0 : null;
    let radius1 = opts && 'radius1' in opts ? opts.radius1 : null;
    let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
    let extendStart = opts && 'extendStart' in opts ? opts.extendStart : false;
    if (extendStart == null) dart.nullFailed(I[22], 36, 10, "extendStart");
    let extendEnd = opts && 'extendEnd' in opts ? opts.extendEnd : false;
    if (extendEnd == null) dart.nullFailed(I[22], 37, 10, "extendEnd");
    this[shadingType$] = shadingType;
    this[$function$] = $function;
    this[start$] = start;
    this[end$] = end;
    this[radius0$] = radius0;
    this[radius1$] = radius1;
    this[boundingBox$] = boundingBox;
    this[extendStart$] = extendStart;
    this[extendEnd$] = extendEnd;
    shading.PdfShading.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = shading.PdfShading.prototype;
  dart.addTypeTests(shading.PdfShading);
  dart.addTypeCaches(shading.PdfShading);
  dart.setGetterSignature(shading.PdfShading, () => ({
    __proto__: dart.getGetters(shading.PdfShading.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(shading.PdfShading, I[23]);
  dart.setFieldSignature(shading.PdfShading, () => ({
    __proto__: dart.getFields(shading.PdfShading.__proto__),
    shadingType: dart.finalFieldType(shading.PdfShadingType),
    function: dart.finalFieldType($function.PdfBaseFunction),
    start: dart.finalFieldType(point.PdfPoint),
    end: dart.finalFieldType(point.PdfPoint),
    boundingBox: dart.finalFieldType(dart.nullable(rect.PdfRect)),
    extendStart: dart.finalFieldType(core.bool),
    extendEnd: dart.finalFieldType(core.bool),
    radius0: dart.finalFieldType(dart.nullable(core.double)),
    radius1: dart.finalFieldType(dart.nullable(core.double))
  }));
  var patternType$ = dart.privateName(pattern, "PdfPattern.patternType");
  var matrix$ = dart.privateName(pattern, "PdfPattern.matrix");
  pattern.PdfPattern = class PdfPattern extends object_dict.PdfObjectDict {
    get patternType() {
      return this[patternType$];
    }
    set patternType(value) {
      super.patternType = value;
    }
    get matrix() {
      return this[matrix$];
    }
    set matrix(value) {
      super.matrix = value;
    }
    get name() {
      return "/P" + dart.str(this.objser);
    }
    prepare() {
      super.prepare();
      this.params._set("/PatternType", new data_types.PdfNum.new(this.patternType));
      if (this.matrix != null) {
        let s = dart.nullCheck(this.matrix).storage;
        this.params._set("/Matrix", data_types.PdfArray.fromNum(T$.JSArrayOfdouble().of([s[$_get](0), s[$_get](1), s[$_get](4), s[$_get](5), s[$_get](12), s[$_get](13)])));
      }
    }
  };
  (pattern.PdfPattern.new = function(pdfDocument, patternType, matrix) {
    if (pdfDocument == null) dart.nullFailed(I[24], 26, 26, "pdfDocument");
    if (patternType == null) dart.nullFailed(I[24], 26, 44, "patternType");
    this[patternType$] = patternType;
    this[matrix$] = matrix;
    pattern.PdfPattern.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = pattern.PdfPattern.prototype;
  dart.addTypeTests(pattern.PdfPattern);
  dart.addTypeCaches(pattern.PdfPattern);
  dart.setGetterSignature(pattern.PdfPattern, () => ({
    __proto__: dart.getGetters(pattern.PdfPattern.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(pattern.PdfPattern, I[25]);
  dart.setFieldSignature(pattern.PdfPattern, () => ({
    __proto__: dart.getFields(pattern.PdfPattern.__proto__),
    patternType: dart.finalFieldType(core.int),
    matrix: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var shading$ = dart.privateName(pattern, "PdfShadingPattern.shading");
  var graphicState$ = dart.privateName(pattern, "PdfShadingPattern.graphicState");
  pattern.PdfShadingPattern = class PdfShadingPattern extends pattern.PdfPattern {
    get shading() {
      return this[shading$];
    }
    set shading(value) {
      super.shading = value;
    }
    get graphicState() {
      return this[graphicState$];
    }
    set graphicState(value) {
      super.graphicState = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/Shading", this.shading.ref());
      if (this.graphicState != null) {
        this.params._set("/ExtGState", dart.nullCheck(this.graphicState).output());
      }
    }
  };
  (pattern.PdfShadingPattern.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[24], 52, 17, "pdfDocument");
    let shading = opts && 'shading' in opts ? opts.shading : null;
    if (shading == null) dart.nullFailed(I[24], 53, 19, "shading");
    let matrix = opts && 'matrix' in opts ? opts.matrix : null;
    let graphicState = opts && 'graphicState' in opts ? opts.graphicState : null;
    this[shading$] = shading;
    this[graphicState$] = graphicState;
    pattern.PdfShadingPattern.__proto__.new.call(this, pdfDocument, 2, matrix);
    ;
  }).prototype = pattern.PdfShadingPattern.prototype;
  dart.addTypeTests(pattern.PdfShadingPattern);
  dart.addTypeCaches(pattern.PdfShadingPattern);
  dart.setLibraryUri(pattern.PdfShadingPattern, I[25]);
  dart.setFieldSignature(pattern.PdfShadingPattern, () => ({
    __proto__: dart.getFields(pattern.PdfShadingPattern.__proto__),
    shading: dart.finalFieldType(shading.PdfShading),
    graphicState: dart.finalFieldType(dart.nullable(graphic_state.PdfGraphicState))
  }));
  var buf = dart.privateName(object_stream, "PdfObjectStream.buf");
  var isBinary$ = dart.privateName(object_stream, "PdfObjectStream.isBinary");
  object_stream.PdfObjectStream = class PdfObjectStream extends object_dict.PdfObjectDict {
    get buf() {
      return this[buf];
    }
    set buf(value) {
      super.buf = value;
    }
    get isBinary() {
      return this[isBinary$];
    }
    set isBinary(value) {
      super.isBinary = value;
    }
    writeContent(os) {
      if (os == null) dart.nullFailed(I[27], 38, 31, "os");
      new data_types.PdfDictStream.values({object: this, isBinary: this.isBinary, values: this.params.values, data: this.buf.output()}).output(os);
    }
  };
  (object_stream.PdfObjectStream.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[27], 26, 17, "pdfDocument");
    let type = opts && 'type' in opts ? opts.type : null;
    let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
    if (isBinary == null) dart.nullFailed(I[27], 28, 10, "isBinary");
    this[buf] = new stream.PdfStream.new();
    this[isBinary$] = isBinary;
    object_stream.PdfObjectStream.__proto__.new.call(this, pdfDocument, {type: type});
    ;
  }).prototype = object_stream.PdfObjectStream.prototype;
  dart.addTypeTests(object_stream.PdfObjectStream);
  dart.addTypeCaches(object_stream.PdfObjectStream);
  dart.setLibraryUri(object_stream.PdfObjectStream, I[28]);
  dart.setFieldSignature(object_stream.PdfObjectStream, () => ({
    __proto__: dart.getFields(object_stream.PdfObjectStream.__proto__),
    buf: dart.finalFieldType(stream.PdfStream),
    isBinary: dart.finalFieldType(core.bool)
  }));
  xobject.PdfXObject = class PdfXObject extends object_stream.PdfObjectStream {
    get name() {
      return "X" + dart.str(this.objser);
    }
  };
  (xobject.PdfXObject.new = function(pdfDocument, subtype, opts) {
    if (pdfDocument == null) dart.nullFailed(I[26], 22, 26, "pdfDocument");
    let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
    if (isBinary == null) dart.nullFailed(I[26], 22, 62, "isBinary");
    xobject.PdfXObject.__proto__.new.call(this, pdfDocument, {type: "/XObject", isBinary: isBinary});
    if (subtype != null) {
      this.params._set("/Subtype", new data_types.PdfName.new(subtype));
    }
  }).prototype = xobject.PdfXObject.prototype;
  dart.addTypeTests(xobject.PdfXObject);
  dart.addTypeCaches(xobject.PdfXObject);
  dart.setGetterSignature(xobject.PdfXObject, () => ({
    __proto__: dart.getGetters(xobject.PdfXObject.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(xobject.PdfXObject, I[29]);
  var width$ = dart.privateName(exif, "PdfJpegInfo.width");
  var height$ = dart.privateName(exif, "PdfJpegInfo.height");
  var tags$ = dart.privateName(exif, "PdfJpegInfo.tags");
  var _color$ = dart.privateName(exif, "_color");
  var _name$4 = dart.privateName(exif, "_name");
  exif.PdfJpegInfo = class PdfJpegInfo extends core.Object {
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get tags() {
      return this[tags$];
    }
    set tags(value) {
      super.tags = value;
    }
    static new(image) {
      if (image == null) dart.nullFailed(I[30], 25, 33, "image");
      let buffer = image[$buffer][$asByteData](image[$offsetInBytes], image[$lengthInBytes]);
      let width = null;
      let height = null;
      let color = null;
      let offset = 0;
      while (offset < dart.notNull(buffer[$lengthInBytes])) {
        while (buffer[$getUint8](offset) === 255) {
          offset = offset + 1;
        }
        let mrkr = buffer[$getUint8](offset);
        offset = offset + 1;
        if (mrkr === 216) {
          continue;
        }
        if (mrkr === 217) {
          break;
        }
        if (208 <= dart.notNull(mrkr) && dart.notNull(mrkr) <= 215) {
          continue;
        }
        if (mrkr === 1) {
          continue;
        }
        let len = buffer[$getUint16](offset);
        offset = offset + 2;
        if (dart.notNull(mrkr) >= 192 && dart.notNull(mrkr) <= 194) {
          height = buffer[$getUint16](offset + 1);
          width = buffer[$getUint16](offset + 3);
          color = buffer[$getUint8](offset + 5);
          break;
        }
        offset = offset + (dart.notNull(len) - 2);
      }
      if (height == null) {
        dart.throw("Unable to find a Jpeg image in the file");
      }
      let tags = exif.PdfJpegInfo._findExifInJpeg(buffer);
      return new exif.PdfJpegInfo.__(width, height, color, tags);
    }
    get isRGB() {
      return this[_color$] === 3;
    }
    get exifVersion() {
      return this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.ExifVersion) == null ? null : convert.utf8.decode(T$.ListOfint().as(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.ExifVersion)));
    }
    get flashpixVersion() {
      return this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.FlashpixVersion) == null ? null : convert.utf8.decode(T$.ListOfint().as(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.FlashpixVersion)));
    }
    get orientation() {
      if (this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.Orientation) == null) {
        return image$0.PdfImageOrientation.topLeft;
      }
      try {
        return image$0.PdfImageOrientation.values[$_get](core.int.as(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.Orientation), '-', [1])));
      } catch (e) {
        let ex = dart.getThrown(e);
        if (core.RangeError.is(ex)) {
          return image$0.PdfImageOrientation.topLeft;
        } else
          throw e;
      }
    }
    get xResolution() {
      return T$.doubleN().as(this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.XResolution) == null ? null : dart.dsend(dart.dsend(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.XResolution), '_get', [0]), 'toDouble', []), '/', [dart.dsend(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.XResolution), '_get', [1]), 'toDouble', [])]));
    }
    get yResolution() {
      return T$.doubleN().as(this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.YResolution) == null ? null : dart.dsend(dart.dsend(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.YResolution), '_get', [0]), 'toDouble', []), '/', [dart.dsend(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.YResolution), '_get', [1]), 'toDouble', [])]));
    }
    get pixelXDimension() {
      return T$.intN().as(this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.PixelXDimension) == null ? this.width : dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.PixelXDimension));
    }
    get pixelYDimension() {
      return T$.intN().as(this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.PixelYDimension) == null ? this.height : dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.PixelYDimension));
    }
    toString() {
      return "width: " + dart.str(this.width) + " height: " + dart.str(this.height) + "\nexifVersion: " + dart.str(this.exifVersion) + " flashpixVersion: " + dart.str(this.flashpixVersion) + "\nxResolution: " + dart.str(this.xResolution) + " yResolution: " + dart.str(this.yResolution) + "\npixelXDimension: " + dart.str(this.pixelXDimension) + " pixelYDimension: " + dart.str(this.pixelYDimension) + "\norientation: " + dart.str(this.orientation);
    }
    static _findExifInJpeg(buffer) {
      if (buffer == null) dart.nullFailed(I[30], 154, 61, "buffer");
      if (buffer[$getUint8](0) !== 255 || buffer[$getUint8](1) !== 216) {
        return new (T$.LinkedMapOfPdfExifTag$dynamic()).new();
      }
      let offset = 2;
      let length = buffer[$lengthInBytes];
      let marker = null;
      while (offset < dart.notNull(length)) {
        let lastValue = buffer[$getUint8](offset);
        if (lastValue !== 255) {
          return new (T$.LinkedMapOfPdfExifTag$dynamic()).new();
        }
        marker = buffer[$getUint8](offset + 1);
        if (marker === 225) {
          return exif.PdfJpegInfo._readEXIFData(buffer, offset + 4);
        } else {
          offset = offset + (2 + dart.notNull(buffer[$getUint16](offset + 2)));
        }
      }
      return new (T$.LinkedMapOfPdfExifTag$dynamic()).new();
    }
    static _readTags(file, tiffStart, dirStart, bigEnd) {
      if (file == null) dart.nullFailed(I[30], 185, 14, "file");
      if (tiffStart == null) dart.nullFailed(I[30], 186, 9, "tiffStart");
      if (dirStart == null) dart.nullFailed(I[30], 187, 9, "dirStart");
      if (bigEnd == null) dart.nullFailed(I[30], 188, 12, "bigEnd");
      let entries = file[$getUint16](dirStart, bigEnd);
      let tags = new (T$.LinkedMapOfPdfExifTag$dynamic()).new();
      let entryOffset = null;
      for (let i = 0; i < dart.notNull(entries); i = i + 1) {
        entryOffset = dart.notNull(dirStart) + i * 12 + 2;
        let tagId = file[$getUint16](entryOffset, bigEnd);
        let tag = exif.PdfJpegInfo._exifTags[$_get](tagId);
        if (tag != null) {
          tags[$_set](tag, exif.PdfJpegInfo._readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd));
        }
      }
      return tags;
    }
    static _readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
      if (file == null) dart.nullFailed(I[30], 212, 14, "file");
      if (entryOffset == null) dart.nullFailed(I[30], 213, 9, "entryOffset");
      if (tiffStart == null) dart.nullFailed(I[30], 214, 9, "tiffStart");
      if (dirStart == null) dart.nullFailed(I[30], 215, 9, "dirStart");
      if (bigEnd == null) dart.nullFailed(I[30], 216, 12, "bigEnd");
      let type = file[$getUint16](dart.notNull(entryOffset) + 2, bigEnd);
      let numValues = file[$getUint32](dart.notNull(entryOffset) + 4, bigEnd);
      let valueOffset = dart.notNull(file[$getUint32](dart.notNull(entryOffset) + 8, bigEnd)) + dart.notNull(tiffStart);
      switch (type) {
        case 1:
        case 7:
        {
          if (numValues === 1) {
            return file[$getUint8](dart.notNull(entryOffset) + 8);
          }
          let offset = dart.notNull(numValues) > 4 ? valueOffset : dart.notNull(entryOffset) + 8;
          let result = _native_typed_data.NativeUint8List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getUint8](offset + i));
          }
          return result;
        }
        case 2:
        {
          let offset = dart.notNull(numValues) > 4 ? valueOffset : dart.notNull(entryOffset) + 8;
          return exif.PdfJpegInfo._getStringFromDB(file, offset, dart.notNull(numValues) - 1);
        }
        case 3:
        {
          if (numValues === 1) {
            return file[$getUint16](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = dart.notNull(numValues) > 2 ? valueOffset : dart.notNull(entryOffset) + 8;
          let result = _native_typed_data.NativeUint16List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getUint16](offset + i * 2, bigEnd));
          }
          return result;
        }
        case 4:
        {
          if (numValues === 1) {
            return file[$getUint32](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = valueOffset;
          let result = _native_typed_data.NativeUint32List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getUint32](offset + i * 4, bigEnd));
          }
          return result;
        }
        case 5:
        {
          if (numValues === 1) {
            let numerator = file[$getUint32](valueOffset, bigEnd);
            let denominator = file[$getUint32](valueOffset + 4, bigEnd);
            return T$.JSArrayOfint().of([numerator, denominator]);
          }
          let offset = valueOffset;
          let result = T$.JSArrayOfListOfint().of([]);
          for (let i = 0; i < dart.notNull(numValues); i = i + 1) {
            let numerator = file[$getUint32](offset + i * 8, bigEnd);
            let denominator = file[$getUint32](offset + i * 8 + 4, bigEnd);
            result[$add](T$.JSArrayOfint().of([numerator, denominator]));
          }
          return result;
        }
        case 9:
        {
          if (numValues === 1) {
            return file[$getInt32](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = valueOffset;
          let result = _native_typed_data.NativeInt32List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getInt32](offset + i * 4, bigEnd));
          }
          return result;
        }
        case 10:
        {
          if (numValues === 1) {
            let numerator = file[$getInt32](valueOffset, bigEnd);
            let denominator = file[$getInt32](valueOffset + 4, bigEnd);
            return T$.JSArrayOfint().of([numerator, denominator]);
          }
          let offset = valueOffset;
          let result = T$.JSArrayOfListOfint().of([]);
          for (let i = 0; i < dart.notNull(numValues); i = i + 1) {
            let numerator = file[$getInt32](offset + i * 8, bigEnd);
            let denominator = file[$getInt32](offset + i * 8 + 4, bigEnd);
            result[$add](T$.JSArrayOfint().of([numerator, denominator]));
          }
          return result;
        }
        case 11:
        {
          if (numValues === 1) {
            return file[$getFloat32](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = valueOffset;
          let result = _native_typed_data.NativeFloat32List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getFloat32](offset + i * 4, bigEnd));
          }
          return result;
        }
        case 12:
        {
          if (numValues === 1) {
            return file[$getFloat64](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = valueOffset;
          let result = _native_typed_data.NativeFloat64List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getFloat64](offset + i * 8, bigEnd));
          }
          return result;
        }
      }
    }
    static _getStringFromDB(buffer, start, length) {
      if (buffer == null) dart.nullFailed(I[30], 318, 43, "buffer");
      if (start == null) dart.nullFailed(I[30], 318, 55, "start");
      if (length == null) dart.nullFailed(I[30], 318, 66, "length");
      return convert.utf8.decode(T$.ListOfint().generate(length, dart.fn(i => {
        if (i == null) dart.nullFailed(I[30], 320, 41, "i");
        return buffer[$getUint8](dart.notNull(start) + dart.notNull(i));
      }, T$.intToint())), {allowMalformed: true});
    }
    static _readEXIFData(buffer, start) {
      if (buffer == null) dart.nullFailed(I[30], 324, 59, "buffer");
      if (start == null) dart.nullFailed(I[30], 324, 71, "start");
      let startingString = exif.PdfJpegInfo._getStringFromDB(buffer, start, 4);
      if (startingString !== "Exif") {
        return null;
      }
      let bigEnd = null;
      let tiffOffset = dart.notNull(start) + 6;
      if (buffer[$getUint16](tiffOffset) === 18761) {
        bigEnd = typed_data.Endian.little;
      } else if (buffer[$getUint16](tiffOffset) === 19789) {
        bigEnd = typed_data.Endian.big;
      } else {
        return null;
      }
      if (buffer[$getUint16](tiffOffset + 2, bigEnd) !== 42) {
        return null;
      }
      let firstIFDOffset = buffer[$getUint32](tiffOffset + 4, bigEnd);
      if (dart.notNull(firstIFDOffset) < 8) {
        return null;
      }
      let tags = exif.PdfJpegInfo._readTags(buffer, tiffOffset, tiffOffset + dart.notNull(firstIFDOffset), bigEnd);
      if (dart.test(tags[$containsKey](exif.PdfExifTag.ExifIFDPointer))) {
        let exifData = exif.PdfJpegInfo._readTags(buffer, tiffOffset, dart.asInt(tiffOffset + dart.notNull(core.num.as(tags[$_get](exif.PdfExifTag.ExifIFDPointer)))), bigEnd);
        tags[$addAll](exifData);
      }
      return tags;
    }
  };
  (exif.PdfJpegInfo.__ = function(width, height, _color, tags) {
    if (height == null) dart.nullFailed(I[30], 80, 34, "height");
    this[width$] = width;
    this[height$] = height;
    this[_color$] = _color;
    this[tags$] = tags;
    ;
  }).prototype = exif.PdfJpegInfo.prototype;
  dart.addTypeTests(exif.PdfJpegInfo);
  dart.addTypeCaches(exif.PdfJpegInfo);
  dart.setGetterSignature(exif.PdfJpegInfo, () => ({
    __proto__: dart.getGetters(exif.PdfJpegInfo.__proto__),
    isRGB: core.bool,
    exifVersion: dart.nullable(core.String),
    flashpixVersion: dart.nullable(core.String),
    orientation: image$0.PdfImageOrientation,
    xResolution: dart.nullable(core.double),
    yResolution: dart.nullable(core.double),
    pixelXDimension: dart.nullable(core.int),
    pixelYDimension: dart.nullable(core.int)
  }));
  dart.setLibraryUri(exif.PdfJpegInfo, I[31]);
  dart.setFieldSignature(exif.PdfJpegInfo, () => ({
    __proto__: dart.getFields(exif.PdfJpegInfo.__proto__),
    width: dart.finalFieldType(dart.nullable(core.int)),
    height: dart.finalFieldType(core.int),
    [_color$]: dart.finalFieldType(dart.nullable(core.int)),
    tags: dart.finalFieldType(dart.nullable(core.Map$(exif.PdfExifTag, dart.dynamic)))
  }));
  dart.defineExtensionMethods(exif.PdfJpegInfo, ['toString']);
  dart.defineLazy(exif.PdfJpegInfo, {
    /*exif.PdfJpegInfo._exifTags*/get _exifTags() {
      return C[30] || CT.C30;
    }
  }, false);
  exif.PdfExifTag = class PdfExifTag extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (exif.PdfExifTag.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[30], 462, 6, "index");
    if (_name == null) dart.nullFailed(I[30], 462, 6, "_name");
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = exif.PdfExifTag.prototype;
  dart.addTypeTests(exif.PdfExifTag);
  dart.addTypeCaches(exif.PdfExifTag);
  dart.setLibraryUri(exif.PdfExifTag, I[31]);
  dart.setFieldSignature(exif.PdfExifTag, () => ({
    __proto__: dart.getFields(exif.PdfExifTag.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(exif.PdfExifTag, ['toString']);
  exif.PdfExifTag.ExifVersion = C[31] || CT.C31;
  exif.PdfExifTag.FlashpixVersion = C[32] || CT.C32;
  exif.PdfExifTag.ColorSpace = C[33] || CT.C33;
  exif.PdfExifTag.PixelXDimension = C[34] || CT.C34;
  exif.PdfExifTag.PixelYDimension = C[35] || CT.C35;
  exif.PdfExifTag.ComponentsConfiguration = C[36] || CT.C36;
  exif.PdfExifTag.CompressedBitsPerPixel = C[37] || CT.C37;
  exif.PdfExifTag.MakerNote = C[38] || CT.C38;
  exif.PdfExifTag.UserComment = C[39] || CT.C39;
  exif.PdfExifTag.RelatedSoundFile = C[40] || CT.C40;
  exif.PdfExifTag.DateTimeOriginal = C[41] || CT.C41;
  exif.PdfExifTag.DateTimeDigitized = C[42] || CT.C42;
  exif.PdfExifTag.SubsecTime = C[43] || CT.C43;
  exif.PdfExifTag.SubsecTimeOriginal = C[44] || CT.C44;
  exif.PdfExifTag.SubsecTimeDigitized = C[45] || CT.C45;
  exif.PdfExifTag.ExposureTime = C[46] || CT.C46;
  exif.PdfExifTag.FNumber = C[47] || CT.C47;
  exif.PdfExifTag.ExposureProgram = C[48] || CT.C48;
  exif.PdfExifTag.SpectralSensitivity = C[49] || CT.C49;
  exif.PdfExifTag.ISOSpeedRatings = C[50] || CT.C50;
  exif.PdfExifTag.OECF = C[51] || CT.C51;
  exif.PdfExifTag.ShutterSpeedValue = C[52] || CT.C52;
  exif.PdfExifTag.ApertureValue = C[53] || CT.C53;
  exif.PdfExifTag.BrightnessValue = C[54] || CT.C54;
  exif.PdfExifTag.ExposureBias = C[55] || CT.C55;
  exif.PdfExifTag.MaxApertureValue = C[56] || CT.C56;
  exif.PdfExifTag.SubjectDistance = C[57] || CT.C57;
  exif.PdfExifTag.MeteringMode = C[58] || CT.C58;
  exif.PdfExifTag.LightSource = C[59] || CT.C59;
  exif.PdfExifTag.Flash = C[60] || CT.C60;
  exif.PdfExifTag.SubjectArea = C[61] || CT.C61;
  exif.PdfExifTag.FocalLength = C[62] || CT.C62;
  exif.PdfExifTag.FlashEnergy = C[63] || CT.C63;
  exif.PdfExifTag.SpatialFrequencyResponse = C[64] || CT.C64;
  exif.PdfExifTag.FocalPlaneXResolution = C[65] || CT.C65;
  exif.PdfExifTag.FocalPlaneYResolution = C[66] || CT.C66;
  exif.PdfExifTag.FocalPlaneResolutionUnit = C[67] || CT.C67;
  exif.PdfExifTag.SubjectLocation = C[68] || CT.C68;
  exif.PdfExifTag.ExposureIndex = C[69] || CT.C69;
  exif.PdfExifTag.SensingMethod = C[70] || CT.C70;
  exif.PdfExifTag.FileSource = C[71] || CT.C71;
  exif.PdfExifTag.SceneType = C[72] || CT.C72;
  exif.PdfExifTag.CFAPattern = C[73] || CT.C73;
  exif.PdfExifTag.CustomRendered = C[74] || CT.C74;
  exif.PdfExifTag.ExposureMode = C[75] || CT.C75;
  exif.PdfExifTag.WhiteBalance = C[76] || CT.C76;
  exif.PdfExifTag.DigitalZoomRation = C[77] || CT.C77;
  exif.PdfExifTag.FocalLengthIn35mmFilm = C[78] || CT.C78;
  exif.PdfExifTag.SceneCaptureType = C[79] || CT.C79;
  exif.PdfExifTag.GainControl = C[80] || CT.C80;
  exif.PdfExifTag.Contrast = C[81] || CT.C81;
  exif.PdfExifTag.Saturation = C[82] || CT.C82;
  exif.PdfExifTag.Sharpness = C[83] || CT.C83;
  exif.PdfExifTag.DeviceSettingDescription = C[84] || CT.C84;
  exif.PdfExifTag.SubjectDistanceRange = C[85] || CT.C85;
  exif.PdfExifTag.InteroperabilityIFDPointer = C[86] || CT.C86;
  exif.PdfExifTag.ImageUniqueID = C[87] || CT.C87;
  exif.PdfExifTag.ImageWidth = C[88] || CT.C88;
  exif.PdfExifTag.ImageHeight = C[89] || CT.C89;
  exif.PdfExifTag.ExifIFDPointer = C[90] || CT.C90;
  exif.PdfExifTag.GPSInfoIFDPointer = C[91] || CT.C91;
  exif.PdfExifTag.BitsPerSample = C[92] || CT.C92;
  exif.PdfExifTag.Compression = C[93] || CT.C93;
  exif.PdfExifTag.PhotometricInterpretation = C[94] || CT.C94;
  exif.PdfExifTag.Orientation = C[95] || CT.C95;
  exif.PdfExifTag.SamplesPerPixel = C[96] || CT.C96;
  exif.PdfExifTag.PlanarConfiguration = C[97] || CT.C97;
  exif.PdfExifTag.YCbCrSubSampling = C[98] || CT.C98;
  exif.PdfExifTag.YCbCrPositioning = C[99] || CT.C99;
  exif.PdfExifTag.XResolution = C[100] || CT.C100;
  exif.PdfExifTag.YResolution = C[101] || CT.C101;
  exif.PdfExifTag.ResolutionUnit = C[102] || CT.C102;
  exif.PdfExifTag.StripOffsets = C[103] || CT.C103;
  exif.PdfExifTag.RowsPerStrip = C[104] || CT.C104;
  exif.PdfExifTag.StripByteCounts = C[105] || CT.C105;
  exif.PdfExifTag.JPEGInterchangeFormat = C[106] || CT.C106;
  exif.PdfExifTag.JPEGInterchangeFormatLength = C[107] || CT.C107;
  exif.PdfExifTag.TransferFunction = C[108] || CT.C108;
  exif.PdfExifTag.WhitePoint = C[109] || CT.C109;
  exif.PdfExifTag.PrimaryChromaticities = C[110] || CT.C110;
  exif.PdfExifTag.YCbCrCoefficients = C[111] || CT.C111;
  exif.PdfExifTag.ReferenceBlackWhite = C[112] || CT.C112;
  exif.PdfExifTag.DateTime = C[113] || CT.C113;
  exif.PdfExifTag.ImageDescription = C[114] || CT.C114;
  exif.PdfExifTag.Make = C[115] || CT.C115;
  exif.PdfExifTag.Model = C[116] || CT.C116;
  exif.PdfExifTag.Software = C[117] || CT.C117;
  exif.PdfExifTag.Artist = C[118] || CT.C118;
  exif.PdfExifTag.Copyright = C[119] || CT.C119;
  exif.PdfExifTag.values = C[120] || CT.C120;
  var _name$5 = dart.privateName(image$0, "_name");
  image$0.PdfImageOrientation = class PdfImageOrientation extends core.Object {
    toString() {
      return this[_name$5];
    }
  };
  (image$0.PdfImageOrientation.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[32], 28, 6, "index");
    if (_name == null) dart.nullFailed(I[32], 28, 6, "_name");
    this.index = index;
    this[_name$5] = _name;
    ;
  }).prototype = image$0.PdfImageOrientation.prototype;
  dart.addTypeTests(image$0.PdfImageOrientation);
  dart.addTypeCaches(image$0.PdfImageOrientation);
  dart.setLibraryUri(image$0.PdfImageOrientation, I[33]);
  dart.setFieldSignature(image$0.PdfImageOrientation, () => ({
    __proto__: dart.getFields(image$0.PdfImageOrientation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$5]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(image$0.PdfImageOrientation, ['toString']);
  image$0.PdfImageOrientation.topLeft = C[121] || CT.C121;
  image$0.PdfImageOrientation.topRight = C[122] || CT.C122;
  image$0.PdfImageOrientation.bottomRight = C[123] || CT.C123;
  image$0.PdfImageOrientation.bottomLeft = C[124] || CT.C124;
  image$0.PdfImageOrientation.leftTop = C[125] || CT.C125;
  image$0.PdfImageOrientation.rightTop = C[126] || CT.C126;
  image$0.PdfImageOrientation.rightBottom = C[127] || CT.C127;
  image$0.PdfImageOrientation.leftBottom = C[128] || CT.C128;
  image$0.PdfImageOrientation.values = C[129] || CT.C129;
  var orientation$ = dart.privateName(image$0, "PdfImage.orientation");
  var _width$ = dart.privateName(image$0, "_width");
  var _height$ = dart.privateName(image$0, "_height");
  var PdfNum_value = dart.privateName(data_types, "PdfNum.value");
  image$0.PdfImage = class PdfImage extends xobject.PdfXObject {
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    static new(pdfDocument, opts) {
      if (pdfDocument == null) dart.nullFailed(I[32], 58, 17, "pdfDocument");
      let image = opts && 'image' in opts ? opts.image : null;
      if (image == null) dart.nullFailed(I[32], 59, 24, "image");
      let width = opts && 'width' in opts ? opts.width : null;
      if (width == null) dart.nullFailed(I[32], 60, 18, "width");
      let height = opts && 'height' in opts ? opts.height : null;
      if (height == null) dart.nullFailed(I[32], 61, 18, "height");
      let alpha = opts && 'alpha' in opts ? opts.alpha : true;
      if (alpha == null) dart.nullFailed(I[32], 62, 10, "alpha");
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[121] || CT.C121;
      if (orientation == null) dart.nullFailed(I[32], 63, 25, "orientation");
      let im = new image$0.PdfImage.__(pdfDocument, width, height, orientation);
      im.params._set("/BitsPerComponent", C[130] || CT.C130);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/ColorSpace", C[29] || CT.C29);
      if (dart.test(alpha)) {
        let _sMask = image$0.PdfImage._alpha(pdfDocument, image, width, height, orientation);
        im.params._set("/SMask", new data_types.PdfIndirect.new(_sMask.objser, 0));
      }
      let w = width;
      let h = height;
      let s = dart.notNull(w) * dart.notNull(h);
      let out = _native_typed_data.NativeUint8List.new(s * 3);
      for (let i = 0; i < s; i = i + 1) {
        out[$_set](i * 3, image[$_get](i * 4));
        out[$_set](i * 3 + 1, image[$_get](i * 4 + 1));
        out[$_set](i * 3 + 2, image[$_get](i * 4 + 2));
      }
      im.buf.putBytes(out);
      return im;
    }
    static jpeg(pdfDocument, opts) {
      let t2;
      if (pdfDocument == null) dart.nullFailed(I[32], 103, 17, "pdfDocument");
      let image = opts && 'image' in opts ? opts.image : null;
      if (image == null) dart.nullFailed(I[32], 104, 24, "image");
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let info = exif.PdfJpegInfo.new(image);
      let im = new image$0.PdfImage.__(pdfDocument, dart.nullCheck(info.width), info.height, (t2 = orientation, t2 == null ? info.orientation : t2));
      im.params._set("/BitsPerComponent", C[130] || CT.C130);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/Intent", C[131] || CT.C131);
      im.params._set("/Filter", C[132] || CT.C132);
      if (dart.test(info.isRGB)) {
        im.params._set("/ColorSpace", C[29] || CT.C29);
      } else {
        im.params._set("/ColorSpace", C[133] || CT.C133);
      }
      im.buf.putBytes(image);
      return im;
    }
    static fromImage(pdfDocument, opts) {
      if (pdfDocument == null) dart.nullFailed(I[32], 132, 17, "pdfDocument");
      let image = opts && 'image' in opts ? opts.image : null;
      if (image == null) dart.nullFailed(I[32], 133, 23, "image");
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[121] || CT.C121;
      if (orientation == null) dart.nullFailed(I[32], 134, 25, "orientation");
      return image$0.PdfImage.new(pdfDocument, {image: image.getBytes({format: image$.Format.rgba}), width: image.width, height: image.height, alpha: image.channels == image$.Channels.rgba, orientation: orientation});
    }
    static file(pdfDocument, opts) {
      if (pdfDocument == null) dart.nullFailed(I[32], 148, 17, "pdfDocument");
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      if (bytes == null) dart.nullFailed(I[32], 149, 24, "bytes");
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[121] || CT.C121;
      if (orientation == null) dart.nullFailed(I[32], 150, 25, "orientation");
      if (dart.test(new jpeg_decoder.JpegDecoder.new().isValidFile(bytes))) {
        return image$0.PdfImage.jpeg(pdfDocument, {image: bytes});
      }
      let image = formats.decodeImage(bytes);
      if (image == null) {
        dart.throw("Unable to decode image");
      }
      return image$0.PdfImage.fromImage(pdfDocument, {image: image, orientation: orientation});
    }
    static _alpha(pdfDocument, image, width, height, orientation) {
      if (pdfDocument == null) dart.nullFailed(I[32], 168, 17, "pdfDocument");
      if (image == null) dart.nullFailed(I[32], 169, 15, "image");
      if (width == null) dart.nullFailed(I[32], 170, 9, "width");
      if (height == null) dart.nullFailed(I[32], 171, 9, "height");
      if (orientation == null) dart.nullFailed(I[32], 172, 25, "orientation");
      let im = new image$0.PdfImage.__(pdfDocument, width, height, orientation);
      im.params._set("/BitsPerComponent", C[130] || CT.C130);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/ColorSpace", C[133] || CT.C133);
      let w = width;
      let h = height;
      let s = dart.notNull(w) * dart.notNull(h);
      let out = _native_typed_data.NativeUint8List.new(s);
      for (let i = 0; i < s; i = i + 1) {
        out[$_set](i, image[$_get](i * 4 + 3));
      }
      im.buf.putBytes(out);
      return im;
    }
    get width() {
      return dart.notNull(this.orientation.index) >= 4 ? this[_height$] : this[_width$];
    }
    get height() {
      return dart.notNull(this.orientation.index) < 4 ? this[_height$] : this[_width$];
    }
    get name() {
      return "/I" + dart.str(this.objser);
    }
  };
  (image$0.PdfImage.__ = function(pdfDocument, _width, _height, orientation) {
    if (pdfDocument == null) dart.nullFailed(I[32], 200, 17, "pdfDocument");
    if (_width == null) dart.nullFailed(I[32], 201, 10, "_width");
    if (_height == null) dart.nullFailed(I[32], 202, 10, "_height");
    if (orientation == null) dart.nullFailed(I[32], 203, 10, "orientation");
    this[_width$] = _width;
    this[_height$] = _height;
    this[orientation$] = orientation;
    image$0.PdfImage.__proto__.new.call(this, pdfDocument, "/Image", {isBinary: true});
    this.params._set("/Width", new data_types.PdfNum.new(this[_width$]));
    this.params._set("/Height", new data_types.PdfNum.new(this[_height$]));
  }).prototype = image$0.PdfImage.prototype;
  dart.addTypeTests(image$0.PdfImage);
  dart.addTypeCaches(image$0.PdfImage);
  dart.setGetterSignature(image$0.PdfImage, () => ({
    __proto__: dart.getGetters(image$0.PdfImage.__proto__),
    width: core.int,
    height: core.int
  }));
  dart.setLibraryUri(image$0.PdfImage, I[33]);
  dart.setFieldSignature(image$0.PdfImage, () => ({
    __proto__: dart.getFields(image$0.PdfImage.__proto__),
    [_width$]: dart.finalFieldType(core.int),
    [_height$]: dart.finalFieldType(core.int),
    orientation: dart.finalFieldType(image$0.PdfImageOrientation)
  }));
  var _name$6 = dart.privateName(graphics, "_name");
  graphics.PdfLineJoin = class PdfLineJoin extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (graphics.PdfLineJoin.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[34], 37, 6, "index");
    if (_name == null) dart.nullFailed(I[34], 37, 6, "_name");
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = graphics.PdfLineJoin.prototype;
  dart.addTypeTests(graphics.PdfLineJoin);
  dart.addTypeCaches(graphics.PdfLineJoin);
  dart.setLibraryUri(graphics.PdfLineJoin, I[35]);
  dart.setFieldSignature(graphics.PdfLineJoin, () => ({
    __proto__: dart.getFields(graphics.PdfLineJoin.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(graphics.PdfLineJoin, ['toString']);
  graphics.PdfLineJoin.miter = C[134] || CT.C134;
  graphics.PdfLineJoin.round = C[135] || CT.C135;
  graphics.PdfLineJoin.bevel = C[136] || CT.C136;
  graphics.PdfLineJoin.values = C[137] || CT.C137;
  graphics.PdfLineCap = class PdfLineCap extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (graphics.PdfLineCap.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[34], 50, 6, "index");
    if (_name == null) dart.nullFailed(I[34], 50, 6, "_name");
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = graphics.PdfLineCap.prototype;
  dart.addTypeTests(graphics.PdfLineCap);
  dart.addTypeCaches(graphics.PdfLineCap);
  dart.setLibraryUri(graphics.PdfLineCap, I[35]);
  dart.setFieldSignature(graphics.PdfLineCap, () => ({
    __proto__: dart.getFields(graphics.PdfLineCap.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(graphics.PdfLineCap, ['toString']);
  graphics.PdfLineCap.butt = C[138] || CT.C138;
  graphics.PdfLineCap.round = C[139] || CT.C139;
  graphics.PdfLineCap.square = C[140] || CT.C140;
  graphics.PdfLineCap.values = C[141] || CT.C141;
  graphics.PdfTextRenderingMode = class PdfTextRenderingMode extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (graphics.PdfTextRenderingMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[34], 62, 6, "index");
    if (_name == null) dart.nullFailed(I[34], 62, 6, "_name");
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = graphics.PdfTextRenderingMode.prototype;
  dart.addTypeTests(graphics.PdfTextRenderingMode);
  dart.addTypeCaches(graphics.PdfTextRenderingMode);
  dart.setLibraryUri(graphics.PdfTextRenderingMode, I[35]);
  dart.setFieldSignature(graphics.PdfTextRenderingMode, () => ({
    __proto__: dart.getFields(graphics.PdfTextRenderingMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(graphics.PdfTextRenderingMode, ['toString']);
  graphics.PdfTextRenderingMode.fill = C[142] || CT.C142;
  graphics.PdfTextRenderingMode.stroke = C[143] || CT.C143;
  graphics.PdfTextRenderingMode.fillAndStroke = C[144] || CT.C144;
  graphics.PdfTextRenderingMode.invisible = C[145] || CT.C145;
  graphics.PdfTextRenderingMode.fillAndClip = C[146] || CT.C146;
  graphics.PdfTextRenderingMode.strokeAndClip = C[147] || CT.C147;
  graphics.PdfTextRenderingMode.fillStrokeAndClip = C[148] || CT.C148;
  graphics.PdfTextRenderingMode.clip = C[149] || CT.C149;
  graphics.PdfTextRenderingMode.values = C[150] || CT.C150;
  var ctm$ = dart.privateName(graphics, "_PdfGraphicsContext.ctm");
  graphics._PdfGraphicsContext = class _PdfGraphicsContext extends core.Object {
    get ctm() {
      return this[ctm$];
    }
    set ctm(value) {
      super.ctm = value;
    }
    copy() {
      return new graphics._PdfGraphicsContext.new({ctm: this.ctm.clone()});
    }
  };
  (graphics._PdfGraphicsContext.new = function(opts) {
    let ctm = opts && 'ctm' in opts ? opts.ctm : null;
    if (ctm == null) dart.nullFailed(I[34], 91, 19, "ctm");
    this[ctm$] = ctm;
    ;
  }).prototype = graphics._PdfGraphicsContext.prototype;
  dart.addTypeTests(graphics._PdfGraphicsContext);
  dart.addTypeCaches(graphics._PdfGraphicsContext);
  dart.setMethodSignature(graphics._PdfGraphicsContext, () => ({
    __proto__: dart.getMethods(graphics._PdfGraphicsContext.__proto__),
    copy: dart.fnType(graphics._PdfGraphicsContext, [])
  }));
  dart.setLibraryUri(graphics._PdfGraphicsContext, I[35]);
  dart.setFieldSignature(graphics._PdfGraphicsContext, () => ({
    __proto__: dart.getFields(graphics._PdfGraphicsContext.__proto__),
    ctm: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  var __PdfGraphics__context = dart.privateName(graphics, "_#PdfGraphics#_context");
  var __PdfGraphics__context_isSet = dart.privateName(graphics, "_#PdfGraphics#_context#isSet");
  var _contextQueue = dart.privateName(graphics, "_contextQueue");
  var _page$ = dart.privateName(graphics, "_page");
  var _buf$ = dart.privateName(graphics, "_buf");
  var _context = dart.privateName(graphics, "_context");
  var _vectorAngle = dart.privateName(graphics, "_vectorAngle");
  var _bezierArcFromCentre = dart.privateName(graphics, "_bezierArcFromCentre");
  var _endToCenterParameters = dart.privateName(graphics, "_endToCenterParameters");
  graphics.PdfGraphics = class PdfGraphics extends core.Object {
    get [_context]() {
      let t2;
      return dart.test(this[__PdfGraphics__context_isSet]) ? (t2 = this[__PdfGraphics__context], t2) : dart.throw(new _internal.LateError.fieldNI("_context"));
    }
    set [_context](t2) {
      if (t2 == null) dart.nullFailed(I[34], 111, 28, "null");
      this[__PdfGraphics__context_isSet] = true;
      this[__PdfGraphics__context] = t2;
    }
    get defaultFont() {
      return this[_page$].getDefaultFont();
    }
    fillPath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      if (evenOdd == null) dart.nullFailed(I[34], 124, 23, "evenOdd");
      this[_buf$].putString("f" + (dart.test(evenOdd) ? "*" : "") + "\n");
    }
    strokePath(opts) {
      let close = opts && 'close' in opts ? opts.close : false;
      if (close == null) dart.nullFailed(I[34], 129, 25, "close");
      this[_buf$].putString((dart.test(close) ? "s" : "S") + "\n");
    }
    closePath() {
      this[_buf$].putString("h\n");
    }
    clipPath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      if (evenOdd == null) dart.nullFailed(I[34], 140, 23, "evenOdd");
      let end = opts && 'end' in opts ? opts.end : true;
      if (end == null) dart.nullFailed(I[34], 140, 45, "end");
      this[_buf$].putString("W" + (dart.test(evenOdd) ? "*" : "") + (dart.test(end) ? " n" : "") + "\n");
    }
    fillAndStrokePath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      if (evenOdd == null) dart.nullFailed(I[34], 146, 32, "evenOdd");
      let close = opts && 'close' in opts ? opts.close : false;
      if (close == null) dart.nullFailed(I[34], 146, 54, "close");
      this[_buf$].putString((dart.test(close) ? "b" : "B") + (dart.test(evenOdd) ? "*" : "") + "\n");
    }
    applyShader(shader) {
      if (shader == null) dart.nullFailed(I[34], 151, 31, "shader");
      this[_page$].addShader(shader);
      this[_buf$].putString(dart.str(shader.name) + " sh\n");
    }
    restoreContext() {
      if (dart.test(this[_contextQueue][$isNotEmpty])) {
        this[_buf$].putString("Q\n");
        this[_context] = this[_contextQueue].removeLast();
      }
    }
    saveContext() {
      this[_buf$].putString("q\n");
      this[_contextQueue].addLast(this[_context].copy());
    }
    drawImage(img, x, y, w = null, h = null) {
      if (img == null) dart.nullFailed(I[34], 177, 27, "img");
      if (x == null) dart.nullFailed(I[34], 177, 39, "x");
      if (y == null) dart.nullFailed(I[34], 177, 49, "y");
      w == null ? w = img.width[$toDouble]() : null;
      h == null ? h = img.height[$toDouble]() * dart.notNull(w) / img.width[$toDouble]() : null;
      this[_page$].addXObject(img);
      this[_buf$].putString("q ");
      switch (img.orientation) {
        case C[121] || CT.C121:
        {
          new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([w, 0.0, 0.0, h, x, y])).output(this[_buf$]);
          break;
        }
        case C[122] || CT.C122:
        {
          new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([-dart.notNull(w), 0.0, 0.0, h, dart.notNull(w) + dart.notNull(x), y])).output(this[_buf$]);
          break;
        }
        case C[123] || CT.C123:
        {
          new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([-dart.notNull(w), 0.0, 0.0, -dart.notNull(h), dart.notNull(w) + dart.notNull(x), dart.notNull(h) + dart.notNull(y)])).output(this[_buf$]);
          break;
        }
        case C[124] || CT.C124:
        {
          new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([w, 0.0, 0.0, -dart.notNull(h), x, dart.notNull(h) + dart.notNull(y)])).output(this[_buf$]);
          break;
        }
        case C[125] || CT.C125:
        {
          new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([0.0, -dart.notNull(h), -dart.notNull(w), 0.0, dart.notNull(w) + dart.notNull(x), dart.notNull(h) + dart.notNull(y)])).output(this[_buf$]);
          break;
        }
        case C[126] || CT.C126:
        {
          new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([0.0, -dart.notNull(h), w, 0.0, x, dart.notNull(h) + dart.notNull(y)])).output(this[_buf$]);
          break;
        }
        case C[127] || CT.C127:
        {
          new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([0.0, h, w, 0.0, x, y])).output(this[_buf$]);
          break;
        }
        case C[128] || CT.C128:
        {
          new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([0.0, h, -dart.notNull(w), 0.0, dart.notNull(w) + dart.notNull(x), y])).output(this[_buf$]);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      this[_buf$].putString(" cm " + dart.str(img.name) + " Do Q\n");
    }
    drawLine(x1, y1, x2, y2) {
      if (x1 == null) dart.nullFailed(I[34], 217, 24, "x1");
      if (y1 == null) dart.nullFailed(I[34], 217, 35, "y1");
      if (x2 == null) dart.nullFailed(I[34], 217, 46, "x2");
      if (y2 == null) dart.nullFailed(I[34], 217, 57, "y2");
      this.moveTo(x1, y1);
      this.lineTo(x2, y2);
    }
    drawEllipse(x, y, r1, r2, opts) {
      if (x == null) dart.nullFailed(I[34], 225, 27, "x");
      if (y == null) dart.nullFailed(I[34], 225, 37, "y");
      if (r1 == null) dart.nullFailed(I[34], 225, 47, "r1");
      if (r2 == null) dart.nullFailed(I[34], 225, 58, "r2");
      let clockwise = opts && 'clockwise' in opts ? opts.clockwise : true;
      if (clockwise == null) dart.nullFailed(I[34], 226, 13, "clockwise");
      this.moveTo(x, dart.notNull(y) - dart.notNull(r2));
      if (dart.test(clockwise)) {
        this.curveTo(dart.notNull(x) + 0.551784 * dart.notNull(r1), dart.notNull(y) - dart.notNull(r2), dart.notNull(x) + dart.notNull(r1), dart.notNull(y) - 0.551784 * dart.notNull(r2), dart.notNull(x) + dart.notNull(r1), y);
        this.curveTo(dart.notNull(x) + dart.notNull(r1), dart.notNull(y) + 0.551784 * dart.notNull(r2), dart.notNull(x) + 0.551784 * dart.notNull(r1), dart.notNull(y) + dart.notNull(r2), x, dart.notNull(y) + dart.notNull(r2));
        this.curveTo(dart.notNull(x) - 0.551784 * dart.notNull(r1), dart.notNull(y) + dart.notNull(r2), dart.notNull(x) - dart.notNull(r1), dart.notNull(y) + 0.551784 * dart.notNull(r2), dart.notNull(x) - dart.notNull(r1), y);
        this.curveTo(dart.notNull(x) - dart.notNull(r1), dart.notNull(y) - 0.551784 * dart.notNull(r2), dart.notNull(x) - 0.551784 * dart.notNull(r1), dart.notNull(y) - dart.notNull(r2), x, dart.notNull(y) - dart.notNull(r2));
      } else {
        this.curveTo(dart.notNull(x) - 0.551784 * dart.notNull(r1), dart.notNull(y) - dart.notNull(r2), dart.notNull(x) - dart.notNull(r1), dart.notNull(y) - 0.551784 * dart.notNull(r2), dart.notNull(x) - dart.notNull(r1), y);
        this.curveTo(dart.notNull(x) - dart.notNull(r1), dart.notNull(y) + 0.551784 * dart.notNull(r2), dart.notNull(x) - 0.551784 * dart.notNull(r1), dart.notNull(y) + dart.notNull(r2), x, dart.notNull(y) + dart.notNull(r2));
        this.curveTo(dart.notNull(x) + 0.551784 * dart.notNull(r1), dart.notNull(y) + dart.notNull(r2), dart.notNull(x) + dart.notNull(r1), dart.notNull(y) + 0.551784 * dart.notNull(r2), dart.notNull(x) + dart.notNull(r1), y);
        this.curveTo(dart.notNull(x) + dart.notNull(r1), dart.notNull(y) - 0.551784 * dart.notNull(r2), dart.notNull(x) + 0.551784 * dart.notNull(r1), dart.notNull(y) - dart.notNull(r2), x, dart.notNull(y) - dart.notNull(r2));
      }
    }
    drawRect(x, y, w, h) {
      if (x == null) dart.nullFailed(I[34], 243, 12, "x");
      if (y == null) dart.nullFailed(I[34], 244, 12, "y");
      if (w == null) dart.nullFailed(I[34], 245, 12, "w");
      if (h == null) dart.nullFailed(I[34], 246, 12, "h");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x, y, w, h])).output(this[_buf$]);
      this[_buf$].putString(" re\n");
    }
    drawBox(box) {
      if (box == null) dart.nullFailed(I[34], 253, 24, "box");
      this.drawRect(box.x, box.y, box.width, box.height);
    }
    drawRRect(x, y, w, h, rv, rh) {
      if (x == null) dart.nullFailed(I[34], 258, 25, "x");
      if (y == null) dart.nullFailed(I[34], 258, 35, "y");
      if (w == null) dart.nullFailed(I[34], 258, 45, "w");
      if (h == null) dart.nullFailed(I[34], 258, 55, "h");
      if (rv == null) dart.nullFailed(I[34], 258, 65, "rv");
      if (rh == null) dart.nullFailed(I[34], 258, 76, "rh");
      this.moveTo(x, dart.notNull(y) + dart.notNull(rv));
      this.curveTo(x, dart.notNull(y) - 0.551784 * dart.notNull(rv) + dart.notNull(rv), dart.notNull(x) - 0.551784 * dart.notNull(rh) + dart.notNull(rh), y, dart.notNull(x) + dart.notNull(rh), y);
      this.lineTo(dart.notNull(x) + dart.notNull(w) - dart.notNull(rh), y);
      this.curveTo(dart.notNull(x) + 0.551784 * dart.notNull(rh) + dart.notNull(w) - dart.notNull(rh), y, dart.notNull(x) + dart.notNull(w), dart.notNull(y) - 0.551784 * dart.notNull(rv) + dart.notNull(rv), dart.notNull(x) + dart.notNull(w), dart.notNull(y) + dart.notNull(rv));
      this.lineTo(dart.notNull(x) + dart.notNull(w), dart.notNull(y) + dart.notNull(h) - dart.notNull(rv));
      this.curveTo(dart.notNull(x) + dart.notNull(w), dart.notNull(y) + 0.551784 * dart.notNull(rv) + dart.notNull(h) - dart.notNull(rv), dart.notNull(x) + 0.551784 * dart.notNull(rh) + dart.notNull(w) - dart.notNull(rh), dart.notNull(y) + dart.notNull(h), dart.notNull(x) + dart.notNull(w) - dart.notNull(rh), dart.notNull(y) + dart.notNull(h));
      this.lineTo(dart.notNull(x) + dart.notNull(rh), dart.notNull(y) + dart.notNull(h));
      this.curveTo(dart.notNull(x) - 0.551784 * dart.notNull(rh) + dart.notNull(rh), dart.notNull(y) + dart.notNull(h), x, dart.notNull(y) + 0.551784 * dart.notNull(rv) + dart.notNull(h) - dart.notNull(rv), x, dart.notNull(y) + dart.notNull(h) - dart.notNull(rv));
      this.lineTo(x, dart.notNull(y) + dart.notNull(rv));
    }
    setFont(font, size, opts) {
      if (font == null) dart.nullFailed(I[34], 273, 13, "font");
      if (size == null) dart.nullFailed(I[34], 274, 12, "size");
      let charSpace = opts && 'charSpace' in opts ? opts.charSpace : null;
      let wordSpace = opts && 'wordSpace' in opts ? opts.wordSpace : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[142] || CT.C142;
      let rise = opts && 'rise' in opts ? opts.rise : null;
      this[_buf$].putString(dart.str(font.name) + " ");
      new data_types.PdfNum.new(size).output(this[_buf$]);
      this[_buf$].putString(" Tf\n");
      if (charSpace != null) {
        new data_types.PdfNum.new(charSpace).output(this[_buf$]);
        this[_buf$].putString(" Tc\n");
      }
      if (wordSpace != null) {
        new data_types.PdfNum.new(wordSpace).output(this[_buf$]);
        this[_buf$].putString(" Tw\n");
      }
      if (scale != null) {
        new data_types.PdfNum.new(dart.notNull(scale) * 100).output(this[_buf$]);
        this[_buf$].putString(" Tz\n");
      }
      if (rise != null) {
        new data_types.PdfNum.new(rise).output(this[_buf$]);
        this[_buf$].putString(" Ts\n");
      }
      if (mode != graphics.PdfTextRenderingMode.fill) {
        this[_buf$].putString(dart.str(dart.nullCheck(mode).index) + " Tr\n");
      }
    }
    drawString(font, size, s, x, y, opts) {
      if (font == null) dart.nullFailed(I[34], 307, 13, "font");
      if (size == null) dart.nullFailed(I[34], 308, 12, "size");
      if (s == null) dart.nullFailed(I[34], 309, 12, "s");
      if (x == null) dart.nullFailed(I[34], 310, 12, "x");
      if (y == null) dart.nullFailed(I[34], 311, 12, "y");
      let charSpace = opts && 'charSpace' in opts ? opts.charSpace : 0;
      if (charSpace == null) dart.nullFailed(I[34], 312, 12, "charSpace");
      let wordSpace = opts && 'wordSpace' in opts ? opts.wordSpace : 0;
      if (wordSpace == null) dart.nullFailed(I[34], 313, 12, "wordSpace");
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      if (scale == null) dart.nullFailed(I[34], 314, 12, "scale");
      let mode = opts && 'mode' in opts ? opts.mode : C[142] || CT.C142;
      if (mode == null) dart.nullFailed(I[34], 315, 26, "mode");
      let rise = opts && 'rise' in opts ? opts.rise : 0;
      if (rise == null) dart.nullFailed(I[34], 316, 12, "rise");
      this[_page$].addFont(font);
      this[_buf$].putString("BT ");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x, y])).output(this[_buf$]);
      this[_buf$].putString(" Td ");
      this.setFont(font, size, {charSpace: charSpace, mode: mode, rise: rise, scale: scale, wordSpace: wordSpace});
      this[_buf$].putString("[");
      font.putText(this[_buf$], s);
      this[_buf$].putString("]TJ ET\n");
    }
    reset() {
      this[_buf$].putString("0 Tr\n");
    }
    setColor(color) {
      this.setFillColor(color);
      this.setStrokeColor(color);
    }
    setFillColor(color) {
      if (color$.PdfColorCmyk.is(color)) {
        new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([color.cyan, color.magenta, color.yellow, color.black])).output(this[_buf$]);
        this[_buf$].putString(" k\n");
      } else {
        new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([dart.nullCheck(color).red, color.green, color.blue])).output(this[_buf$]);
        this[_buf$].putString(" rg\n");
      }
    }
    setStrokeColor(color) {
      if (color$.PdfColorCmyk.is(color)) {
        new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([color.cyan, color.magenta, color.yellow, color.black])).output(this[_buf$]);
        this[_buf$].putString(" K\n");
      } else {
        new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([dart.nullCheck(color).red, color.green, color.blue])).output(this[_buf$]);
        this[_buf$].putString(" RG\n");
      }
    }
    setFillPattern(pattern) {
      if (pattern == null) dart.nullFailed(I[34], 369, 34, "pattern");
      this[_page$].addPattern(pattern);
      this[_buf$].putString("/Pattern cs" + dart.str(pattern.name) + " scn\n");
    }
    setStrokePattern(pattern) {
      if (pattern == null) dart.nullFailed(I[34], 376, 36, "pattern");
      this[_page$].addPattern(pattern);
      this[_buf$].putString("/Pattern CS" + dart.str(pattern.name) + " SCN\n");
    }
    setGraphicState(state) {
      if (state == null) dart.nullFailed(I[34], 383, 40, "state");
      let name = this[_page$].stateName(state);
      this[_buf$].putString(dart.str(name) + " gs\n");
    }
    setTransform(t) {
      if (t == null) dart.nullFailed(I[34], 389, 29, "t");
      let s = t.storage;
      new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([s[$_get](0), s[$_get](1), s[$_get](4), s[$_get](5), s[$_get](12), s[$_get](13)])).output(this[_buf$]);
      this[_buf$].putString(" cm\n");
      this[_context].ctm.multiply(t);
    }
    getTransform() {
      return this[_context].ctm.clone();
    }
    lineTo(x, y) {
      if (x == null) dart.nullFailed(I[34], 402, 22, "x");
      if (y == null) dart.nullFailed(I[34], 402, 32, "y");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x, y])).output(this[_buf$]);
      this[_buf$].putString(" l\n");
    }
    moveTo(x, y) {
      if (x == null) dart.nullFailed(I[34], 408, 22, "x");
      if (y == null) dart.nullFailed(I[34], 408, 32, "y");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x, y])).output(this[_buf$]);
      this[_buf$].putString(" m\n");
    }
    curveTo(x1, y1, x2, y2, x3, y3) {
      if (x1 == null) dart.nullFailed(I[34], 417, 14, "x1");
      if (y1 == null) dart.nullFailed(I[34], 417, 25, "y1");
      if (x2 == null) dart.nullFailed(I[34], 417, 36, "x2");
      if (y2 == null) dart.nullFailed(I[34], 417, 47, "y2");
      if (x3 == null) dart.nullFailed(I[34], 417, 58, "x3");
      if (y3 == null) dart.nullFailed(I[34], 417, 69, "y3");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x1, y1, x2, y2, x3, y3])).output(this[_buf$]);
      this[_buf$].putString(" c\n");
    }
    [_vectorAngle](ux, uy, vx, vy) {
      if (ux == null) dart.nullFailed(I[34], 422, 30, "ux");
      if (uy == null) dart.nullFailed(I[34], 422, 41, "uy");
      if (vx == null) dart.nullFailed(I[34], 422, 52, "vx");
      if (vy == null) dart.nullFailed(I[34], 422, 63, "vy");
      let d = math.sqrt(dart.notNull(ux) * dart.notNull(ux) + dart.notNull(uy) * dart.notNull(uy)) * math.sqrt(dart.notNull(vx) * dart.notNull(vx) + dart.notNull(vy) * dart.notNull(vy));
      if (d === 0.0) {
        return 0.0;
      }
      let c = (dart.notNull(ux) * dart.notNull(vx) + dart.notNull(uy) * dart.notNull(vy)) / d;
      if (c < -1.0) {
        c = -1.0;
      } else if (c > 1.0) {
        c = 1.0;
      }
      let s = dart.notNull(ux) * dart.notNull(vy) - dart.notNull(uy) * dart.notNull(vx);
      c = math.acos(c);
      return c[$sign] === s[$sign] ? c : -c;
    }
    [_endToCenterParameters](x1, y1, x2, y2, large, sweep, rx, ry) {
      if (x1 == null) dart.nullFailed(I[34], 438, 38, "x1");
      if (y1 == null) dart.nullFailed(I[34], 438, 49, "y1");
      if (x2 == null) dart.nullFailed(I[34], 438, 60, "x2");
      if (y2 == null) dart.nullFailed(I[34], 438, 71, "y2");
      if (large == null) dart.nullFailed(I[34], 439, 12, "large");
      if (sweep == null) dart.nullFailed(I[34], 439, 24, "sweep");
      if (rx == null) dart.nullFailed(I[34], 439, 38, "rx");
      if (ry == null) dart.nullFailed(I[34], 439, 49, "ry");
      rx = rx[$abs]();
      ry = ry[$abs]();
      let x1d = 0.5 * (dart.notNull(x1) - dart.notNull(x2));
      let y1d = 0.5 * (dart.notNull(y1) - dart.notNull(y2));
      let r = x1d * x1d / (dart.notNull(rx) * dart.notNull(rx)) + y1d * y1d / (dart.notNull(ry) * dart.notNull(ry));
      if (r > 1.0) {
        let rr = math.sqrt(r);
        rx = dart.notNull(rx) * rr;
        ry = dart.notNull(ry) * rr;
        r = x1d * x1d / (dart.notNull(rx) * dart.notNull(rx)) + y1d * y1d / (dart.notNull(ry) * dart.notNull(ry));
      } else if (r !== 0.0) {
        r = 1.0 / r - 1.0;
      }
      if (-1e-10 < r && r < 0.0) {
        r = 0.0;
      }
      r = math.sqrt(r);
      if (large == sweep) {
        r = -r;
      }
      let cxd = r * dart.notNull(rx) * y1d / dart.notNull(ry);
      let cyd = -(r * dart.notNull(ry) * x1d) / dart.notNull(rx);
      let cx = cxd + 0.5 * (dart.notNull(x1) + dart.notNull(x2));
      let cy = cyd + 0.5 * (dart.notNull(y1) + dart.notNull(y2));
      let theta = this[_vectorAngle](1.0, 0.0, (x1d - cxd) / dart.notNull(rx), (y1d - cyd) / dart.notNull(ry));
      let dTheta = this[_vectorAngle]((x1d - cxd) / dart.notNull(rx), (y1d - cyd) / dart.notNull(ry), (-x1d - cxd) / dart.notNull(rx), (-y1d - cyd) / dart.notNull(ry))[$modulo](3.141592653589793 * 2.0);
      if (sweep === false && dTheta > 0.0) {
        dTheta = dTheta - 3.141592653589793 * 2.0;
      } else if (sweep === true && dTheta < 0.0) {
        dTheta = dTheta + 3.141592653589793 * 2.0;
      }
      this[_bezierArcFromCentre](cx, cy, rx, ry, -dart.notNull(theta), -dTheta);
    }
    [_bezierArcFromCentre](cx, cy, rx, ry, startAngle, extent) {
      if (cx == null) dart.nullFailed(I[34], 485, 36, "cx");
      if (cy == null) dart.nullFailed(I[34], 485, 47, "cy");
      if (rx == null) dart.nullFailed(I[34], 485, 58, "rx");
      if (ry == null) dart.nullFailed(I[34], 485, 69, "ry");
      if (startAngle == null) dart.nullFailed(I[34], 486, 14, "startAngle");
      if (extent == null) dart.nullFailed(I[34], 486, 33, "extent");
      let fragmentsCount = null;
      let fragmentsAngle = null;
      if (extent[$abs]() <= 3.141592653589793 / 2.0) {
        fragmentsCount = 1;
        fragmentsAngle = extent;
      } else {
        fragmentsCount = (extent[$abs]() / (3.141592653589793 / 2.0))[$ceil]()[$toInt]();
        fragmentsAngle = dart.notNull(extent) / fragmentsCount[$toDouble]();
      }
      if (fragmentsAngle === 0.0) {
        return;
      }
      let halfFragment = dart.notNull(fragmentsAngle) * 0.5;
      let kappa = (4.0 / 3.0 * (1.0 - math.cos(halfFragment)) / math.sin(halfFragment))[$abs]();
      if (dart.notNull(fragmentsAngle) < 0.0) {
        kappa = -kappa;
      }
      let theta = startAngle;
      let startFragment = dart.notNull(theta) + dart.notNull(fragmentsAngle);
      let c1 = math.cos(theta);
      let s1 = math.sin(theta);
      for (let i = 0; i < dart.notNull(fragmentsCount); i = i + 1) {
        let c0 = c1;
        let s0 = s1;
        theta = startFragment + i * dart.notNull(fragmentsAngle);
        c1 = math.cos(theta);
        s1 = math.sin(theta);
        this.curveTo(dart.notNull(cx) + dart.notNull(rx) * (c0 - kappa * s0), dart.notNull(cy) - dart.notNull(ry) * (s0 + kappa * c0), dart.notNull(cx) + dart.notNull(rx) * (c1 + kappa * s1), dart.notNull(cy) - dart.notNull(ry) * (s1 - kappa * c1), dart.notNull(cx) + dart.notNull(rx) * c1, dart.notNull(cy) - dart.notNull(ry) * s1);
      }
    }
    bezierArc(x1, y1, rx, ry, x2, y2, opts) {
      if (x1 == null) dart.nullFailed(I[34], 537, 14, "x1");
      if (y1 == null) dart.nullFailed(I[34], 537, 25, "y1");
      if (rx == null) dart.nullFailed(I[34], 537, 36, "rx");
      if (ry == null) dart.nullFailed(I[34], 537, 47, "ry");
      if (x2 == null) dart.nullFailed(I[34], 537, 58, "x2");
      if (y2 == null) dart.nullFailed(I[34], 537, 69, "y2");
      let large = opts && 'large' in opts ? opts.large : false;
      if (large == null) dart.nullFailed(I[34], 538, 13, "large");
      let sweep = opts && 'sweep' in opts ? opts.sweep : false;
      if (sweep == null) dart.nullFailed(I[34], 538, 33, "sweep");
      let phi = opts && 'phi' in opts ? opts.phi : 0;
      if (phi == null) dart.nullFailed(I[34], 538, 55, "phi");
      if (x1 == x2 && y1 == y2) {
        return;
      }
      if (rx[$abs]() <= 1e-10 || ry[$abs]() <= 1e-10) {
        this.lineTo(x2, y2);
        return;
      }
      if (phi !== 0.0) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(-dart.notNull(x1), -dart.notNull(y1));
        mat.rotateZ(-dart.notNull(phi));
        let tr = mat.transform3(vector_math_64.Vector3.new(x2, y2, 0.0));
        this[_endToCenterParameters](0.0, 0.0, tr._get(0), tr._get(1), large, sweep, rx, ry);
      } else {
        this[_endToCenterParameters](x1, y1, x2, y2, large, sweep, rx, ry);
      }
    }
    drawShape(d) {
      if (d == null) dart.nullFailed(I[34], 565, 25, "d");
      let proxy = new graphics._PathProxy.new(this);
      path_parsing.writeSvgPathDataToPath(d, proxy);
    }
    static shapeBoundingBox(d) {
      if (d == null) dart.nullFailed(I[34], 571, 42, "d");
      let proxy = new graphics._PathBBProxy.new();
      path_parsing.writeSvgPathDataToPath(d, proxy);
      return proxy.box;
    }
    setLineCap(cap) {
      if (cap == null) dart.nullFailed(I[34], 578, 30, "cap");
      this[_buf$].putString(dart.str(cap.index) + " J\n");
    }
    setLineJoin(join) {
      if (join == null) dart.nullFailed(I[34], 583, 32, "join");
      this[_buf$].putString(dart.str(join.index) + " j\n");
    }
    setLineWidth(width) {
      if (width == null) dart.nullFailed(I[34], 588, 28, "width");
      new data_types.PdfNum.new(width).output(this[_buf$]);
      this[_buf$].putString(" w\n");
    }
    setMiterLimit(limit) {
      if (limit == null) dart.nullFailed(I[34], 594, 29, "limit");
      if (!(dart.notNull(limit) >= 1.0)) dart.assertFailed(null, I[34], 595, 12, "limit >= 1.0");
      new data_types.PdfNum.new(limit).output(this[_buf$]);
      this[_buf$].putString(" M\n");
    }
    setLineDashPattern(array = C[151] || CT.C151, phase = 0) {
      if (array == null) dart.nullFailed(I[34], 604, 38, "array");
      if (phase == null) dart.nullFailed(I[34], 604, 65, "phase");
      data_types.PdfArray.fromNum(array).output(this[_buf$]);
      this[_buf$].putString(" " + dart.str(phase) + " d\n");
    }
    markContentBegin(tag) {
      if (tag == null) dart.nullFailed(I[34], 609, 33, "tag");
      tag.output(this[_buf$]);
      this[_buf$].putString(" BMC\n");
    }
    markContentEnd() {
      this[_buf$].putString("EMC\n");
    }
  };
  (graphics.PdfGraphics.new = function(_page, _buf) {
    if (_page == null) dart.nullFailed(I[34], 103, 20, "_page");
    if (_buf == null) dart.nullFailed(I[34], 103, 32, "_buf");
    this[__PdfGraphics__context] = null;
    this[__PdfGraphics__context_isSet] = false;
    this[_contextQueue] = new (T$.ListQueueOf_PdfGraphicsContext()).new();
    this[_page$] = _page;
    this[_buf$] = _buf;
    this[_context] = new graphics._PdfGraphicsContext.new({ctm: vector_math_64.Matrix4.identity()});
  }).prototype = graphics.PdfGraphics.prototype;
  dart.addTypeTests(graphics.PdfGraphics);
  dart.addTypeCaches(graphics.PdfGraphics);
  dart.setMethodSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getMethods(graphics.PdfGraphics.__proto__),
    fillPath: dart.fnType(dart.void, [], {evenOdd: core.bool}, {}),
    strokePath: dart.fnType(dart.void, [], {close: core.bool}, {}),
    closePath: dart.fnType(dart.void, []),
    clipPath: dart.fnType(dart.void, [], {end: core.bool, evenOdd: core.bool}, {}),
    fillAndStrokePath: dart.fnType(dart.void, [], {close: core.bool, evenOdd: core.bool}, {}),
    applyShader: dart.fnType(dart.void, [shading.PdfShading]),
    restoreContext: dart.fnType(dart.void, []),
    saveContext: dart.fnType(dart.void, []),
    drawImage: dart.fnType(dart.void, [image$0.PdfImage, core.double, core.double], [dart.nullable(core.double), dart.nullable(core.double)]),
    drawLine: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    drawEllipse: dart.fnType(dart.void, [core.double, core.double, core.double, core.double], {clockwise: core.bool}, {}),
    drawRect: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    drawBox: dart.fnType(dart.void, [rect.PdfRect]),
    drawRRect: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    setFont: dart.fnType(dart.void, [font.PdfFont, core.double], {charSpace: dart.nullable(core.double), mode: dart.nullable(graphics.PdfTextRenderingMode), rise: dart.nullable(core.double), scale: dart.nullable(core.double), wordSpace: dart.nullable(core.double)}, {}),
    drawString: dart.fnType(dart.void, [font.PdfFont, core.double, core.String, core.double, core.double], {charSpace: core.double, mode: graphics.PdfTextRenderingMode, rise: core.double, scale: core.double, wordSpace: core.double}, {}),
    reset: dart.fnType(dart.void, []),
    setColor: dart.fnType(dart.void, [dart.nullable(color$.PdfColor)]),
    setFillColor: dart.fnType(dart.void, [dart.nullable(color$.PdfColor)]),
    setStrokeColor: dart.fnType(dart.void, [dart.nullable(color$.PdfColor)]),
    setFillPattern: dart.fnType(dart.void, [pattern.PdfPattern]),
    setStrokePattern: dart.fnType(dart.void, [pattern.PdfPattern]),
    setGraphicState: dart.fnType(dart.void, [graphic_state.PdfGraphicState]),
    setTransform: dart.fnType(dart.void, [vector_math_64.Matrix4]),
    getTransform: dart.fnType(vector_math_64.Matrix4, []),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double]),
    curveTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    [_vectorAngle]: dart.fnType(core.double, [core.double, core.double, core.double, core.double]),
    [_endToCenterParameters]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.bool, core.bool, core.double, core.double]),
    [_bezierArcFromCentre]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    bezierArc: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double], {large: core.bool, phi: core.double, sweep: core.bool}, {}),
    drawShape: dart.fnType(dart.void, [core.String]),
    setLineCap: dart.fnType(dart.void, [graphics.PdfLineCap]),
    setLineJoin: dart.fnType(dart.void, [graphics.PdfLineJoin]),
    setLineWidth: dart.fnType(dart.void, [core.double]),
    setMiterLimit: dart.fnType(dart.void, [core.double]),
    setLineDashPattern: dart.fnType(dart.void, [], [core.List$(core.num), core.int]),
    markContentBegin: dart.fnType(dart.void, [data_types.PdfName]),
    markContentEnd: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getGetters(graphics.PdfGraphics.__proto__),
    [_context]: graphics._PdfGraphicsContext,
    defaultFont: dart.nullable(font.PdfFont)
  }));
  dart.setSetterSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getSetters(graphics.PdfGraphics.__proto__),
    [_context]: graphics._PdfGraphicsContext
  }));
  dart.setLibraryUri(graphics.PdfGraphics, I[35]);
  dart.setFieldSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getFields(graphics.PdfGraphics.__proto__),
    [__PdfGraphics__context]: dart.fieldType(dart.nullable(graphics._PdfGraphicsContext)),
    [__PdfGraphics__context_isSet]: dart.fieldType(core.bool),
    [_contextQueue]: dart.finalFieldType(collection.Queue$(graphics._PdfGraphicsContext)),
    [_page$]: dart.finalFieldType(graphic_stream.PdfGraphicStream),
    [_buf$]: dart.finalFieldType(stream.PdfStream)
  }));
  dart.defineLazy(graphics.PdfGraphics, {
    /*graphics.PdfGraphics._m4*/get _m4() {
      return 0.551784;
    }
  }, false);
  graphics._PathProxy = class _PathProxy extends path_parsing.PathProxy {
    close() {
      this.canvas.closePath();
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      if (x1 == null) dart.nullFailed(I[34], 631, 14, "x1");
      if (y1 == null) dart.nullFailed(I[34], 631, 25, "y1");
      if (x2 == null) dart.nullFailed(I[34], 631, 36, "x2");
      if (y2 == null) dart.nullFailed(I[34], 631, 47, "y2");
      if (x3 == null) dart.nullFailed(I[34], 631, 58, "x3");
      if (y3 == null) dart.nullFailed(I[34], 631, 69, "y3");
      this.canvas.curveTo(x1, y1, x2, y2, x3, y3);
    }
    lineTo(x, y) {
      if (x == null) dart.nullFailed(I[34], 636, 22, "x");
      if (y == null) dart.nullFailed(I[34], 636, 32, "y");
      this.canvas.lineTo(x, y);
    }
    moveTo(x, y) {
      if (x == null) dart.nullFailed(I[34], 641, 22, "x");
      if (y == null) dart.nullFailed(I[34], 641, 32, "y");
      this.canvas.moveTo(x, y);
    }
  };
  (graphics._PathProxy.new = function(canvas) {
    if (canvas == null) dart.nullFailed(I[34], 620, 19, "canvas");
    this.canvas = canvas;
    ;
  }).prototype = graphics._PathProxy.prototype;
  dart.addTypeTests(graphics._PathProxy);
  dart.addTypeCaches(graphics._PathProxy);
  dart.setMethodSignature(graphics._PathProxy, () => ({
    __proto__: dart.getMethods(graphics._PathProxy.__proto__),
    close: dart.fnType(dart.void, []),
    cubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double])
  }));
  dart.setLibraryUri(graphics._PathProxy, I[35]);
  dart.setFieldSignature(graphics._PathProxy, () => ({
    __proto__: dart.getFields(graphics._PathProxy.__proto__),
    canvas: dart.finalFieldType(graphics.PdfGraphics)
  }));
  var _xMin = dart.privateName(graphics, "_xMin");
  var _yMin = dart.privateName(graphics, "_yMin");
  var _xMax = dart.privateName(graphics, "_xMax");
  var _yMax = dart.privateName(graphics, "_yMax");
  var _pX = dart.privateName(graphics, "_pX");
  var _pY = dart.privateName(graphics, "_pY");
  var _updateMinMax = dart.privateName(graphics, "_updateMinMax");
  graphics._PathBBProxy = class _PathBBProxy extends path_parsing.PathProxy {
    get box() {
      if (dart.notNull(this[_xMin]) > dart.notNull(this[_xMax]) || dart.notNull(this[_yMin]) > dart.notNull(this[_yMax])) {
        return rect.PdfRect.zero;
      }
      return rect.PdfRect.fromLTRB(this[_xMin], this[_yMin], this[_xMax], this[_yMax]);
    }
    close() {
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      if (x1 == null) dart.nullFailed(I[34], 669, 14, "x1");
      if (y1 == null) dart.nullFailed(I[34], 669, 25, "y1");
      if (x2 == null) dart.nullFailed(I[34], 669, 36, "x2");
      if (y2 == null) dart.nullFailed(I[34], 669, 47, "y2");
      if (x3 == null) dart.nullFailed(I[34], 669, 58, "x3");
      if (y3 == null) dart.nullFailed(I[34], 669, 69, "y3");
      let tvalues = T$.JSArrayOfdouble().of([]);
      let a = null;
      let b = null;
      let c = null;
      let t = null;
      let t1 = null;
      let t2 = null;
      let b2ac = null;
      let sqrtb2ac = null;
      for (let i = 0; i < 2; i = i + 1) {
        if (i === 0) {
          b = 6 * dart.notNull(this[_pX]) - 12 * dart.notNull(x1) + 6 * dart.notNull(x2);
          a = -3 * dart.notNull(this[_pX]) + 9 * dart.notNull(x1) - 9 * dart.notNull(x2) + 3 * dart.notNull(x3);
          c = 3 * dart.notNull(x1) - 3 * dart.notNull(this[_pX]);
        } else {
          b = 6 * dart.notNull(this[_pY]) - 12 * dart.notNull(y1) + 6 * dart.notNull(y2);
          a = -3 * dart.notNull(this[_pY]) + 9 * dart.notNull(y1) - 9 * dart.notNull(y2) + 3 * dart.notNull(y3);
          c = 3 * dart.notNull(y1) - 3 * dart.notNull(this[_pY]);
        }
        if (a[$abs]() < 1e-12) {
          if (b[$abs]() < 1e-12) {
            continue;
          }
          t = -dart.notNull(c) / dart.notNull(b);
          if (0 < dart.notNull(t) && dart.notNull(t) < 1) {
            tvalues[$add](t);
          }
          continue;
        }
        b2ac = dart.notNull(b) * dart.notNull(b) - 4 * dart.notNull(c) * dart.notNull(a);
        if (dart.notNull(b2ac) < 0) {
          if (b2ac[$abs]() < 1e-12) {
            t = -dart.notNull(b) / (2 * dart.notNull(a));
            if (0 < dart.notNull(t) && dart.notNull(t) < 1) {
              tvalues[$add](t);
            }
          }
          continue;
        }
        sqrtb2ac = math.sqrt(b2ac);
        t1 = (-dart.notNull(b) + dart.notNull(sqrtb2ac)) / (2 * dart.notNull(a));
        if (0 < dart.notNull(t1) && dart.notNull(t1) < 1) {
          tvalues[$add](t1);
        }
        t2 = (-dart.notNull(b) - dart.notNull(sqrtb2ac)) / (2 * dart.notNull(a));
        if (0 < dart.notNull(t2) && dart.notNull(t2) < 1) {
          tvalues[$add](t2);
        }
      }
      for (let t of tvalues) {
        let mt = 1 - dart.notNull(t);
        this[_updateMinMax](mt * mt * mt * dart.notNull(this[_pX]) + 3 * mt * mt * dart.notNull(t) * dart.notNull(x1) + 3 * mt * dart.notNull(t) * dart.notNull(t) * dart.notNull(x2) + dart.notNull(t) * dart.notNull(t) * dart.notNull(t) * dart.notNull(x3), mt * mt * mt * dart.notNull(this[_pY]) + 3 * mt * mt * dart.notNull(t) * dart.notNull(y1) + 3 * mt * dart.notNull(t) * dart.notNull(t) * dart.notNull(y2) + dart.notNull(t) * dart.notNull(t) * dart.notNull(t) * dart.notNull(y3));
      }
      this[_updateMinMax](this[_pX], this[_pY]);
      this[_updateMinMax](x3, y3);
      this[_pX] = x3;
      this[_pY] = y3;
    }
    lineTo(x, y) {
      if (x == null) dart.nullFailed(I[34], 734, 22, "x");
      if (y == null) dart.nullFailed(I[34], 734, 32, "y");
      this[_pX] = x;
      this[_pY] = y;
      this[_updateMinMax](x, y);
    }
    moveTo(x, y) {
      if (x == null) dart.nullFailed(I[34], 741, 22, "x");
      if (y == null) dart.nullFailed(I[34], 741, 32, "y");
      this[_pX] = x;
      this[_pY] = y;
      this[_updateMinMax](x, y);
    }
    [_updateMinMax](x, y) {
      if (x == null) dart.nullFailed(I[34], 747, 29, "x");
      if (y == null) dart.nullFailed(I[34], 747, 39, "y");
      this[_xMin] = math.min(core.double, this[_xMin], x);
      this[_yMin] = math.min(core.double, this[_yMin], y);
      this[_xMax] = math.max(core.double, this[_xMax], x);
      this[_yMax] = math.max(core.double, this[_yMax], y);
    }
  };
  (graphics._PathBBProxy.new = function() {
    this[_xMin] = 1 / 0;
    this[_yMin] = 1 / 0;
    this[_xMax] = -1 / 0;
    this[_yMax] = -1 / 0;
    this[_pX] = 0.0;
    this[_pY] = 0.0;
    ;
  }).prototype = graphics._PathBBProxy.prototype;
  dart.addTypeTests(graphics._PathBBProxy);
  dart.addTypeCaches(graphics._PathBBProxy);
  dart.setMethodSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getMethods(graphics._PathBBProxy.__proto__),
    close: dart.fnType(dart.void, []),
    cubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double]),
    [_updateMinMax]: dart.fnType(dart.void, [core.double, core.double])
  }));
  dart.setGetterSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getGetters(graphics._PathBBProxy.__proto__),
    box: rect.PdfRect
  }));
  dart.setLibraryUri(graphics._PathBBProxy, I[35]);
  dart.setFieldSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getFields(graphics._PathBBProxy.__proto__),
    [_xMin]: dart.fieldType(core.double),
    [_yMin]: dart.fieldType(core.double),
    [_xMax]: dart.fieldType(core.double),
    [_yMax]: dart.fieldType(core.double),
    [_pX]: dart.fieldType(core.double),
    [_pY]: dart.fieldType(core.double)
  }));
  var document$0 = dart.privateName(smask, "PdfSoftMask.document");
  var __PdfSoftMask__mask = dart.privateName(smask, "_#PdfSoftMask#_mask");
  var __PdfSoftMask__mask_isSet = dart.privateName(smask, "_#PdfSoftMask#_mask#isSet");
  var _graphics = dart.privateName(smask, "_graphics");
  var _tr = dart.privateName(smask, "_tr");
  var _mask = dart.privateName(smask, "_mask");
  smask.PdfSoftMask = class PdfSoftMask extends core.Object {
    get document() {
      return this[document$0];
    }
    set document(value) {
      super.document = value;
    }
    get [_mask]() {
      let t3;
      return dart.test(this[__PdfSoftMask__mask_isSet]) ? (t3 = this[__PdfSoftMask__mask], t3) : dart.throw(new _internal.LateError.fieldNI("_mask"));
    }
    set [_mask](t3) {
      if (t3 == null) dart.nullFailed(I[36], 57, 26, "null");
      this[__PdfSoftMask__mask_isSet] = true;
      this[__PdfSoftMask__mask] = t3;
    }
    getGraphics() {
      return this[_graphics];
    }
    output() {
      let params = T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/S", C[152] || CT.C152, "/G", this[_mask].ref()]));
      if (this[_tr] != null) {
        params._set("/TR", dart.nullCheck(this[_tr]).ref());
      }
      return params;
    }
  };
  (smask.PdfSoftMask.new = function(document, opts) {
    if (document == null) dart.nullFailed(I[36], 27, 20, "document");
    let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
    if (boundingBox == null) dart.nullFailed(I[36], 28, 25, "boundingBox");
    let isolated = opts && 'isolated' in opts ? opts.isolated : false;
    if (isolated == null) dart.nullFailed(I[36], 29, 12, "isolated");
    let knockout = opts && 'knockout' in opts ? opts.knockout : false;
    if (knockout == null) dart.nullFailed(I[36], 30, 12, "knockout");
    let invert = opts && 'invert' in opts ? opts.invert : false;
    if (invert == null) dart.nullFailed(I[36], 31, 12, "invert");
    this[__PdfSoftMask__mask] = null;
    this[__PdfSoftMask__mask_isSet] = false;
    this[_graphics] = null;
    this[_tr] = null;
    this[document$0] = document;
    this[_mask] = new graphic_stream.PdfGraphicXObject.new(this.document);
    this[_mask].params._set("/BBox", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([boundingBox.x, boundingBox.y, boundingBox.width, boundingBox.height])));
    if (dart.test(isolated)) {
      this[_mask].params._set("/I", C[28] || CT.C28);
    }
    if (dart.test(knockout)) {
      this[_mask].params._set("/K", C[28] || CT.C28);
    }
    this[_graphics] = new graphics.PdfGraphics.new(this[_mask], this[_mask].buf);
    if (dart.test(invert)) {
      this[_tr] = new $function.PdfFunction.new(this.document, {data: T$.JSArrayOfint().of([255, 0])});
    }
  }).prototype = smask.PdfSoftMask.prototype;
  dart.addTypeTests(smask.PdfSoftMask);
  dart.addTypeCaches(smask.PdfSoftMask);
  dart.setMethodSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getMethods(smask.PdfSoftMask.__proto__),
    getGraphics: dart.fnType(dart.nullable(graphics.PdfGraphics), []),
    output: dart.fnType(data_types.PdfDict$(data_types.PdfDataType), [])
  }));
  dart.setGetterSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getGetters(smask.PdfSoftMask.__proto__),
    [_mask]: graphic_stream.PdfGraphicXObject
  }));
  dart.setSetterSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getSetters(smask.PdfSoftMask.__proto__),
    [_mask]: graphic_stream.PdfGraphicXObject
  }));
  dart.setLibraryUri(smask.PdfSoftMask, I[37]);
  dart.setFieldSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getFields(smask.PdfSoftMask.__proto__),
    document: dart.finalFieldType(document$.PdfDocument),
    [__PdfSoftMask__mask]: dart.fieldType(dart.nullable(graphic_stream.PdfGraphicXObject)),
    [__PdfSoftMask__mask_isSet]: dart.fieldType(core.bool),
    [_graphics]: dart.fieldType(dart.nullable(graphics.PdfGraphics)),
    [_tr]: dart.fieldType(dart.nullable($function.PdfBaseFunction))
  }));
  $function.PdfBaseFunction = class PdfBaseFunction extends object_dict.PdfObjectDict {
    static colorsAndStops(pdfDocument, colors, stops = null) {
      if (pdfDocument == null) dart.nullFailed(I[38], 27, 17, "pdfDocument");
      if (colors == null) dart.nullFailed(I[38], 28, 21, "colors");
      if (stops == null || dart.test(stops[$isEmpty])) {
        return $function.PdfFunction.fromColors(pdfDocument, colors);
      }
      let _colors = T$.ListOfPdfColor().from(colors);
      let _stops = T$.ListOfdouble().from(stops);
      let fn = T$.JSArrayOfPdfFunction().of([]);
      let lc = _colors[$first];
      if (dart.notNull(_stops[$_get](0)) > 0) {
        _colors[$insert](0, lc);
        _stops[$insert](0, 0.0);
      }
      if (dart.notNull(_stops[$last]) < 1) {
        _colors[$add](_colors[$last]);
        _stops[$add](1.0);
      }
      if (_stops[$length] != _colors[$length]) {
        dart.throw(core.Exception.new("The number of colors in a gradient must match the number of stops"));
      }
      for (let c of _colors[$sublist](1)) {
        fn[$add]($function.PdfFunction.fromColors(pdfDocument, T$.JSArrayOfPdfColor().of([lc, c])));
        lc = c;
      }
      return new $function.PdfStitchingFunction.new(pdfDocument, {functions: fn, bounds: _stops[$sublist](1, dart.notNull(_stops[$length]) - 1), domainStart: 0.0, domainEnd: 1.0});
    }
  };
  ($function.PdfBaseFunction.new = function(pdfDocument) {
    if (pdfDocument == null) dart.nullFailed(I[38], 24, 31, "pdfDocument");
    $function.PdfBaseFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfBaseFunction.prototype;
  dart.addTypeTests($function.PdfBaseFunction);
  dart.addTypeCaches($function.PdfBaseFunction);
  dart.setLibraryUri($function.PdfBaseFunction, I[39]);
  var data$ = dart.privateName($function, "PdfFunction.data");
  var bitsPerSample$ = dart.privateName($function, "PdfFunction.bitsPerSample");
  var order$ = dart.privateName($function, "PdfFunction.order");
  var domain$ = dart.privateName($function, "PdfFunction.domain");
  var range$ = dart.privateName($function, "PdfFunction.range");
  $function.PdfFunction = class PdfFunction extends object_stream.PdfObjectStream {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get bitsPerSample() {
      return this[bitsPerSample$];
    }
    set bitsPerSample(value) {
      super.bitsPerSample = value;
    }
    get order() {
      return this[order$];
    }
    set order(value) {
      super.order = value;
    }
    get domain() {
      return this[domain$];
    }
    set domain(value) {
      super.domain = value;
    }
    get range() {
      return this[range$];
    }
    set range(value) {
      super.range = value;
    }
    static fromColors(pdfDocument, colors) {
      if (pdfDocument == null) dart.nullFailed(I[38], 82, 19, "pdfDocument");
      if (colors == null) dart.nullFailed(I[38], 82, 48, "colors");
      let data = T$.JSArrayOfint().of([]);
      for (let color of colors) {
        data[$add]((dart.notNull(dart.nullCheck(color).red) * 255.0)[$round]() & 255);
        data[$add]((dart.notNull(color.green) * 255.0)[$round]() & 255);
        data[$add]((dart.notNull(color.blue) * 255.0)[$round]() & 255);
      }
      return new $function.PdfFunction.new(pdfDocument, {order: 3, data: data, range: C[154] || CT.C154});
    }
    prepare() {
      this.buf.putBytes(dart.nullCheck(this.data));
      super.prepare();
      this.params._set("/FunctionType", C[155] || CT.C155);
      this.params._set("/BitsPerSample", new data_types.PdfNum.new(this.bitsPerSample));
      this.params._set("/Order", new data_types.PdfNum.new(this.order));
      this.params._set("/Domain", data_types.PdfArray.fromNum(this.domain));
      this.params._set("/Range", data_types.PdfArray.fromNum(this.range));
      this.params._set("/Size", data_types.PdfArray.fromNum(T$.JSArrayOfint().of([(dart.notNull(dart.nullCheck(this.data)[$length]) / dart.notNull(this.order))[$truncate]()])));
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.bitsPerSample) + " " + dart.str(this.order) + " " + dart.str(this.data);
    }
  };
  ($function.PdfFunction.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[38], 73, 17, "pdfDocument");
    let data = opts && 'data' in opts ? opts.data : null;
    let bitsPerSample = opts && 'bitsPerSample' in opts ? opts.bitsPerSample : 8;
    if (bitsPerSample == null) dart.nullFailed(I[38], 75, 10, "bitsPerSample");
    let order = opts && 'order' in opts ? opts.order : 1;
    if (order == null) dart.nullFailed(I[38], 76, 10, "order");
    let domain = opts && 'domain' in opts ? opts.domain : C[153] || CT.C153;
    if (domain == null) dart.nullFailed(I[38], 77, 10, "domain");
    let range = opts && 'range' in opts ? opts.range : C[153] || CT.C153;
    if (range == null) dart.nullFailed(I[38], 78, 10, "range");
    this[data$] = data;
    this[bitsPerSample$] = bitsPerSample;
    this[order$] = order;
    this[domain$] = domain;
    this[range$] = range;
    $function.PdfFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfFunction.prototype;
  dart.addTypeTests($function.PdfFunction);
  dart.addTypeCaches($function.PdfFunction);
  $function.PdfFunction[dart.implements] = () => [$function.PdfBaseFunction];
  dart.setLibraryUri($function.PdfFunction, I[39]);
  dart.setFieldSignature($function.PdfFunction, () => ({
    __proto__: dart.getFields($function.PdfFunction.__proto__),
    data: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    bitsPerSample: dart.finalFieldType(core.int),
    order: dart.finalFieldType(core.int),
    domain: dart.finalFieldType(core.List$(core.num)),
    range: dart.finalFieldType(core.List$(core.num))
  }));
  dart.defineExtensionMethods($function.PdfFunction, ['toString']);
  var functions$ = dart.privateName($function, "PdfStitchingFunction.functions");
  var bounds$ = dart.privateName($function, "PdfStitchingFunction.bounds");
  var domainStart$ = dart.privateName($function, "PdfStitchingFunction.domainStart");
  var domainEnd$ = dart.privateName($function, "PdfStitchingFunction.domainEnd");
  $function.PdfStitchingFunction = class PdfStitchingFunction extends $function.PdfBaseFunction {
    get functions() {
      return this[functions$];
    }
    set functions(value) {
      super.functions = value;
    }
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get domainStart() {
      return this[domainStart$];
    }
    set domainStart(value) {
      super.domainStart = value;
    }
    get domainEnd() {
      return this[domainEnd$];
    }
    set domainEnd(value) {
      super.domainEnd = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/FunctionType", C[156] || CT.C156);
      this.params._set("/Functions", data_types.PdfArray.fromObjects(this.functions));
      this.params._set("/Order", C[156] || CT.C156);
      this.params._set("/Domain", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([this.domainStart, this.domainEnd])));
      this.params._set("/Bounds", data_types.PdfArray.fromNum(this.bounds));
      this.params._set("/Encode", data_types.PdfArray.fromNum(T$.ListOfint().generate(dart.notNull(this.functions[$length]) * 2, dart.fn(i => {
        if (i == null) dart.nullFailed(I[38], 151, 55, "i");
        return i[$modulo](2);
      }, T$.intToint()))));
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.domainStart) + " " + dart.str(this.bounds) + " " + dart.str(this.domainEnd) + " " + dart.str(this.functions);
    }
  };
  ($function.PdfStitchingFunction.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[38], 126, 17, "pdfDocument");
    let functions = opts && 'functions' in opts ? opts.functions : null;
    if (functions == null) dart.nullFailed(I[38], 127, 19, "functions");
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    if (bounds == null) dart.nullFailed(I[38], 128, 19, "bounds");
    let domainStart = opts && 'domainStart' in opts ? opts.domainStart : 0;
    if (domainStart == null) dart.nullFailed(I[38], 129, 10, "domainStart");
    let domainEnd = opts && 'domainEnd' in opts ? opts.domainEnd : 1;
    if (domainEnd == null) dart.nullFailed(I[38], 130, 10, "domainEnd");
    this[functions$] = functions;
    this[bounds$] = bounds;
    this[domainStart$] = domainStart;
    this[domainEnd$] = domainEnd;
    $function.PdfStitchingFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfStitchingFunction.prototype;
  dart.addTypeTests($function.PdfStitchingFunction);
  dart.addTypeCaches($function.PdfStitchingFunction);
  dart.setLibraryUri($function.PdfStitchingFunction, I[39]);
  dart.setFieldSignature($function.PdfStitchingFunction, () => ({
    __proto__: dart.getFields($function.PdfStitchingFunction.__proto__),
    functions: dart.finalFieldType(core.List$($function.PdfFunction)),
    bounds: dart.finalFieldType(core.List$(core.double)),
    domainStart: dart.finalFieldType(core.double),
    domainEnd: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods($function.PdfStitchingFunction, ['toString']);
  var _name$7 = dart.privateName(graphic_state, "_name");
  graphic_state.PdfBlendMode = class PdfBlendMode extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (graphic_state.PdfBlendMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[40], 27, 6, "index");
    if (_name == null) dart.nullFailed(I[40], 27, 6, "_name");
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = graphic_state.PdfBlendMode.prototype;
  dart.addTypeTests(graphic_state.PdfBlendMode);
  dart.addTypeCaches(graphic_state.PdfBlendMode);
  dart.setLibraryUri(graphic_state.PdfBlendMode, I[41]);
  dart.setFieldSignature(graphic_state.PdfBlendMode, () => ({
    __proto__: dart.getFields(graphic_state.PdfBlendMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(graphic_state.PdfBlendMode, ['toString']);
  graphic_state.PdfBlendMode.normal = C[157] || CT.C157;
  graphic_state.PdfBlendMode.multiply = C[158] || CT.C158;
  graphic_state.PdfBlendMode.screen = C[159] || CT.C159;
  graphic_state.PdfBlendMode.overlay = C[160] || CT.C160;
  graphic_state.PdfBlendMode.darken = C[161] || CT.C161;
  graphic_state.PdfBlendMode.lighten = C[162] || CT.C162;
  graphic_state.PdfBlendMode.colorDodge = C[163] || CT.C163;
  graphic_state.PdfBlendMode.colorBurn = C[164] || CT.C164;
  graphic_state.PdfBlendMode.hardLight = C[165] || CT.C165;
  graphic_state.PdfBlendMode.softLight = C[166] || CT.C166;
  graphic_state.PdfBlendMode.difference = C[167] || CT.C167;
  graphic_state.PdfBlendMode.exclusion = C[168] || CT.C168;
  graphic_state.PdfBlendMode.hue = C[169] || CT.C169;
  graphic_state.PdfBlendMode.saturation = C[170] || CT.C170;
  graphic_state.PdfBlendMode.color = C[171] || CT.C171;
  graphic_state.PdfBlendMode.luminosity = C[172] || CT.C172;
  graphic_state.PdfBlendMode.values = C[173] || CT.C173;
  var fillOpacity$ = dart.privateName(graphic_state, "PdfGraphicState.fillOpacity");
  var strokeOpacity$ = dart.privateName(graphic_state, "PdfGraphicState.strokeOpacity");
  var blendMode$ = dart.privateName(graphic_state, "PdfGraphicState.blendMode");
  var softMask$ = dart.privateName(graphic_state, "PdfGraphicState.softMask");
  var transferFunction$ = dart.privateName(graphic_state, "PdfGraphicState.transferFunction");
  graphic_state.PdfGraphicState = class PdfGraphicState extends core.Object {
    get fillOpacity() {
      return this[fillOpacity$];
    }
    set fillOpacity(value) {
      super.fillOpacity = value;
    }
    get strokeOpacity() {
      return this[strokeOpacity$];
    }
    set strokeOpacity(value) {
      super.strokeOpacity = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    get softMask() {
      return this[softMask$];
    }
    set softMask(value) {
      super.softMask = value;
    }
    get transferFunction() {
      return this[transferFunction$];
    }
    set transferFunction(value) {
      super.transferFunction = value;
    }
    output() {
      let params = T$.PdfDictOfPdfDataType().new();
      if (this.strokeOpacity != null) {
        params._set("/CA", new data_types.PdfNum.new(dart.nullCheck(this.strokeOpacity)));
      }
      if (this.fillOpacity != null) {
        params._set("/ca", new data_types.PdfNum.new(dart.nullCheck(this.fillOpacity)));
      }
      if (this.blendMode != null) {
        let bm = dart.toString(this.blendMode);
        params._set("/BM", new data_types.PdfName.new("/" + bm[$substring](13, 14)[$toUpperCase]() + bm[$substring](14)));
      }
      if (this.softMask != null) {
        params._set("/SMask", dart.nullCheck(this.softMask).output());
      }
      if (this.transferFunction != null) {
        params._set("/TR", dart.nullCheck(this.transferFunction).ref());
      }
      return params;
    }
    _equals(other) {
      if (other == null) return false;
      if (!graphic_state.PdfGraphicState.is(other)) {
        return false;
      }
      return other.fillOpacity == this.fillOpacity && other.strokeOpacity == this.strokeOpacity && other.blendMode == this.blendMode && dart.equals(other.softMask, this.softMask) && dart.equals(other.transferFunction, this.transferFunction);
    }
    get hashCode() {
      return dart.notNull(dart.hashCode(this.fillOpacity)) * dart.notNull(dart.hashCode(this.strokeOpacity)) * dart.notNull(dart.hashCode(this.blendMode)) * dart.notNull(dart.hashCode(this.softMask)) * dart.notNull(dart.hashCode(this.transferFunction));
    }
  };
  (graphic_state.PdfGraphicState.new = function(opts) {
    let t4, t4$;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let strokeOpacity = opts && 'strokeOpacity' in opts ? opts.strokeOpacity : null;
    let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    let softMask = opts && 'softMask' in opts ? opts.softMask : null;
    let transferFunction = opts && 'transferFunction' in opts ? opts.transferFunction : null;
    this[blendMode$] = blendMode;
    this[softMask$] = softMask;
    this[transferFunction$] = transferFunction;
    this[fillOpacity$] = (t4 = fillOpacity, t4 == null ? opacity : t4);
    this[strokeOpacity$] = (t4$ = strokeOpacity, t4$ == null ? opacity : t4$);
    ;
  }).prototype = graphic_state.PdfGraphicState.prototype;
  dart.addTypeTests(graphic_state.PdfGraphicState);
  dart.addTypeCaches(graphic_state.PdfGraphicState);
  dart.setMethodSignature(graphic_state.PdfGraphicState, () => ({
    __proto__: dart.getMethods(graphic_state.PdfGraphicState.__proto__),
    output: dart.fnType(data_types.PdfDict$(data_types.PdfDataType), []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(graphic_state.PdfGraphicState, I[41]);
  dart.setFieldSignature(graphic_state.PdfGraphicState, () => ({
    __proto__: dart.getFields(graphic_state.PdfGraphicState.__proto__),
    fillOpacity: dart.finalFieldType(dart.nullable(core.double)),
    strokeOpacity: dart.finalFieldType(dart.nullable(core.double)),
    blendMode: dart.finalFieldType(dart.nullable(graphic_state.PdfBlendMode)),
    softMask: dart.finalFieldType(dart.nullable(smask.PdfSoftMask)),
    transferFunction: dart.finalFieldType(dart.nullable($function.PdfFunction))
  }));
  dart.defineExtensionMethods(graphic_state.PdfGraphicState, ['_equals']);
  dart.defineExtensionAccessors(graphic_state.PdfGraphicState, ['hashCode']);
  var _states = dart.privateName(graphic_state, "_states");
  graphic_state.PdfGraphicStates = class PdfGraphicStates extends object_dict.PdfObjectDict {
    stateName(state) {
      if (state == null) dart.nullFailed(I[40], 171, 36, "state");
      let index = this[_states][$indexOf](state);
      if (dart.notNull(index) < 0) {
        index = this[_states][$length];
        this[_states][$add](state);
      }
      return "/a" + dart.str(index);
    }
    prepare() {
      super.prepare();
      for (let index = 0; index < dart.notNull(this[_states][$length]); index = index + 1) {
        this.params._set("/a" + dart.str(index), this[_states][$_get](index).output());
      }
    }
  };
  (graphic_state.PdfGraphicStates.new = function(pdfDocument) {
    if (pdfDocument == null) dart.nullFailed(I[40], 164, 32, "pdfDocument");
    this[_states] = T$.JSArrayOfPdfGraphicState().of([]);
    graphic_state.PdfGraphicStates.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = graphic_state.PdfGraphicStates.prototype;
  dart.addTypeTests(graphic_state.PdfGraphicStates);
  dart.addTypeCaches(graphic_state.PdfGraphicStates);
  dart.setMethodSignature(graphic_state.PdfGraphicStates, () => ({
    __proto__: dart.getMethods(graphic_state.PdfGraphicStates.__proto__),
    stateName: dart.fnType(core.String, [graphic_state.PdfGraphicState])
  }));
  dart.setLibraryUri(graphic_state.PdfGraphicStates, I[41]);
  dart.setFieldSignature(graphic_state.PdfGraphicStates, () => ({
    __proto__: dart.getFields(graphic_state.PdfGraphicStates.__proto__),
    [_states]: dart.finalFieldType(core.List$(graphic_state.PdfGraphicState))
  }));
  dart.defineLazy(graphic_state.PdfGraphicStates, {
    /*graphic_state.PdfGraphicStates._prefix*/get _prefix() {
      return "/a";
    }
  }, false);
  var cmap = dart.privateName(unicode_cmap, "PdfUnicodeCmap.cmap");
  var protect$ = dart.privateName(unicode_cmap, "PdfUnicodeCmap.protect");
  unicode_cmap.PdfUnicodeCmap = class PdfUnicodeCmap extends object_stream.PdfObjectStream {
    get cmap() {
      return this[cmap];
    }
    set cmap(value) {
      super.cmap = value;
    }
    get protect() {
      return this[protect$];
    }
    set protect(value) {
      super.protect = value;
    }
    prepare() {
      if (dart.test(this.protect)) {
        this.cmap[$fillRange](1, this.cmap[$length], 32);
      }
      this.buf.putString("/CIDInit/ProcSet findresource begin\n" + "12 dict begin\n" + "begincmap\n" + "/CIDSystemInfo<<\n" + "/Registry (Adobe)\n" + "/Ordering (UCS)\n" + "/Supplement 0\n" + ">> def\n" + "/CMapName/Adobe-Identity-UCS def\n" + "/CMapType 2 def\n" + "1 begincodespacerange\n" + "<0000> <FFFF>\n" + "endcodespacerange\n" + dart.str(this.cmap[$length]) + " beginbfchar\n");
      for (let key = 0; key < dart.notNull(this.cmap[$length]); key = key + 1) {
        let value = this.cmap[$_get](key);
        this.buf.putString("<" + key[$toRadixString](16)[$toUpperCase]()[$padLeft](4, "0") + "> <" + value[$toRadixString](16)[$toUpperCase]()[$padLeft](4, "0") + ">\n");
      }
      this.buf.putString("endbfchar\n" + "endcmap\n" + "CMapName currentdict /CMap defineresource pop\n" + "end\n" + "end");
      super.prepare();
    }
  };
  (unicode_cmap.PdfUnicodeCmap.new = function(pdfDocument, protect) {
    if (pdfDocument == null) dart.nullFailed(I[42], 23, 30, "pdfDocument");
    if (protect == null) dart.nullFailed(I[42], 23, 48, "protect");
    this[cmap] = T$.JSArrayOfint().of([0]);
    this[protect$] = protect;
    unicode_cmap.PdfUnicodeCmap.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = unicode_cmap.PdfUnicodeCmap.prototype;
  dart.addTypeTests(unicode_cmap.PdfUnicodeCmap);
  dart.addTypeCaches(unicode_cmap.PdfUnicodeCmap);
  dart.setLibraryUri(unicode_cmap.PdfUnicodeCmap, I[43]);
  dart.setFieldSignature(unicode_cmap.PdfUnicodeCmap, () => ({
    __proto__: dart.getFields(unicode_cmap.PdfUnicodeCmap.__proto__),
    cmap: dart.finalFieldType(core.List$(core.int)),
    protect: dart.finalFieldType(core.bool)
  }));
  var file$ = dart.privateName(font_descriptor, "PdfFontDescriptor.file");
  var ttfFont$ = dart.privateName(font_descriptor, "PdfFontDescriptor.ttfFont");
  font_descriptor.PdfFontDescriptor = class PdfFontDescriptor extends object_dict.PdfObjectDict {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get ttfFont() {
      return this[ttfFont$];
    }
    set ttfFont(value) {
      super.ttfFont = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/FontName", new data_types.PdfName.new("/" + dart.notNull(this.ttfFont.fontName)));
      this.params._set("/FontFile2", this.file.ref());
      this.params._set("/Flags", new data_types.PdfNum.new(dart.test(this.ttfFont.font.unicode) ? 4 : 32));
      this.params._set("/FontBBox", data_types.PdfArray.fromNum(T$.JSArrayOfint().of([(dart.notNull(this.ttfFont.font.xMin) / dart.notNull(this.ttfFont.font.unitsPerEm) * 1000)[$toInt](), (dart.notNull(this.ttfFont.font.yMin) / dart.notNull(this.ttfFont.font.unitsPerEm) * 1000)[$toInt](), (dart.notNull(this.ttfFont.font.xMax) / dart.notNull(this.ttfFont.font.unitsPerEm) * 1000)[$toInt](), (dart.notNull(this.ttfFont.font.yMax) / dart.notNull(this.ttfFont.font.unitsPerEm) * 1000)[$toInt]()])));
      this.params._set("/Ascent", new data_types.PdfNum.new((dart.notNull(this.ttfFont.ascent) * 1000)[$toInt]()));
      this.params._set("/Descent", new data_types.PdfNum.new((dart.notNull(this.ttfFont.descent) * 1000)[$toInt]()));
      this.params._set("/ItalicAngle", C[155] || CT.C155);
      this.params._set("/CapHeight", C[174] || CT.C174);
      this.params._set("/StemV", C[175] || CT.C175);
    }
  };
  (font_descriptor.PdfFontDescriptor.new = function(ttfFont, file) {
    if (ttfFont == null) dart.nullFailed(I[44], 26, 10, "ttfFont");
    if (file == null) dart.nullFailed(I[44], 27, 10, "file");
    this[ttfFont$] = ttfFont;
    this[file$] = file;
    font_descriptor.PdfFontDescriptor.__proto__.new.call(this, ttfFont.pdfDocument, {type: "/FontDescriptor"});
    ;
  }).prototype = font_descriptor.PdfFontDescriptor.prototype;
  dart.addTypeTests(font_descriptor.PdfFontDescriptor);
  dart.addTypeCaches(font_descriptor.PdfFontDescriptor);
  dart.setLibraryUri(font_descriptor.PdfFontDescriptor, I[45]);
  dart.setFieldSignature(font_descriptor.PdfFontDescriptor, () => ({
    __proto__: dart.getFields(font_descriptor.PdfFontDescriptor.__proto__),
    file: dart.finalFieldType(object_stream.PdfObjectStream),
    ttfFont: dart.finalFieldType(ttffont.PdfTtfFont)
  }));
  var values$0 = dart.privateName(data_types, "PdfArray.values");
  const _is_PdfArray_default = Symbol('_is_PdfArray_default');
  data_types.PdfArray$ = dart.generic(T => {
    var JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var LinkedMapOfT$bool = () => (LinkedMapOfT$bool = dart.constFn(_js_helper.LinkedMap$(T, core.bool)))();
    class PdfArray extends data_types.PdfDataType {
      get values() {
        return this[values$0];
      }
      set values(value) {
        super.values = value;
      }
      static fromObjects(objects) {
        if (objects == null) dart.nullFailed(I[8], 452, 60, "objects");
        return new (T$.PdfArrayOfPdfIndirect()).new(objects[$map](data_types.PdfIndirect, dart.fn(e => {
          if (e == null) dart.nullFailed(I[8], 454, 45, "e");
          return e.ref();
        }, T$.PdfObjectOfPdfDataTypeToPdfIndirect()))[$toList]());
      }
      static fromNum(list) {
        if (list == null) dart.nullFailed(I[8], 457, 45, "list");
        return new (T$.PdfArrayOfPdfNum()).new(list[$map](data_types.PdfNum, dart.fn(e => {
          if (e == null) dart.nullFailed(I[8], 458, 43, "e");
          return new data_types.PdfNum.new(e);
        }, T$.numToPdfNum()))[$toList]());
      }
      add(v) {
        T.as(v);
        if (v == null) dart.nullFailed(I[8], 463, 14, "v");
        this.values[$add](v);
      }
      output(s) {
        if (s == null) dart.nullFailed(I[8], 468, 25, "s");
        s.putString("[");
        if (dart.test(this.values[$isNotEmpty])) {
          for (let n = 0; n < dart.notNull(this.values[$length]); n = n + 1) {
            let val = this.values[$_get](n);
            if (n > 0 && !(data_types.PdfName.is(val) || data_types.PdfString.is(val) || T$.PdfArrayOfPdfDataType().is(val) || T$.PdfDictOfPdfDataType().is(val))) {
              s.putByte(32);
            }
            val.output(s);
          }
        }
        s.putString("]");
      }
      uniq() {
        if (dart.notNull(this.values[$length]) <= 1) {
          return;
        }
        let uniques = new (LinkedMapOfT$bool()).new();
        for (let s of this.values) {
          uniques[$_set](s, true);
        }
        this.values[$clear]();
        this.values[$addAll](uniques[$keys]);
      }
      _equals(other) {
        if (other == null) return false;
        if (T$.PdfArrayOfPdfDataType().is(other)) {
          return dart.equals(this.values, other.values);
        }
        return false;
      }
      get hashCode() {
        return dart.hashCode(this.values);
      }
    }
    (PdfArray.new = function(values = null) {
      this[values$0] = JSArrayOfT().of([]);
      PdfArray.__proto__.new.call(this);
      if (values != null) {
        this.values[$addAll](values);
      }
    }).prototype = PdfArray.prototype;
    dart.addTypeTests(PdfArray);
    PdfArray.prototype[_is_PdfArray_default] = true;
    dart.addTypeCaches(PdfArray);
    dart.setMethodSignature(PdfArray, () => ({
      __proto__: dart.getMethods(PdfArray.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      output: dart.fnType(dart.void, [stream.PdfStream]),
      uniq: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(PdfArray, I[2]);
    dart.setFieldSignature(PdfArray, () => ({
      __proto__: dart.getFields(PdfArray.__proto__),
      values: dart.finalFieldType(core.List$(T))
    }));
    dart.defineExtensionMethods(PdfArray, ['_equals']);
    dart.defineExtensionAccessors(PdfArray, ['hashCode']);
    return PdfArray;
  });
  data_types.PdfArray = data_types.PdfArray$();
  dart.addTypeTests(data_types.PdfArray, _is_PdfArray_default);
  array$.PdfArrayObject = class PdfArrayObject extends object.PdfObject$(data_types.PdfArray$(data_types.PdfDataType)) {
    get array() {
      return this.params;
    }
  };
  (array$.PdfArrayObject.new = function(pdfDocument, array) {
    if (pdfDocument == null) dart.nullFailed(I[46], 25, 17, "pdfDocument");
    if (array == null) dart.nullFailed(I[46], 26, 14, "array");
    array$.PdfArrayObject.__proto__.new.call(this, pdfDocument, {params: array});
    ;
  }).prototype = array$.PdfArrayObject.prototype;
  dart.addTypeTests(array$.PdfArrayObject);
  dart.addTypeCaches(array$.PdfArrayObject);
  dart.setGetterSignature(array$.PdfArrayObject, () => ({
    __proto__: dart.getGetters(array$.PdfArrayObject.__proto__),
    array: data_types.PdfArray$(data_types.PdfDataType)
  }));
  dart.setLibraryUri(array$.PdfArrayObject, I[47]);
  var font$ = dart.privateName(ttffont, "PdfTtfFont.font");
  var __PdfTtfFont_unicodeCMap = dart.privateName(ttffont, "_#PdfTtfFont#unicodeCMap");
  var __PdfTtfFont_unicodeCMap_isSet = dart.privateName(ttffont, "_#PdfTtfFont#unicodeCMap#isSet");
  var __PdfTtfFont_descriptor = dart.privateName(ttffont, "_#PdfTtfFont#descriptor");
  var __PdfTtfFont_descriptor_isSet = dart.privateName(ttffont, "_#PdfTtfFont#descriptor#isSet");
  var __PdfTtfFont_file = dart.privateName(ttffont, "_#PdfTtfFont#file");
  var __PdfTtfFont_file_isSet = dart.privateName(ttffont, "_#PdfTtfFont#file#isSet");
  var __PdfTtfFont_widthsObject = dart.privateName(ttffont, "_#PdfTtfFont#widthsObject");
  var __PdfTtfFont_widthsObject_isSet = dart.privateName(ttffont, "_#PdfTtfFont#widthsObject#isSet");
  var _buildTrueType = dart.privateName(ttffont, "_buildTrueType");
  var _buildType0 = dart.privateName(ttffont, "_buildType0");
  var subtype$ = dart.privateName(font, "PdfFont.subtype");
  font.PdfFont = class PdfFont extends object_dict.PdfObjectDict {
    get subtype() {
      return this[subtype$];
    }
    set subtype(value) {
      super.subtype = value;
    }
    static courier(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 38, 39, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier", 0.91, -0.22, C[181] || CT.C181);
    }
    static courierBold(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 44, 43, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-Bold", 0.91, -0.22, C[181] || CT.C181);
    }
    static courierBoldOblique(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 50, 50, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-BoldOblique", 0.91, -0.22, C[181] || CT.C181);
    }
    static courierOblique(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 56, 46, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-Oblique", 0.91, -0.22, C[181] || CT.C181);
    }
    static helvetica(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 62, 41, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica", 0.931, -0.225, type1_fonts.helveticaWidths);
    }
    static helveticaBold(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 68, 45, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-Bold", 0.962, -0.228, type1_fonts.helveticaBoldWidths);
    }
    static helveticaBoldOblique(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 74, 52, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-BoldOblique", 0.962, -0.228, type1_fonts.helveticaBoldObliqueWidths);
    }
    static helveticaOblique(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 80, 48, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-Oblique", 0.931, -0.225, type1_fonts.helveticaObliqueWidths);
    }
    static times(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 86, 37, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Roman", 0.898, -0.218, type1_fonts.timesWidths);
    }
    static timesBold(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 92, 41, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Bold", 0.935, -0.218, type1_fonts.timesBoldWidths);
    }
    static timesBoldItalic(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 98, 47, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-BoldItalic", 0.921, -0.218, type1_fonts.timesBoldItalicWidths);
    }
    static timesItalic(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 104, 43, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Italic", 0.883, -0.217, type1_fonts.timesItalicWidths);
    }
    static symbol(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 111, 38, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "Symbol", 1.01, -0.293, type1_fonts.symbolWidths);
    }
    static zapfDingbats(pdfDocument) {
      if (pdfDocument == null) dart.nullFailed(I[49], 117, 44, "pdfDocument");
      return new type1_font.PdfType1Font.create(pdfDocument, "ZapfDingbats", 0.82, -0.143, type1_fonts.zapfDingbatsWidths);
    }
    get name() {
      return "/F" + dart.str(this.objser);
    }
    prepare() {
      super.prepare();
      this.params._set("/Subtype", new data_types.PdfName.new(this.subtype));
      this.params._set("/Name", new data_types.PdfName.new(this.name));
      this.params._set("/Encoding", C[182] || CT.C182);
    }
    stringMetrics(s, opts) {
      if (s == null) dart.nullFailed(I[49], 165, 39, "s");
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : 0;
      if (letterSpacing == null) dart.nullFailed(I[49], 165, 50, "letterSpacing");
      if (s[$isEmpty]) {
        return font_metrics.PdfFontMetrics.zero;
      }
      try {
        let chars = convert.latin1.encode(s);
        let metrics = chars[$map](font_metrics.PdfFontMetrics, dart.bind(this, 'glyphMetrics'));
        return font_metrics.PdfFontMetrics.append(metrics, {letterSpacing: letterSpacing});
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          if (!dart.test(dart.fn(() => {
            core.print(font.PdfFont._cannotDecodeMessage);
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[49], 175, 14, "() {\n        print(_cannotDecodeMessage);\n        return true;\n      }()");
          dart.rethrow(e);
        } else
          throw e;
      }
    }
    stringSize(s) {
      if (s == null) dart.nullFailed(I[49], 185, 30, "s");
      let metrics = this.stringMetrics(s);
      return new point.PdfPoint.new(metrics.width, metrics.height);
    }
    toString() {
      return "Font(" + dart.str(this.fontName) + ")";
    }
    putText(stream, text) {
      if (stream == null) dart.nullFailed(I[49], 194, 26, "stream");
      if (text == null) dart.nullFailed(I[49], 194, 41, "text");
      try {
        new data_types.PdfString.new(convert.latin1.encode(text), data_types.PdfStringFormat.litteral).output(stream);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          if (!dart.test(dart.fn(() => {
            core.print(font.PdfFont._cannotDecodeMessage);
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[49], 198, 14, "() {\n        print(_cannotDecodeMessage);\n        return true;\n      }()");
          dart.rethrow(e);
        } else
          throw e;
      }
    }
  };
  (font.PdfFont.create = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[49], 32, 30, "pdfDocument");
    let subtype = opts && 'subtype' in opts ? opts.subtype : null;
    if (subtype == null) dart.nullFailed(I[49], 32, 58, "subtype");
    this[subtype$] = subtype;
    font.PdfFont.__proto__.new.call(this, pdfDocument, {type: "/Font"});
    pdfDocument.fonts.add(this);
  }).prototype = font.PdfFont.prototype;
  dart.addTypeTests(font.PdfFont);
  dart.addTypeCaches(font.PdfFont);
  dart.setMethodSignature(font.PdfFont, () => ({
    __proto__: dart.getMethods(font.PdfFont.__proto__),
    stringMetrics: dart.fnType(font_metrics.PdfFontMetrics, [core.String], {letterSpacing: core.double}, {}),
    stringSize: dart.fnType(point.PdfPoint, [core.String]),
    putText: dart.fnType(dart.void, [stream.PdfStream, core.String])
  }));
  dart.setGetterSignature(font.PdfFont, () => ({
    __proto__: dart.getGetters(font.PdfFont.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(font.PdfFont, I[50]);
  dart.setFieldSignature(font.PdfFont, () => ({
    __proto__: dart.getFields(font.PdfFont.__proto__),
    subtype: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(font.PdfFont, ['toString']);
  dart.defineLazy(font.PdfFont, {
    /*font.PdfFont._cannotDecodeMessage*/get _cannotDecodeMessage() {
      return "---------------------------------------------\nCannot decode the string to Latin1.\nThis font does not support Unicode characters.\nIf you want to use strings other than Latin strings, use a TrueType (TTF) font instead.\nSee https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management\n---------------------------------------------";
    },
    /*font.PdfFont.defaultGlyphWidth*/get defaultGlyphWidth() {
      return 0.6;
    }
  }, false);
  ttffont.PdfTtfFont = class PdfTtfFont extends font.PdfFont {
    get font() {
      return this[font$];
    }
    set font(value) {
      super.font = value;
    }
    get subtype() {
      return dart.test(this.font.unicode) ? "/Type0" : super.subtype;
    }
    get unicodeCMap() {
      let t4;
      return dart.test(this[__PdfTtfFont_unicodeCMap_isSet]) ? (t4 = this[__PdfTtfFont_unicodeCMap], t4) : dart.throw(new _internal.LateError.fieldNI("unicodeCMap"));
    }
    set unicodeCMap(t4) {
      if (t4 == null) dart.nullFailed(I[48], 47, 23, "null");
      this[__PdfTtfFont_unicodeCMap_isSet] = true;
      this[__PdfTtfFont_unicodeCMap] = t4;
    }
    get descriptor() {
      let t5;
      return dart.test(this[__PdfTtfFont_descriptor_isSet]) ? (t5 = this[__PdfTtfFont_descriptor], t5) : dart.throw(new _internal.LateError.fieldNI("descriptor"));
    }
    set descriptor(t5) {
      if (t5 == null) dart.nullFailed(I[48], 49, 26, "null");
      this[__PdfTtfFont_descriptor_isSet] = true;
      this[__PdfTtfFont_descriptor] = t5;
    }
    get file() {
      let t6;
      return dart.test(this[__PdfTtfFont_file_isSet]) ? (t6 = this[__PdfTtfFont_file], t6) : dart.throw(new _internal.LateError.fieldNI("file"));
    }
    set file(t6) {
      if (t6 == null) dart.nullFailed(I[48], 51, 24, "null");
      this[__PdfTtfFont_file_isSet] = true;
      this[__PdfTtfFont_file] = t6;
    }
    get widthsObject() {
      let t7;
      return dart.test(this[__PdfTtfFont_widthsObject_isSet]) ? (t7 = this[__PdfTtfFont_widthsObject], t7) : dart.throw(new _internal.LateError.fieldNI("widthsObject"));
    }
    set widthsObject(t7) {
      if (t7 == null) dart.nullFailed(I[48], 53, 23, "null");
      this[__PdfTtfFont_widthsObject_isSet] = true;
      this[__PdfTtfFont_widthsObject] = t7;
    }
    get fontName() {
      return this.font.fontName;
    }
    get ascent() {
      return this.font.ascent[$toDouble]() / dart.notNull(this.font.unitsPerEm);
    }
    get descent() {
      return this.font.descent[$toDouble]() / dart.notNull(this.font.unitsPerEm);
    }
    get unitsPerEm() {
      return this.font.unitsPerEm;
    }
    glyphMetrics(charCode) {
      let t8, t8$;
      if (charCode == null) dart.nullFailed(I[48], 70, 35, "charCode");
      let g = this.font.charToGlyphIndexMap[$_get](charCode);
      if (g == null) {
        return font_metrics.PdfFontMetrics.zero;
      }
      if (dart.test(arabic.isArabicDiacriticValue(charCode))) {
        let metric = (t8 = this.font.glyphInfoMap[$_get](g), t8 == null ? font_metrics.PdfFontMetrics.zero : t8);
        return metric.copyWith({advanceWidth: 0.0});
      }
      t8$ = this.font.glyphInfoMap[$_get](g);
      return t8$ == null ? font_metrics.PdfFontMetrics.zero : t8$;
    }
    [_buildTrueType](params) {
      if (params == null) dart.nullFailed(I[48], 85, 31, "params");
      let charMin = null;
      let charMax = null;
      this.file.buf.putBytes(this.font.bytes.buffer[$asUint8List]());
      this.file.params._set("/Length1", new data_types.PdfNum.new(this.font.bytes.lengthInBytes));
      params._set("/BaseFont", new data_types.PdfName.new("/" + dart.notNull(this.fontName)));
      params._set("/FontDescriptor", this.descriptor.ref());
      charMin = 32;
      charMax = 255;
      for (let i = charMin; dart.notNull(i) <= dart.notNull(charMax); i = dart.notNull(i) + 1) {
        this.widthsObject.array.add(new data_types.PdfNum.new((dart.notNull(this.glyphMetrics(i).advanceWidth) * 1000.0)[$toInt]()));
      }
      params._set("/FirstChar", new data_types.PdfNum.new(charMin));
      params._set("/LastChar", new data_types.PdfNum.new(charMax));
      params._set("/Widths", this.widthsObject.ref());
    }
    [_buildType0](params) {
      if (params == null) dart.nullFailed(I[48], 105, 28, "params");
      let charMin = null;
      let charMax = null;
      let ttfWriter = new ttf_writer.TtfWriter.new(this.font);
      let data = ttfWriter.withChars(this.unicodeCMap.cmap);
      this.file.buf.putBytes(data);
      this.file.params._set("/Length1", new data_types.PdfNum.new(data[$length]));
      let descendantFont = T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/Type", C[176] || CT.C176, "/BaseFont", new data_types.PdfName.new("/" + dart.notNull(this.fontName)), "/FontFile2", this.file.ref(), "/FontDescriptor", this.descriptor.ref(), "/W", new (T$.PdfArrayOfPdfDataType()).new(T$.JSArrayOfPdfDataType().of([C[155] || CT.C155, this.widthsObject.ref()])), "/CIDToGIDMap", C[177] || CT.C177, "/DW", C[178] || CT.C178, "/Subtype", C[179] || CT.C179, "/CIDSystemInfo", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/Supplement", C[155] || CT.C155, "/Registry", data_types.PdfSecString.fromString(this, "Adobe"), "/Ordering", data_types.PdfSecString.fromString(this, "Identity-H")]))]));
      params._set("/BaseFont", new data_types.PdfName.new("/" + dart.notNull(this.fontName)));
      params._set("/Encoding", C[180] || CT.C180);
      params._set("/DescendantFonts", new (T$.PdfArrayOfPdfDictOfPdfDataType()).new(T$.JSArrayOfPdfDictOfPdfDataType().of([descendantFont])));
      params._set("/ToUnicode", this.unicodeCMap.ref());
      charMin = 0;
      charMax = dart.notNull(this.unicodeCMap.cmap[$length]) - 1;
      for (let i = charMin; dart.notNull(i) <= dart.notNull(charMax); i = dart.notNull(i) + 1) {
        this.widthsObject.array.add(new data_types.PdfNum.new((dart.notNull(this.glyphMetrics(this.unicodeCMap.cmap[$_get](i)).advanceWidth) * 1000.0)[$toInt]()));
      }
    }
    prepare() {
      super.prepare();
      if (dart.test(this.font.unicode)) {
        this[_buildType0](this.params);
      } else {
        this[_buildTrueType](this.params);
      }
    }
    putText(stream, text) {
      if (stream == null) dart.nullFailed(I[48], 158, 26, "stream");
      if (text == null) dart.nullFailed(I[48], 158, 41, "text");
      if (!dart.test(this.font.unicode)) {
        super.putText(stream, text);
      }
      let runes = text[$runes];
      stream.putByte(60);
      for (let rune of runes) {
        let char = this.unicodeCMap.cmap[$indexOf](rune);
        if (char === -1) {
          char = this.unicodeCMap.cmap[$length];
          this.unicodeCMap.cmap[$add](rune);
        }
        stream.putBytes(convert.latin1.encode(char[$toRadixString](16)[$padLeft](4, "0")));
      }
      stream.putByte(62);
    }
    stringMetrics(s, opts) {
      if (s == null) dart.nullFailed(I[48], 179, 39, "s");
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : 0;
      if (letterSpacing == null) dart.nullFailed(I[48], 179, 50, "letterSpacing");
      if (s[$isEmpty] || !dart.test(this.font.unicode)) {
        return super.stringMetrics(s, {letterSpacing: letterSpacing});
      }
      let runes = s[$runes];
      let bytes = T$.JSArrayOfint().of([]);
      runes[$forEach](dart.bind(bytes, $add));
      let metrics = bytes[$map](font_metrics.PdfFontMetrics, dart.bind(this, 'glyphMetrics'));
      return font_metrics.PdfFontMetrics.append(metrics, {letterSpacing: letterSpacing});
    }
  };
  (ttffont.PdfTtfFont.new = function(pdfDocument, bytes, opts) {
    if (pdfDocument == null) dart.nullFailed(I[48], 35, 26, "pdfDocument");
    if (bytes == null) dart.nullFailed(I[48], 35, 48, "bytes");
    let protect = opts && 'protect' in opts ? opts.protect : false;
    if (protect == null) dart.nullFailed(I[48], 35, 61, "protect");
    this[__PdfTtfFont_unicodeCMap] = null;
    this[__PdfTtfFont_unicodeCMap_isSet] = false;
    this[__PdfTtfFont_descriptor] = null;
    this[__PdfTtfFont_descriptor_isSet] = false;
    this[__PdfTtfFont_file] = null;
    this[__PdfTtfFont_file_isSet] = false;
    this[__PdfTtfFont_widthsObject] = null;
    this[__PdfTtfFont_widthsObject_isSet] = false;
    this[font$] = new ttf_parser.TtfParser.new(bytes);
    ttffont.PdfTtfFont.__proto__.create.call(this, pdfDocument, {subtype: "/TrueType"});
    this.file = new object_stream.PdfObjectStream.new(pdfDocument, {isBinary: true});
    this.unicodeCMap = new unicode_cmap.PdfUnicodeCmap.new(pdfDocument, protect);
    this.descriptor = new font_descriptor.PdfFontDescriptor.new(this, this.file);
    this.widthsObject = new array$.PdfArrayObject.new(pdfDocument, new (T$.PdfArrayOfPdfDataType()).new());
  }).prototype = ttffont.PdfTtfFont.prototype;
  dart.addTypeTests(ttffont.PdfTtfFont);
  dart.addTypeCaches(ttffont.PdfTtfFont);
  dart.setMethodSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getMethods(ttffont.PdfTtfFont.__proto__),
    glyphMetrics: dart.fnType(font_metrics.PdfFontMetrics, [core.int]),
    [_buildTrueType]: dart.fnType(dart.void, [data_types.PdfDict$(data_types.PdfDataType)]),
    [_buildType0]: dart.fnType(dart.void, [data_types.PdfDict$(data_types.PdfDataType)])
  }));
  dart.setGetterSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getGetters(ttffont.PdfTtfFont.__proto__),
    subtype: core.String,
    unicodeCMap: unicode_cmap.PdfUnicodeCmap,
    descriptor: font_descriptor.PdfFontDescriptor,
    file: object_stream.PdfObjectStream,
    widthsObject: array$.PdfArrayObject,
    fontName: core.String,
    ascent: core.double,
    descent: core.double,
    unitsPerEm: core.int
  }));
  dart.setSetterSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getSetters(ttffont.PdfTtfFont.__proto__),
    unicodeCMap: unicode_cmap.PdfUnicodeCmap,
    descriptor: font_descriptor.PdfFontDescriptor,
    file: object_stream.PdfObjectStream,
    widthsObject: array$.PdfArrayObject
  }));
  dart.setLibraryUri(ttffont.PdfTtfFont, I[51]);
  dart.setFieldSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getFields(ttffont.PdfTtfFont.__proto__),
    [__PdfTtfFont_unicodeCMap]: dart.fieldType(dart.nullable(unicode_cmap.PdfUnicodeCmap)),
    [__PdfTtfFont_unicodeCMap_isSet]: dart.fieldType(core.bool),
    [__PdfTtfFont_descriptor]: dart.fieldType(dart.nullable(font_descriptor.PdfFontDescriptor)),
    [__PdfTtfFont_descriptor_isSet]: dart.fieldType(core.bool),
    [__PdfTtfFont_file]: dart.fieldType(dart.nullable(object_stream.PdfObjectStream)),
    [__PdfTtfFont_file_isSet]: dart.fieldType(core.bool),
    [__PdfTtfFont_widthsObject]: dart.fieldType(dart.nullable(array$.PdfArrayObject)),
    [__PdfTtfFont_widthsObject_isSet]: dart.fieldType(core.bool),
    font: dart.finalFieldType(ttf_parser.TtfParser)
  }));
  var fontName$ = dart.privateName(type1_font, "PdfType1Font.fontName");
  var ascent$ = dart.privateName(type1_font, "PdfType1Font.ascent");
  var descent$ = dart.privateName(type1_font, "PdfType1Font.descent");
  var widths$ = dart.privateName(type1_font, "PdfType1Font.widths");
  type1_font.PdfType1Font = class PdfType1Font extends font.PdfFont {
    get fontName() {
      return this[fontName$];
    }
    set fontName(value) {
      super.fontName = value;
    }
    get ascent() {
      return this[ascent$];
    }
    set ascent(value) {
      super.ascent = value;
    }
    get descent() {
      return this[descent$];
    }
    set descent(value) {
      super.descent = value;
    }
    get widths() {
      return this[widths$];
    }
    set widths(value) {
      super.widths = value;
    }
    get unitsPerEm() {
      return 1000;
    }
    prepare() {
      super.prepare();
      this.params._set("/BaseFont", new data_types.PdfName.new("/" + dart.notNull(this.fontName)));
    }
    glyphMetrics(charCode) {
      if (charCode == null) dart.nullFailed(I[52], 66, 35, "charCode");
      return new font_metrics.PdfFontMetrics.new({left: 0.0, top: this.descent, right: dart.notNull(charCode) < dart.notNull(this.widths[$length]) ? this.widths[$_get](charCode) : 0.6, bottom: this.ascent});
    }
  };
  (type1_font.PdfType1Font.create = function(pdfDocument, fontName, ascent, descent, widths) {
    if (pdfDocument == null) dart.nullFailed(I[52], 33, 35, "pdfDocument");
    if (fontName == null) dart.nullFailed(I[52], 33, 53, "fontName");
    if (ascent == null) dart.nullFailed(I[52], 33, 68, "ascent");
    if (descent == null) dart.nullFailed(I[52], 34, 12, "descent");
    if (widths == null) dart.nullFailed(I[52], 34, 26, "widths");
    this[fontName$] = fontName;
    this[ascent$] = ascent;
    this[descent$] = descent;
    this[widths$] = widths;
    if (!dart.test(dart.fn(() => {
      core.print(dart.str(fontName) + " has no Unicode support see https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management");
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[52], 35, 16, "() {\n          // ignore: avoid_print\n          print(\n              '$fontName has no Unicode support see https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management');\n          return true;\n        }()");
    type1_font.PdfType1Font.__proto__.create.call(this, pdfDocument, {subtype: "/Type1"});
    ;
  }).prototype = type1_font.PdfType1Font.prototype;
  dart.addTypeTests(type1_font.PdfType1Font);
  dart.addTypeCaches(type1_font.PdfType1Font);
  dart.setMethodSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getMethods(type1_font.PdfType1Font.__proto__),
    glyphMetrics: dart.fnType(font_metrics.PdfFontMetrics, [core.int])
  }));
  dart.setGetterSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getGetters(type1_font.PdfType1Font.__proto__),
    unitsPerEm: core.int
  }));
  dart.setLibraryUri(type1_font.PdfType1Font, I[53]);
  dart.setFieldSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getFields(type1_font.PdfType1Font.__proto__),
    fontName: dart.finalFieldType(core.String),
    ascent: dart.finalFieldType(core.double),
    descent: dart.finalFieldType(core.double),
    widths: dart.finalFieldType(core.List$(core.double))
  }));
  var isolatedTransparency = dart.privateName(graphic_stream, "PdfGraphicStream.isolatedTransparency");
  var knockoutTransparency = dart.privateName(graphic_stream, "PdfGraphicStream.knockoutTransparency");
  var fonts = dart.privateName(graphic_stream, "PdfGraphicStream.fonts");
  var shading$0 = dart.privateName(graphic_stream, "PdfGraphicStream.shading");
  var patterns = dart.privateName(graphic_stream, "PdfGraphicStream.patterns");
  var xObjects = dart.privateName(graphic_stream, "PdfGraphicStream.xObjects");
  graphic_stream.PdfGraphicStream = class PdfGraphicStream extends object_dict.PdfObjectDict {};
  graphic_stream.PdfGraphicStream[dart.mixinOn] = PdfObjectDict => class PdfGraphicStream extends PdfObjectDict {
    get isolatedTransparency() {
      return this[isolatedTransparency];
    }
    set isolatedTransparency(value) {
      this[isolatedTransparency] = value;
    }
    get knockoutTransparency() {
      return this[knockoutTransparency];
    }
    set knockoutTransparency(value) {
      this[knockoutTransparency] = value;
    }
    get fonts() {
      return this[fonts];
    }
    set fonts(value) {
      super.fonts = value;
    }
    get shading() {
      return this[shading$0];
    }
    set shading(value) {
      super.shading = value;
    }
    get patterns() {
      return this[patterns];
    }
    set patterns(value) {
      super.patterns = value;
    }
    get xObjects() {
      return this[xObjects];
    }
    set xObjects(value) {
      super.xObjects = value;
    }
    addFont(font) {
      if (font == null) dart.nullFailed(I[54], 53, 24, "font");
      if (!dart.test(this.fonts[$containsKey](font.name))) {
        this.fonts[$_set](font.name, font);
      }
    }
    addShader(shader) {
      if (shader == null) dart.nullFailed(I[54], 60, 29, "shader");
      if (!dart.test(this.shading[$containsKey](shader.name))) {
        this.shading[$_set](shader.name, shader);
      }
    }
    addPattern(pattern) {
      if (pattern == null) dart.nullFailed(I[54], 67, 30, "pattern");
      if (!dart.test(this.patterns[$containsKey](pattern.name))) {
        this.patterns[$_set](pattern.name, pattern);
      }
    }
    addXObject(object) {
      if (object == null) dart.nullFailed(I[54], 74, 30, "object");
      if (!dart.test(this.xObjects[$containsKey](object.name))) {
        this.xObjects[$_set](object.name, object);
      }
    }
    getDefaultFont() {
      if (dart.test(this.pdfDocument.fonts[$isEmpty])) {
        font.PdfFont.helvetica(this.pdfDocument);
      }
      return this.pdfDocument.fonts[$elementAt](0);
    }
    stateName(state) {
      if (state == null) dart.nullFailed(I[54], 90, 36, "state");
      return this.pdfDocument.graphicStates.stateName(state);
    }
    prepare() {
      super.prepare();
      let resources = T$.PdfDictOfPdfDataType().new();
      resources._set("/ProcSet", new (T$.PdfArrayOfPdfName()).new(C[183] || CT.C183));
      if (dart.test(this.fonts[$isNotEmpty])) {
        resources._set("/Font", data_types.PdfDict.fromObjectMap(this.fonts));
      }
      if (dart.test(this.shading[$isNotEmpty])) {
        resources._set("/Shading", data_types.PdfDict.fromObjectMap(this.shading));
      }
      if (dart.test(this.patterns[$isNotEmpty])) {
        resources._set("/Pattern", data_types.PdfDict.fromObjectMap(this.patterns));
      }
      if (dart.test(this.xObjects[$isNotEmpty])) {
        resources._set("/XObject", data_types.PdfDict.fromObjectMap(this.xObjects));
      }
      if (dart.test(this.pdfDocument.hasGraphicStates)) {
        this.params._set("/Group", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/Type", C[188] || CT.C188, "/S", C[189] || CT.C189, "/CS", C[29] || CT.C29, "/I", new data_types.PdfBool.new(this.isolatedTransparency), "/K", new data_types.PdfBool.new(this.knockoutTransparency)])));
        resources._set("/ExtGState", this.pdfDocument.graphicStates.ref());
      }
      if (dart.test(this.params.containsKey("/Resources"))) {
        let res = this.params._get("/Resources");
        if (T$.PdfDictOfPdfDataType().is(res)) {
          res.merge(resources);
          return;
        }
      }
      this.params._set("/Resources", resources);
    }
  };
  (graphic_stream.PdfGraphicStream[dart.mixinNew] = function() {
    this[isolatedTransparency] = false;
    this[knockoutTransparency] = false;
    this[fonts] = new (T$.IdentityMapOfString$PdfFont()).new();
    this[shading$0] = new (T$.IdentityMapOfString$PdfShading()).new();
    this[patterns] = new (T$.IdentityMapOfString$PdfPattern()).new();
    this[xObjects] = new (T$.IdentityMapOfString$PdfXObject()).new();
  }).prototype = graphic_stream.PdfGraphicStream.prototype;
  dart.addTypeTests(graphic_stream.PdfGraphicStream);
  dart.addTypeCaches(graphic_stream.PdfGraphicStream);
  graphic_stream.PdfGraphicStream[dart.implements] = () => [object_dict.PdfObjectDict];
  dart.setMethodSignature(graphic_stream.PdfGraphicStream, () => ({
    __proto__: dart.getMethods(graphic_stream.PdfGraphicStream.__proto__),
    addFont: dart.fnType(dart.void, [font.PdfFont]),
    addShader: dart.fnType(dart.void, [shading.PdfShading]),
    addPattern: dart.fnType(dart.void, [pattern.PdfPattern]),
    addXObject: dart.fnType(dart.void, [xobject.PdfXObject]),
    getDefaultFont: dart.fnType(dart.nullable(font.PdfFont), []),
    stateName: dart.fnType(core.String, [graphic_state.PdfGraphicState])
  }));
  dart.setLibraryUri(graphic_stream.PdfGraphicStream, I[55]);
  dart.setFieldSignature(graphic_stream.PdfGraphicStream, () => ({
    __proto__: dart.getFields(graphic_stream.PdfGraphicStream.__proto__),
    isolatedTransparency: dart.fieldType(core.bool),
    knockoutTransparency: dart.fieldType(core.bool),
    fonts: dart.finalFieldType(core.Map$(core.String, font.PdfFont)),
    shading: dart.finalFieldType(core.Map$(core.String, shading.PdfShading)),
    patterns: dart.finalFieldType(core.Map$(core.String, pattern.PdfPattern)),
    xObjects: dart.finalFieldType(core.Map$(core.String, xobject.PdfXObject))
  }));
  const PdfXObject_PdfGraphicStream$36 = class PdfXObject_PdfGraphicStream extends xobject.PdfXObject {};
  (PdfXObject_PdfGraphicStream$36.new = function(pdfDocument, subtype, opts) {
    graphic_stream.PdfGraphicStream[dart.mixinNew].call(this);
    PdfXObject_PdfGraphicStream$36.__proto__.new.call(this, pdfDocument, subtype, opts);
  }).prototype = PdfXObject_PdfGraphicStream$36.prototype;
  dart.applyMixin(PdfXObject_PdfGraphicStream$36, graphic_stream.PdfGraphicStream);
  graphic_stream.PdfGraphicXObject = class PdfGraphicXObject extends PdfXObject_PdfGraphicStream$36 {};
  (graphic_stream.PdfGraphicXObject.new = function(pdfDocument, subtype = null) {
    if (pdfDocument == null) dart.nullFailed(I[54], 157, 17, "pdfDocument");
    graphic_stream.PdfGraphicXObject.__proto__.new.call(this, pdfDocument, subtype);
    ;
  }).prototype = graphic_stream.PdfGraphicXObject.prototype;
  dart.addTypeTests(graphic_stream.PdfGraphicXObject);
  dart.addTypeCaches(graphic_stream.PdfGraphicXObject);
  dart.setLibraryUri(graphic_stream.PdfGraphicXObject, I[55]);
  var _name$8 = dart.privateName(page, "_name");
  page.PdfPageRotation = class PdfPageRotation extends core.Object {
    toString() {
      return this[_name$8];
    }
  };
  (page.PdfPageRotation.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[56], 27, 6, "index");
    if (_name == null) dart.nullFailed(I[56], 27, 6, "_name");
    this.index = index;
    this[_name$8] = _name;
    ;
  }).prototype = page.PdfPageRotation.prototype;
  dart.addTypeTests(page.PdfPageRotation);
  dart.addTypeCaches(page.PdfPageRotation);
  dart.setLibraryUri(page.PdfPageRotation, I[57]);
  dart.setFieldSignature(page.PdfPageRotation, () => ({
    __proto__: dart.getFields(page.PdfPageRotation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(page.PdfPageRotation, ['toString']);
  page.PdfPageRotation.none = C[190] || CT.C190;
  page.PdfPageRotation.rotate90 = C[191] || CT.C191;
  page.PdfPageRotation.rotate180 = C[192] || CT.C192;
  page.PdfPageRotation.rotate270 = C[193] || CT.C193;
  page.PdfPageRotation.values = C[194] || CT.C194;
  var pageFormat$ = dart.privateName(page, "PdfPage.pageFormat");
  var rotate$ = dart.privateName(page, "PdfPage.rotate");
  var contents = dart.privateName(page, "PdfPage.contents");
  var annotations = dart.privateName(page, "PdfPage.annotations");
  var PdfPageFormat_marginRight = dart.privateName(page_format, "PdfPageFormat.marginRight");
  var PdfPageFormat_marginLeft = dart.privateName(page_format, "PdfPageFormat.marginLeft");
  var PdfPageFormat_marginBottom = dart.privateName(page_format, "PdfPageFormat.marginBottom");
  var PdfPageFormat_marginTop = dart.privateName(page_format, "PdfPageFormat.marginTop");
  var PdfPageFormat_height = dart.privateName(page_format, "PdfPageFormat.height");
  var PdfPageFormat_width = dart.privateName(page_format, "PdfPageFormat.width");
  const PdfObjectDict_PdfGraphicStream$36 = class PdfObjectDict_PdfGraphicStream extends object_dict.PdfObjectDict {};
  (PdfObjectDict_PdfGraphicStream$36.new = function(pdfDocument, opts) {
    graphic_stream.PdfGraphicStream[dart.mixinNew].call(this);
    PdfObjectDict_PdfGraphicStream$36.__proto__.new.call(this, pdfDocument, opts);
  }).prototype = PdfObjectDict_PdfGraphicStream$36.prototype;
  dart.applyMixin(PdfObjectDict_PdfGraphicStream$36, graphic_stream.PdfGraphicStream);
  page.PdfPage = class PdfPage extends PdfObjectDict_PdfGraphicStream$36 {
    get pageFormat() {
      return this[pageFormat$];
    }
    set pageFormat(value) {
      this[pageFormat$] = value;
    }
    get rotate() {
      return this[rotate$];
    }
    set rotate(value) {
      this[rotate$] = value;
    }
    get contents() {
      return this[contents];
    }
    set contents(value) {
      super.contents = value;
    }
    get annotations() {
      return this[annotations];
    }
    set annotations(value) {
      super.annotations = value;
    }
    getGraphics() {
      let stream = new object_stream.PdfObjectStream.new(this.pdfDocument);
      let g = new graphics.PdfGraphics.new(this, stream.buf);
      this.contents[$add](stream);
      return g;
    }
    addAnnotation(ob) {
      if (ob == null) dart.nullFailed(I[56], 84, 31, "ob");
      this.annotations[$add](ob);
    }
    prepare() {
      super.prepare();
      this.params._set("/Parent", this.pdfDocument.pdfPageList.ref());
      if (this.rotate != page.PdfPageRotation.none) {
        this.params._set("/Rotate", new data_types.PdfNum.new(dart.notNull(this.rotate.index) * 90));
      }
      this.params._set("/MediaBox", data_types.PdfArray.fromNum(T$.JSArrayOfdouble().of([0.0, 0.0, this.pageFormat.width, this.pageFormat.height])));
      let contentList = data_types.PdfArray.fromObjects(this.contents);
      if (dart.test(this.params.containsKey("/Contents"))) {
        let prevContent = dart.nullCheck(this.params._get("/Contents"));
        if (T$.PdfArrayOfPdfDataType().is(prevContent)) {
          contentList.values[$insertAll](0, prevContent.values[$whereType](data_types.PdfIndirect));
        } else if (data_types.PdfIndirect.is(prevContent)) {
          contentList.values[$insert](0, prevContent);
        }
      }
      contentList.uniq();
      if (contentList.values[$length] === 1) {
        this.params._set("/Contents", contentList.values[$first]);
      } else if (dart.test(this.contents[$isNotEmpty])) {
        this.params._set("/Contents", contentList);
      }
      if (dart.test(this.annotations[$isNotEmpty])) {
        if (dart.test(this.params.containsKey("/Annots"))) {
          let annotsList = this.params._get("/Annots");
          if (T$.PdfArrayOfPdfDataType().is(annotsList)) {
            annotsList.values[$addAll](data_types.PdfArray.fromObjects(this.annotations).values);
          }
        } else {
          this.params._set("/Annots", data_types.PdfArray.fromObjects(this.annotations));
        }
      }
    }
  };
  (page.PdfPage.new = function(pdfDocument, opts) {
    if (pdfDocument == null) dart.nullFailed(I[56], 46, 17, "pdfDocument");
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : C[195] || CT.C195;
    if (pageFormat == null) dart.nullFailed(I[56], 47, 10, "pageFormat");
    let rotate = opts && 'rotate' in opts ? opts.rotate : C[190] || CT.C190;
    if (rotate == null) dart.nullFailed(I[56], 48, 10, "rotate");
    let index = opts && 'index' in opts ? opts.index : null;
    let objser = opts && 'objser' in opts ? opts.objser : null;
    let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
    if (objgen == null) dart.nullFailed(I[56], 51, 9, "objgen");
    this[contents] = T$.JSArrayOfPdfObjectStream().of([]);
    this[annotations] = T$.JSArrayOfPdfAnnot().of([]);
    this[pageFormat$] = pageFormat;
    this[rotate$] = rotate;
    page.PdfPage.__proto__.new.call(this, pdfDocument, {type: "/Page", objser: objser, objgen: objgen});
    if (index != null) {
      pdfDocument.pdfPageList.pages[$insert](index, this);
    } else {
      pdfDocument.pdfPageList.pages[$add](this);
    }
  }).prototype = page.PdfPage.prototype;
  dart.addTypeTests(page.PdfPage);
  dart.addTypeCaches(page.PdfPage);
  dart.setMethodSignature(page.PdfPage, () => ({
    __proto__: dart.getMethods(page.PdfPage.__proto__),
    getGraphics: dart.fnType(graphics.PdfGraphics, []),
    addAnnotation: dart.fnType(dart.void, [annotation.PdfAnnot])
  }));
  dart.setLibraryUri(page.PdfPage, I[57]);
  dart.setFieldSignature(page.PdfPage, () => ({
    __proto__: dart.getFields(page.PdfPage.__proto__),
    pageFormat: dart.fieldType(page_format.PdfPageFormat),
    rotate: dart.fieldType(page.PdfPageRotation),
    contents: dart.finalFieldType(core.List$(object_stream.PdfObjectStream)),
    annotations: dart.finalFieldType(core.List$(annotation.PdfAnnot))
  }));
  var _dests = dart.privateName(names, "_dests");
  names.PdfNames = class PdfNames extends object_dict.PdfObjectDict {
    addDest(name, page, opts) {
      if (name == null) dart.nullFailed(I[58], 31, 12, "name");
      if (page == null) dart.nullFailed(I[58], 32, 13, "page");
      let posX = opts && 'posX' in opts ? opts.posX : null;
      let posY = opts && 'posY' in opts ? opts.posY : null;
      let posZ = opts && 'posZ' in opts ? opts.posZ : null;
      if (!dart.equals(page.pdfDocument, this.pdfDocument)) dart.assertFailed(null, I[58], 37, 12, "page.pdfDocument == pdfDocument");
      this[_dests][$_set](name, T$.PdfDictOfPdfArrayOfPdfDataType().new(new (T$.IdentityMapOfString$PdfArrayOfPdfDataType()).from(["/D", new (T$.PdfArrayOfPdfDataType()).new((() => {
          let t10 = T$.JSArrayOfPdfDataType().of([page.ref(), C[196] || CT.C196]);
          if (posX == null)
            t10[$add](C[197] || CT.C197);
          else
            t10[$add](new data_types.PdfNum.new(posX));
          if (posY == null)
            t10[$add](C[197] || CT.C197);
          else
            t10[$add](new data_types.PdfNum.new(posY));
          if (posZ == null)
            t10[$add](C[197] || CT.C197);
          else
            t10[$add](new data_types.PdfNum.new(posZ));
          return t10;
        })())])));
    }
    prepare() {
      let t11;
      super.prepare();
      let dests = new (T$.PdfArrayOfPdfDataType()).new();
      let keys = (t11 = this[_dests][$keys][$toList](), (() => {
        t11[$sort]();
        return t11;
      })());
      for (let name of keys) {
        dests.add(data_types.PdfSecString.fromString(this, name));
        dests.add(dart.nullCheck(this[_dests][$_get](name)));
      }
      let dict = T$.PdfDictOfPdfDataType().new();
      if (dart.test(dests.values[$isNotEmpty])) {
        dict._set("/Names", dests);
        dict._set("/Limits", new (T$.PdfArrayOfPdfSecString()).new(T$.JSArrayOfPdfSecString().of([data_types.PdfSecString.fromString(this, keys[$first]), data_types.PdfSecString.fromString(this, keys[$last])])));
      }
      this.params._set("/Dests", dict);
    }
  };
  (names.PdfNames.new = function(pdfDocument) {
    if (pdfDocument == null) dart.nullFailed(I[58], 25, 24, "pdfDocument");
    this[_dests] = new (T$.IdentityMapOfString$PdfDataType()).new();
    names.PdfNames.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = names.PdfNames.prototype;
  dart.addTypeTests(names.PdfNames);
  dart.addTypeCaches(names.PdfNames);
  dart.setMethodSignature(names.PdfNames, () => ({
    __proto__: dart.getMethods(names.PdfNames.__proto__),
    addDest: dart.fnType(dart.void, [core.String, page.PdfPage], {posX: dart.nullable(core.double), posY: dart.nullable(core.double), posZ: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(names.PdfNames, I[59]);
  dart.setFieldSignature(names.PdfNames, () => ({
    __proto__: dart.getFields(names.PdfNames.__proto__),
    [_dests]: dart.finalFieldType(core.Map$(core.String, data_types.PdfDataType))
  }));
  var metadata$0 = dart.privateName(metadata$, "PdfMetadata.metadata");
  var data$0 = dart.privateName(data_types, "PdfDictStream.data");
  var object$ = dart.privateName(data_types, "PdfDictStream.object");
  var isBinary$0 = dart.privateName(data_types, "PdfDictStream.isBinary");
  var encrypt$ = dart.privateName(data_types, "PdfDictStream.encrypt");
  var compress$ = dart.privateName(data_types, "PdfDictStream.compress");
  data_types.PdfDictStream = class PdfDictStream extends data_types.PdfDict$(data_types.PdfDataType) {
    get data() {
      return this[data$0];
    }
    set data(value) {
      this[data$0] = value;
    }
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
    get isBinary() {
      return this[isBinary$0];
    }
    set isBinary(value) {
      super.isBinary = value;
    }
    get encrypt() {
      return this[encrypt$];
    }
    set encrypt(value) {
      super.encrypt = value;
    }
    get compress() {
      return this[compress$];
    }
    set compress(value) {
      super.compress = value;
    }
    static new(opts) {
      let t11, t11$;
      let object = opts && 'object' in opts ? opts.object : null;
      if (object == null) dart.nullFailed(I[8], 599, 24, "object");
      let values = opts && 'values' in opts ? opts.values : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
      if (isBinary == null) dart.nullFailed(I[8], 602, 10, "isBinary");
      let encrypt = opts && 'encrypt' in opts ? opts.encrypt : true;
      if (encrypt == null) dart.nullFailed(I[8], 603, 10, "encrypt");
      let compress = opts && 'compress' in opts ? opts.compress : true;
      if (compress == null) dart.nullFailed(I[8], 604, 10, "compress");
      return new data_types.PdfDictStream.values({object: object, values: (t11 = values, t11 == null ? new (T$.IdentityMapOfString$PdfDataType()).new() : t11), data: (t11$ = data, t11$ == null ? _native_typed_data.NativeUint8List.new(0) : t11$), encrypt: encrypt, compress: compress, isBinary: isBinary});
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 636, 25, "s");
      let _values = T$.PdfDictOfPdfDataType().new(this.values);
      let _data = null;
      if (dart.test(_values.containsKey("/Filter"))) {
        _data = this.data;
      } else if (dart.test(this.compress) && this.object.pdfDocument.deflate != null) {
        let newData = _native_typed_data.NativeUint8List.fromList(dart.nullCheck(this.object.pdfDocument.deflate)(this.data));
        if (dart.notNull(newData[$lengthInBytes]) < dart.notNull(this.data[$lengthInBytes])) {
          _values._set("/Filter", C[199] || CT.C199);
          _data = newData;
        }
      }
      if (_data == null) {
        if (dart.test(this.isBinary)) {
          let e = new ascii85.Ascii85Encoder.new();
          _data = e.convert(this.data);
          _values._set("/Filter", C[200] || CT.C200);
        } else {
          _data = this.data;
        }
      }
      if (dart.test(this.encrypt) && this.object.pdfDocument.encryption != null) {
        _data = dart.nullCheck(this.object.pdfDocument.encryption).encrypt(_data, this.object);
      }
      _values._set("/Length", new data_types.PdfNum.new(_data[$length]));
      _values.output(s);
      s.putString("stream\n");
      s.putBytes(_data);
      s.putString("\nendstream\n");
    }
  };
  (data_types.PdfDictStream.values = function(opts) {
    let object = opts && 'object' in opts ? opts.object : null;
    if (object == null) dart.nullFailed(I[8], 617, 19, "object");
    let values = opts && 'values' in opts ? opts.values : null;
    if (values == null) dart.nullFailed(I[8], 618, 39, "values");
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[8], 619, 19, "data");
    let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
    if (isBinary == null) dart.nullFailed(I[8], 620, 10, "isBinary");
    let encrypt = opts && 'encrypt' in opts ? opts.encrypt : true;
    if (encrypt == null) dart.nullFailed(I[8], 621, 10, "encrypt");
    let compress = opts && 'compress' in opts ? opts.compress : true;
    if (compress == null) dart.nullFailed(I[8], 622, 10, "compress");
    this[object$] = object;
    this[data$0] = data;
    this[isBinary$0] = isBinary;
    this[encrypt$] = encrypt;
    this[compress$] = compress;
    data_types.PdfDictStream.__proto__.values.call(this, values);
    ;
  }).prototype = data_types.PdfDictStream.prototype;
  dart.addTypeTests(data_types.PdfDictStream);
  dart.addTypeCaches(data_types.PdfDictStream);
  dart.setLibraryUri(data_types.PdfDictStream, I[2]);
  dart.setFieldSignature(data_types.PdfDictStream, () => ({
    __proto__: dart.getFields(data_types.PdfDictStream.__proto__),
    data: dart.fieldType(typed_data.Uint8List),
    object: dart.finalFieldType(object.PdfObject$(data_types.PdfDataType)),
    isBinary: dart.finalFieldType(core.bool),
    encrypt: dart.finalFieldType(core.bool),
    compress: dart.finalFieldType(core.bool)
  }));
  metadata$.PdfMetadata = class PdfMetadata extends object.PdfObject$(data_types.PdfDictStream) {
    get metadata() {
      return this[metadata$0];
    }
    set metadata(value) {
      super.metadata = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/SubType", C[198] || CT.C198);
      this.params.data = _native_typed_data.NativeUint8List.fromList(convert.utf8.encode(dart.toString(this.metadata)));
    }
  };
  (metadata$.PdfMetadata.new = function(pdfDocument, metadata) {
    if (pdfDocument == null) dart.nullFailed(I[60], 30, 17, "pdfDocument");
    if (metadata == null) dart.nullFailed(I[60], 31, 10, "metadata");
    this[metadata$0] = metadata;
    metadata$.PdfMetadata.__proto__.new.call(this, pdfDocument, {params: data_types.PdfDictStream.new({object: pdfDocument.catalog, compress: false, encrypt: false})});
    pdfDocument.catalog.metadata = this;
  }).prototype = metadata$.PdfMetadata.prototype;
  dart.addTypeTests(metadata$.PdfMetadata);
  dart.addTypeCaches(metadata$.PdfMetadata);
  dart.setLibraryUri(metadata$.PdfMetadata, I[61]);
  dart.setFieldSignature(metadata$.PdfMetadata, () => ({
    __proto__: dart.getFields(metadata$.PdfMetadata.__proto__),
    metadata: dart.finalFieldType(document.XmlDocument)
  }));
  var pdfPageList$ = dart.privateName(catalog, "PdfCatalog.pdfPageList");
  var outlines$ = dart.privateName(catalog, "PdfCatalog.outlines");
  var metadata = dart.privateName(catalog, "PdfCatalog.metadata");
  var pageMode$ = dart.privateName(catalog, "PdfCatalog.pageMode");
  var names$ = dart.privateName(catalog, "PdfCatalog.names");
  catalog.PdfCatalog = class PdfCatalog extends object_dict.PdfObjectDict {
    get pdfPageList() {
      return this[pdfPageList$];
    }
    set pdfPageList(value) {
      super.pdfPageList = value;
    }
    get outlines() {
      return this[outlines$];
    }
    set outlines(value) {
      this[outlines$] = value;
    }
    get metadata() {
      return this[metadata];
    }
    set metadata(value) {
      this[metadata] = value;
    }
    get pageMode() {
      return this[pageMode$];
    }
    set pageMode(value) {
      super.pageMode = value;
    }
    get names() {
      return this[names$];
    }
    set names(value) {
      super.names = value;
    }
    prepare() {
      let t11, t11$;
      super.prepare();
      this.params._set("/Version", new data_types.PdfName.new("/" + dart.str(this.pdfDocument.versionString)));
      this.params._set("/Pages", this.pdfPageList.ref());
      if (this.outlines != null && dart.test(dart.nullCheck(this.outlines).outlines[$isNotEmpty])) {
        this.params._set("/Outlines", dart.nullCheck(this.outlines).ref());
      }
      if (this.metadata != null) {
        this.params._set("/Metadata", dart.nullCheck(this.metadata).ref());
      }
      this.params._set("/Names", this.names.ref());
      this.params._set("/PageMode", new data_types.PdfName.new(catalog.PdfCatalog._pdfPageModes[$_get](this.pageMode.index)));
      if (this.pdfDocument.sign != null) {
        if (dart.test(dart.nullCheck(this.pdfDocument.sign).value.hasMDP)) {
          this.params._set("/Perms", T$.PdfDictOfPdfIndirect().new(new (T$.IdentityMapOfString$PdfIndirect()).from(["/DocMDP", dart.nullCheck(this.pdfDocument.sign).ref()])));
        }
        let dss = T$.PdfDictOfPdfDataType().new();
        if (dart.test(dart.nullCheck(this.pdfDocument.sign).crl[$isNotEmpty])) {
          dss._set("/CRLs", data_types.PdfArray.fromObjects(dart.nullCheck(this.pdfDocument.sign).crl));
        }
        if (dart.test(dart.nullCheck(this.pdfDocument.sign).cert[$isNotEmpty])) {
          dss._set("/Certs", data_types.PdfArray.fromObjects(dart.nullCheck(this.pdfDocument.sign).cert));
        }
        if (dart.test(dart.nullCheck(this.pdfDocument.sign).ocsp[$isNotEmpty])) {
          dss._set("/OCSPs", data_types.PdfArray.fromObjects(dart.nullCheck(this.pdfDocument.sign).ocsp));
        }
        if (dart.test(dss.values[$isNotEmpty])) {
          this.params._set("/DSS", dss);
        }
      }
      let widgets = T$.JSArrayOfPdfAnnot().of([]);
      for (let page of this.pdfDocument.pdfPageList.pages) {
        for (let annot of page.annotations) {
          if (annot.annot.subtype === "/Widget") {
            widgets[$add](annot);
          }
        }
      }
      if (dart.test(widgets[$isNotEmpty])) {
        this.params._set("/AcroForm", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/SigFlags", new data_types.PdfNum.new((t11$ = (t11 = this.pdfDocument.sign, t11 == null ? null : t11.flagsValue), t11$ == null ? 0 : t11$)), "/Fields", data_types.PdfArray.fromObjects(widgets)])));
      }
    }
  };
  (catalog.PdfCatalog.new = function(pdfDocument, pdfPageList, pageMode, names) {
    if (pdfDocument == null) dart.nullFailed(I[62], 30, 17, "pdfDocument");
    if (pdfPageList == null) dart.nullFailed(I[62], 31, 10, "pdfPageList");
    if (pageMode == null) dart.nullFailed(I[62], 32, 10, "pageMode");
    if (names == null) dart.nullFailed(I[62], 33, 10, "names");
    this[outlines$] = null;
    this[metadata] = null;
    this[pdfPageList$] = pdfPageList;
    this[pageMode$] = pageMode;
    this[names$] = names;
    catalog.PdfCatalog.__proto__.new.call(this, pdfDocument, {type: "/Catalog"});
    ;
  }).prototype = catalog.PdfCatalog.prototype;
  dart.addTypeTests(catalog.PdfCatalog);
  dart.addTypeCaches(catalog.PdfCatalog);
  dart.setLibraryUri(catalog.PdfCatalog, I[63]);
  dart.setFieldSignature(catalog.PdfCatalog, () => ({
    __proto__: dart.getFields(catalog.PdfCatalog.__proto__),
    pdfPageList: dart.finalFieldType(page_list.PdfPageList),
    outlines: dart.fieldType(dart.nullable(outline.PdfOutline)),
    metadata: dart.fieldType(dart.nullable(metadata$.PdfMetadata)),
    pageMode: dart.finalFieldType(document$.PdfPageMode),
    names: dart.finalFieldType(names.PdfNames)
  }));
  dart.defineLazy(catalog.PdfCatalog, {
    /*catalog.PdfCatalog._pdfPageModes*/get _pdfPageModes() {
      return C[201] || CT.C201;
    }
  }, false);
  document$.PdfVersion = class PdfVersion extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (document$.PdfVersion.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[64], 39, 6, "index");
    if (_name == null) dart.nullFailed(I[64], 39, 6, "_name");
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = document$.PdfVersion.prototype;
  dart.addTypeTests(document$.PdfVersion);
  dart.addTypeCaches(document$.PdfVersion);
  dart.setLibraryUri(document$.PdfVersion, I[65]);
  dart.setFieldSignature(document$.PdfVersion, () => ({
    __proto__: dart.getFields(document$.PdfVersion.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(document$.PdfVersion, ['toString']);
  document$.PdfVersion.pdf_1_4 = C[11] || CT.C11;
  document$.PdfVersion.pdf_1_5 = C[12] || CT.C12;
  document$.PdfVersion.values = C[202] || CT.C202;
  document$.PdfPageMode = class PdfPageMode extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (document$.PdfPageMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[64], 48, 6, "index");
    if (_name == null) dart.nullFailed(I[64], 48, 6, "_name");
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = document$.PdfPageMode.prototype;
  dart.addTypeTests(document$.PdfPageMode);
  dart.addTypeCaches(document$.PdfPageMode);
  dart.setLibraryUri(document$.PdfPageMode, I[65]);
  dart.setFieldSignature(document$.PdfPageMode, () => ({
    __proto__: dart.getFields(document$.PdfPageMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(document$.PdfPageMode, ['toString']);
  document$.PdfPageMode.none = C[203] || CT.C203;
  document$.PdfPageMode.outlines = C[204] || CT.C204;
  document$.PdfPageMode.thumbs = C[205] || CT.C205;
  document$.PdfPageMode.fullscreen = C[206] || CT.C206;
  document$.PdfPageMode.values = C[207] || CT.C207;
  var prev$ = dart.privateName(document$, "PdfDocument.prev");
  var objects = dart.privateName(document$, "PdfDocument.objects");
  var version$0 = dart.privateName(document$, "PdfDocument.version");
  var info$ = dart.privateName(document$, "PdfDocument.info");
  var defaultOutlineBorder = dart.privateName(document$, "PdfDocument.defaultOutlineBorder");
  var deflate$ = dart.privateName(document$, "PdfDocument.deflate");
  var encryption$ = dart.privateName(document$, "PdfDocument.encryption");
  var sign = dart.privateName(document$, "PdfDocument.sign");
  var versionString = dart.privateName(document$, "PdfDocument.versionString");
  var fonts$ = dart.privateName(document$, "PdfDocument.fonts");
  var __PdfDocument_catalog = dart.privateName(document$, "_#PdfDocument#catalog");
  var __PdfDocument_catalog_isSet = dart.privateName(document$, "_#PdfDocument#catalog#isSet");
  var __PdfDocument_pdfPageList = dart.privateName(document$, "_#PdfDocument#pdfPageList");
  var __PdfDocument_pdfPageList_isSet = dart.privateName(document$, "_#PdfDocument#pdfPageList#isSet");
  var __PdfDocument_pdfNames = dart.privateName(document$, "_#PdfDocument#pdfNames");
  var __PdfDocument_pdfNames_isSet = dart.privateName(document$, "_#PdfDocument#pdfNames#isSet");
  var _outline = dart.privateName(document$, "_outline");
  var _graphicStates = dart.privateName(document$, "_graphicStates");
  var _documentID = dart.privateName(document$, "_documentID");
  var _objser = dart.privateName(document$, "_objser");
  var _write = dart.privateName(document$, "_write");
  document$.PdfDocument = class PdfDocument extends core.Object {
    get prev() {
      return this[prev$];
    }
    set prev(value) {
      super.prev = value;
    }
    get objects() {
      return this[objects];
    }
    set objects(value) {
      super.objects = value;
    }
    get version() {
      return this[version$0];
    }
    set version(value) {
      super.version = value;
    }
    get info() {
      return this[info$];
    }
    set info(value) {
      this[info$] = value;
    }
    get defaultOutlineBorder() {
      return this[defaultOutlineBorder];
    }
    set defaultOutlineBorder(value) {
      this[defaultOutlineBorder] = value;
    }
    get deflate() {
      return this[deflate$];
    }
    set deflate(value) {
      super.deflate = value;
    }
    get encryption() {
      return this[encryption$];
    }
    set encryption(value) {
      this[encryption$] = value;
    }
    get sign() {
      return this[sign];
    }
    set sign(value) {
      this[sign] = value;
    }
    get versionString() {
      return this[versionString];
    }
    set versionString(value) {
      super.versionString = value;
    }
    get fonts() {
      return this[fonts$];
    }
    set fonts(value) {
      super.fonts = value;
    }
    get objser() {
      return this[_objser];
    }
    get catalog() {
      let t11;
      return dart.test(this[__PdfDocument_catalog_isSet]) ? (t11 = this[__PdfDocument_catalog], t11) : dart.throw(new _internal.LateError.fieldNI("catalog"));
    }
    set catalog(t11) {
      if (t11 == null) dart.nullFailed(I[64], 119, 19, "null");
      this[__PdfDocument_catalog_isSet] = true;
      this[__PdfDocument_catalog] = t11;
    }
    get pdfPageList() {
      let t12;
      return dart.test(this[__PdfDocument_pdfPageList_isSet]) ? (t12 = this[__PdfDocument_pdfPageList], t12) : dart.throw(new _internal.LateError.fieldNI("pdfPageList"));
    }
    set pdfPageList(t12) {
      if (t12 == null) dart.nullFailed(I[64], 130, 20, "null");
      this[__PdfDocument_pdfPageList_isSet] = true;
      this[__PdfDocument_pdfPageList] = t12;
    }
    get pdfNames() {
      let t13;
      return dart.test(this[__PdfDocument_pdfNames_isSet]) ? (t13 = this[__PdfDocument_pdfNames], t13) : dart.throw(new _internal.LateError.fieldNI("pdfNames"));
    }
    set pdfNames(t13) {
      if (t13 == null) dart.nullFailed(I[64], 133, 17, "null");
      this[__PdfDocument_pdfNames_isSet] = true;
      this[__PdfDocument_pdfNames] = t13;
    }
    get documentID() {
      if (this[_documentID] == null) {
        let rnd = math.Random.new();
        this[_documentID] = _native_typed_data.NativeUint8List.fromList(sha256.sha256.convert(new core.DateTime.now().toIso8601String()[$codeUnits][$plus](T$.ListOfint().generate(32, dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[64], 170, 39, "_");
          return rnd.nextInt(256);
        }, T$.intToint())))).bytes);
      }
      return dart.nullCheck(this[_documentID]);
    }
    genSerial() {
      let t14;
      t14 = this[_objser];
      this[_objser] = dart.notNull(t14) + 1;
      return t14;
    }
    page(page) {
      if (page == null) dart.nullFailed(I[64], 182, 21, "page");
      return this.pdfPageList.pages[$_get](page);
    }
    get outline() {
      if (this[_outline] == null) {
        this[_outline] = new outline.PdfOutline.new(this);
        this.catalog.outlines = this[_outline];
      }
      return dart.nullCheck(this[_outline]);
    }
    get graphicStates() {
      this[_graphicStates] == null ? this[_graphicStates] = new graphic_state.PdfGraphicStates.new(this) : null;
      return dart.nullCheck(this[_graphicStates]);
    }
    get hasGraphicStates() {
      return this[_graphicStates] != null;
    }
    [_write](os) {
      if (os == null) dart.nullFailed(I[64], 205, 33, "os");
      return async.async(dart.void, (function* _write() {
        let pos = new output.PdfOutput.new(os, this.version);
        this.objects[$forEach](dart.bind(pos, 'write'));
        yield pos.close();
      }).bind(this));
    }
    save() {
      return async.async(typed_data.Uint8List, (function* save() {
        let os = new stream.PdfStream.new();
        if (this.prev != null) {
          os.putBytes(dart.nullCheck(this.prev).bytes);
        }
        yield this[_write](os);
        return os.output();
      }).bind(this));
    }
  };
  (document$.PdfDocument.new = function(opts) {
    let t11;
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[203] || CT.C203;
    if (pageMode == null) dart.nullFailed(I[64], 78, 17, "pageMode");
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    if (compress == null) dart.nullFailed(I[64], 80, 10, "compress");
    let version = opts && 'version' in opts ? opts.version : C[11] || CT.C11;
    if (version == null) dart.nullFailed(I[64], 81, 10, "version");
    this[objects] = T$.LinkedHashSetOfPdfObjectOfPdfDataType().new();
    this[__PdfDocument_catalog] = null;
    this[__PdfDocument_catalog_isSet] = false;
    this[info$] = null;
    this[__PdfDocument_pdfPageList] = null;
    this[__PdfDocument_pdfPageList_isSet] = false;
    this[__PdfDocument_pdfNames] = null;
    this[__PdfDocument_pdfNames_isSet] = false;
    this[_outline] = null;
    this[defaultOutlineBorder] = null;
    this[encryption$] = null;
    this[sign] = null;
    this[_graphicStates] = null;
    this[versionString] = "1.7";
    this[fonts$] = T$.LinkedHashSetOfPdfFont().new();
    this[_documentID] = null;
    this[version$0] = version;
    this[deflate$] = dart.test(compress) ? (t11 = deflate, t11 == null ? js.defaultDeflate : t11) : null;
    this[prev$] = null;
    this[_objser] = 1;
    this.pdfPageList = new page_list.PdfPageList.new(this);
    this.pdfNames = new names.PdfNames.new(this);
    this.catalog = new catalog.PdfCatalog.new(this, this.pdfPageList, pageMode, this.pdfNames);
  }).prototype = document$.PdfDocument.prototype;
  (document$.PdfDocument.load = function(prev, opts) {
    let t11;
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[203] || CT.C203;
    if (pageMode == null) dart.nullFailed(I[64], 93, 17, "pageMode");
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    if (compress == null) dart.nullFailed(I[64], 95, 10, "compress");
    this[objects] = T$.LinkedHashSetOfPdfObjectOfPdfDataType().new();
    this[__PdfDocument_catalog] = null;
    this[__PdfDocument_catalog_isSet] = false;
    this[info$] = null;
    this[__PdfDocument_pdfPageList] = null;
    this[__PdfDocument_pdfPageList_isSet] = false;
    this[__PdfDocument_pdfNames] = null;
    this[__PdfDocument_pdfNames_isSet] = false;
    this[_outline] = null;
    this[defaultOutlineBorder] = null;
    this[encryption$] = null;
    this[sign] = null;
    this[_graphicStates] = null;
    this[versionString] = "1.7";
    this[fonts$] = T$.LinkedHashSetOfPdfFont().new();
    this[_documentID] = null;
    this[prev$] = prev;
    this[deflate$] = dart.test(compress) ? (t11 = deflate, t11 == null ? js.defaultDeflate : t11) : null;
    this[_objser] = dart.nullCheck(prev).size;
    this[version$0] = prev.version;
    this.pdfPageList = new page_list.PdfPageList.new(this);
    this.pdfNames = new names.PdfNames.new(this);
    this.catalog = new catalog.PdfCatalog.new(this, this.pdfPageList, pageMode, this.pdfNames);
    dart.nullCheck(this.prev).mergeDocument(this);
  }).prototype = document$.PdfDocument.prototype;
  dart.addTypeTests(document$.PdfDocument);
  dart.addTypeCaches(document$.PdfDocument);
  dart.setMethodSignature(document$.PdfDocument, () => ({
    __proto__: dart.getMethods(document$.PdfDocument.__proto__),
    genSerial: dart.fnType(core.int, []),
    page: dart.fnType(dart.nullable(page.PdfPage), [core.int]),
    [_write]: dart.fnType(async.Future$(dart.void), [stream.PdfStream]),
    save: dart.fnType(async.Future$(typed_data.Uint8List), [])
  }));
  dart.setGetterSignature(document$.PdfDocument, () => ({
    __proto__: dart.getGetters(document$.PdfDocument.__proto__),
    objser: core.int,
    catalog: catalog.PdfCatalog,
    pdfPageList: page_list.PdfPageList,
    pdfNames: names.PdfNames,
    documentID: typed_data.Uint8List,
    outline: outline.PdfOutline,
    graphicStates: graphic_state.PdfGraphicStates,
    hasGraphicStates: core.bool
  }));
  dart.setSetterSignature(document$.PdfDocument, () => ({
    __proto__: dart.getSetters(document$.PdfDocument.__proto__),
    catalog: catalog.PdfCatalog,
    pdfPageList: page_list.PdfPageList,
    pdfNames: names.PdfNames
  }));
  dart.setLibraryUri(document$.PdfDocument, I[65]);
  dart.setFieldSignature(document$.PdfDocument, () => ({
    __proto__: dart.getFields(document$.PdfDocument.__proto__),
    prev: dart.finalFieldType(dart.nullable(document_parser.PdfDocumentParserBase)),
    [_objser]: dart.fieldType(core.int),
    objects: dart.finalFieldType(core.Set$(object.PdfObject$(data_types.PdfDataType))),
    [__PdfDocument_catalog]: dart.fieldType(dart.nullable(catalog.PdfCatalog)),
    [__PdfDocument_catalog_isSet]: dart.fieldType(core.bool),
    version: dart.finalFieldType(document$.PdfVersion),
    info: dart.fieldType(dart.nullable(info.PdfInfo)),
    [__PdfDocument_pdfPageList]: dart.fieldType(dart.nullable(page_list.PdfPageList)),
    [__PdfDocument_pdfPageList_isSet]: dart.fieldType(core.bool),
    [__PdfDocument_pdfNames]: dart.fieldType(dart.nullable(names.PdfNames)),
    [__PdfDocument_pdfNames_isSet]: dart.fieldType(core.bool),
    [_outline]: dart.fieldType(dart.nullable(outline.PdfOutline)),
    defaultOutlineBorder: dart.fieldType(dart.nullable(object.PdfObject$(data_types.PdfDataType))),
    deflate: dart.finalFieldType(dart.nullable(dart.fnType(core.List$(core.int), [core.List$(core.int)]))),
    encryption: dart.fieldType(dart.nullable(encryption.PdfEncryption)),
    sign: dart.fieldType(dart.nullable(signature.PdfSignature)),
    [_graphicStates]: dart.fieldType(dart.nullable(graphic_state.PdfGraphicStates)),
    versionString: dart.finalFieldType(core.String),
    fonts: dart.finalFieldType(core.Set$(font.PdfFont)),
    [_documentID]: dart.fieldType(dart.nullable(typed_data.Uint8List))
  }));
  const value$0 = PdfBool_value;
  data_types.PdfBool = class PdfBool extends data_types.PdfDataType {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 56, 25, "s");
      s.putString(dart.test(this.value) ? "true" : "false");
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfBool.is(other)) {
        return this.value == other.value;
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
  };
  (data_types.PdfBool.new = function(value) {
    if (value == null) dart.nullFailed(I[8], 51, 22, "value");
    this[value$0] = value;
    data_types.PdfBool.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfBool.prototype;
  dart.addTypeTests(data_types.PdfBool);
  dart.addTypeCaches(data_types.PdfBool);
  dart.setMethodSignature(data_types.PdfBool, () => ({
    __proto__: dart.getMethods(data_types.PdfBool.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream])
  }));
  dart.setLibraryUri(data_types.PdfBool, I[2]);
  dart.setFieldSignature(data_types.PdfBool, () => ({
    __proto__: dart.getFields(data_types.PdfBool.__proto__),
    value: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(data_types.PdfBool, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfBool, ['hashCode']);
  const value$1 = PdfNum_value;
  data_types.PdfNum = class PdfNum extends data_types.PdfDataType {
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 84, 25, "s");
      if (core.int.is(this.value)) {
        s.putString(this.value[$toInt]()[$toString]());
      } else {
        let r = this.value[$toStringAsFixed](5);
        if (r[$contains](".")) {
          let n = r.length - 1;
          while (r[$_get](n) === "0") {
            n = n - 1;
          }
          if (r[$_get](n) === ".") {
            n = n - 1;
          }
          r = r[$substring](0, n + 1);
        }
        s.putString(r);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfNum.is(other)) {
        return this.value == other.value;
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
  };
  (data_types.PdfNum.new = function(value) {
    if (value == null) dart.nullFailed(I[8], 74, 21, "value");
    this[value$1] = value;
    if (!(value !== 1 / 0)) dart.assertFailed(null, I[8], 75, 16, "value != double.infinity");
    if (!(value !== 0 / 0)) dart.assertFailed(null, I[8], 76, 16, "value != double.nan");
    if (!(value !== -1 / 0)) dart.assertFailed(null, I[8], 77, 16, "value != double.negativeInfinity");
    data_types.PdfNum.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNum.prototype;
  dart.addTypeTests(data_types.PdfNum);
  dart.addTypeCaches(data_types.PdfNum);
  dart.setMethodSignature(data_types.PdfNum, () => ({
    __proto__: dart.getMethods(data_types.PdfNum.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream])
  }));
  dart.setLibraryUri(data_types.PdfNum, I[2]);
  dart.setFieldSignature(data_types.PdfNum, () => ({
    __proto__: dart.getFields(data_types.PdfNum.__proto__),
    value: dart.finalFieldType(core.num)
  }));
  dart.defineExtensionMethods(data_types.PdfNum, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNum, ['hashCode']);
  dart.defineLazy(data_types.PdfNum, {
    /*data_types.PdfNum.precision*/get precision() {
      return 5;
    }
  }, false);
  var values$1 = dart.privateName(data_types, "PdfNumList.values");
  data_types.PdfNumList = class PdfNumList extends data_types.PdfDataType {
    get values() {
      return this[values$1];
    }
    set values(value) {
      super.values = value;
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 122, 25, "s");
      for (let n = 0; n < dart.notNull(this.values[$length]); n = n + 1) {
        if (n > 0) {
          s.putByte(32);
        }
        new data_types.PdfNum.new(this.values[$_get](n)).output(s);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfNumList.is(other)) {
        return dart.equals(this.values, other.values);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.values);
    }
  };
  (data_types.PdfNumList.new = function(values) {
    if (values == null) dart.nullFailed(I[8], 117, 25, "values");
    this[values$1] = values;
    data_types.PdfNumList.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNumList.prototype;
  dart.addTypeTests(data_types.PdfNumList);
  dart.addTypeCaches(data_types.PdfNumList);
  dart.setMethodSignature(data_types.PdfNumList, () => ({
    __proto__: dart.getMethods(data_types.PdfNumList.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream])
  }));
  dart.setLibraryUri(data_types.PdfNumList, I[2]);
  dart.setFieldSignature(data_types.PdfNumList, () => ({
    __proto__: dart.getFields(data_types.PdfNumList.__proto__),
    values: dart.finalFieldType(core.List$(core.num))
  }));
  dart.defineExtensionMethods(data_types.PdfNumList, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNumList, ['hashCode']);
  var _name$9 = dart.privateName(data_types, "_name");
  data_types.PdfStringFormat = class PdfStringFormat extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (data_types.PdfStringFormat.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[8], 144, 6, "index");
    if (_name == null) dart.nullFailed(I[8], 144, 6, "_name");
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = data_types.PdfStringFormat.prototype;
  dart.addTypeTests(data_types.PdfStringFormat);
  dart.addTypeCaches(data_types.PdfStringFormat);
  dart.setLibraryUri(data_types.PdfStringFormat, I[2]);
  dart.setFieldSignature(data_types.PdfStringFormat, () => ({
    __proto__: dart.getFields(data_types.PdfStringFormat.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$9]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(data_types.PdfStringFormat, ['toString']);
  data_types.PdfStringFormat.binary = C[208] || CT.C208;
  data_types.PdfStringFormat.litteral = C[209] || CT.C209;
  data_types.PdfStringFormat.values = C[210] || CT.C210;
  var value$2 = dart.privateName(data_types, "PdfString.value");
  var format$ = dart.privateName(data_types, "PdfString.format");
  var _putTextBytes = dart.privateName(data_types, "_putTextBytes");
  var _codeUnitForDigit = dart.privateName(data_types, "_codeUnitForDigit");
  var _output = dart.privateName(data_types, "_output");
  data_types.PdfString = class PdfString extends data_types.PdfDataType {
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    static fromString(value) {
      if (value == null) dart.nullFailed(I[8], 149, 39, "value");
      return new data_types.PdfString.new(data_types.PdfString._string(value), data_types.PdfStringFormat.litteral);
    }
    static fromStream(value, format = C[209] || CT.C209) {
      if (value == null) dart.nullFailed(I[8], 153, 42, "value");
      if (format == null) dart.nullFailed(I[8], 154, 24, "format");
      return new data_types.PdfString.new(value.output(), format);
    }
    static fromDate(date) {
      if (date == null) dart.nullFailed(I[8], 158, 39, "date");
      return new data_types.PdfString.new(data_types.PdfString._date(date));
    }
    static _string(value) {
      if (value == null) dart.nullFailed(I[8], 166, 35, "value");
      try {
        return convert.latin1.encode(value);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([254, 255])[$plus](data_types.PdfString._encodeUtf16be(value)));
        } else
          throw e$;
      }
    }
    static _date(date) {
      if (date == null) dart.nullFailed(I[8], 174, 35, "date");
      let utcDate = date.toUtc();
      let year = dart.toString(utcDate.year)[$padLeft](4, "0");
      let month = dart.toString(utcDate.month)[$padLeft](2, "0");
      let day = dart.toString(utcDate.day)[$padLeft](2, "0");
      let hour = dart.toString(utcDate.hour)[$padLeft](2, "0");
      let minute = dart.toString(utcDate.minute)[$padLeft](2, "0");
      let second = dart.toString(utcDate.second)[$padLeft](2, "0");
      return data_types.PdfString._string("D:" + year + month + day + hour + minute + second + "Z");
    }
    static _encodeUtf16be(str) {
      if (str == null) dart.nullFailed(I[8], 186, 42, "str");
      let encoding = T$.JSArrayOfint().of([]);
      function add(unit) {
        if (unit == null) dart.nullFailed(I[8], 202, 18, "unit");
        encoding[$add]((dart.notNull(unit) & 65280) >>> 8);
        encoding[$add]((dart.notNull(unit) & 255) >>> 0);
      }
      dart.fn(add, T$.intTovoid());
      for (let unit of str[$codeUnits]) {
        if (dart.notNull(unit) >= 0 && dart.notNull(unit) < 55296 || dart.notNull(unit) > 57343 && dart.notNull(unit) <= 65535) {
          add(unit);
        } else if (dart.notNull(unit) > 65535 && dart.notNull(unit) <= 1114111) {
          let base = dart.notNull(unit) - 65536;
          add(55296 + ((base & 1047552) >>> 10));
          add(56320 + ((base & 1023) >>> 0));
        } else {
          add(65533);
        }
      }
      return encoding;
    }
    [_putTextBytes](s, b) {
      if (s == null) dart.nullFailed(I[8], 227, 32, "s");
      if (b == null) dart.nullFailed(I[8], 227, 45, "b");
      for (let c of b) {
        switch (c) {
          case 10:
          {
            s.putByte(92);
            s.putByte(110);
            break;
          }
          case 13:
          {
            s.putByte(92);
            s.putByte(114);
            break;
          }
          case 9:
          {
            s.putByte(92);
            s.putByte(116);
            break;
          }
          case 8:
          {
            s.putByte(92);
            s.putByte(98);
            break;
          }
          case 12:
          {
            s.putByte(92);
            s.putByte(102);
            break;
          }
          case 40:
          {
            s.putByte(92);
            s.putByte(40);
            break;
          }
          case 41:
          {
            s.putByte(92);
            s.putByte(41);
            break;
          }
          case 92:
          {
            s.putByte(92);
            s.putByte(92);
            break;
          }
          default:
          {
            s.putByte(c);
          }
        }
      }
    }
    [_codeUnitForDigit](digit) {
      if (digit == null) dart.nullFailed(I[8], 270, 29, "digit");
      return dart.notNull(digit) < 10 ? dart.notNull(digit) + 48 : dart.notNull(digit) + 97 - 10;
    }
    [_output](s, value) {
      if (s == null) dart.nullFailed(I[8], 273, 26, "s");
      if (value == null) dart.nullFailed(I[8], 273, 39, "value");
      switch (this.format) {
        case C[208] || CT.C208:
        {
          s.putByte(60);
          for (let byte of value) {
            s.putByte(this[_codeUnitForDigit]((dart.notNull(byte) & 240) >> 4));
            s.putByte(this[_codeUnitForDigit](dart.notNull(byte) & 15));
          }
          s.putByte(62);
          break;
        }
        case C[209] || CT.C209:
        {
          s.putByte(40);
          this[_putTextBytes](s, value);
          s.putByte(41);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 292, 25, "s");
      this[_output](s, this.value);
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfString.is(other)) {
        return dart.equals(this.value, other.value);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
  };
  (data_types.PdfString.new = function(value, format = C[209] || CT.C209) {
    if (value == null) dart.nullFailed(I[8], 147, 24, "value");
    if (format == null) dart.nullFailed(I[8], 147, 37, "format");
    this[value$2] = value;
    this[format$] = format;
    data_types.PdfString.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfString.prototype;
  dart.addTypeTests(data_types.PdfString);
  dart.addTypeCaches(data_types.PdfString);
  dart.setMethodSignature(data_types.PdfString, () => ({
    __proto__: dart.getMethods(data_types.PdfString.__proto__),
    [_putTextBytes]: dart.fnType(dart.void, [stream.PdfStream, core.List$(core.int)]),
    [_codeUnitForDigit]: dart.fnType(core.int, [core.int]),
    [_output]: dart.fnType(dart.void, [stream.PdfStream, typed_data.Uint8List]),
    output: dart.fnType(dart.void, [stream.PdfStream])
  }));
  dart.setLibraryUri(data_types.PdfString, I[2]);
  dart.setFieldSignature(data_types.PdfString, () => ({
    __proto__: dart.getFields(data_types.PdfString.__proto__),
    value: dart.finalFieldType(typed_data.Uint8List),
    format: dart.finalFieldType(data_types.PdfStringFormat)
  }));
  dart.defineExtensionMethods(data_types.PdfString, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfString, ['hashCode']);
  var object$0 = dart.privateName(data_types, "PdfSecString.object");
  data_types.PdfSecString = class PdfSecString extends data_types.PdfString {
    get object() {
      return this[object$0];
    }
    set object(value) {
      super.object = value;
    }
    static fromString(object, value, format = C[209] || CT.C209) {
      if (object == null) dart.nullFailed(I[8], 315, 15, "object");
      if (value == null) dart.nullFailed(I[8], 316, 12, "value");
      if (format == null) dart.nullFailed(I[8], 317, 21, "format");
      return new data_types.PdfSecString.new(object, data_types.PdfString._string(value), format);
    }
    static fromStream(object, value, format = C[209] || CT.C209) {
      if (object == null) dart.nullFailed(I[8], 327, 15, "object");
      if (value == null) dart.nullFailed(I[8], 328, 15, "value");
      if (format == null) dart.nullFailed(I[8], 329, 21, "format");
      return new data_types.PdfSecString.new(object, value.output(), format);
    }
    static fromDate(object, date) {
      if (object == null) dart.nullFailed(I[8], 338, 43, "object");
      if (date == null) dart.nullFailed(I[8], 338, 60, "date");
      return new data_types.PdfSecString.new(object, data_types.PdfString._date(date), data_types.PdfStringFormat.litteral);
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 349, 25, "s");
      if (this.object.pdfDocument.encryption == null) {
        return super.output(s);
      }
      let enc = dart.nullCheck(this.object.pdfDocument.encryption).encrypt(this.value, this.object);
      this[_output](s, enc);
    }
  };
  (data_types.PdfSecString.new = function(object, value, format = C[208] || CT.C208) {
    if (object == null) dart.nullFailed(I[8], 310, 27, "object");
    if (value == null) dart.nullFailed(I[8], 310, 45, "value");
    if (format == null) dart.nullFailed(I[8], 311, 24, "format");
    this[object$0] = object;
    data_types.PdfSecString.__proto__.new.call(this, value, format);
    ;
  }).prototype = data_types.PdfSecString.prototype;
  dart.addTypeTests(data_types.PdfSecString);
  dart.addTypeCaches(data_types.PdfSecString);
  dart.setLibraryUri(data_types.PdfSecString, I[2]);
  dart.setFieldSignature(data_types.PdfSecString, () => ({
    __proto__: dart.getFields(data_types.PdfSecString.__proto__),
    object: dart.finalFieldType(object.PdfObject$(data_types.PdfDataType))
  }));
  const value$3 = PdfName_value;
  data_types.PdfName = class PdfName extends data_types.PdfDataType {
    get value() {
      return this[value$3];
    }
    set value(value) {
      super.value = value;
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 365, 25, "s");
      if (!(this.value[$_get](0) === "/")) dart.assertFailed(null, I[8], 366, 12, "value[0] == '/'");
      let bytes = T$.JSArrayOfint().of([]);
      for (let c of this.value[$codeUnits]) {
        if (!(dart.notNull(c) < 255 && dart.notNull(c) > 0)) dart.assertFailed(null, I[8], 369, 14, "c < 0xff && c > 0x00");
        if (dart.notNull(c) < 33 || dart.notNull(c) > 126 || c === 35 || c === 47 && dart.test(bytes[$isNotEmpty]) || c === 91 || c === 93 || c === 40 || c === 60 || c === 62) {
          bytes[$add](35);
          let x = c[$toRadixString](16)[$padLeft](2, "0");
          bytes[$addAll](x[$codeUnits]);
        } else {
          bytes[$add](c);
        }
      }
      s.putBytes(bytes);
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfName.is(other)) {
        return this.value == other.value;
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
  };
  (data_types.PdfName.new = function(value) {
    if (value == null) dart.nullFailed(I[8], 360, 22, "value");
    this[value$3] = value;
    data_types.PdfName.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfName.prototype;
  dart.addTypeTests(data_types.PdfName);
  dart.addTypeCaches(data_types.PdfName);
  dart.setMethodSignature(data_types.PdfName, () => ({
    __proto__: dart.getMethods(data_types.PdfName.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream])
  }));
  dart.setLibraryUri(data_types.PdfName, I[2]);
  dart.setFieldSignature(data_types.PdfName, () => ({
    __proto__: dart.getFields(data_types.PdfName.__proto__),
    value: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(data_types.PdfName, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfName, ['hashCode']);
  data_types.PdfNull = class PdfNull extends data_types.PdfDataType {
    output(s) {
      if (s == null) dart.nullFailed(I[8], 407, 25, "s");
      s.putString("null");
    }
    _equals(other) {
      if (other == null) return false;
      return data_types.PdfNull.is(other);
    }
    get hashCode() {
      return dart.hashCode(null);
    }
  };
  (data_types.PdfNull.new = function() {
    data_types.PdfNull.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNull.prototype;
  dart.addTypeTests(data_types.PdfNull);
  dart.addTypeCaches(data_types.PdfNull);
  dart.setMethodSignature(data_types.PdfNull, () => ({
    __proto__: dart.getMethods(data_types.PdfNull.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream])
  }));
  dart.setLibraryUri(data_types.PdfNull, I[2]);
  dart.defineExtensionMethods(data_types.PdfNull, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNull, ['hashCode']);
  var ser$ = dart.privateName(data_types, "PdfIndirect.ser");
  var gen$ = dart.privateName(data_types, "PdfIndirect.gen");
  data_types.PdfIndirect = class PdfIndirect extends data_types.PdfDataType {
    get ser() {
      return this[ser$];
    }
    set ser(value) {
      super.ser = value;
    }
    get gen() {
      return this[gen$];
    }
    set gen(value) {
      super.gen = value;
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 428, 25, "s");
      s.putString(dart.str(this.ser) + " " + dart.str(this.gen) + " R");
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfIndirect.is(other)) {
        return this.ser == other.ser && this.gen == other.gen;
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.ser) + dart.hashCode(this.gen);
    }
  };
  (data_types.PdfIndirect.new = function(ser, gen) {
    if (ser == null) dart.nullFailed(I[8], 421, 26, "ser");
    if (gen == null) dart.nullFailed(I[8], 421, 36, "gen");
    this[ser$] = ser;
    this[gen$] = gen;
    data_types.PdfIndirect.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfIndirect.prototype;
  dart.addTypeTests(data_types.PdfIndirect);
  dart.addTypeCaches(data_types.PdfIndirect);
  dart.setMethodSignature(data_types.PdfIndirect, () => ({
    __proto__: dart.getMethods(data_types.PdfIndirect.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream])
  }));
  dart.setLibraryUri(data_types.PdfIndirect, I[2]);
  dart.setFieldSignature(data_types.PdfIndirect, () => ({
    __proto__: dart.getFields(data_types.PdfIndirect.__proto__),
    ser: dart.finalFieldType(core.int),
    gen: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(data_types.PdfIndirect, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfIndirect, ['hashCode']);
  var color$1 = dart.privateName(data_types, "PdfColorType.color");
  data_types.PdfColorType = class PdfColorType extends data_types.PdfDataType {
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    output(s) {
      if (s == null) dart.nullFailed(I[8], 684, 25, "s");
      if (color$.PdfColorCmyk.is(this.color)) {
        let k = color$.PdfColorCmyk.as(this.color);
        data_types.PdfArray.fromNum(T$.JSArrayOfdouble().of([k.cyan, k.magenta, k.yellow, k.black])).output(s);
      } else {
        data_types.PdfArray.fromNum(T$.JSArrayOfdouble().of([this.color.red, this.color.green, this.color.blue])).output(s);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfColorType.is(other)) {
        return dart.equals(this.color, other.color);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.color);
    }
  };
  (data_types.PdfColorType.new = function(color) {
    if (color == null) dart.nullFailed(I[8], 679, 27, "color");
    this[color$1] = color;
    data_types.PdfColorType.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfColorType.prototype;
  dart.addTypeTests(data_types.PdfColorType);
  dart.addTypeCaches(data_types.PdfColorType);
  dart.setMethodSignature(data_types.PdfColorType, () => ({
    __proto__: dart.getMethods(data_types.PdfColorType.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream])
  }));
  dart.setLibraryUri(data_types.PdfColorType, I[2]);
  dart.setFieldSignature(data_types.PdfColorType, () => ({
    __proto__: dart.getFields(data_types.PdfColorType.__proto__),
    color: dart.finalFieldType(color$.PdfColor)
  }));
  dart.defineExtensionMethods(data_types.PdfColorType, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfColorType, ['hashCode']);
  var _name$10 = dart.privateName(border, "_name");
  border.PdfBorderStyle = class PdfBorderStyle extends core.Object {
    toString() {
      return this[_name$10];
    }
  };
  (border.PdfBorderStyle.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[66], 23, 6, "index");
    if (_name == null) dart.nullFailed(I[66], 23, 6, "_name");
    this.index = index;
    this[_name$10] = _name;
    ;
  }).prototype = border.PdfBorderStyle.prototype;
  dart.addTypeTests(border.PdfBorderStyle);
  dart.addTypeCaches(border.PdfBorderStyle);
  dart.setLibraryUri(border.PdfBorderStyle, I[67]);
  dart.setFieldSignature(border.PdfBorderStyle, () => ({
    __proto__: dart.getFields(border.PdfBorderStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$10]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(border.PdfBorderStyle, ['toString']);
  border.PdfBorderStyle.solid = C[211] || CT.C211;
  border.PdfBorderStyle.dashed = C[212] || CT.C212;
  border.PdfBorderStyle.beveled = C[213] || CT.C213;
  border.PdfBorderStyle.inset = C[214] || CT.C214;
  border.PdfBorderStyle.underlined = C[215] || CT.C215;
  border.PdfBorderStyle.values = C[216] || CT.C216;
  var style$0 = dart.privateName(border, "PdfBorder.style");
  var width$0 = dart.privateName(border, "PdfBorder.width");
  var dash$ = dart.privateName(border, "PdfBorder.dash");
  border.PdfBorder = class PdfBorder extends object_dict.PdfObjectDict {
    get style() {
      return this[style$0];
    }
    set style(value) {
      super.style = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get dash() {
      return this[dash$];
    }
    set dash(value) {
      super.dash = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/S", new data_types.PdfName.new("/" + "SDBIU"[$substring](this.style.index, dart.notNull(this.style.index) + 1)));
      this.params._set("/W", new data_types.PdfNum.new(this.width));
      if (this.dash != null) {
        this.params._set("/D", data_types.PdfArray.fromNum(dart.nullCheck(this.dash)));
      }
    }
  };
  (border.PdfBorder.new = function(pdfDocument, width, opts) {
    if (pdfDocument == null) dart.nullFailed(I[66], 46, 17, "pdfDocument");
    if (width == null) dart.nullFailed(I[66], 47, 10, "width");
    let style = opts && 'style' in opts ? opts.style : C[211] || CT.C211;
    if (style == null) dart.nullFailed(I[66], 48, 10, "style");
    let dash = opts && 'dash' in opts ? opts.dash : null;
    this[width$0] = width;
    this[style$0] = style;
    this[dash$] = dash;
    border.PdfBorder.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = border.PdfBorder.prototype;
  dart.addTypeTests(border.PdfBorder);
  dart.addTypeCaches(border.PdfBorder);
  dart.setLibraryUri(border.PdfBorder, I[67]);
  dart.setFieldSignature(border.PdfBorder, () => ({
    __proto__: dart.getFields(border.PdfBorder.__proto__),
    style: dart.finalFieldType(border.PdfBorderStyle),
    width: dart.finalFieldType(core.double),
    dash: dart.finalFieldType(dart.nullable(core.List$(core.double)))
  }));
  var annot$ = dart.privateName(annotation, "PdfAnnot.annot");
  var pdfPage$ = dart.privateName(annotation, "PdfAnnot.pdfPage");
  annotation.PdfAnnot = class PdfAnnot extends object_dict.PdfObjectDict {
    get annot() {
      return this[annot$];
    }
    set annot(value) {
      super.annot = value;
    }
    get pdfPage() {
      return this[pdfPage$];
    }
    set pdfPage(value) {
      super.pdfPage = value;
    }
    prepare() {
      super.prepare();
      this.annot.build(this.pdfPage, this, this.params);
    }
  };
  (annotation.PdfAnnot.new = function(pdfPage, annot) {
    if (pdfPage == null) dart.nullFailed(I[68], 35, 17, "pdfPage");
    if (annot == null) dart.nullFailed(I[68], 35, 31, "annot");
    this[pdfPage$] = pdfPage;
    this[annot$] = annot;
    annotation.PdfAnnot.__proto__.new.call(this, pdfPage.pdfDocument, {type: "/Annot"});
    this.pdfPage.annotations[$add](this);
  }).prototype = annotation.PdfAnnot.prototype;
  dart.addTypeTests(annotation.PdfAnnot);
  dart.addTypeCaches(annotation.PdfAnnot);
  dart.setLibraryUri(annotation.PdfAnnot, I[69]);
  dart.setFieldSignature(annotation.PdfAnnot, () => ({
    __proto__: dart.getFields(annotation.PdfAnnot.__proto__),
    annot: dart.finalFieldType(annotation.PdfAnnotBase),
    pdfPage: dart.finalFieldType(page.PdfPage)
  }));
  var _name$11 = dart.privateName(annotation, "_name");
  annotation.PdfAnnotFlags = class PdfAnnotFlags extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (annotation.PdfAnnotFlags.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[68], 54, 6, "index");
    if (_name == null) dart.nullFailed(I[68], 54, 6, "_name");
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = annotation.PdfAnnotFlags.prototype;
  dart.addTypeTests(annotation.PdfAnnotFlags);
  dart.addTypeCaches(annotation.PdfAnnotFlags);
  dart.setLibraryUri(annotation.PdfAnnotFlags, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotFlags, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotFlags.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(annotation.PdfAnnotFlags, ['toString']);
  annotation.PdfAnnotFlags.invisible = C[217] || CT.C217;
  annotation.PdfAnnotFlags.hidden = C[218] || CT.C218;
  annotation.PdfAnnotFlags.print = C[219] || CT.C219;
  annotation.PdfAnnotFlags.noZoom = C[220] || CT.C220;
  annotation.PdfAnnotFlags.noRotate = C[221] || CT.C221;
  annotation.PdfAnnotFlags.noView = C[222] || CT.C222;
  annotation.PdfAnnotFlags.readOnly = C[223] || CT.C223;
  annotation.PdfAnnotFlags.locked = C[224] || CT.C224;
  annotation.PdfAnnotFlags.toggleNoView = C[225] || CT.C225;
  annotation.PdfAnnotFlags.lockedContent = C[226] || CT.C226;
  annotation.PdfAnnotFlags.values = C[227] || CT.C227;
  annotation.PdfAnnotAppearance = class PdfAnnotAppearance extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (annotation.PdfAnnotAppearance.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[68], 86, 6, "index");
    if (_name == null) dart.nullFailed(I[68], 86, 6, "_name");
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = annotation.PdfAnnotAppearance.prototype;
  dart.addTypeTests(annotation.PdfAnnotAppearance);
  dart.addTypeCaches(annotation.PdfAnnotAppearance);
  dart.setLibraryUri(annotation.PdfAnnotAppearance, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotAppearance, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotAppearance.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(annotation.PdfAnnotAppearance, ['toString']);
  annotation.PdfAnnotAppearance.normal = C[228] || CT.C228;
  annotation.PdfAnnotAppearance.rollover = C[229] || CT.C229;
  annotation.PdfAnnotAppearance.down = C[230] || CT.C230;
  annotation.PdfAnnotAppearance.values = C[231] || CT.C231;
  var subtype$0 = dart.privateName(annotation, "PdfAnnotBase.subtype");
  var rect$0 = dart.privateName(annotation, "PdfAnnotBase.rect");
  var border$ = dart.privateName(annotation, "PdfAnnotBase.border");
  var content$ = dart.privateName(annotation, "PdfAnnotBase.content");
  var name$ = dart.privateName(annotation, "PdfAnnotBase.name");
  var author$0 = dart.privateName(annotation, "PdfAnnotBase.author");
  var subject$0 = dart.privateName(annotation, "PdfAnnotBase.subject");
  var flags$0 = dart.privateName(annotation, "PdfAnnotBase.flags");
  var date$ = dart.privateName(annotation, "PdfAnnotBase.date");
  var color$2 = dart.privateName(annotation, "PdfAnnotBase.color");
  var _appearances = dart.privateName(annotation, "_appearances");
  var _as = dart.privateName(annotation, "_as");
  annotation.PdfAnnotBase = class PdfAnnotBase extends core.Object {
    get subtype() {
      return this[subtype$0];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get rect() {
      return this[rect$0];
    }
    set rect(value) {
      super.rect = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    get content() {
      return this[content$];
    }
    set content(value) {
      super.content = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get author() {
      return this[author$0];
    }
    set author(value) {
      super.author = value;
    }
    get subject() {
      return this[subject$0];
    }
    set subject(value) {
      super.subject = value;
    }
    get flags() {
      return this[flags$0];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    get flagValue() {
      if (this.flags == null || dart.test(dart.nullCheck(this.flags)[$isEmpty])) {
        return 0;
      }
      return dart.nullCheck(this.flags)[$map](core.int, dart.fn(e => {
        if (e == null) dart.nullFailed(I[68], 145, 34, "e");
        return (1)[$leftShift](e.index);
      }, T$.PdfAnnotFlagsToint()))[$reduce](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[68], 146, 22, "a");
        if (b == null) dart.nullFailed(I[68], 146, 29, "b");
        return (dart.notNull(a) | dart.notNull(b)) >>> 0;
      }, T$.intAndintToint()));
    }
    appearance(pdfDocument, type, opts) {
      let t15;
      if (pdfDocument == null) dart.nullFailed(I[68], 150, 17, "pdfDocument");
      if (type == null) dart.nullFailed(I[68], 151, 24, "type");
      let name = opts && 'name' in opts ? opts.name : null;
      let matrix = opts && 'matrix' in opts ? opts.matrix : null;
      let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
      let selected = opts && 'selected' in opts ? opts.selected : false;
      if (selected == null) dart.nullFailed(I[68], 155, 10, "selected");
      let s = new graphic_stream.PdfGraphicXObject.new(pdfDocument, "/Form");
      let n = null;
      switch (type) {
        case C[228] || CT.C228:
        {
          n = "/N";
          break;
        }
        case C[229] || CT.C229:
        {
          n = "/R";
          break;
        }
        case C[230] || CT.C230:
        {
          n = "/D";
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      if (name == null) {
        this[_appearances][$_set](n, s.ref());
      } else {
        if (!T$.PdfDictOfPdfDataType().is(this[_appearances][$_get](n))) {
          this[_appearances][$_set](n, T$.PdfDictOfPdfDataType().new());
        }
        let d = this[_appearances][$_get](n);
        if (T$.PdfDictOfPdfDataType().is(d)) {
          d._set(name, s.ref());
        }
      }
      if (matrix != null) {
        s.params._set("/Matrix", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([matrix._get(0), matrix._get(1), matrix._get(4), matrix._get(5), matrix._get(12), matrix._get(13)])));
      }
      let bbox = (t15 = boundingBox, t15 == null ? rect.PdfRect.fromPoints(point.PdfPoint.zero, this.rect.size) : t15);
      s.params._set("/BBox", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([bbox.x, bbox.y, bbox.width, bbox.height])));
      let g = new graphics.PdfGraphics.new(s, s.buf);
      if (dart.test(selected) && name != null) {
        this[_as] = new data_types.PdfName.new(name);
      }
      return g;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 200, 22, "page");
      if (object == null) dart.nullFailed(I[68], 200, 38, "object");
      if (params == null) dart.nullFailed(I[68], 200, 54, "params");
      params._set("/Subtype", new data_types.PdfName.new(this.subtype));
      params._set("/Rect", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([this.rect.left, this.rect.bottom, this.rect.right, this.rect.top])));
      params._set("/P", page.ref());
      if (this.border == null) {
        params._set("/Border", data_types.PdfArray.fromNum(C[232] || CT.C232));
      } else {
        params._set("/BS", dart.nullCheck(this.border).ref());
      }
      if (this.content != null) {
        params._set("/Contents", data_types.PdfSecString.fromString(object, dart.nullCheck(this.content)));
      }
      if (this.name != null) {
        params._set("/NM", data_types.PdfSecString.fromString(object, dart.nullCheck(this.name)));
      }
      if (this.flags != null && dart.test(dart.nullCheck(this.flags)[$isNotEmpty])) {
        params._set("/F", new data_types.PdfNum.new(this.flagValue));
      }
      if (this.date != null) {
        params._set("/M", data_types.PdfSecString.fromDate(object, dart.nullCheck(this.date)));
      }
      if (this.color != null) {
        params._set("/C", new data_types.PdfColorType.new(dart.nullCheck(this.color)));
      }
      if (this.subject != null) {
        params._set("/Subj", data_types.PdfSecString.fromString(object, dart.nullCheck(this.subject)));
      }
      if (this.author != null) {
        params._set("/T", data_types.PdfSecString.fromString(object, dart.nullCheck(this.author)));
      }
      if (dart.test(this[_appearances][$isNotEmpty])) {
        params._set("/AP", T$.PdfDictOfPdfDataType().new(this[_appearances]));
        if (this[_as] != null) {
          params._set("/AS", dart.nullCheck(this[_as]));
        }
      }
    }
  };
  (annotation.PdfAnnotBase.new = function(opts) {
    let subtype = opts && 'subtype' in opts ? opts.subtype : null;
    if (subtype == null) dart.nullFailed(I[68], 94, 19, "subtype");
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 95, 19, "rect");
    let border = opts && 'border' in opts ? opts.border : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[_appearances] = new (T$.IdentityMapOfString$PdfDataType()).new();
    this[_as] = null;
    this[subtype$0] = subtype;
    this[rect$0] = rect;
    this[border$] = border;
    this[content$] = content;
    this[name$] = name;
    this[flags$0] = flags;
    this[date$] = date;
    this[color$2] = color;
    this[subject$0] = subject;
    this[author$0] = author;
    ;
  }).prototype = annotation.PdfAnnotBase.prototype;
  dart.addTypeTests(annotation.PdfAnnotBase);
  dart.addTypeCaches(annotation.PdfAnnotBase);
  dart.setMethodSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getMethods(annotation.PdfAnnotBase.__proto__),
    appearance: dart.fnType(graphics.PdfGraphics, [document$.PdfDocument, annotation.PdfAnnotAppearance], {boundingBox: dart.nullable(rect.PdfRect), matrix: dart.nullable(vector_math_64.Matrix4), name: dart.nullable(core.String), selected: core.bool}, {}),
    build: dart.fnType(dart.void, [page.PdfPage, object.PdfObject$(data_types.PdfDataType), data_types.PdfDict$(data_types.PdfDataType)])
  }));
  dart.setGetterSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getGetters(annotation.PdfAnnotBase.__proto__),
    flagValue: core.int
  }));
  dart.setLibraryUri(annotation.PdfAnnotBase, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotBase.__proto__),
    subtype: dart.finalFieldType(core.String),
    rect: dart.finalFieldType(rect.PdfRect),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    content: dart.finalFieldType(dart.nullable(core.String)),
    name: dart.finalFieldType(dart.nullable(core.String)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags))),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    [_appearances]: dart.finalFieldType(core.Map$(core.String, data_types.PdfDataType)),
    [_as]: dart.fieldType(dart.nullable(data_types.PdfName))
  }));
  annotation.PdfAnnotText = class PdfAnnotText extends annotation.PdfAnnotBase {};
  (annotation.PdfAnnotText.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 254, 22, "rect");
    let content = opts && 'content' in opts ? opts.content : null;
    if (content == null) dart.nullFailed(I[68], 255, 21, "content");
    let border = opts && 'border' in opts ? opts.border : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    annotation.PdfAnnotText.__proto__.new.call(this, {subtype: "/Text", rect: rect, border: border, content: content, name: name, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotText.prototype;
  dart.addTypeTests(annotation.PdfAnnotText);
  dart.addTypeCaches(annotation.PdfAnnotText);
  dart.setLibraryUri(annotation.PdfAnnotText, I[69]);
  var dest$0 = dart.privateName(annotation, "PdfAnnotNamedLink.dest");
  annotation.PdfAnnotNamedLink = class PdfAnnotNamedLink extends annotation.PdfAnnotBase {
    get dest() {
      return this[dest$0];
    }
    set dest(value) {
      super.dest = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 302, 22, "page");
      if (object == null) dart.nullFailed(I[68], 302, 38, "object");
      if (params == null) dart.nullFailed(I[68], 302, 54, "params");
      super.build(page, object, params);
      params._set("/A", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/S", C[233] || CT.C233, "/D", data_types.PdfSecString.fromString(object, this.dest)])));
    }
  };
  (annotation.PdfAnnotNamedLink.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 280, 22, "rect");
    let dest = opts && 'dest' in opts ? opts.dest : null;
    if (dest == null) dart.nullFailed(I[68], 281, 19, "dest");
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[dest$0] = dest;
    annotation.PdfAnnotNamedLink.__proto__.new.call(this, {subtype: "/Link", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotNamedLink.prototype;
  dart.addTypeTests(annotation.PdfAnnotNamedLink);
  dart.addTypeCaches(annotation.PdfAnnotNamedLink);
  dart.setLibraryUri(annotation.PdfAnnotNamedLink, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotNamedLink, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotNamedLink.__proto__),
    dest: dart.finalFieldType(core.String)
  }));
  var url$ = dart.privateName(annotation, "PdfAnnotUrlLink.url");
  annotation.PdfAnnotUrlLink = class PdfAnnotUrlLink extends annotation.PdfAnnotBase {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 338, 22, "page");
      if (object == null) dart.nullFailed(I[68], 338, 38, "object");
      if (params == null) dart.nullFailed(I[68], 338, 54, "params");
      super.build(page, object, params);
      params._set("/A", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/S", C[234] || CT.C234, "/URI", data_types.PdfSecString.fromString(object, this.url)])));
    }
  };
  (annotation.PdfAnnotUrlLink.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 316, 22, "rect");
    let url = opts && 'url' in opts ? opts.url : null;
    if (url == null) dart.nullFailed(I[68], 317, 19, "url");
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[url$] = url;
    annotation.PdfAnnotUrlLink.__proto__.new.call(this, {subtype: "/Link", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotUrlLink.prototype;
  dart.addTypeTests(annotation.PdfAnnotUrlLink);
  dart.addTypeCaches(annotation.PdfAnnotUrlLink);
  dart.setLibraryUri(annotation.PdfAnnotUrlLink, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotUrlLink, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotUrlLink.__proto__),
    url: dart.finalFieldType(core.String)
  }));
  var interiorColor$ = dart.privateName(annotation, "PdfAnnotSquare.interiorColor");
  annotation.PdfAnnotSquare = class PdfAnnotSquare extends annotation.PdfAnnotBase {
    get interiorColor() {
      return this[interiorColor$];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 374, 22, "page");
      if (object == null) dart.nullFailed(I[68], 374, 38, "object");
      if (params == null) dart.nullFailed(I[68], 374, 54, "params");
      super.build(page, object, params);
      if (this.interiorColor != null) {
        params._set("/IC", new data_types.PdfColorType.new(dart.nullCheck(this.interiorColor)));
      }
    }
  };
  (annotation.PdfAnnotSquare.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 352, 22, "rect");
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[interiorColor$] = interiorColor;
    annotation.PdfAnnotSquare.__proto__.new.call(this, {subtype: "/Square", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotSquare.prototype;
  dart.addTypeTests(annotation.PdfAnnotSquare);
  dart.addTypeCaches(annotation.PdfAnnotSquare);
  dart.setLibraryUri(annotation.PdfAnnotSquare, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotSquare, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotSquare.__proto__),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  var interiorColor$0 = dart.privateName(annotation, "PdfAnnotCircle.interiorColor");
  annotation.PdfAnnotCircle = class PdfAnnotCircle extends annotation.PdfAnnotBase {
    get interiorColor() {
      return this[interiorColor$0];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 407, 22, "page");
      if (object == null) dart.nullFailed(I[68], 407, 38, "object");
      if (params == null) dart.nullFailed(I[68], 407, 54, "params");
      super.build(page, object, params);
      if (this.interiorColor != null) {
        params._set("/IC", new data_types.PdfColorType.new(dart.nullCheck(this.interiorColor)));
      }
    }
  };
  (annotation.PdfAnnotCircle.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 385, 22, "rect");
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[interiorColor$0] = interiorColor;
    annotation.PdfAnnotCircle.__proto__.new.call(this, {subtype: "/Circle", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotCircle.prototype;
  dart.addTypeTests(annotation.PdfAnnotCircle);
  dart.addTypeCaches(annotation.PdfAnnotCircle);
  dart.setLibraryUri(annotation.PdfAnnotCircle, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotCircle, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotCircle.__proto__),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  var document$1 = dart.privateName(annotation, "PdfAnnotPolygon.document");
  var points$ = dart.privateName(annotation, "PdfAnnotPolygon.points");
  var interiorColor$1 = dart.privateName(annotation, "PdfAnnotPolygon.interiorColor");
  annotation.PdfAnnotPolygon = class PdfAnnotPolygon extends annotation.PdfAnnotBase {
    get document() {
      return this[document$1];
    }
    set document(value) {
      super.document = value;
    }
    get points() {
      return this[points$];
    }
    set points(value) {
      super.points = value;
    }
    get interiorColor() {
      return this[interiorColor$1];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 445, 22, "page");
      if (object == null) dart.nullFailed(I[68], 445, 38, "object");
      if (params == null) dart.nullFailed(I[68], 445, 54, "params");
      super.build(page, object, params);
      let flippedPoints = this.points[$map](point.PdfPoint, dart.fn(e => {
        if (e == null) dart.nullFailed(I[68], 450, 21, "e");
        return new point.PdfPoint.new(e.x, dart.notNull(this.rect.height) - dart.notNull(e.y));
      }, T$.PdfPointToPdfPoint()))[$toList]();
      let verticies = T$.JSArrayOfnum().of([]);
      for (let i = 0; i < dart.notNull(flippedPoints[$length]); i = i + 1) {
        verticies[$add](flippedPoints[$_get](i).x);
        verticies[$add](flippedPoints[$_get](i).y);
      }
      params._set("/Vertices", data_types.PdfArray.fromNum(verticies));
      if (this.interiorColor != null) {
        params._set("/IC", new data_types.PdfColorType.new(dart.nullCheck(this.interiorColor)));
      }
    }
  };
  (annotation.PdfAnnotPolygon.new = function(document, points, opts) {
    if (document == null) dart.nullFailed(I[68], 417, 24, "document");
    if (points == null) dart.nullFailed(I[68], 417, 39, "points");
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 418, 25, "rect");
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let closed = opts && 'closed' in opts ? opts.closed : true;
    if (closed == null) dart.nullFailed(I[68], 426, 12, "closed");
    this[document$1] = document;
    this[points$] = points;
    this[interiorColor$1] = interiorColor;
    annotation.PdfAnnotPolygon.__proto__.new.call(this, {subtype: dart.test(closed) ? "/PolyLine" : "/Polygon", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotPolygon.prototype;
  dart.addTypeTests(annotation.PdfAnnotPolygon);
  dart.addTypeCaches(annotation.PdfAnnotPolygon);
  dart.setLibraryUri(annotation.PdfAnnotPolygon, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotPolygon, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotPolygon.__proto__),
    document: dart.finalFieldType(document$.PdfDocument),
    points: dart.finalFieldType(core.List$(point.PdfPoint)),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  var document$2 = dart.privateName(annotation, "PdfAnnotInk.document");
  var points$0 = dart.privateName(annotation, "PdfAnnotInk.points");
  annotation.PdfAnnotInk = class PdfAnnotInk extends annotation.PdfAnnotBase {
    get document() {
      return this[document$2];
    }
    set document(value) {
      super.document = value;
    }
    get points() {
      return this[points$0];
    }
    set points(value) {
      super.points = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 497, 13, "page");
      if (object == null) dart.nullFailed(I[68], 498, 15, "object");
      if (params == null) dart.nullFailed(I[68], 499, 13, "params");
      super.build(page, object, params);
      let verticies = T$.ListOfListOfnum().filled(this.points[$length], T$.JSArrayOfnum().of([]));
      for (let listIndex = 0; listIndex < dart.notNull(this.points[$length]); listIndex = listIndex + 1) {
        let flippedPoints = this.points[$_get](listIndex)[$map](point.PdfPoint, dart.fn(e => {
          if (e == null) dart.nullFailed(I[68], 507, 17, "e");
          return new point.PdfPoint.new(e.x, dart.notNull(this.rect.height) - dart.notNull(e.y));
        }, T$.PdfPointToPdfPoint()))[$toList]();
        for (let i = 0; i < dart.notNull(flippedPoints[$length]); i = i + 1) {
          verticies[$_get](listIndex)[$add](flippedPoints[$_get](i).x);
          verticies[$_get](listIndex)[$add](flippedPoints[$_get](i).y);
        }
      }
      params._set("/InkList", new (T$.PdfArrayOfPdfArrayOfPdfNum()).new(verticies[$map](T$.PdfArrayOfPdfNum(), dart.fn(v => {
        if (v == null) dart.nullFailed(I[68], 516, 33, "v");
        return data_types.PdfArray.fromNum(v);
      }, T$.ListOfnumToPdfArrayOfPdfNum()))[$toList]()));
    }
  };
  (annotation.PdfAnnotInk.new = function(document, points, opts) {
    if (document == null) dart.nullFailed(I[68], 469, 10, "document");
    if (points == null) dart.nullFailed(I[68], 470, 10, "points");
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 471, 22, "rect");
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[document$2] = document;
    this[points$0] = points;
    annotation.PdfAnnotInk.__proto__.new.call(this, {subtype: "/Ink", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author, content: content});
    ;
  }).prototype = annotation.PdfAnnotInk.prototype;
  dart.addTypeTests(annotation.PdfAnnotInk);
  dart.addTypeCaches(annotation.PdfAnnotInk);
  dart.setLibraryUri(annotation.PdfAnnotInk, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotInk, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotInk.__proto__),
    document: dart.finalFieldType(document$.PdfDocument),
    points: dart.finalFieldType(core.List$(core.List$(point.PdfPoint)))
  }));
  annotation.PdfAnnotHighlighting = class PdfAnnotHighlighting extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (annotation.PdfAnnotHighlighting.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[68], 520, 6, "index");
    if (_name == null) dart.nullFailed(I[68], 520, 6, "_name");
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = annotation.PdfAnnotHighlighting.prototype;
  dart.addTypeTests(annotation.PdfAnnotHighlighting);
  dart.addTypeCaches(annotation.PdfAnnotHighlighting);
  dart.setLibraryUri(annotation.PdfAnnotHighlighting, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotHighlighting, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotHighlighting.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(annotation.PdfAnnotHighlighting, ['toString']);
  annotation.PdfAnnotHighlighting.none = C[235] || CT.C235;
  annotation.PdfAnnotHighlighting.invert = C[236] || CT.C236;
  annotation.PdfAnnotHighlighting.outline = C[237] || CT.C237;
  annotation.PdfAnnotHighlighting.push = C[238] || CT.C238;
  annotation.PdfAnnotHighlighting.toggle = C[239] || CT.C239;
  annotation.PdfAnnotHighlighting.values = C[240] || CT.C240;
  var fieldType$ = dart.privateName(annotation, "PdfAnnotWidget.fieldType");
  var fieldName$ = dart.privateName(annotation, "PdfAnnotWidget.fieldName");
  var highlighting$ = dart.privateName(annotation, "PdfAnnotWidget.highlighting");
  var backgroundColor$ = dart.privateName(annotation, "PdfAnnotWidget.backgroundColor");
  annotation.PdfAnnotWidget = class PdfAnnotWidget extends annotation.PdfAnnotBase {
    get fieldType() {
      return this[fieldType$];
    }
    set fieldType(value) {
      super.fieldType = value;
    }
    get fieldName() {
      return this[fieldName$];
    }
    set fieldName(value) {
      super.fieldName = value;
    }
    get highlighting() {
      return this[highlighting$];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 556, 22, "page");
      if (object == null) dart.nullFailed(I[68], 556, 38, "object");
      if (params == null) dart.nullFailed(I[68], 556, 54, "params");
      super.build(page, object, params);
      params._set("/FT", new data_types.PdfName.new(this.fieldType));
      if (this.fieldName != null) {
        params._set("/T", data_types.PdfSecString.fromString(object, dart.nullCheck(this.fieldName)));
      }
      let mk = T$.PdfDictOfPdfDataType().new();
      if (this.color != null) {
        mk.values[$_set]("/BC", new data_types.PdfColorType.new(dart.nullCheck(this.color)));
      }
      if (this.backgroundColor != null) {
        mk.values[$_set]("/BG", new data_types.PdfColorType.new(dart.nullCheck(this.backgroundColor)));
      }
      if (dart.test(mk.values[$isNotEmpty])) {
        params._set("/MK", mk);
      }
      if (this.highlighting != null) {
        switch (dart.nullCheck(this.highlighting)) {
          case C[235] || CT.C235:
          {
            params._set("/H", C[241] || CT.C241);
            break;
          }
          case C[236] || CT.C236:
          {
            params._set("/H", C[242] || CT.C242);
            break;
          }
          case C[237] || CT.C237:
          {
            params._set("/H", C[243] || CT.C243);
            break;
          }
          case C[238] || CT.C238:
          {
            params._set("/H", C[244] || CT.C244);
            break;
          }
          case C[239] || CT.C239:
          {
            params._set("/H", C[245] || CT.C245);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
  };
  (annotation.PdfAnnotWidget.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 525, 22, "rect");
    let fieldType = opts && 'fieldType' in opts ? opts.fieldType : null;
    if (fieldType == null) dart.nullFailed(I[68], 526, 19, "fieldType");
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[fieldType$] = fieldType;
    this[fieldName$] = fieldName;
    this[backgroundColor$] = backgroundColor;
    this[highlighting$] = highlighting;
    annotation.PdfAnnotWidget.__proto__.new.call(this, {subtype: "/Widget", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotWidget.prototype;
  dart.addTypeTests(annotation.PdfAnnotWidget);
  dart.addTypeCaches(annotation.PdfAnnotWidget);
  dart.setLibraryUri(annotation.PdfAnnotWidget, I[69]);
  dart.setFieldSignature(annotation.PdfAnnotWidget, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotWidget.__proto__),
    fieldType: dart.finalFieldType(core.String),
    fieldName: dart.finalFieldType(dart.nullable(core.String)),
    highlighting: dart.finalFieldType(dart.nullable(annotation.PdfAnnotHighlighting)),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  annotation.PdfAnnotSign = class PdfAnnotSign extends annotation.PdfAnnotWidget {
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 621, 22, "page");
      if (object == null) dart.nullFailed(I[68], 621, 38, "object");
      if (params == null) dart.nullFailed(I[68], 621, 54, "params");
      super.build(page, object, params);
      if (page.pdfDocument.sign != null) {
        params._set("/V", dart.nullCheck(page.pdfDocument.sign).ref());
      }
    }
  };
  (annotation.PdfAnnotSign.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 602, 22, "rect");
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    annotation.PdfAnnotSign.__proto__.new.call(this, {rect: rect, fieldType: "/Sig", fieldName: fieldName, border: border, flags: flags, date: date, color: color, highlighting: highlighting});
    ;
  }).prototype = annotation.PdfAnnotSign.prototype;
  dart.addTypeTests(annotation.PdfAnnotSign);
  dart.addTypeCaches(annotation.PdfAnnotSign);
  dart.setLibraryUri(annotation.PdfAnnotSign, I[69]);
  annotation.PdfFieldFlags = class PdfFieldFlags extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (annotation.PdfFieldFlags.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[68], 629, 6, "index");
    if (_name == null) dart.nullFailed(I[68], 629, 6, "_name");
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = annotation.PdfFieldFlags.prototype;
  dart.addTypeTests(annotation.PdfFieldFlags);
  dart.addTypeCaches(annotation.PdfFieldFlags);
  dart.setLibraryUri(annotation.PdfFieldFlags, I[69]);
  dart.setFieldSignature(annotation.PdfFieldFlags, () => ({
    __proto__: dart.getFields(annotation.PdfFieldFlags.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(annotation.PdfFieldFlags, ['toString']);
  annotation.PdfFieldFlags.readOnly = C[246] || CT.C246;
  annotation.PdfFieldFlags.mandatory = C[247] || CT.C247;
  annotation.PdfFieldFlags.noExport = C[248] || CT.C248;
  annotation.PdfFieldFlags.reserved4 = C[249] || CT.C249;
  annotation.PdfFieldFlags.reserved5 = C[250] || CT.C250;
  annotation.PdfFieldFlags.reserved6 = C[251] || CT.C251;
  annotation.PdfFieldFlags.reserved7 = C[252] || CT.C252;
  annotation.PdfFieldFlags.reserved8 = C[253] || CT.C253;
  annotation.PdfFieldFlags.reserved9 = C[254] || CT.C254;
  annotation.PdfFieldFlags.reserved10 = C[255] || CT.C255;
  annotation.PdfFieldFlags.reserved11 = C[256] || CT.C256;
  annotation.PdfFieldFlags.reserved12 = C[257] || CT.C257;
  annotation.PdfFieldFlags.multiline = C[258] || CT.C258;
  annotation.PdfFieldFlags.password = C[259] || CT.C259;
  annotation.PdfFieldFlags.noToggleToOff = C[260] || CT.C260;
  annotation.PdfFieldFlags.radio = C[261] || CT.C261;
  annotation.PdfFieldFlags.pushButton = C[262] || CT.C262;
  annotation.PdfFieldFlags.combo = C[263] || CT.C263;
  annotation.PdfFieldFlags.edit = C[264] || CT.C264;
  annotation.PdfFieldFlags.sort = C[265] || CT.C265;
  annotation.PdfFieldFlags.fileSelect = C[266] || CT.C266;
  annotation.PdfFieldFlags.multiSelect = C[267] || CT.C267;
  annotation.PdfFieldFlags.doNotSpellCheck = C[268] || CT.C268;
  annotation.PdfFieldFlags.doNotScroll = C[269] || CT.C269;
  annotation.PdfFieldFlags.comb = C[270] || CT.C270;
  annotation.PdfFieldFlags.radiosInUnison = C[271] || CT.C271;
  annotation.PdfFieldFlags.commitOnSelChange = C[272] || CT.C272;
  annotation.PdfFieldFlags.values = C[273] || CT.C273;
  var alternateName$ = dart.privateName(annotation, "PdfFormField.alternateName");
  var mappingName$ = dart.privateName(annotation, "PdfFormField.mappingName");
  var fieldFlags$ = dart.privateName(annotation, "PdfFormField.fieldFlags");
  annotation.PdfFormField = class PdfFormField extends annotation.PdfAnnotWidget {
    get alternateName() {
      return this[alternateName$];
    }
    set alternateName(value) {
      super.alternateName = value;
    }
    get mappingName() {
      return this[mappingName$];
    }
    set mappingName(value) {
      super.mappingName = value;
    }
    get fieldFlags() {
      return this[fieldFlags$];
    }
    set fieldFlags(value) {
      super.fieldFlags = value;
    }
    get fieldFlagsValue() {
      if (this.fieldFlags == null || dart.test(dart.nullCheck(this.fieldFlags)[$isEmpty])) {
        return 0;
      }
      return dart.nullCheck(this.fieldFlags)[$map](core.int, dart.fn(e => {
        if (e == null) dart.nullFailed(I[68], 769, 34, "e");
        return (1)[$leftShift](e.index);
      }, T$.PdfFieldFlagsToint()))[$reduce](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[68], 770, 22, "a");
        if (b == null) dart.nullFailed(I[68], 770, 29, "b");
        return (dart.notNull(a) | dart.notNull(b)) >>> 0;
      }, T$.intAndintToint()));
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 774, 22, "page");
      if (object == null) dart.nullFailed(I[68], 774, 38, "object");
      if (params == null) dart.nullFailed(I[68], 774, 54, "params");
      super.build(page, object, params);
      if (this.alternateName != null) {
        params._set("/TU", data_types.PdfSecString.fromString(object, dart.nullCheck(this.alternateName)));
      }
      if (this.mappingName != null) {
        params._set("/TM", data_types.PdfSecString.fromString(object, dart.nullCheck(this.mappingName)));
      }
      params._set("/Ff", new data_types.PdfNum.new(this.fieldFlagsValue));
    }
  };
  (annotation.PdfFormField.new = function(opts) {
    let fieldType = opts && 'fieldType' in opts ? opts.fieldType : null;
    if (fieldType == null) dart.nullFailed(I[68], 729, 21, "fieldType");
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 730, 22, "rect");
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    this[alternateName$] = alternateName;
    this[mappingName$] = mappingName;
    this[fieldFlags$] = fieldFlags;
    annotation.PdfFormField.__proto__.new.call(this, {rect: rect, fieldType: fieldType, fieldName: fieldName, border: border, flags: flags, date: date, subject: subject, author: author, backgroundColor: backgroundColor, color: color, highlighting: highlighting});
    ;
  }).prototype = annotation.PdfFormField.prototype;
  dart.addTypeTests(annotation.PdfFormField);
  dart.addTypeCaches(annotation.PdfFormField);
  dart.setGetterSignature(annotation.PdfFormField, () => ({
    __proto__: dart.getGetters(annotation.PdfFormField.__proto__),
    fieldFlagsValue: core.int
  }));
  dart.setLibraryUri(annotation.PdfFormField, I[69]);
  dart.setFieldSignature(annotation.PdfFormField, () => ({
    __proto__: dart.getFields(annotation.PdfFormField.__proto__),
    alternateName: dart.finalFieldType(dart.nullable(core.String)),
    mappingName: dart.finalFieldType(dart.nullable(core.String)),
    fieldFlags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfFieldFlags)))
  }));
  annotation.PdfTextFieldAlign = class PdfTextFieldAlign extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (annotation.PdfTextFieldAlign.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[68], 787, 6, "index");
    if (_name == null) dart.nullFailed(I[68], 787, 6, "_name");
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = annotation.PdfTextFieldAlign.prototype;
  dart.addTypeTests(annotation.PdfTextFieldAlign);
  dart.addTypeCaches(annotation.PdfTextFieldAlign);
  dart.setLibraryUri(annotation.PdfTextFieldAlign, I[69]);
  dart.setFieldSignature(annotation.PdfTextFieldAlign, () => ({
    __proto__: dart.getFields(annotation.PdfTextFieldAlign.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(annotation.PdfTextFieldAlign, ['toString']);
  annotation.PdfTextFieldAlign.left = C[274] || CT.C274;
  annotation.PdfTextFieldAlign.center = C[275] || CT.C275;
  annotation.PdfTextFieldAlign.right = C[276] || CT.C276;
  annotation.PdfTextFieldAlign.values = C[277] || CT.C277;
  var maxLength$ = dart.privateName(annotation, "PdfTextField.maxLength");
  var value$4 = dart.privateName(annotation, "PdfTextField.value");
  var defaultValue$ = dart.privateName(annotation, "PdfTextField.defaultValue");
  var font$0 = dart.privateName(annotation, "PdfTextField.font");
  var fontSize$ = dart.privateName(annotation, "PdfTextField.fontSize");
  var textColor$ = dart.privateName(annotation, "PdfTextField.textColor");
  var textAlign$ = dart.privateName(annotation, "PdfTextField.textAlign");
  annotation.PdfTextField = class PdfTextField extends annotation.PdfFormField {
    get maxLength() {
      return this[maxLength$];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get value() {
      return this[value$4];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    get font() {
      return this[font$0];
    }
    set font(value) {
      super.font = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get textColor() {
      return this[textColor$];
    }
    set textColor(value) {
      super.textColor = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 843, 22, "page");
      if (object == null) dart.nullFailed(I[68], 843, 38, "object");
      if (params == null) dart.nullFailed(I[68], 843, 54, "params");
      super.build(page, object, params);
      if (this.maxLength != null) {
        params._set("/MaxLen", new data_types.PdfNum.new(dart.nullCheck(this.maxLength)));
      }
      let buf = new stream.PdfStream.new();
      let g = new graphics.PdfGraphics.new(page, buf);
      g.setFillColor(this.textColor);
      g.setFont(this.font, this.fontSize);
      params._set("/DA", data_types.PdfSecString.fromStream(object, buf));
      if (this.value != null) {
        params._set("/V", data_types.PdfSecString.fromString(object, dart.nullCheck(this.value)));
      }
      if (this.defaultValue != null) {
        params._set("/DV", data_types.PdfSecString.fromString(object, dart.nullCheck(this.defaultValue)));
      }
      if (this.textAlign != null) {
        params._set("/Q", new data_types.PdfNum.new(dart.nullCheck(this.textAlign).index));
      }
    }
  };
  (annotation.PdfTextField.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 791, 22, "rect");
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let font = opts && 'font' in opts ? opts.font : null;
    if (font == null) dart.nullFailed(I[68], 807, 19, "font");
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    if (fontSize == null) dart.nullFailed(I[68], 808, 19, "fontSize");
    let textColor = opts && 'textColor' in opts ? opts.textColor : null;
    if (textColor == null) dart.nullFailed(I[68], 809, 19, "textColor");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    this[value$4] = value;
    this[defaultValue$] = defaultValue;
    this[maxLength$] = maxLength;
    this[font$0] = font;
    this[fontSize$] = fontSize;
    this[textColor$] = textColor;
    this[textAlign$] = textAlign;
    annotation.PdfTextField.__proto__.new.call(this, {rect: rect, fieldType: "/Tx", fieldName: fieldName, border: border, flags: flags, date: date, subject: subject, author: author, color: color, backgroundColor: backgroundColor, highlighting: highlighting, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags});
    ;
  }).prototype = annotation.PdfTextField.prototype;
  dart.addTypeTests(annotation.PdfTextField);
  dart.addTypeCaches(annotation.PdfTextField);
  dart.setLibraryUri(annotation.PdfTextField, I[69]);
  dart.setFieldSignature(annotation.PdfTextField, () => ({
    __proto__: dart.getFields(annotation.PdfTextField.__proto__),
    maxLength: dart.finalFieldType(dart.nullable(core.int)),
    value: dart.finalFieldType(dart.nullable(core.String)),
    defaultValue: dart.finalFieldType(dart.nullable(core.String)),
    font: dart.finalFieldType(font.PdfFont),
    fontSize: dart.finalFieldType(core.double),
    textColor: dart.finalFieldType(color$.PdfColor),
    textAlign: dart.finalFieldType(dart.nullable(annotation.PdfTextFieldAlign))
  }));
  var value$5 = dart.privateName(annotation, "PdfButtonField.value");
  var defaultValue$0 = dart.privateName(annotation, "PdfButtonField.defaultValue");
  annotation.PdfButtonField = class PdfButtonField extends annotation.PdfFormField {
    get value() {
      return this[value$5];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$0];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    build(page, object, params) {
      if (page == null) dart.nullFailed(I[68], 902, 22, "page");
      if (object == null) dart.nullFailed(I[68], 902, 38, "object");
      if (params == null) dart.nullFailed(I[68], 902, 54, "params");
      super.build(page, object, params);
      if (this.value != null) {
        params._set("/V", new data_types.PdfName.new(dart.nullCheck(this.value)));
      }
      if (this.defaultValue != null) {
        params._set("/DV", new data_types.PdfName.new(dart.nullCheck(this.defaultValue)));
      }
    }
  };
  (annotation.PdfButtonField.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[68], 869, 22, "rect");
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    if (fieldName == null) dart.nullFailed(I[68], 870, 21, "fieldName");
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    this[value$5] = value;
    this[defaultValue$0] = defaultValue;
    annotation.PdfButtonField.__proto__.new.call(this, {rect: rect, fieldType: "/Btn", fieldName: fieldName, border: border, flags: flags, date: date, color: color, backgroundColor: backgroundColor, highlighting: highlighting, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags});
    ;
  }).prototype = annotation.PdfButtonField.prototype;
  dart.addTypeTests(annotation.PdfButtonField);
  dart.addTypeCaches(annotation.PdfButtonField);
  dart.setLibraryUri(annotation.PdfButtonField, I[69]);
  dart.setFieldSignature(annotation.PdfButtonField, () => ({
    __proto__: dart.getFields(annotation.PdfButtonField.__proto__),
    value: dart.finalFieldType(dart.nullable(core.String)),
    defaultValue: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.trackLibraries("packages/pdf/src/pdf/xref.dart", {
    "package:pdf/src/pdf/xref.dart": xref,
    "package:pdf/src/pdf/signature.dart": signature,
    "package:pdf/src/pdf/output.dart": output,
    "package:pdf/src/pdf/io/js.dart": js,
    "package:pdf/src/pdf/info.dart": info,
    "package:pdf/src/pdf/encryption.dart": encryption,
    "package:pdf/src/pdf/document_parser.dart": document_parser,
    "package:pdf/src/pdf/page_list.dart": page_list,
    "package:pdf/src/pdf/outline.dart": outline,
    "package:pdf/src/pdf/shading.dart": shading,
    "package:pdf/src/pdf/pattern.dart": pattern,
    "package:pdf/src/pdf/xobject.dart": xobject,
    "package:pdf/src/pdf/exif.dart": exif,
    "package:pdf/src/pdf/image.dart": image$0,
    "package:pdf/src/pdf/graphics.dart": graphics,
    "package:pdf/src/pdf/smask.dart": smask,
    "package:pdf/src/pdf/function.dart": $function,
    "package:pdf/src/pdf/graphic_state.dart": graphic_state,
    "package:pdf/src/pdf/unicode_cmap.dart": unicode_cmap,
    "package:pdf/src/pdf/object_stream.dart": object_stream,
    "package:pdf/src/pdf/font_descriptor.dart": font_descriptor,
    "package:pdf/src/pdf/array.dart": array$,
    "package:pdf/src/pdf/ttffont.dart": ttffont,
    "package:pdf/src/pdf/type1_font.dart": type1_font,
    "package:pdf/src/pdf/font.dart": font,
    "package:pdf/src/pdf/graphic_stream.dart": graphic_stream,
    "package:pdf/src/pdf/page.dart": page,
    "package:pdf/src/pdf/object_dict.dart": object_dict,
    "package:pdf/src/pdf/names.dart": names,
    "package:pdf/src/pdf/metadata.dart": metadata$,
    "package:pdf/src/pdf/catalog.dart": catalog,
    "package:pdf/src/pdf/document.dart": document$,
    "package:pdf/src/pdf/object.dart": object,
    "package:pdf/src/pdf/data_types.dart": data_types,
    "package:pdf/src/pdf/border.dart": border,
    "package:pdf/src/pdf/annotation.dart": annotation,
    "package:pdf/pdf.dart": pdf
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["xref.dart","data_types.dart","signature.dart","object.dart","object_dict.dart","output.dart","io/js.dart","info.dart","encryption.dart","document_parser.dart","page_list.dart","outline.dart","shading.dart","pattern.dart","object_stream.dart","xobject.dart","exif.dart","image.dart","graphics.dart","smask.dart","function.dart","graphic_state.dart","unicode_cmap.dart","font_descriptor.dart","array.dart","font.dart","ttffont.dart","type1_font.dart","graphic_stream.dart","page.dart","names.dart","metadata.dart","catalog.dart","document.dart","border.dart","annotation.dart"],"names":[],"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","file":"../../../../../../../../../E:/packages/pdf/src/pdf/xref.dart.lib.js"}');
  // Exports:
  return {
    src__pdf__xref: xref,
    src__pdf__signature: signature,
    src__pdf__output: output,
    src__pdf__io__js: js,
    src__pdf__info: info,
    src__pdf__encryption: encryption,
    src__pdf__document_parser: document_parser,
    src__pdf__page_list: page_list,
    src__pdf__outline: outline,
    src__pdf__shading: shading,
    src__pdf__pattern: pattern,
    src__pdf__xobject: xobject,
    src__pdf__exif: exif,
    src__pdf__image: image$0,
    src__pdf__graphics: graphics,
    src__pdf__smask: smask,
    src__pdf__function: $function,
    src__pdf__graphic_state: graphic_state,
    src__pdf__unicode_cmap: unicode_cmap,
    src__pdf__object_stream: object_stream,
    src__pdf__font_descriptor: font_descriptor,
    src__pdf__array: array$,
    src__pdf__ttffont: ttffont,
    src__pdf__type1_font: type1_font,
    src__pdf__font: font,
    src__pdf__graphic_stream: graphic_stream,
    src__pdf__page: page,
    src__pdf__object_dict: object_dict,
    src__pdf__names: names,
    src__pdf__metadata: metadata$,
    src__pdf__catalog: catalog,
    src__pdf__document: document$,
    src__pdf__object: object,
    src__pdf__data_types: data_types,
    src__pdf__border: border,
    src__pdf__annotation: annotation,
    pdf: pdf
  };
}));

//# sourceMappingURL=xref.dart.lib.js.map
